import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = enhancer1.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer6.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader11 = enhancer6.getClassLoader();
        enhancer1.setClassLoader(classLoader11);
        enhancer1.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer1.getStrategy();
        java.lang.ClassLoader classLoader16 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method17 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; bound]", classLoader16);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        boolean boolean14 = classInfo12.equals((java.lang.Object) (-1.0f));
        java.lang.String str15 = classInfo12.toString();
        org.mockito.asm.Type type16 = classInfo12.getSuperType();
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        boolean boolean19 = classInfo4.equals((java.lang.Object) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer21.setNamingPolicy(namingPolicy22);
        boolean boolean24 = enhancer21.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = enhancer21.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader31 = enhancer26.getClassLoader();
        enhancer21.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer33.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer33.getStrategy();
        java.lang.Class<?> wildcardClass39 = enhancer33.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        boolean boolean45 = enhancer40.getAttemptLoad();
        enhancer40.setInterceptDuringConstruction(false);
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer50.setNamingPolicy(namingPolicy51);
        enhancer50.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        enhancer50.setInterfaces(classArray59);
        enhancer40.setInterfaces(classArray59);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray59);
        enhancer21.setInterfaces(classArray59);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.util.List list65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass17, classArray59, list65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.lang.Class[]" + "'", str15, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(constructor62);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        byte[] byteArray1 = new byte[] {};
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        boolean boolean7 = enhancer2.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer2.setCallback(callback8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        enhancer10.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer10.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer10.setClassLoader(classLoader19);
        enhancer2.setClassLoader(classLoader19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class22 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=()LV;; expert; values={Z=Ljava/lang/Object;}]", byteArray1, classLoader19);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        java.lang.String[] strArray18 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, false, false);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray18, methodArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray25);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        java.lang.String[] strArray41 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, false, false);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray40, methodArray48);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray48);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass53 = type52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, false, true);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray58);
        java.lang.String[] strArray60 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, true, true);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, false, false);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray60, methodArray67);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray34, methodArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = enhancer0.create(classArray27, (java.lang.Object[]) strArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer4.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer23.setNamingPolicy(namingPolicy24);
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        enhancer23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer32.setCallbacks(callbackArray37);
        enhancer23.setCallbacks(callbackArray37);
        enhancer0.setCallbacks(callbackArray37);
        boolean boolean41 = enhancer0.getAttemptLoad();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass43 = type42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class<?> wildcardClass50 = propertyDescriptorArray46.getClass();
        boolean boolean51 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray54, true, true);
        java.lang.Class<?> wildcardClass58 = propertyDescriptorArray54.getClass();
        boolean boolean59 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass58);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        enhancer62.setNamingPolicy(namingPolicy63);
        boolean boolean65 = enhancer62.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.Class<?> wildcardClass71 = methodArray70.getClass();
        enhancer62.setSuperclass((java.lang.Class) wildcardClass71);
        java.beans.PropertyDescriptor[] propertyDescriptorArray73 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray73, true, true);
        java.lang.Class<?> wildcardClass77 = methodArray76.getClass();
        org.mockito.cglib.core.ClassInfo classInfo78 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray83 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray80, true, true);
        java.lang.Class<?> wildcardClass84 = propertyDescriptorArray80.getClass();
        boolean boolean85 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        java.lang.String str88 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        java.lang.Class[] classArray90 = new java.lang.Class[] { wildcardClass43, wildcardClass50, wildcardClass58, wildcardClass71, wildcardClass77, wildcardClass84 };
        java.lang.String[] strArray91 = org.mockito.cglib.core.ReflectUtils.getNames(classArray90);
        java.lang.String[] strArray92 = org.mockito.cglib.core.ReflectUtils.getNames(classArray90);
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray90);
        enhancer0.setInterfaces(classArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class95 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str45, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray73);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str79, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(methodArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str88, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setHidden(true);
        java.lang.String str20 = propertyDescriptor10.getName();
        boolean boolean21 = propertyDescriptor10.isPreferred();
        boolean boolean22 = propertyDescriptor10.isHidden();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str20, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Object[] objArray36 = null;
        java.lang.Object obj37 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray38);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray39);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature32 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer33.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer33.getStrategy();
        java.lang.Class<?> wildcardClass39 = enhancer33.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        boolean boolean45 = enhancer40.getAttemptLoad();
        enhancer40.setInterceptDuringConstruction(false);
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer50.setNamingPolicy(namingPolicy51);
        enhancer50.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        enhancer50.setInterfaces(classArray59);
        enhancer40.setInterfaces(classArray59);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass39, classArray59);
        java.lang.String str63 = org.mockito.asm.Type.getConstructorDescriptor(constructor62);
        org.mockito.asm.Type[] typeArray64 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor62);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor62, (int) (short) 10);
        java.lang.String str67 = org.mockito.asm.Type.getConstructorDescriptor(constructor62);
        org.mockito.asm.Type[] typeArray68 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor62);
        java.lang.Object obj69 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray68);
        org.mockito.asm.Type[] typeArray70 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(signature32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(constructor62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "()V" + "'", str63, "()V");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "()V" + "'", str67, "()V");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(typeArray70);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("org/mockito/asm/Type(Ljava/lang/Cloneable;Ljava/io/Serializable;)S");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->org/mockito/asm/Type");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        boolean boolean13 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer22.getAttemptLoad();
        enhancer22.setInterceptDuringConstruction(false);
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        enhancer32.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        enhancer32.setInterfaces(classArray41);
        enhancer22.setInterfaces(classArray41);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray41);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method46 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass8, "<init>()V", classArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: <init>()V");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        org.mockito.asm.Type type11 = type8.getElementType();
        int int12 = type11.getSort();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(SSS)LV;; expert; propertyEditorClass=class [Ljava.lang.Class;]");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LV;" + "'", str2, "LV;");
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) '4');
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.Signature signature47 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor36);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(signature47);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=void; expert; values={java.beans.PropertyDescriptor[name=I]=false}]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 102");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(callbackArray5);
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setUseFactory(true);
        enhancer4.setUseFactory(false);
        boolean boolean9 = enhancer4.getUseCache();
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer12.getAttemptLoad();
        enhancer12.setInterceptDuringConstruction(false);
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer12.getStrategy();
        enhancer4.setStrategy(generatorStrategy23);
        boolean boolean25 = type1.equals((java.lang.Object) enhancer4);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        enhancer26.setInterfaces(classArray32);
        // The following exception was thrown during execution in test generation
        try {
            enhancer4.setCallbackTypes(classArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[Ljava/lang/Class;" + "'", str2, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Ljava/lang/Class;" + "'", str3, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(classArray32);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        java.lang.Class class0 = null;
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        enhancer5.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer5.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, true);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray13);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        enhancer5.setInterfaces(classArray17);
        boolean boolean20 = enhancer5.getAttemptLoad();
        boolean boolean21 = signature3.equals((java.lang.Object) enhancer5);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer22.getAttemptLoad();
        enhancer22.setInterceptDuringConstruction(false);
        boolean boolean30 = enhancer22.getAttemptLoad();
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class<?> wildcardClass34 = classArray33.getClass();
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass34);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass34);
        boolean boolean37 = enhancer22.getUseCache();
        enhancer22.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseFactory(true);
        enhancer40.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer46.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer46.setCallbacks(callbackArray51);
        enhancer40.setCallbacks(callbackArray51);
        enhancer22.setCallbacks(callbackArray51);
        boolean boolean55 = enhancer22.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer56.setNamingPolicy(namingPolicy59);
        enhancer56.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer56.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer56.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer22.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        enhancer68.setNamingPolicy(namingPolicy69);
        enhancer68.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer73.getStrategy();
        enhancer68.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer77.setCallbacks(callbackArray82);
        enhancer68.setCallbacks(callbackArray82);
        enhancer5.setCallbacks(callbackArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[Ljava/lang/Class;" + "'", str35, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(callbackArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(callbackArray82);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class<?> wildcardClass11 = methodArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        int int13 = classInfo12.getModifiers();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        propertyDescriptor3.setExpert(true);
        java.lang.Object obj18 = propertyDescriptor3.getValue("org/mockito/cglib/core/DefaultNamingPolicy");
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setShortDescription("Lorg/mockito/asm/Type;");
        java.lang.String str23 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1041 + "'", int13 == 1041);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]" + "'", str23, "java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]");
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter44 = null;
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer45.setNamingPolicy(namingPolicy46);
        enhancer45.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        enhancer45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer54.setCallbacks(callbackArray59);
        enhancer45.setCallbacks(callbackArray59);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer62.setNamingPolicy(namingPolicy65);
        boolean boolean67 = enhancer62.getAttemptLoad();
        enhancer62.setInterceptDuringConstruction(false);
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer62.getNamingPolicy();
        boolean boolean73 = enhancer62.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer62.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setUseFactory(true);
        enhancer76.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = null;
        enhancer82.setNamingPolicy(namingPolicy83);
        java.lang.ClassLoader classLoader85 = enhancer82.getClassLoader();
        org.mockito.cglib.proxy.Callback callback86 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray87 = new org.mockito.cglib.proxy.Callback[] { callback86 };
        enhancer82.setCallbacks(callbackArray87);
        enhancer76.setCallbacks(callbackArray87);
        enhancer45.setCallbacks(callbackArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass8, classArray39, callbackFilter44, callbackArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(callbackArray87);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 5);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature37 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo38 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str39 = methodInfo38.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(signature37);
        org.junit.Assert.assertNotNull(methodInfo38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<init>()V" + "'", str39, "<init>()V");
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = classInfo5.getSuperType();
        int int7 = type6.getSort();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = classInfo13.getSuperType();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str18 = signature17.getName();
        org.mockito.asm.Type type19 = signature17.getReturnType();
        boolean boolean20 = classInfo13.equals((java.lang.Object) type19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = propertyDescriptorArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        boolean boolean27 = classInfo13.equals((java.lang.Object) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type29 = classInfo28.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer30.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer30.getStrategy();
        java.lang.Class<?> wildcardClass36 = enhancer30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str41 = signature40.getName();
        org.mockito.asm.Type type42 = signature40.getReturnType();
        org.mockito.asm.Type type43 = signature40.getReturnType();
        boolean boolean44 = classInfo37.equals((java.lang.Object) signature40);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer45.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer45.getStrategy();
        java.lang.Class<?> wildcardClass51 = enhancer45.getClass();
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass51);
        java.lang.String str53 = classInfo52.toString();
        org.mockito.asm.Type[] typeArray54 = classInfo52.getInterfaces();
        boolean boolean55 = signature40.equals((java.lang.Object) classInfo52);
        org.mockito.asm.Type[] typeArray56 = classInfo52.getInterfaces();
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("[Ljava/lang/Class;", type29, typeArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("(Ljava/lang/Cloneable;Ljava/io/Serializable;)LZ;", type6, typeArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(Ljava/lang/Cloneable;Ljava/io/Serializable;)LZ;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str53, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeArray56);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Object obj7 = propertyDescriptor3.getValue("");
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type15 = signature14.getReturnType();
        int int16 = type15.getSize();
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class<?> wildcardClass20 = classArray19.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = classInfo21.getSuperType();
        java.lang.String str23 = classInfo21.toString();
        int int24 = classInfo21.getModifiers();
        boolean boolean25 = type15.equals((java.lang.Object) classInfo21);
        org.mockito.asm.Type type26 = classInfo21.getType();
        org.mockito.asm.Type type27 = classInfo21.getSuperType();
        org.mockito.asm.Type type28 = type27.getElementType();
        propertyDescriptor3.setValue("(SSS)[Ljava/beans/PropertyDescriptor;", (java.lang.Object) type27);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.Class[]" + "'", str23, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1041 + "'", int24 == 1041);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback[] callbackArray5 = null;
        enhancer0.setCallbacks(callbackArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Lg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass1, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        boolean boolean15 = enhancer0.getAttemptLoad();
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        boolean boolean14 = classInfo12.equals((java.lang.Object) (-1.0f));
        java.lang.String str15 = classInfo12.toString();
        org.mockito.asm.Type type16 = classInfo12.getSuperType();
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        boolean boolean19 = classInfo4.equals((java.lang.Object) wildcardClass17);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("void", method21, method22);
        propertyDescriptor23.setExpert(true);
        boolean boolean26 = propertyDescriptor23.isPreferred();
        java.lang.String str27 = propertyDescriptor23.getShortDescription();
        propertyDescriptor23.setName("void");
        boolean boolean30 = propertyDescriptor23.isExpert();
        boolean boolean31 = propertyDescriptor23.isPreferred();
        boolean boolean32 = classInfo4.equals((java.lang.Object) propertyDescriptor23);
        java.util.Enumeration<java.lang.String> strEnumeration33 = propertyDescriptor23.attributeNames();
        boolean boolean34 = propertyDescriptor23.isConstrained();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.lang.Class[]" + "'", str15, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "void" + "'", str27, "void");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strEnumeration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        java.lang.Object[] objArray33 = null;
        java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray33);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 0);
        java.lang.String str38 = methodInfo37.toString();
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class<?> wildcardClass43 = classArray42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type45 = classInfo44.getSuperType();
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str49 = signature48.getName();
        org.mockito.asm.Type type50 = signature48.getReturnType();
        boolean boolean51 = classInfo44.equals((java.lang.Object) type50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.Class<?> wildcardClass56 = propertyDescriptorArray52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        boolean boolean58 = classInfo44.equals((java.lang.Object) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type60 = classInfo59.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer61.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        java.lang.Class<?> wildcardClass67 = enhancer61.getClass();
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        org.mockito.cglib.core.Signature signature71 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str72 = signature71.getName();
        org.mockito.asm.Type type73 = signature71.getReturnType();
        org.mockito.asm.Type type74 = signature71.getReturnType();
        boolean boolean75 = classInfo68.equals((java.lang.Object) signature71);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        enhancer76.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        java.lang.Class<?> wildcardClass82 = enhancer76.getClass();
        org.mockito.cglib.core.ClassInfo classInfo83 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        java.lang.String str84 = classInfo83.toString();
        org.mockito.asm.Type[] typeArray85 = classInfo83.getInterfaces();
        boolean boolean86 = signature71.equals((java.lang.Object) classInfo83);
        org.mockito.asm.Type[] typeArray87 = classInfo83.getInterfaces();
        org.mockito.cglib.core.Signature signature88 = new org.mockito.cglib.core.Signature("[Ljava/lang/Class;", type60, typeArray87);
        boolean boolean89 = methodInfo37.equals((java.lang.Object) typeArray87);
        org.mockito.asm.Type[] typeArray90 = methodInfo37.getExceptionTypes();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<init>()V" + "'", str38, "<init>()V");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classInfo83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str84, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typeArray90);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lhi!;");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer2.getNamingPolicy();
        boolean boolean8 = enhancer2.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer9.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer15.setNamingPolicy(namingPolicy16);
        boolean boolean18 = enhancer15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        enhancer20.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader25 = enhancer20.getClassLoader();
        enhancer15.setClassLoader(classLoader25);
        enhancer9.setClassLoader(classLoader25);
        enhancer2.setClassLoader(classLoader25);
        boolean boolean29 = type1.equals((java.lang.Object) enhancer2);
        enhancer2.setSerialVersionUID((java.lang.Long) 10L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class32 = enhancer2.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray5);
        enhancer0.setInterfaces(classArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        boolean boolean15 = enhancer7.getUseCache();
        boolean boolean16 = enhancer7.getAttemptLoad();
        enhancer7.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setUseFactory(true);
        enhancer19.setUseFactory(false);
        boolean boolean24 = enhancer19.getUseCache();
        enhancer19.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer27.getAttemptLoad();
        enhancer27.setInterceptDuringConstruction(false);
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer27.getStrategy();
        enhancer19.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        enhancer40.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer40.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, true);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray48);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        enhancer40.setInterfaces(classArray52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, false, true);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        enhancer40.setInterfaces(classArray64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer66.setCallbacks(callbackArray71);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback77 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray78 = new org.mockito.cglib.proxy.Callback[] { callback77 };
        enhancer73.setCallbacks(callbackArray78);
        enhancer66.setCallbacks(callbackArray78);
        enhancer40.setCallbacks(callbackArray78);
        enhancer19.setCallbacks(callbackArray78);
        enhancer7.setCallbacks(callbackArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass1, callbackArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(callbackArray78);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer10.setCallback(callback13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass18 = classArray17.getClass();
        enhancer10.setSuperclass((java.lang.Class) wildcardClass18);
        boolean boolean20 = classInfo4.equals((java.lang.Object) wildcardClass18);
        org.mockito.asm.Type type21 = classInfo4.getType();
        java.lang.String str22 = classInfo4.toString();
        org.mockito.asm.Type type23 = classInfo4.getSuperType();
        int int24 = classInfo4.getModifiers();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1041 + "'", int24 == 1041);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass14);
        boolean boolean17 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass6, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, false, true);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(methodArray9);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]; expert]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer10.getNamingPolicy();
        boolean boolean16 = enhancer10.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer17.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer23.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer23.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        enhancer28.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader33 = enhancer28.getClassLoader();
        enhancer23.setClassLoader(classLoader33);
        enhancer17.setClassLoader(classLoader33);
        enhancer10.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader37 = enhancer10.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        boolean boolean43 = enhancer38.getAttemptLoad();
        enhancer38.setInterceptDuringConstruction(false);
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer38.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter51 = null;
        enhancer38.setCallbackFilter(callbackFilter51);
        boolean boolean53 = enhancer38.getUseCache();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("void", method55, method56);
        propertyDescriptor57.setExpert(false);
        propertyDescriptor57.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor57.getPropertyType();
        java.lang.Class[] classArray64 = new java.lang.Class[] {};
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray64);
        java.lang.Class<?> wildcardClass67 = classArray66.getClass();
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        boolean boolean70 = classInfo68.equals((java.lang.Object) (-1.0f));
        java.lang.String str71 = classInfo68.toString();
        org.mockito.asm.Type type72 = classInfo68.getSuperType();
        propertyDescriptor57.setValue("Z", (java.lang.Object) type72);
        java.lang.reflect.Method method74 = propertyDescriptor57.getReadMethod();
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer75.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        enhancer75.setNamingPolicy(namingPolicy78);
        boolean boolean80 = enhancer75.getAttemptLoad();
        enhancer75.setInterceptDuringConstruction(false);
        enhancer75.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = enhancer75.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer75.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = enhancer75.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor88 = propertyDescriptor57.createPropertyEditor((java.lang.Object) namingPolicy87);
        enhancer38.setNamingPolicy(namingPolicy87);
        enhancer10.setNamingPolicy(namingPolicy87);
        enhancer0.setNamingPolicy(namingPolicy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.lang.Class[]" + "'", str71, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNull(method74);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNull(propertyEditor88);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        boolean boolean10 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str13, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        org.mockito.cglib.core.Signature signature34 = methodInfo33.getSignature();
        org.mockito.asm.Type[] typeArray35 = methodInfo33.getExceptionTypes();
        org.mockito.asm.Type[] typeArray36 = methodInfo33.getExceptionTypes();
        java.lang.Object obj37 = null;
        boolean boolean38 = methodInfo33.equals(obj37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.Class[] classArray9 = null;
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer10.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = enhancer10.getClassLoader();
        enhancer10.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer10.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer18.setCallbackFilter(callbackFilter23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer29.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer29.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy46);
        enhancer18.setNamingPolicy(namingPolicy46);
        enhancer10.setNamingPolicy(namingPolicy46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray54);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        enhancer10.setInterfaces(classArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray9, (java.lang.Object[]) classArray56);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=I; propertyEditorClass=class [Ljava.lang.Class;]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()D");
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer16.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = enhancer16.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        enhancer21.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader26 = enhancer21.getClassLoader();
        enhancer16.setClassLoader(classLoader26);
        enhancer16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer16.getStrategy();
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor3.createPropertyEditor((java.lang.Object) generatorStrategy30);
        java.lang.String str32 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.beans.PropertyDescriptor[name=void; preferred]" + "'", str32, "java.beans.PropertyDescriptor[name=void; preferred]");
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer30.getStrategy();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer37.setNamingPolicy(namingPolicy40);
        boolean boolean42 = enhancer37.getAttemptLoad();
        enhancer37.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback45 = null;
        enhancer37.setCallback(callback45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer47.setNamingPolicy(namingPolicy48);
        enhancer47.setAttemptLoad(false);
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        enhancer54.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = enhancer54.getClassLoader();
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer54.setCallbacks(callbackArray59);
        enhancer47.setCallbacks(callbackArray59);
        enhancer37.setCallbacks(callbackArray59);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter63 = null;
        enhancer37.setCallbackFilter(callbackFilter63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        enhancer65.setNamingPolicy(namingPolicy66);
        enhancer65.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        enhancer65.setInterfaces(classArray74);
        int int76 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray74);
        enhancer37.setInterfaces(classArray74);
        enhancer0.setInterfaces(classArray74);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Ljava/lang/Object;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        enhancer6.setAttemptLoad(false);
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        enhancer13.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader18 = enhancer13.getClassLoader();
        enhancer6.setClassLoader(classLoader18);
        enhancer0.setClassLoader(classLoader18);
        java.lang.Class[] classArray21 = new java.lang.Class[] {};
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class<?> wildcardClass24 = classArray23.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        enhancer0.setInterfaces(classArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classArray27);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str39 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class<?> wildcardClass44 = propertyDescriptorArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass44);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, true);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.Object obj51 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        int int54 = methodInfo53.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()V" + "'", str39, "()V");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        java.lang.String str10 = signature2.getDescriptor();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean12 = signature2.equals((java.lang.Object) type11);
        java.lang.String str13 = signature2.getDescriptor();
        java.lang.String str14 = signature2.getDescriptor();
        java.lang.String str15 = signature2.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(SSS)S" + "'", str13, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(SSS)S" + "'", str14, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(SSS)S" + "'", str15, "(SSS)S");
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer1.setCallbackFilter(callbackFilter14);
        java.lang.ClassLoader classLoader16 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method17 = org.mockito.cglib.core.ReflectUtils.findMethod("[Ljava/lang/Class;", classLoader16);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass42 = enhancer36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.lang.String str44 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray45 = classInfo43.getInterfaces();
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("java.lang.Object", type35, typeArray45);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        boolean boolean53 = classInfo51.equals((java.lang.Object) (-1.0f));
        java.lang.String str54 = classInfo51.toString();
        int int55 = classInfo51.getModifiers();
        org.mockito.asm.Type type56 = classInfo51.getSuperType();
        org.mockito.asm.Type type57 = classInfo51.getType();
        org.mockito.asm.Type[] typeArray58 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("V", type35, typeArray58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer60.setNamingPolicy(namingPolicy61);
        enhancer60.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        enhancer60.setInterfaces(classArray69);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        boolean boolean72 = signature59.equals((java.lang.Object) strArray71);
        java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) strArray71);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray75 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Class[] classArray76 = new java.lang.Class[] {};
        java.lang.String[] strArray77 = org.mockito.cglib.core.ReflectUtils.getNames(classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class<?> wildcardClass79 = classArray78.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass83 = type82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray84, true, true);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray84, true, false);
        boolean boolean91 = type81.equals((java.lang.Object) methodArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) methodArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str44, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.lang.Class[]" + "'", str54, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1041 + "'", int55 == 1041);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[Ljava/lang/Class;" + "'", str80, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.asm.Type[] typeArray43 = methodInfo42.getExceptionTypes();
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)F");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method4 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray4, true, true);
        java.lang.Class<?> wildcardClass8 = propertyDescriptorArray4.getClass();
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = methodArray28.getClass();
        enhancer20.setSuperclass((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class<?> wildcardClass35 = methodArray34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = propertyDescriptorArray38.getClass();
        boolean boolean43 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass1, wildcardClass8, wildcardClass16, wildcardClass29, wildcardClass35, wildcardClass42 };
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray51);
        java.lang.Class[] classArray53 = new java.lang.Class[] {};
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray53);
        int int56 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        java.lang.Class<?> wildcardClass61 = classArray60.getClass();
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, false);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray57, methodArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass70 = type69.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass70);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, true, true);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray57, methodArray74);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray74);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray80 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray77, true, true);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray77);
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray77, false, true);
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray85);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str37, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str46, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(methodArray86);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        int int8 = type7.getDimensions();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer9.setNamingPolicy(namingPolicy10);
        enhancer9.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        enhancer9.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback22 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray23 = new org.mockito.cglib.proxy.Callback[] { callback22 };
        enhancer18.setCallbacks(callbackArray23);
        enhancer9.setCallbacks(callbackArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        boolean boolean37 = enhancer26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer26.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy38);
        boolean boolean40 = type7.equals((java.lang.Object) namingPolicy38);
        java.lang.String str41 = type7.getClassName();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(callbackArray23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.lang.Object" + "'", str41, "java.lang.Object");
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.Object obj43 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        java.lang.Class<?> wildcardClass47 = constructor29.getClass();
        org.mockito.cglib.proxy.Callback callback48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass47, callback48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        boolean boolean15 = classInfo13.equals((java.lang.Object) (-1.0f));
        java.lang.String str16 = classInfo13.toString();
        int int17 = classInfo13.getModifiers();
        org.mockito.asm.Type type18 = classInfo13.getSuperType();
        org.mockito.asm.Type type19 = classInfo13.getType();
        boolean boolean20 = classInfo4.equals((java.lang.Object) classInfo13);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer21.getNamingPolicy();
        boolean boolean32 = enhancer21.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer33.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        enhancer21.setClassLoader(classLoader37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer39.setNamingPolicy(namingPolicy40);
        enhancer39.setAttemptLoad(false);
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer46.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer46.getAttemptLoad();
        enhancer46.setInterceptDuringConstruction(false);
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer46.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy56);
        enhancer21.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = enhancer59.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        enhancer59.setNamingPolicy(namingPolicy62);
        enhancer59.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer59.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray67);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray71);
        enhancer59.setInterfaces(classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer59.getStrategy();
        enhancer21.setStrategy(generatorStrategy74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = enhancer21.getStrategy();
        boolean boolean77 = classInfo13.equals((java.lang.Object) enhancer21);
        boolean boolean78 = enhancer21.getAttemptLoad();
        enhancer21.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.lang.Class[]" + "'", str16, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1041 + "'", int17 == 1041);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer0.setCallbackFilter(callbackFilter13);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer16.getNamingPolicy();
        boolean boolean22 = enhancer16.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer23.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer29.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        enhancer34.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader39 = enhancer34.getClassLoader();
        enhancer29.setClassLoader(classLoader39);
        enhancer23.setClassLoader(classLoader39);
        enhancer16.setClassLoader(classLoader39);
        enhancer0.setClassLoader(classLoader39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader39);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = enhancer1.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer6.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader11 = enhancer6.getClassLoader();
        enhancer1.setClassLoader(classLoader11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/cglib/core/DefaultNamingPolicy", classLoader11);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        boolean boolean18 = classInfo4.equals((java.lang.Object) wildcardClass16);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        enhancer19.setInterfaces(classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass16, classArray27);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(classArray27);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type5, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray8);
        java.lang.String str11 = type3.toString();
        java.lang.String str12 = type3.getClassName();
        int int14 = type3.getOpcode(0);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer22.getAttemptLoad();
        enhancer22.setInterceptDuringConstruction(false);
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        enhancer32.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        enhancer32.setInterfaces(classArray41);
        enhancer22.setInterfaces(classArray41);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray41);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("V", type3, typeArray47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass55 = enhancer49.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer56.setNamingPolicy(namingPolicy59);
        boolean boolean61 = enhancer56.getAttemptLoad();
        enhancer56.setInterceptDuringConstruction(false);
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer66.setNamingPolicy(namingPolicy67);
        enhancer66.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, true, true);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray71);
        enhancer66.setInterfaces(classArray75);
        enhancer56.setInterfaces(classArray75);
        java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass55, classArray75);
        java.lang.String str79 = org.mockito.asm.Type.getConstructorDescriptor(constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo81 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray82 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor78);
        org.mockito.cglib.core.MethodInfo methodInfo83 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor78);
        int int84 = methodInfo83.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo85 = methodInfo83.getClassInfo();
        org.mockito.asm.Type[] typeArray86 = methodInfo83.getExceptionTypes();
        org.mockito.cglib.core.Signature signature87 = new org.mockito.cglib.core.Signature("[Ljava/beans/PropertyDescriptor;", type3, typeArray86);
        java.lang.String str88 = signature87.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(SSS)S" + "'", str9, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)LV;" + "'", str10, "(SSS)LV;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LV;" + "'", str11, "LV;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(constructor78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "()V" + "'", str79, "()V");
        org.junit.Assert.assertNotNull(methodInfo81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertNotNull(methodInfo83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(classInfo85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "()LV;" + "'", str88, "()LV;");
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 0);
        org.mockito.cglib.core.Signature signature41 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        int int47 = type45.getOpcode((int) (short) 1);
        java.lang.String str48 = type45.getDescriptor();
        int int50 = type45.getOpcode((int) (byte) 100);
        boolean boolean51 = signature44.equals((java.lang.Object) int50);
        org.mockito.asm.Type[] typeArray52 = signature44.getArgumentTypes();
        java.lang.String str53 = signature44.toString();
        java.lang.String str54 = signature44.getName();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader60 = enhancer55.getClassLoader();
        boolean boolean61 = signature44.equals((java.lang.Object) classLoader60);
        boolean boolean62 = signature41.equals((java.lang.Object) boolean61);
        java.lang.String str63 = signature41.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(signature41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "V" + "'", str48, "V");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 105 + "'", int50 == 105);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(SSS)S" + "'", str53, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<init>()V" + "'", str63, "<init>()V");
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("(Ljava/lang/Cloneable;Ljava/io/Serializable;)S", "va.lang.Object");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(Ljava/lang/Cloneable;Ljava/io/Serializable;)S' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        boolean boolean10 = signature2.equals((java.lang.Object) enhancer3);
        org.mockito.asm.Type type11 = signature2.getReturnType();
        java.lang.String str12 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        boolean boolean6 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("()[Ljava/beans/PropertyDescriptor;");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;]");
        int int12 = type11.getSort();
        boolean boolean13 = propertyDescriptor3.equals((java.lang.Object) int12);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = type14.getElementType();
        boolean boolean16 = type8.equals((java.lang.Object) type15);
        int int18 = type15.getOpcode((int) (byte) 100);
        java.lang.String str19 = type15.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/lang/Class;" + "'", str13, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 104 + "'", int18 == 104);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Ljava/lang/Class;" + "'", str19, "Ljava/lang/Class;");
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass10 = classArray9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer0.setCallbackFilter(callbackFilter15);
        enhancer0.setUseFactory(true);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/Class;" + "'", str12, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        enhancer5.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer5.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, true);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray13);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        enhancer5.setInterfaces(classArray17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray20);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray20);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, true);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray20);
        enhancer5.setInterfaces(classArray29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback35 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray36 = new org.mockito.cglib.proxy.Callback[] { callback35 };
        enhancer31.setCallbacks(callbackArray36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer38.setCallbacks(callbackArray43);
        enhancer31.setCallbacks(callbackArray43);
        enhancer5.setCallbacks(callbackArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer5.getStrategy();
        boolean boolean48 = classInfo4.equals((java.lang.Object) enhancer5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class49 = enhancer5.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(callbackArray43);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getUseCache();
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        java.lang.Class[] classArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.String str7 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "void" + "'", str9, "void");
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type16 = classInfo15.getType();
        boolean boolean18 = classInfo15.equals((java.lang.Object) 0.0f);
        org.mockito.asm.Type type19 = classInfo15.getSuperType();
        org.mockito.asm.Type[] typeArray20 = classInfo15.getInterfaces();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray20);
        boolean boolean22 = propertyDescriptor3.isHidden();
        boolean boolean23 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("double");
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getClass();
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list17 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass15, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 0, (byte) 10, (byte) 10, (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        boolean boolean15 = enhancer7.getAttemptLoad();
        enhancer7.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer18.setNamingPolicy(namingPolicy21);
        enhancer18.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer18.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray26, true, true);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        enhancer18.setInterfaces(classArray30);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer41.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        boolean boolean53 = enhancer48.getAttemptLoad();
        enhancer48.setInterceptDuringConstruction(false);
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer48.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy58);
        enhancer33.setNamingPolicy(namingPolicy58);
        enhancer18.setNamingPolicy(namingPolicy58);
        enhancer7.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader63 = enhancer7.getClassLoader();
        java.lang.ClassLoader classLoader64 = enhancer7.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class65 = org.mockito.cglib.core.ReflectUtils.defineClass("()LV;", byteArray6, classLoader64);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 10, 10, 100]");
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader64);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer1.getStrategy();
        java.lang.Class<?> wildcardClass7 = enhancer1.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray23);
        enhancer18.setInterfaces(classArray27);
        enhancer8.setInterfaces(classArray27);
        java.lang.reflect.Constructor constructor30 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray27);
        java.lang.String str31 = org.mockito.asm.Type.getConstructorDescriptor(constructor30);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor30);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor30, (int) (short) 10);
        org.mockito.cglib.core.Signature signature35 = methodInfo34.getSignature();
        org.mockito.asm.Type[] typeArray36 = methodInfo34.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo37 = methodInfo34.getClassInfo();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        enhancer38.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer38.setCallbackFilter(callbackFilter43);
        boolean boolean45 = enhancer38.getUseCache();
        enhancer38.setAttemptLoad(false);
        boolean boolean48 = classInfo37.equals((java.lang.Object) enhancer38);
        enhancer38.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer51.setNamingPolicy(namingPolicy52);
        boolean boolean54 = enhancer51.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, true, true);
        java.lang.Class<?> wildcardClass60 = methodArray59.getClass();
        enhancer51.setSuperclass((java.lang.Class) wildcardClass60);
        boolean boolean62 = enhancer51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer51.getNamingPolicy();
        java.lang.ClassLoader classLoader64 = enhancer51.getClassLoader();
        enhancer38.setClassLoader(classLoader64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor66 = org.mockito.cglib.core.ReflectUtils.findConstructor("(SSS)Lorg/mockito/asm/Type;", classLoader64);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(constructor30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "()V" + "'", str31, "()V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader64);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration9 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strEnumeration9);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer7.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader12 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) -1);
        org.mockito.cglib.core.Signature signature43 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 1041);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 3);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(signature43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo48);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("Lorg/mockito/asm/Type;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptorArray9.getClass();
        boolean boolean14 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        propertyDescriptor3.setValue("()V", (java.lang.Object) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        boolean boolean22 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method23 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str17, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method6 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str5, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        enhancer0.setInterfaces(classArray34);
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        java.lang.Class<?> wildcardClass16 = classArray15.getClass();
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.lang.Class;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/lang/Class;" + "'", str17, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type7 = classInfo6.getType();
        int int9 = type7.getOpcode(5);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;");
        int int2 = type1.getDimensions();
        int int4 = type1.getOpcode(0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy17);
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("(Ljava/lang/Cloneable;Ljava/io/Serializable;)S");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, false, true);
        java.lang.Class<?> wildcardClass6 = methodArray5.getClass();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        int int10 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        enhancer12.setSerialVersionUID((java.lang.Long) 10L);
        enhancer12.setAttemptLoad(false);
        enhancer12.setUseFactory(true);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray25);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        int int29 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray25);
        enhancer12.setInterfaces(classArray25);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer31.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer31.getStrategy();
        java.lang.Class<?> wildcardClass37 = enhancer31.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray44);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, true, true);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray56);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        java.lang.String[] strArray62 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, true, true);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, false, false);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray62, methodArray69);
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray61, methodArray69);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray69);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray69);
        java.lang.Object obj74 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass37, classArray46, (java.lang.Object[]) methodArray69);
        enhancer12.setInterfaces(classArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass6, classArray9, (java.lang.Object[]) classArray46);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/cglib/proxy/Enhancer;" + "'", str39, "Lorg/mockito/cglib/proxy/Enhancer;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=java.beans.PropertyDescriptor[name=I]]]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer0.setCallbackFilter(callbackFilter24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        enhancer29.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        enhancer29.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        enhancer26.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback43 = null;
        enhancer40.setCallback(callback43);
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class<?> wildcardClass48 = classArray47.getClass();
        enhancer40.setSuperclass((java.lang.Class) wildcardClass48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        enhancer50.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        enhancer55.setNamingPolicy(namingPolicy56);
        boolean boolean58 = enhancer55.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, true, true);
        java.lang.Class<?> wildcardClass64 = methodArray63.getClass();
        enhancer55.setSuperclass((java.lang.Class) wildcardClass64);
        boolean boolean66 = enhancer55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer55.getStrategy();
        enhancer50.setStrategy(generatorStrategy67);
        enhancer40.setStrategy(generatorStrategy67);
        enhancer26.setStrategy(generatorStrategy67);
        enhancer0.setStrategy(generatorStrategy67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray72, true, true);
        java.lang.Class<?> wildcardClass76 = propertyDescriptorArray72.getClass();
        boolean boolean77 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass76);
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        boolean boolean80 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass76);
        java.lang.String str81 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass76);
        boolean boolean82 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass76);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.beans.PropertyDescriptor;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str79, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str81, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("[Ljava/lang/Class;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str36 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()V" + "'", str36, "()V");
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean19 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method20 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setAttemptLoad(false);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy36);
        enhancer1.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        enhancer39.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader44 = enhancer39.getClassLoader();
        enhancer1.setClassLoader(classLoader44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=void; preferred]", classLoader44);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str7 = classInfo6.toString();
        org.mockito.asm.Type[] typeArray8 = classInfo6.getInterfaces();
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[]" + "'", str7, "java.beans.PropertyDescriptor[]");
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        java.lang.Object[] objArray33 = null;
        java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray33);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 0);
        java.lang.String str38 = methodInfo37.toString();
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class<?> wildcardClass43 = classArray42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type45 = classInfo44.getSuperType();
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str49 = signature48.getName();
        org.mockito.asm.Type type50 = signature48.getReturnType();
        boolean boolean51 = classInfo44.equals((java.lang.Object) type50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.Class<?> wildcardClass56 = propertyDescriptorArray52.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        boolean boolean58 = classInfo44.equals((java.lang.Object) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type60 = classInfo59.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer61.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        java.lang.Class<?> wildcardClass67 = enhancer61.getClass();
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        org.mockito.cglib.core.Signature signature71 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str72 = signature71.getName();
        org.mockito.asm.Type type73 = signature71.getReturnType();
        org.mockito.asm.Type type74 = signature71.getReturnType();
        boolean boolean75 = classInfo68.equals((java.lang.Object) signature71);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        enhancer76.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        java.lang.Class<?> wildcardClass82 = enhancer76.getClass();
        org.mockito.cglib.core.ClassInfo classInfo83 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        java.lang.String str84 = classInfo83.toString();
        org.mockito.asm.Type[] typeArray85 = classInfo83.getInterfaces();
        boolean boolean86 = signature71.equals((java.lang.Object) classInfo83);
        org.mockito.asm.Type[] typeArray87 = classInfo83.getInterfaces();
        org.mockito.cglib.core.Signature signature88 = new org.mockito.cglib.core.Signature("[Ljava/lang/Class;", type60, typeArray87);
        boolean boolean89 = methodInfo37.equals((java.lang.Object) typeArray87);
        int int90 = methodInfo37.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<init>()V" + "'", str38, "<init>()V");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classInfo83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str84, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str11 = signature10.getName();
        org.mockito.asm.Type type12 = signature10.getReturnType();
        org.mockito.asm.Type type13 = signature10.getReturnType();
        boolean boolean14 = classInfo7.equals((java.lang.Object) signature10);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        java.lang.String str23 = classInfo22.toString();
        org.mockito.asm.Type[] typeArray24 = classInfo22.getInterfaces();
        boolean boolean25 = signature10.equals((java.lang.Object) classInfo22);
        org.mockito.asm.Type type26 = classInfo22.getSuperType();
        java.lang.String str27 = classInfo22.toString();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer28.getClass();
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        int int36 = classInfo35.getModifiers();
        int int37 = classInfo35.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(false);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer38.getStrategy();
        boolean boolean44 = classInfo35.equals((java.lang.Object) enhancer38);
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class<?> wildcardClass48 = classArray47.getClass();
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        boolean boolean51 = classInfo49.equals((java.lang.Object) (-1.0f));
        java.lang.String str52 = classInfo49.toString();
        java.lang.String str53 = classInfo49.toString();
        boolean boolean54 = classInfo35.equals((java.lang.Object) str53);
        org.mockito.asm.Type type55 = classInfo35.getSuperType();
        boolean boolean56 = classInfo22.equals((java.lang.Object) classInfo35);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str23, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str27, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.lang.Class[]" + "'", str52, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.lang.Class[]" + "'", str53, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type12, type13, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray15);
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray15);
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray15);
        java.lang.String str19 = type5.getClassName();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass23 = classArray22.getClass();
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        boolean boolean26 = classInfo24.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type27 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]", type5, typeArray28);
        java.lang.String str30 = type5.toString();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(SSS)S" + "'", str16, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)S" + "'", str17, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str18, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[Ljava/lang/Class;" + "'", str30, "[Ljava/lang/Class;");
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LLV;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        java.util.List list38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass4, classArray33, list38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("L()L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer8.setCallback(callback16);
        enhancer8.setUseCache(true);
        java.lang.ClassLoader classLoader20 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        boolean boolean29 = enhancer21.getAttemptLoad();
        enhancer21.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        enhancer32.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer32.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        enhancer32.setInterfaces(classArray44);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer55.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer62.setNamingPolicy(namingPolicy65);
        boolean boolean67 = enhancer62.getAttemptLoad();
        enhancer62.setInterceptDuringConstruction(false);
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer62.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy72);
        enhancer47.setNamingPolicy(namingPolicy72);
        enhancer32.setNamingPolicy(namingPolicy72);
        enhancer21.setNamingPolicy(namingPolicy72);
        enhancer8.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer8.getStrategy();
        enhancer0.setStrategy(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.String str12 = signature2.getName();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        enhancer13.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer13.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer24.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer24.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer31.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer31.getAttemptLoad();
        enhancer31.setInterceptDuringConstruction(false);
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer31.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy41);
        enhancer13.setNamingPolicy(namingPolicy41);
        boolean boolean44 = signature2.equals((java.lang.Object) namingPolicy41);
        org.mockito.asm.Type type45 = signature2.getReturnType();
        org.mockito.asm.Type type46 = signature2.getReturnType();
        java.lang.String str47 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(SSS)S" + "'", str47, "(SSS)S");
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LV;LZ;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.lang.String str8 = classInfo7.toString();
        org.mockito.asm.Type[] typeArray9 = classInfo7.getInterfaces();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type type11 = classInfo7.getSuperType();
        int int12 = classInfo7.getModifiers();
        java.lang.String str13 = classInfo7.toString();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setUseFactory(true);
        enhancer14.setUseFactory(false);
        boolean boolean19 = enhancer14.getUseCache();
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer14.setCallback(callback22);
        boolean boolean24 = classInfo7.equals((java.lang.Object) enhancer14);
        java.lang.String str25 = classInfo7.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str8, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str13, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str25, "org.mockito.cglib.proxy.Enhancer");
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, false, false);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray23);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer26.setNamingPolicy(namingPolicy27);
        enhancer26.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray31);
        enhancer26.setInterfaces(classArray35);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = propertyDescriptorArray38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, false, true);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray46);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray46);
        java.lang.Class[] classArray49 = new java.lang.Class[] {};
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class<?> wildcardClass52 = classArray51.getClass();
        org.mockito.cglib.core.ClassInfo classInfo53 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass52);
        boolean boolean54 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass52);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, false, false);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(methodArray61);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(SSS)[Ljava/lang/Class;", method1, method2);
        propertyDescriptor3.setExpert(false);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor10.setWriteMethod(method18);
        boolean boolean20 = propertyDescriptor10.isPreferred();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor10.getPropertyEditorClass();
        boolean boolean22 = propertyDescriptor10.isHidden();
        boolean boolean23 = propertyDescriptor10.isConstrained();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(true);
        java.lang.Object obj15 = propertyDescriptor3.getValue("Z");
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        java.lang.String str8 = classInfo4.toString();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("void", method10, method11);
        java.lang.Object obj14 = propertyDescriptor12.getValue("Lhi!;");
        java.lang.String str15 = propertyDescriptor12.getShortDescription();
        java.lang.String str16 = propertyDescriptor12.getName();
        propertyDescriptor12.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        propertyDescriptor12.setDisplayName("[Ljava/lang/reflect/Method;");
        boolean boolean21 = classInfo4.equals((java.lang.Object) propertyDescriptor12);
        java.lang.String str22 = propertyDescriptor12.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "void" + "'", str16, "void");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor[name=(Ljava/lang/Cloneable;Ljava/io/Serializable;)V; displayName=[Ljava/lang/reflect/Method;]" + "'", str22, "java.beans.PropertyDescriptor[name=(Ljava/lang/Cloneable;Ljava/io/Serializable;)V; displayName=[Ljava/lang/reflect/Method;]");
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.asm.Type[] typeArray43 = methodInfo42.getExceptionTypes();
        org.mockito.cglib.core.Signature signature44 = methodInfo42.getSignature();
        java.lang.String str45 = signature44.getName();
        org.mockito.asm.Type[] typeArray46 = signature44.getArgumentTypes();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<init>" + "'", str45, "<init>");
        org.junit.Assert.assertNotNull(typeArray46);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass4, callbackArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(callbackArray6);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) ' ');
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, 0);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer48.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        enhancer65.setNamingPolicy(namingPolicy66);
        enhancer65.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        enhancer65.setInterfaces(classArray74);
        enhancer55.setInterfaces(classArray74);
        java.lang.reflect.Constructor constructor77 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass54, classArray74);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77);
        org.mockito.asm.Type[] typeArray80 = methodInfo79.getExceptionTypes();
        boolean boolean82 = methodInfo79.equals((java.lang.Object) "V");
        org.mockito.cglib.core.Signature signature83 = methodInfo79.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo84 = methodInfo79.getClassInfo();
        org.mockito.cglib.core.ClassInfo classInfo85 = methodInfo79.getClassInfo();
        boolean boolean86 = methodInfo46.equals((java.lang.Object) methodInfo79);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(constructor77);
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(signature83);
        org.junit.Assert.assertNotNull(classInfo84);
        org.junit.Assert.assertNotNull(classInfo85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str11 = signature10.getName();
        org.mockito.asm.Type type12 = signature10.getReturnType();
        org.mockito.asm.Type type13 = signature10.getReturnType();
        boolean boolean14 = classInfo7.equals((java.lang.Object) signature10);
        org.mockito.asm.Type[] typeArray15 = classInfo7.getInterfaces();
        org.mockito.asm.Type type16 = classInfo7.getType();
        java.lang.Object obj17 = null;
        boolean boolean18 = type16.equals(obj17);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setName("(SSS)[Ljava/lang/Class;");
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.asm.Type", method1, method2);
        propertyDescriptor3.setName("java.lang.reflect.Method[]");
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getName();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
        java.lang.String str8 = signature2.getDescriptor();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str13 = signature12.getName();
        org.mockito.asm.Type[] typeArray14 = signature12.getArgumentTypes();
        java.lang.String str15 = signature12.toString();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, true, true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptorArray16.getClass();
        boolean boolean21 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str23 = type22.getInternalName();
        boolean boolean24 = signature12.equals((java.lang.Object) str23);
        org.mockito.asm.Type type25 = signature12.getReturnType();
        int int26 = type25.getSort();
        java.lang.Class[] classArray27 = new java.lang.Class[] {};
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class<?> wildcardClass30 = classArray29.getClass();
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer34.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer34.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer51.setNamingPolicy(namingPolicy52);
        enhancer51.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, true, true);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray56);
        enhancer51.setInterfaces(classArray60);
        enhancer41.setInterfaces(classArray60);
        java.lang.reflect.Constructor constructor63 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass40, classArray60);
        java.lang.String str64 = org.mockito.asm.Type.getConstructorDescriptor(constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor63);
        boolean boolean68 = type33.equals((java.lang.Object) constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63, (int) ' ');
        org.mockito.asm.Type[] typeArray71 = methodInfo70.getExceptionTypes();
        org.mockito.cglib.core.Signature signature72 = new org.mockito.cglib.core.Signature("Z", type25, typeArray71);
        java.lang.String str73 = signature72.toString();
        boolean boolean74 = signature2.equals((java.lang.Object) signature72);
        org.mockito.asm.Type type75 = signature2.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type76 = type75.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(SSS)S" + "'", str6, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(SSS)S" + "'", str8, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(SSS)S" + "'", str15, "(SSS)S");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str23, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(constructor63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()V" + "'", str64, "()V");
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Z()S" + "'", str73, "Z()S");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.cglib.proxy.Callback callback2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass1, callback2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass42 = enhancer36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.lang.String str44 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray45 = classInfo43.getInterfaces();
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("java.lang.Object", type35, typeArray45);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        boolean boolean53 = classInfo51.equals((java.lang.Object) (-1.0f));
        java.lang.String str54 = classInfo51.toString();
        int int55 = classInfo51.getModifiers();
        org.mockito.asm.Type type56 = classInfo51.getSuperType();
        org.mockito.asm.Type type57 = classInfo51.getType();
        org.mockito.asm.Type[] typeArray58 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("V", type35, typeArray58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer60.setNamingPolicy(namingPolicy61);
        enhancer60.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        enhancer60.setInterfaces(classArray69);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        boolean boolean72 = signature59.equals((java.lang.Object) strArray71);
        java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) strArray71);
        org.mockito.cglib.core.Signature signature74 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str44, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.lang.Class[]" + "'", str54, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1041 + "'", int55 == 1041);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(signature74);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer38.getStrategy();
        enhancer0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback59 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray60 = new org.mockito.cglib.proxy.Callback[] { callback59 };
        enhancer55.setCallbacks(callbackArray60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer62.setCallbacks(callbackArray67);
        enhancer55.setCallbacks(callbackArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer55.getStrategy();
        enhancer0.setStrategy(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(callbackArray60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(callbackArray67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LV;");
        int int4 = type3.getSize();
        int int5 = type3.getDimensions();
        int int6 = type3.getSize();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type13, type14, type15 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray16);
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray16);
        boolean boolean19 = type9.equals((java.lang.Object) type11);
        int int20 = type9.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer21.getClass();
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        java.lang.String str29 = classInfo28.toString();
        org.mockito.asm.Type[] typeArray30 = classInfo28.getInterfaces();
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("", type9, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; bound]", type1, typeArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)S" + "'", str17, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(SSS)LV;" + "'", str18, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str29, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "()LLV;;" + "'", str32, "()LLV;;");
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        propertyDescriptor3.setName("hi!");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass15 = classArray14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        boolean boolean18 = classInfo16.equals((java.lang.Object) (-1.0f));
        java.lang.String str19 = classInfo16.toString();
        java.lang.String str20 = classInfo16.toString();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        java.lang.String str22 = classInfo16.toString();
        boolean boolean23 = signature2.equals((java.lang.Object) classInfo16);
        java.lang.String str24 = signature2.getName();
        java.lang.String str25 = signature2.toString();
        java.lang.Class[] classArray26 = new java.lang.Class[] {};
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class<?> wildcardClass29 = classArray28.getClass();
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        boolean boolean32 = classInfo30.equals((java.lang.Object) (-1.0f));
        java.lang.String str33 = classInfo30.toString();
        java.lang.String str34 = classInfo30.toString();
        org.mockito.asm.Type type35 = classInfo30.getSuperType();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type36.getOpcode((int) (short) 1);
        java.lang.String str39 = type36.getDescriptor();
        int int41 = type36.getOpcode((int) (byte) 100);
        boolean boolean42 = classInfo30.equals((java.lang.Object) int41);
        int int43 = classInfo30.getModifiers();
        int int44 = classInfo30.getModifiers();
        boolean boolean45 = signature2.equals((java.lang.Object) int44);
        java.lang.String str46 = signature2.toString();
        org.mockito.asm.Type type47 = signature2.getReturnType();
        org.mockito.asm.Type type48 = signature2.getReturnType();
        java.lang.String str49 = signature2.toString();
        java.lang.String str50 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(SSS)S" + "'", str25, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.lang.Class[]" + "'", str33, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.lang.Class[]" + "'", str34, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "V" + "'", str39, "V");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 105 + "'", int41 == 105);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1041 + "'", int43 == 1041);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1041 + "'", int44 == 1041);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(SSS)S" + "'", str46, "(SSS)S");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(SSS)S" + "'", str49, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(SSS)S" + "'", str50, "(SSS)S");
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer10.getStrategy();
        java.lang.Class<?> wildcardClass16 = enhancer10.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer27.setNamingPolicy(namingPolicy28);
        enhancer27.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray32);
        enhancer27.setInterfaces(classArray36);
        enhancer17.setInterfaces(classArray36);
        java.lang.reflect.Constructor constructor39 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass16, classArray36);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        org.mockito.cglib.proxy.Callback callback42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass4, classArray36, callback42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(constructor39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer1.getStrategy();
        java.lang.ClassLoader classLoader13 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor14 = org.mockito.cglib.core.ReflectUtils.findConstructor("[Ljava/lang/reflect/Method;", classLoader13);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setAttemptLoad(false);
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer17.setCallbacks(callbackArray22);
        enhancer10.setCallbacks(callbackArray22);
        enhancer0.setCallbacks(callbackArray22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        enhancer28.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        enhancer28.setInterfaces(classArray37);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer0.setInterfaces(classArray37);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass10 = classArray9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/Class;" + "'", str12, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int2 = type0.getOpcode(100);
        org.mockito.asm.Type[] typeArray3 = new org.mockito.asm.Type[] {};
        java.lang.String str4 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray3);
        java.lang.String str5 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 103 + "'", int2 == 103);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "()D" + "'", str4, "()D");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "double" + "'", str5, "double");
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray3);
        java.lang.Class<?> wildcardClass6 = classArray5.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = signature2.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = signature2.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str20 = signature19.getName();
        org.mockito.asm.Type type21 = signature19.getReturnType();
        boolean boolean22 = classInfo15.equals((java.lang.Object) type21);
        org.mockito.asm.Type[] typeArray23 = classInfo15.getInterfaces();
        org.mockito.asm.Type[] typeArray24 = classInfo15.getInterfaces();
        boolean boolean25 = signature2.equals((java.lang.Object) classInfo15);
        java.lang.String str26 = signature2.getDescriptor();
        org.mockito.asm.Type type27 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer28.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer45.setNamingPolicy(namingPolicy46);
        enhancer45.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        enhancer45.setInterfaces(classArray54);
        enhancer35.setInterfaces(classArray54);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass34, classArray54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        boolean boolean61 = type27.equals((java.lang.Object) propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Z" + "'", str26, "Z");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature33 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray34 = signature33.getArgumentTypes();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(signature33);
        org.junit.Assert.assertNotNull(typeArray34);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature35 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.String str36 = signature35.getDescriptor();
        java.lang.String str37 = signature35.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()V" + "'", str36, "()V");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<init>()V" + "'", str37, "<init>()V");
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        int int41 = methodInfo40.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classInfo7);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        org.mockito.asm.Type[] typeArray12 = classInfo4.getInterfaces();
        org.mockito.asm.Type type13 = classInfo4.getSuperType();
        java.lang.String str14 = classInfo4.toString();
        int int15 = classInfo4.getModifiers();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.lang.Class[]" + "'", str14, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1041 + "'", int15 == 1041);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        boolean boolean7 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer10.getStrategy();
        java.lang.Class<?> wildcardClass16 = enhancer10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str21 = signature20.getName();
        org.mockito.asm.Type type22 = signature20.getReturnType();
        org.mockito.asm.Type type23 = signature20.getReturnType();
        boolean boolean24 = classInfo17.equals((java.lang.Object) signature20);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray25);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray27);
        boolean boolean30 = signature20.equals((java.lang.Object) classArray27);
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass3, classArray27, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) (short) 1);
        java.lang.String str3 = type0.getDescriptor();
        int int5 = type0.getOpcode((int) (byte) 100);
        boolean boolean7 = type0.equals((java.lang.Object) 'a');
        int int8 = type0.getSort();
        java.lang.String str9 = type0.toString();
        int int10 = type0.getSort();
        java.lang.String str11 = type0.getDescriptor();
        int int13 = type0.getOpcode(18);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 105 + "'", int5 == 105);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "V" + "'", str9, "V");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str15 = type14.toString();
        java.lang.String str16 = type14.getInternalName();
        propertyDescriptor3.setValue("", (java.lang.Object) str16);
        boolean boolean18 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        propertyDescriptor3.setShortDescription("[Ljava/beans/PropertyDescriptor;");
        boolean boolean23 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Ljava/lang/Class;" + "'", str15, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass15 = classArray14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        boolean boolean18 = classInfo16.equals((java.lang.Object) (-1.0f));
        java.lang.String str19 = classInfo16.toString();
        java.lang.String str20 = classInfo16.toString();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        java.lang.String str22 = classInfo16.toString();
        boolean boolean23 = signature2.equals((java.lang.Object) classInfo16);
        java.lang.String str24 = signature2.getName();
        java.lang.String str25 = signature2.toString();
        java.lang.Class[] classArray26 = new java.lang.Class[] {};
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class<?> wildcardClass29 = classArray28.getClass();
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        boolean boolean32 = classInfo30.equals((java.lang.Object) (-1.0f));
        java.lang.String str33 = classInfo30.toString();
        java.lang.String str34 = classInfo30.toString();
        org.mockito.asm.Type type35 = classInfo30.getSuperType();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        int int38 = type36.getOpcode((int) (short) 1);
        java.lang.String str39 = type36.getDescriptor();
        int int41 = type36.getOpcode((int) (byte) 100);
        boolean boolean42 = classInfo30.equals((java.lang.Object) int41);
        int int43 = classInfo30.getModifiers();
        int int44 = classInfo30.getModifiers();
        boolean boolean45 = signature2.equals((java.lang.Object) int44);
        java.lang.String str46 = signature2.toString();
        org.mockito.asm.Type type47 = signature2.getReturnType();
        org.mockito.asm.Type type48 = signature2.getReturnType();
        java.lang.String str49 = signature2.toString();
        java.lang.String str50 = signature2.toString();
        java.lang.Object obj51 = null;
        boolean boolean52 = signature2.equals(obj51);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(SSS)S" + "'", str25, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.lang.Class[]" + "'", str33, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.lang.Class[]" + "'", str34, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "V" + "'", str39, "V");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 105 + "'", int41 == 105);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1041 + "'", int43 == 1041);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1041 + "'", int44 == 1041);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(SSS)S" + "'", str46, "(SSS)S");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(SSS)S" + "'", str49, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(SSS)S" + "'", str50, "(SSS)S");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        boolean boolean9 = enhancer6.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        enhancer11.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader16 = enhancer11.getClassLoader();
        enhancer6.setClassLoader(classLoader16);
        enhancer0.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader19 = null;
        enhancer0.setClassLoader(classLoader19);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer23.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer23.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer30.setNamingPolicy(namingPolicy33);
        boolean boolean35 = enhancer30.getAttemptLoad();
        enhancer30.setInterceptDuringConstruction(false);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer40.setNamingPolicy(namingPolicy41);
        enhancer40.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, true, true);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        enhancer40.setInterfaces(classArray49);
        enhancer30.setInterfaces(classArray49);
        java.lang.reflect.Constructor constructor52 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass29, classArray49);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(constructor52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        boolean boolean10 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        boolean boolean12 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Callback callback13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass4, callback13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()L(SSS)[Ljava/lang/Class;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type6 = classInfo5.getType();
        java.lang.String str7 = type6.getDescriptor();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str16 = signature15.getName();
        org.mockito.asm.Type type17 = signature15.getReturnType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type19, type20, type21 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray22);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type30 = signature29.getReturnType();
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class<?> wildcardClass34 = classArray33.getClass();
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        boolean boolean37 = classInfo35.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type38 = classInfo35.getSuperType();
        org.mockito.asm.Type[] typeArray39 = classInfo35.getInterfaces();
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray39);
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class<?> wildcardClass44 = classArray43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        boolean boolean47 = classInfo45.equals((java.lang.Object) (-1.0f));
        java.lang.String str48 = classInfo45.toString();
        java.lang.String str49 = classInfo45.toString();
        int int50 = classInfo45.getModifiers();
        org.mockito.asm.Type type51 = classInfo45.getType();
        org.mockito.asm.Type[] typeArray52 = classInfo45.getInterfaces();
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray52);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=void; preferred]", type6, typeArray52);
        int int55 = type6.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(SSS)S" + "'", str23, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(SSS)S" + "'", str24, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str25, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(SSS)Lorg/mockito/asm/Type;" + "'", str26, "(SSS)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)S" + "'", str40, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)S");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.lang.Class[]" + "'", str48, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.lang.Class[]" + "'", str49, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1041 + "'", int50 == 1041);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)S" + "'", str53, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)S");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()V", "org/mockito/cglib/core/Signature");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()V' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        boolean boolean7 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Callback callback8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass3, callback8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        enhancer12.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer21.setCallbacks(callbackArray26);
        enhancer12.setCallbacks(callbackArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass8, callbackArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(callbackArray26);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        boolean boolean16 = classInfo14.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = classInfo14.toString();
        org.mockito.asm.Type type18 = classInfo14.getSuperType();
        propertyDescriptor3.setValue("Z", (java.lang.Object) type18);
        java.lang.reflect.Method method20 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=void; hidden]");
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("Lg/mockito/asm/Type;");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.lang.Class[]" + "'", str17, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(method20);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(false);
        boolean boolean10 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getName();
        org.mockito.asm.Type[] typeArray4 = signature2.getArgumentTypes();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int10 = type8.getOpcode(100);
        boolean boolean11 = signature2.equals((java.lang.Object) 100);
        java.lang.String str12 = signature2.getName();
        java.lang.String str13 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(SSS)S" + "'", str5, "(SSS)S");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 103 + "'", int10 == 103);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(SSS)S" + "'", str13, "(SSS)S");
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java.lang.Object", type2, typeArray12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class<?> wildcardClass17 = classArray16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        boolean boolean20 = classInfo18.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = classInfo18.toString();
        int int22 = classInfo18.getModifiers();
        org.mockito.asm.Type type23 = classInfo18.getSuperType();
        org.mockito.asm.Type type24 = classInfo18.getType();
        org.mockito.asm.Type[] typeArray25 = classInfo18.getInterfaces();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("V", type2, typeArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type27 = type2.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str11, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.lang.Class[]" + "'", str21, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1041 + "'", int22 == 1041);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer0.setCallbackFilter(callbackFilter13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        java.lang.Class<?> wildcardClass22 = enhancer16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str27 = signature26.getName();
        org.mockito.asm.Type type28 = signature26.getReturnType();
        org.mockito.asm.Type type29 = signature26.getReturnType();
        boolean boolean30 = classInfo23.equals((java.lang.Object) signature26);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray31);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        boolean boolean36 = signature26.equals((java.lang.Object) classArray33);
        enhancer0.setInterfaces(classArray33);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setUseFactory(true);
        enhancer38.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer38.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer46.setCallbacks(callbackArray51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback57 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray58 = new org.mockito.cglib.proxy.Callback[] { callback57 };
        enhancer53.setCallbacks(callbackArray58);
        enhancer46.setCallbacks(callbackArray58);
        enhancer38.setCallbacks(callbackArray58);
        enhancer0.setCallbacks(callbackArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader63 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(callbackArray51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(callbackArray58);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer9.setCallbacks(callbackArray14);
        enhancer0.setCallbacks(callbackArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer17.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class<?> wildcardClass35 = methodArray34.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(false);
        enhancer37.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        enhancer42.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer42.setInterfaces(classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray51);
        enhancer37.setInterfaces(classArray51);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        java.lang.Class<?> wildcardClass61 = enhancer55.getClass();
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str66 = signature65.getName();
        org.mockito.asm.Type type67 = signature65.getReturnType();
        org.mockito.asm.Type type68 = signature65.getReturnType();
        boolean boolean69 = classInfo62.equals((java.lang.Object) signature65);
        org.mockito.asm.Type[] typeArray70 = classInfo62.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj71 = enhancer0.create(classArray51, (java.lang.Object[]) typeArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(typeArray70);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer4.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setAttemptLoad(false);
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        enhancer32.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader37 = enhancer32.getClassLoader();
        enhancer25.setClassLoader(classLoader37);
        enhancer25.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean41 = enhancer25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer25.getStrategy();
        enhancer0.setStrategy(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer9.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer9.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        java.util.List list19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list20 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass15, list19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/cglib/proxy/Enhancer;" + "'", str17, "Lorg/mockito/cglib/proxy/Enhancer;");
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;");
        int int3 = type1.getOpcode(14);
        java.lang.String str4 = type1.getInternalName();
        java.lang.String str5 = type1.getClassName();
        int int6 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18 + "'", int3 == 18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;" + "'", str4, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(Ljava.lang.Cloneable;Ljava.io.Serializable;)[Ljava.lang.Class;" + "'", str5, "(Ljava.lang.Cloneable;Ljava.io.Serializable;)[Ljava.lang.Class;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer6.setNamingPolicy(namingPolicy9);
        boolean boolean11 = enhancer6.getAttemptLoad();
        enhancer6.setInterceptDuringConstruction(false);
        boolean boolean14 = enhancer6.getAttemptLoad();
        enhancer6.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        enhancer17.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer17.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray25);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        enhancer17.setInterfaces(classArray29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer40.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer47.setNamingPolicy(namingPolicy50);
        boolean boolean52 = enhancer47.getAttemptLoad();
        enhancer47.setInterceptDuringConstruction(false);
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer47.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy57);
        enhancer32.setNamingPolicy(namingPolicy57);
        enhancer17.setNamingPolicy(namingPolicy57);
        enhancer6.setNamingPolicy(namingPolicy57);
        enhancer0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Callback callback63 = null;
        enhancer0.setCallback(callback63);
        boolean boolean65 = enhancer0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        enhancer6.setStrategy(generatorStrategy10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setUseFactory(true);
        enhancer12.setUseFactory(false);
        boolean boolean17 = enhancer12.getUseCache();
        enhancer12.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer20.getStrategy();
        enhancer12.setStrategy(generatorStrategy31);
        enhancer6.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer34.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer34.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        enhancer34.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer41.setCallback(callback49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer51.setNamingPolicy(namingPolicy52);
        enhancer51.setAttemptLoad(false);
        enhancer51.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer58.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer58.setCallbacks(callbackArray63);
        enhancer51.setCallbacks(callbackArray63);
        enhancer41.setCallbacks(callbackArray63);
        enhancer34.setCallbacks(callbackArray63);
        enhancer6.setCallbacks(callbackArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass3, callbackArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(callbackArray63);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.cglib.core.ClassInfo classInfo33 = methodInfo32.getClassInfo();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        boolean boolean39 = enhancer34.getAttemptLoad();
        enhancer34.setInterceptDuringConstruction(false);
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer34.getNamingPolicy();
        boolean boolean45 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer46.setNamingPolicy(namingPolicy47);
        boolean boolean49 = enhancer46.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        enhancer34.setClassLoader(classLoader50);
        enhancer34.setAttemptLoad(true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass55 = type54.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass55);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter58 = null;
        enhancer34.setCallbackFilter(callbackFilter58);
        enhancer34.setAttemptLoad(false);
        boolean boolean62 = classInfo33.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getUseCache();
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        boolean boolean12 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, false, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = enhancer0.create(classArray39, (java.lang.Object[]) methodArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(methodArray52);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str8 = signature7.getName();
        org.mockito.asm.Type type9 = signature7.getReturnType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type11, type12, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray14);
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray14);
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray14);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("void", method19, method20);
        propertyDescriptor21.setExpert(true);
        boolean boolean24 = propertyDescriptor21.isPreferred();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = methodArray28.getClass();
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        int int31 = classInfo30.getModifiers();
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor21.createPropertyEditor((java.lang.Object) int31);
        propertyDescriptor21.setName("Lorg/mockito/asm/Type;");
        boolean boolean35 = type4.equals((java.lang.Object) propertyDescriptor21);
        java.lang.reflect.Method method36 = propertyDescriptor21.getReadMethod();
        java.lang.String str37 = propertyDescriptor21.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(SSS)S" + "'", str15, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(SSS)S" + "'", str16, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str17, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1041 + "'", int31 == 1041);
        org.junit.Assert.assertNull(propertyEditor32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(method36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor[name=Lorg/mockito/asm/Type;; expert]" + "'", str37, "java.beans.PropertyDescriptor[name=Lorg/mockito/asm/Type;; expert]");
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        int int34 = methodInfo33.getModifiers();
        java.lang.String str35 = methodInfo33.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<init>()V" + "'", str35, "<init>()V");
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type6, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray9);
        boolean boolean12 = type2.equals((java.lang.Object) type4);
        int int13 = type2.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.String str22 = classInfo21.toString();
        org.mockito.asm.Type[] typeArray23 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("", type2, typeArray23);
        org.mockito.asm.Type type25 = signature24.getReturnType();
        java.lang.String str26 = signature24.toString();
        java.lang.String str27 = signature24.getDescriptor();
        org.mockito.asm.Type[] typeArray28 = signature24.getArgumentTypes();
        java.lang.String str29 = signature24.getName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)LV;" + "'", str11, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str22, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "()[Ljava/lang/Class;" + "'", str26, "()[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "()[Ljava/lang/Class;" + "'", str27, "()[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setUseFactory(true);
        boolean boolean12 = enhancer8.getUseCache();
        java.lang.ClassLoader classLoader13 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        boolean boolean22 = enhancer14.getAttemptLoad();
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray23);
        java.lang.Class<?> wildcardClass26 = classArray25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass26);
        boolean boolean29 = enhancer14.getUseCache();
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        enhancer32.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = enhancer38.getClassLoader();
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer38.setCallbacks(callbackArray43);
        enhancer32.setCallbacks(callbackArray43);
        enhancer14.setCallbacks(callbackArray43);
        enhancer8.setCallbacks(callbackArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass4, callbackArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[Ljava/lang/Class;" + "'", str27, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray43);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray3);
        java.lang.Class<?> wildcardClass6 = classArray5.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = signature2.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = signature2.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str20 = signature19.getName();
        org.mockito.asm.Type type21 = signature19.getReturnType();
        boolean boolean22 = classInfo15.equals((java.lang.Object) type21);
        org.mockito.asm.Type[] typeArray23 = classInfo15.getInterfaces();
        org.mockito.asm.Type[] typeArray24 = classInfo15.getInterfaces();
        boolean boolean25 = signature2.equals((java.lang.Object) classInfo15);
        boolean boolean27 = signature2.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=java.beans.PropertyDescriptor[name=I]]]");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray28 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass3, "void", classArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: void");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        boolean boolean29 = enhancer17.getUseCache();
        enhancer17.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        boolean boolean35 = enhancer32.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class<?> wildcardClass41 = methodArray40.getClass();
        enhancer32.setSuperclass((java.lang.Class) wildcardClass41);
        boolean boolean43 = enhancer32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer32.getStrategy();
        enhancer17.setStrategy(generatorStrategy44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        enhancer17.setInterfaces(classArray50);
        org.mockito.cglib.proxy.Callback callback54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass13, classArray50, callback54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Z()S");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        java.lang.reflect.Constructor constructor39 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setUseFactory(true);
        enhancer40.setUseFactory(false);
        boolean boolean45 = enhancer40.getUseCache();
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer40.getNamingPolicy();
        boolean boolean49 = enhancer40.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(false);
        enhancer50.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        enhancer55.setNamingPolicy(namingPolicy56);
        enhancer55.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, true, true);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray60);
        enhancer55.setInterfaces(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray64);
        enhancer50.setInterfaces(classArray64);
        int int68 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray64);
        enhancer40.setInterfaces(classArray64);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray64);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter72 = null;
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        enhancer73.setNamingPolicy(namingPolicy74);
        java.lang.ClassLoader classLoader76 = enhancer73.getClassLoader();
        org.mockito.cglib.proxy.Callback callback77 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray78 = new org.mockito.cglib.proxy.Callback[] { callback77 };
        enhancer73.setCallbacks(callbackArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass6, classArray64, callbackFilter72, callbackArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(constructor39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(callbackArray78);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("(SSS)S");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Z()S", method1, method2);
        boolean boolean4 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.lang.String str2 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer4.setCallbackFilter(callbackFilter9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer4.getNamingPolicy();
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray14);
        enhancer4.setInterfaces(classArray14);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray14);
        org.mockito.cglib.proxy.Callback callback18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass1, classArray14, callback18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org/mockito/asm/Type" + "'", str2, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray4, true, true);
        java.lang.Class<?> wildcardClass8 = propertyDescriptorArray4.getClass();
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = methodArray28.getClass();
        enhancer20.setSuperclass((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class<?> wildcardClass35 = methodArray34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = propertyDescriptorArray38.getClass();
        boolean boolean43 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass1, wildcardClass8, wildcardClass16, wildcardClass29, wildcardClass35, wildcardClass42 };
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class<?> wildcardClass50 = strArray49.getClass();
        boolean boolean51 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass50);
        java.util.List list52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list53 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass50, list52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str37, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str46, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer5.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor13 = org.mockito.cglib.core.ReflectUtils.findConstructor("char", classLoader12);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setUseCache(true);
        enhancer10.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer17.setCallback(callback20);
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass25 = classArray24.getClass();
        enhancer17.setSuperclass((java.lang.Class) wildcardClass25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        boolean boolean35 = enhancer32.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class<?> wildcardClass41 = methodArray40.getClass();
        enhancer32.setSuperclass((java.lang.Class) wildcardClass41);
        boolean boolean43 = enhancer32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer32.getStrategy();
        enhancer27.setStrategy(generatorStrategy44);
        enhancer17.setStrategy(generatorStrategy44);
        enhancer10.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        enhancer48.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer53.getStrategy();
        enhancer48.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setUseFactory(true);
        java.lang.Class[] classArray61 = new java.lang.Class[] {};
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray61);
        enhancer57.setInterfaces(classArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray63);
        enhancer48.setInterfaces(classArray65);
        enhancer10.setInterfaces(classArray65);
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass9, classArray65, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list8 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 104);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) -1);
        org.mockito.cglib.core.Signature signature37 = methodInfo36.getSignature();
        org.mockito.cglib.core.Signature signature38 = methodInfo36.getSignature();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(signature37);
        org.junit.Assert.assertNotNull(signature38);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass3, "LZ;", classArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: LZ;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getName();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        org.mockito.asm.Type type5 = signature2.getReturnType();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.String str7 = signature2.getDescriptor();
        java.lang.String str8 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(SSS)S" + "'", str6, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(SSS)S" + "'", str7, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(SSS)S" + "'", str8, "(SSS)S");
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer9.setCallbacks(callbackArray14);
        enhancer0.setCallbacks(callbackArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer17.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class<?> wildcardClass35 = methodArray34.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean37 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback46 = null;
        enhancer43.setCallback(callback46);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class<?> wildcardClass51 = classArray50.getClass();
        enhancer43.setSuperclass((java.lang.Class) wildcardClass51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer53.getStrategy();
        enhancer53.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer58.setNamingPolicy(namingPolicy59);
        boolean boolean61 = enhancer58.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, true, true);
        java.lang.Class<?> wildcardClass67 = methodArray66.getClass();
        enhancer58.setSuperclass((java.lang.Class) wildcardClass67);
        boolean boolean69 = enhancer58.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer58.getStrategy();
        enhancer53.setStrategy(generatorStrategy70);
        enhancer43.setStrategy(generatorStrategy70);
        enhancer0.setStrategy(generatorStrategy70);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot subclass final class class [Ljava.lang.reflect.Method;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        int int12 = type10.getOpcode((int) (short) 1);
        java.lang.String str13 = type10.getDescriptor();
        int int15 = type10.getOpcode((int) (byte) 100);
        boolean boolean16 = classInfo4.equals((java.lang.Object) int15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptorArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        boolean boolean24 = classInfo4.equals((java.lang.Object) wildcardClass21);
        org.mockito.asm.Type type25 = classInfo4.getType();
        int int26 = classInfo4.getModifiers();
        org.mockito.asm.Type type27 = classInfo4.getSuperType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "V" + "'", str13, "V");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 105 + "'", int15 == 105);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1041 + "'", int26 == 1041);
        org.junit.Assert.assertNotNull(type27);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=void; expert]");
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=void; expert]; hidden]" + "'", str13, "java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=void; expert]; hidden]");
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()LLV;;");
        int int3 = type1.getOpcode(70);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        boolean boolean3 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        enhancer6.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        enhancer6.setInterfaces(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method19 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass1, "java.beans.PropertyDescriptor[name=void; hidden]", classArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=void; hidden]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        java.lang.String str10 = classInfo4.toString();
        org.mockito.asm.Type type11 = classInfo4.getType();
        org.mockito.asm.Type type12 = type11.getElementType();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 10);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Object[] objArray49 = null;
        java.lang.Object obj50 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray49);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass56 = type55.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass56);
        boolean boolean59 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        boolean boolean61 = methodInfo54.equals((java.lang.Object) wildcardClass56);
        boolean boolean62 = type12.equals((java.lang.Object) methodInfo54);
        int int63 = methodInfo54.getModifiers();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer14.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer22.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer28.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        enhancer33.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader38 = enhancer33.getClassLoader();
        enhancer28.setClassLoader(classLoader38);
        enhancer22.setClassLoader(classLoader38);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer0.setCallbackFilter(callbackFilter45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer47.getStrategy();
        enhancer47.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        enhancer52.setNamingPolicy(namingPolicy53);
        boolean boolean55 = enhancer52.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = enhancer52.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.Class<?> wildcardClass61 = methodArray60.getClass();
        enhancer52.setSuperclass((java.lang.Class) wildcardClass61);
        boolean boolean63 = enhancer52.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer52.getStrategy();
        enhancer47.setStrategy(generatorStrategy64);
        enhancer0.setStrategy(generatorStrategy64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.Class<?> wildcardClass71 = propertyDescriptorArray67.getClass();
        boolean boolean72 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        java.beans.PropertyDescriptor[] propertyDescriptorArray74 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass71);
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass71);
        boolean boolean76 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass71);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.beans.PropertyDescriptor;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(propertyDescriptorArray74);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = enhancer1.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer6.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader11 = enhancer6.getClassLoader();
        enhancer1.setClassLoader(classLoader11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        boolean boolean18 = enhancer13.getAttemptLoad();
        enhancer13.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer13.setCallback(callback21);
        enhancer13.setUseCache(true);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor27 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]", classLoader25);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass3, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("void", method11, method12);
        propertyDescriptor13.setExpert(true);
        java.lang.String str16 = propertyDescriptor13.getName();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("void", method18, method19);
        propertyDescriptor20.setExpert(false);
        propertyDescriptor20.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor25 = propertyDescriptor13.createPropertyEditor((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setName("Z");
        java.lang.reflect.Method method28 = null;
        propertyDescriptor20.setWriteMethod(method28);
        java.lang.reflect.Method method30 = propertyDescriptor20.getWriteMethod();
        propertyDescriptor20.setExpert(false);
        boolean boolean33 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor20);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "void" + "'", str16, "void");
        org.junit.Assert.assertNull(propertyEditor25);
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str15 = type14.toString();
        java.lang.String str16 = type14.getInternalName();
        propertyDescriptor3.setValue("", (java.lang.Object) str16);
        boolean boolean18 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setWriteMethod(method19);
        propertyDescriptor3.setShortDescription("[Ljava/beans/PropertyDescriptor;");
        propertyDescriptor3.setDisplayName("()Ljava/lang/Object;");
        java.util.Enumeration<java.lang.String> strEnumeration25 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Ljava/lang/Class;" + "'", str15, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strEnumeration25);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        java.lang.String str10 = signature2.getDescriptor();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean12 = signature2.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptorArray17.getClass();
        boolean boolean22 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptorArray25.getClass();
        boolean boolean30 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer33.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = methodArray41.getClass();
        enhancer33.setSuperclass((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class<?> wildcardClass48 = methodArray47.getClass();
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.lang.Class<?> wildcardClass55 = propertyDescriptorArray51.getClass();
        boolean boolean56 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass14, wildcardClass21, wildcardClass29, wildcardClass42, wildcardClass48, wildcardClass55 };
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        boolean boolean63 = signature2.equals((java.lang.Object) strArray62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.Class<?> wildcardClass68 = propertyDescriptorArray64.getClass();
        boolean boolean69 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        boolean boolean72 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray73 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        boolean boolean74 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass68);
        boolean boolean77 = signature2.equals((java.lang.Object) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray78, true, true);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray78);
        java.lang.String[] strArray83 = org.mockito.cglib.core.ReflectUtils.getNames(classArray82);
        org.mockito.cglib.proxy.Callback callback84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass68, classArray82, callback84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str50, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str59, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str71, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback7 = null;
        enhancer0.setCallback(callback7);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]");
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setUseFactory(true);
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        enhancer16.setInterfaces(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        enhancer13.setInterfaces(classArray22);
        boolean boolean26 = type12.equals((java.lang.Object) classArray22);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("La.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->La.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.Signature signature39 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.String str40 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str41 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class<?> wildcardClass45 = classArray44.getClass();
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass45);
        boolean boolean48 = classInfo46.equals((java.lang.Object) (-1.0f));
        java.lang.String str49 = classInfo46.toString();
        java.lang.String str50 = classInfo46.toString();
        int int51 = classInfo46.getModifiers();
        org.mockito.asm.Type type52 = classInfo46.getType();
        org.mockito.asm.Type[] typeArray53 = classInfo46.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(signature39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "()V" + "'", str40, "()V");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "()V" + "'", str41, "()V");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.lang.Class[]" + "'", str49, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.lang.Class[]" + "'", str50, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1041 + "'", int51 == 1041);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("(SSS)S");
        propertyDescriptor3.setBound(true);
        java.lang.String str9 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.beans.PropertyDescriptor[name=(SSS)S; bound]" + "'", str9, "java.beans.PropertyDescriptor[name=(SSS)S; bound]");
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int2 = type0.getOpcode(32);
        java.lang.String str3 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "D" + "'", str3, "D");
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.asm.Type[] typeArray39 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo41 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (short) 10);
        java.lang.String str42 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        java.lang.Object[] objArray44 = null;
        java.lang.Object obj45 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor37, objArray44);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method49 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass2, "Lorg/mockito/cglib/core/ReflectUtils$3;", classArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Lorg/mockito/cglib/core/ReflectUtils$3;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(methodInfo41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "()V" + "'", str42, "()V");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str39 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class<?> wildcardClass44 = propertyDescriptorArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass44);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, true);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.Object obj51 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray54, true, true);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray54);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, true, true);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray60);
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        java.lang.String[] strArray66 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, false, false);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray66, methodArray73);
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray73);
        java.lang.reflect.Method[] methodArray76 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray59, methodArray73);
        java.lang.Object obj77 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) methodArray76);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()V" + "'", str39, "()V");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray76);
        org.junit.Assert.assertNotNull(obj77);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("()D");
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        java.lang.String str14 = type13.getClassName();
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str14);
        java.util.Enumeration<java.lang.String> strEnumeration16 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str5, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.lang.Object" + "'", str14, "java.lang.Object");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNotNull(strEnumeration16);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer26.setCallbacks(callbackArray31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback37 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray38 = new org.mockito.cglib.proxy.Callback[] { callback37 };
        enhancer33.setCallbacks(callbackArray38);
        enhancer26.setCallbacks(callbackArray38);
        enhancer0.setCallbacks(callbackArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer0.getStrategy();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str46 = signature45.getDescriptor();
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = classInfo51.getSuperType();
        java.lang.String str53 = classInfo51.toString();
        org.mockito.asm.Type type54 = classInfo51.getSuperType();
        boolean boolean55 = signature45.equals((java.lang.Object) classInfo51);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        enhancer56.setNamingPolicy(namingPolicy57);
        enhancer56.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, true, true);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray61);
        enhancer56.setInterfaces(classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray65);
        boolean boolean68 = classInfo51.equals((java.lang.Object) classArray65);
        enhancer0.setInterfaces(classArray65);
        java.lang.Class[] classArray70 = new java.lang.Class[] {};
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray70);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray72);
        java.lang.String[] strArray75 = org.mockito.cglib.core.ReflectUtils.getNames(classArray72);
        int int76 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray72);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray38);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(SSS)S" + "'", str46, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.lang.Class[]" + "'", str53, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader13 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer4.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        java.lang.Class<?> wildcardClass24 = enhancer0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method25 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list8 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration6 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("void", method9, method10);
        propertyDescriptor11.setExpert(false);
        java.lang.String str14 = propertyDescriptor11.getName();
        java.lang.String str15 = propertyDescriptor11.getName();
        boolean boolean16 = propertyDescriptor11.isExpert();
        java.lang.String str17 = propertyDescriptor11.getName();
        propertyDescriptor11.setDisplayName("(SSS)S");
        boolean boolean20 = propertyDescriptor11.isExpert();
        propertyDescriptor3.setValue("Lhi!;", (java.lang.Object) boolean20);
        boolean boolean22 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(strEnumeration6);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass10);
        boolean boolean14 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass10 = classArray9.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean13 = classInfo11.equals((java.lang.Object) (-1.0f));
        java.lang.String str14 = classInfo11.toString();
        java.lang.String str15 = classInfo11.toString();
        int int16 = classInfo11.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer17.setCallback(callback20);
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass25 = classArray24.getClass();
        enhancer17.setSuperclass((java.lang.Class) wildcardClass25);
        boolean boolean27 = classInfo11.equals((java.lang.Object) wildcardClass25);
        org.mockito.asm.Type[] typeArray28 = classInfo11.getInterfaces();
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        int int31 = type30.getSort();
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str35 = signature34.getName();
        org.mockito.asm.Type type36 = signature34.getReturnType();
        org.mockito.asm.Type type37 = signature34.getReturnType();
        org.mockito.asm.Type[] typeArray38 = signature34.getArgumentTypes();
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4, classArray29, (java.lang.Object[]) typeArray38);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>(org.mockito.asm.Type, org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.lang.Class[]" + "'", str14, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.lang.Class[]" + "'", str15, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1041 + "'", int16 == 1041);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(SSS)V" + "'", str39, "(SSS)V");
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        boolean boolean14 = classInfo12.equals((java.lang.Object) (-1.0f));
        java.lang.String str15 = classInfo12.toString();
        org.mockito.asm.Type type16 = classInfo12.getSuperType();
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        boolean boolean19 = classInfo4.equals((java.lang.Object) wildcardClass17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method20 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.lang.Class[]" + "'", str15, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getType();
        java.lang.String str6 = type5.getDescriptor();
        int int7 = type5.getSort();
        org.mockito.asm.Type type8 = type5.getElementType();
        boolean boolean10 = type5.equals((java.lang.Object) "Ljava/lang/Object;");
        java.lang.String str11 = type5.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java/lang/Class");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(SSS)Lorg/mockito/asm/Type;", method1, method2);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        boolean boolean9 = enhancer6.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        enhancer11.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader16 = enhancer11.getClassLoader();
        enhancer6.setClassLoader(classLoader16);
        enhancer0.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader19 = null;
        enhancer0.setClassLoader(classLoader19);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader23 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, false, true);
        java.lang.Class<?> wildcardClass6 = methodArray5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Object obj7 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setName("()D");
        java.lang.String str10 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=()D]" + "'", str13, "java.beans.PropertyDescriptor[name=()D]");
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type8 = classInfo5.getSuperType();
        int int9 = type8.getDimensions();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        enhancer10.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer19.setCallbacks(callbackArray24);
        enhancer10.setCallbacks(callbackArray24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer27.getAttemptLoad();
        enhancer27.setInterceptDuringConstruction(false);
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer27.getNamingPolicy();
        boolean boolean38 = enhancer27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer27.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy39);
        boolean boolean41 = type8.equals((java.lang.Object) namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer42.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        boolean boolean54 = enhancer49.getAttemptLoad();
        enhancer49.setInterceptDuringConstruction(false);
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer59.setNamingPolicy(namingPolicy60);
        enhancer59.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        enhancer59.setInterfaces(classArray68);
        enhancer49.setInterfaces(classArray68);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass48, classArray68);
        org.mockito.cglib.core.MethodInfo methodInfo72 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        org.mockito.cglib.core.Signature signature73 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor71);
        java.beans.PropertyDescriptor[] propertyDescriptorArray74 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray74, true, true);
        java.lang.Class<?> wildcardClass78 = propertyDescriptorArray74.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass78);
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, false, true);
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, false, true);
        java.lang.Object obj86 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor71, (java.lang.Object[]) methodArray85);
        org.mockito.asm.Type[] typeArray87 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature88 = new org.mockito.cglib.core.Signature("()Ljava/lang/Object;", type8, typeArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()Ljava/lang/Object;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertNotNull(methodInfo72);
        org.junit.Assert.assertNotNull(signature73);
        org.junit.Assert.assertNotNull(propertyDescriptorArray74);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertNotNull(typeArray87);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org/mockito/asm/Type", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        boolean boolean6 = propertyDescriptor3.isHidden();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getDimensions();
        java.lang.String str4 = type1.toString();
        java.lang.String str5 = type1.toString();
        org.mockito.asm.Type[] typeArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[Ljava/lang/Class;" + "'", str2, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        boolean boolean24 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer19.getNamingPolicy();
        boolean boolean30 = enhancer19.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer31.setNamingPolicy(namingPolicy32);
        boolean boolean34 = enhancer31.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        enhancer19.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer19.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseFactory(true);
        boolean boolean43 = enhancer39.getUseCache();
        org.mockito.cglib.proxy.Callback callback44 = null;
        enhancer39.setCallback(callback44);
        org.mockito.cglib.proxy.Callback callback46 = null;
        enhancer39.setCallback(callback46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer48.getClass();
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        enhancer39.setSuperclass((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass54);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass54);
        java.util.List list60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list61 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass54, list60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        int int38 = methodInfo37.getModifiers();
        int int39 = methodInfo37.getModifiers();
        org.mockito.cglib.core.Signature signature40 = methodInfo37.getSignature();
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class<?> wildcardClass44 = classArray43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type46 = classInfo45.getSuperType();
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str50 = signature49.getName();
        org.mockito.asm.Type type51 = signature49.getReturnType();
        boolean boolean52 = classInfo45.equals((java.lang.Object) type51);
        org.mockito.asm.Type type53 = classInfo45.getType();
        boolean boolean54 = signature40.equals((java.lang.Object) classInfo45);
        org.mockito.asm.Type type55 = signature40.getReturnType();
        java.lang.String str56 = signature40.getName();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(signature40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<init>" + "'", str56, "<init>");
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(SSS)[Ljava/lang/Class;", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        boolean boolean5 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer10.setCallback(callback13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass18 = classArray17.getClass();
        enhancer10.setSuperclass((java.lang.Class) wildcardClass18);
        boolean boolean20 = classInfo4.equals((java.lang.Object) wildcardClass18);
        org.mockito.asm.Type type21 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass22 = classInfo4.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer23.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer23.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        enhancer31.setInterfaces(classArray37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, true, true);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray39);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray43);
        java.lang.Object obj46 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass29, classArray37, (java.lang.Object[]) classArray45);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        enhancer50.setNamingPolicy(namingPolicy53);
        enhancer50.setSerialVersionUID((java.lang.Long) 10L);
        enhancer50.setAttemptLoad(false);
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray61 = new java.lang.Class[] {};
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray61);
        java.lang.Class<?> wildcardClass64 = classArray63.getClass();
        org.mockito.cglib.core.ClassInfo classInfo65 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        enhancer50.setSuperclass((java.lang.Class) wildcardClass64);
        boolean boolean67 = enhancer50.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        enhancer68.setNamingPolicy(namingPolicy69);
        enhancer68.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        enhancer73.setNamingPolicy(namingPolicy74);
        enhancer73.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer78.getStrategy();
        enhancer73.setStrategy(generatorStrategy80);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback86 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray87 = new org.mockito.cglib.proxy.Callback[] { callback86 };
        enhancer82.setCallbacks(callbackArray87);
        enhancer73.setCallbacks(callbackArray87);
        enhancer68.setCallbacks(callbackArray87);
        enhancer50.setCallbacks(callbackArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass22, classArray37, callbackFilter49, callbackArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(callbackArray87);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) '4');
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.ClassInfo classInfo46 = methodInfo45.getClassInfo();
        java.lang.String str47 = classInfo46.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str47, "org.mockito.cglib.proxy.Enhancer");
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; propertyEditorClass=class [Ljava.lang.Class;]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        enhancer4.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer4.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        enhancer4.setInterfaces(classArray16);
        boolean boolean19 = enhancer4.getAttemptLoad();
        boolean boolean20 = signature2.equals((java.lang.Object) enhancer4);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        boolean boolean29 = enhancer21.getAttemptLoad();
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class<?> wildcardClass33 = classArray32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        enhancer21.setSuperclass((java.lang.Class) wildcardClass33);
        boolean boolean36 = enhancer21.getUseCache();
        enhancer21.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseFactory(true);
        enhancer39.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer45.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Callback callback49 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray50 = new org.mockito.cglib.proxy.Callback[] { callback49 };
        enhancer45.setCallbacks(callbackArray50);
        enhancer39.setCallbacks(callbackArray50);
        enhancer21.setCallbacks(callbackArray50);
        boolean boolean54 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        enhancer55.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer55.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer55.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer21.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        enhancer67.setNamingPolicy(namingPolicy68);
        enhancer67.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer72.getStrategy();
        enhancer67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback80 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray81 = new org.mockito.cglib.proxy.Callback[] { callback80 };
        enhancer76.setCallbacks(callbackArray81);
        enhancer67.setCallbacks(callbackArray81);
        enhancer4.setCallbacks(callbackArray81);
        org.mockito.cglib.proxy.Callback callback85 = null;
        enhancer4.setCallback(callback85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = enhancer4.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[Ljava/lang/Class;" + "'", str34, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(callbackArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(callbackArray81);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("byte");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        int int42 = type6.getSize();
        int int43 = type6.getDimensions();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        int int10 = type9.getSize();
        int int11 = type9.getSize();
        org.mockito.asm.Type type12 = type9.getElementType();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray44 = methodInfo43.getExceptionTypes();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("org/mockito/cglib/core/Signature", type12, typeArray44);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str6, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str8, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        boolean boolean10 = signature2.equals((java.lang.Object) enhancer3);
        org.mockito.asm.Type type11 = signature2.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = type11.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature31 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class<?> wildcardClass36 = propertyDescriptorArray32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) methodArray43);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str46 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str49 = methodInfo48.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(signature31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "()V" + "'", str46, "()V");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<init>()V" + "'", str49, "<init>()V");
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        enhancer1.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer1.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        boolean boolean14 = enhancer9.getAttemptLoad();
        enhancer9.setInterceptDuringConstruction(false);
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer9.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method22 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer; propertyEditorClass=class org.mockito.asm.Type]", classLoader21);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(SSS)B");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray3);
        java.lang.Class<?> wildcardClass6 = classArray5.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass6);
        boolean boolean9 = signature2.equals((java.lang.Object) wildcardClass6);
        java.lang.String str10 = signature2.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type16 = classInfo15.getSuperType();
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str20 = signature19.getName();
        org.mockito.asm.Type type21 = signature19.getReturnType();
        boolean boolean22 = classInfo15.equals((java.lang.Object) type21);
        org.mockito.asm.Type[] typeArray23 = classInfo15.getInterfaces();
        org.mockito.asm.Type[] typeArray24 = classInfo15.getInterfaces();
        boolean boolean25 = signature2.equals((java.lang.Object) classInfo15);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray26 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()LV;");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ")LV" + "'", str2, ")LV");
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lhi!;");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer2.getNamingPolicy();
        boolean boolean8 = enhancer2.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer9.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer15.setNamingPolicy(namingPolicy16);
        boolean boolean18 = enhancer15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        enhancer20.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader25 = enhancer20.getClassLoader();
        enhancer15.setClassLoader(classLoader25);
        enhancer9.setClassLoader(classLoader25);
        enhancer2.setClassLoader(classLoader25);
        boolean boolean29 = type1.equals((java.lang.Object) enhancer2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = enhancer2.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(false);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass42 = enhancer36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        enhancer1.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer1.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer1.getUseCache();
        java.lang.ClassLoader classLoader9 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method10 = org.mockito.cglib.core.ReflectUtils.findMethod("java.lang.Class", classLoader9);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer3.setNamingPolicy(namingPolicy4);
        enhancer3.setUseCache(true);
        enhancer3.setSerialVersionUID((java.lang.Long) 10L);
        enhancer3.setUseFactory(true);
        java.lang.ClassLoader classLoader12 = enhancer3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class13 = org.mockito.cglib.core.ReflectUtils.defineClass("", byteArray2, classLoader12);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list8 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org/mockito/cglib/core/Signature");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 0, (byte) 100, (byte) -1, (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=void]", byteArray6, classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0, 100, -1, 0]");
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        boolean boolean10 = signature2.equals((java.lang.Object) enhancer3);
        java.lang.String str11 = signature2.getName();
        java.lang.String str12 = signature2.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray13 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.Class[]" + "'", str11, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.lang.Class[]" + "'", str12, "java.lang.Class[]");
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        enhancer11.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer11.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        enhancer11.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer34.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer41.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy51);
        enhancer26.setNamingPolicy(namingPolicy51);
        enhancer11.setNamingPolicy(namingPolicy51);
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader56 = enhancer0.getClassLoader();
        boolean boolean57 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class58 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer5.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=java.beans.PropertyDescriptor[name=I]]]", classLoader12);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=void; shortDescription=java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 1, (byte) 1 };
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        boolean boolean10 = enhancer5.getAttemptLoad();
        enhancer5.setInterceptDuringConstruction(false);
        enhancer5.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer5.getNamingPolicy();
        boolean boolean16 = enhancer5.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer17.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer5.setClassLoader(classLoader21);
        enhancer5.setAttemptLoad(true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass26 = type25.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass26);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer5.setCallbackFilter(callbackFilter29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer31.setNamingPolicy(namingPolicy32);
        enhancer31.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        enhancer31.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer40.setCallbacks(callbackArray45);
        enhancer31.setCallbacks(callbackArray45);
        enhancer5.setCallbacks(callbackArray45);
        java.lang.ClassLoader classLoader49 = enhancer5.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class50 = org.mockito.cglib.core.ReflectUtils.defineClass("()S", byteArray4, classLoader49);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 1, 1]");
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classLoader49);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        int int8 = classInfo7.getModifiers();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        org.mockito.asm.Type type10 = classInfo7.getType();
        int int11 = classInfo7.getModifiers();
        int int12 = classInfo7.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer9.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer9.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseFactory(true);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        enhancer20.setInterfaces(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer20.getStrategy();
        enhancer0.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer0.setNamingPolicy(namingPolicy30);
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/cglib/proxy/Enhancer;" + "'", str17, "Lorg/mockito/cglib/proxy/Enhancer;");
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)S");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer2.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean10 = type1.equals((java.lang.Object) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass8, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        boolean boolean15 = classInfo13.equals((java.lang.Object) (-1.0f));
        java.lang.String str16 = classInfo13.toString();
        int int17 = classInfo13.getModifiers();
        org.mockito.asm.Type type18 = classInfo13.getSuperType();
        org.mockito.asm.Type type19 = classInfo13.getType();
        boolean boolean20 = classInfo4.equals((java.lang.Object) classInfo13);
        org.mockito.asm.Type type21 = classInfo4.getSuperType();
        org.mockito.asm.Type type22 = type21.getElementType();
        java.lang.Class<?> wildcardClass23 = type21.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer25.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer25.setCallbackFilter(callbackFilter38);
        boolean boolean40 = enhancer25.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass47 = enhancer41.getClass();
        org.mockito.cglib.core.ClassInfo classInfo48 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass47);
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str52 = signature51.getName();
        org.mockito.asm.Type type53 = signature51.getReturnType();
        org.mockito.asm.Type type54 = signature51.getReturnType();
        boolean boolean55 = classInfo48.equals((java.lang.Object) signature51);
        java.lang.Class[] classArray56 = new java.lang.Class[] {};
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray56);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        boolean boolean61 = signature51.equals((java.lang.Object) classArray58);
        enhancer25.setInterfaces(classArray58);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setUseFactory(true);
        enhancer63.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer63.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback75 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray76 = new org.mockito.cglib.proxy.Callback[] { callback75 };
        enhancer71.setCallbacks(callbackArray76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback82 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray83 = new org.mockito.cglib.proxy.Callback[] { callback82 };
        enhancer78.setCallbacks(callbackArray83);
        enhancer71.setCallbacks(callbackArray83);
        enhancer63.setCallbacks(callbackArray83);
        enhancer25.setCallbacks(callbackArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass23, callbackArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.lang.Class[]" + "'", str16, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1041 + "'", int17 == 1041);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str24, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(callbackArray76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(callbackArray83);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=void; expert; values={java.beans.PropertyDescriptor[name=I]=false}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer8.setNamingPolicy(namingPolicy9);
        enhancer8.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer8.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer19.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy36);
        enhancer8.setNamingPolicy(namingPolicy36);
        enhancer0.setNamingPolicy(namingPolicy36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type10);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        enhancer1.setInterfaces(classArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer10.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer10.setCallback(callback16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setUseCache(true);
        enhancer18.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = enhancer18.getClassLoader();
        enhancer10.setClassLoader(classLoader37);
        enhancer1.setClassLoader(classLoader37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor40 = org.mockito.cglib.core.ReflectUtils.findConstructor("LV;", classLoader37);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Object[] objArray36 = null;
        java.lang.Object obj37 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        boolean boolean42 = methodInfo40.equals((java.lang.Object) 'a');
        org.mockito.asm.Type[] typeArray43 = methodInfo40.getExceptionTypes();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;]");
        int int46 = type45.getSort();
        int int47 = type45.getSort();
        boolean boolean48 = methodInfo40.equals((java.lang.Object) int47);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setUseFactory(false);
        boolean boolean7 = enhancer0.getUseCache();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.proxy.Callback callback15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass11, callback15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/Class;" + "'", str12, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/lang/Class;" + "'", str13, "[Ljava/lang/Class;");
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setInterceptDuringConstruction(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        boolean boolean22 = enhancer14.getAttemptLoad();
        enhancer14.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        enhancer25.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer25.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer25.setInterfaces(classArray37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer48.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer55.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy65);
        enhancer40.setNamingPolicy(namingPolicy65);
        enhancer25.setNamingPolicy(namingPolicy65);
        enhancer14.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader70 = enhancer14.getClassLoader();
        java.lang.ClassLoader classLoader71 = enhancer14.getClassLoader();
        enhancer1.setClassLoader(classLoader71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor73 = org.mockito.cglib.core.ReflectUtils.findConstructor("Z()S", classLoader71);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->Z");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        boolean boolean13 = enhancer1.getUseCache();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer16.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = enhancer16.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = methodArray24.getClass();
        enhancer16.setSuperclass((java.lang.Class) wildcardClass25);
        boolean boolean27 = enhancer16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer16.getStrategy();
        enhancer1.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor31 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Ljava/lang/Object;", classLoader30);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptorArray9.getClass();
        boolean boolean14 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        propertyDescriptor3.setValue("()V", (java.lang.Object) wildcardClass13);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer22.setNamingPolicy(namingPolicy23);
        enhancer22.setUseCache(true);
        enhancer22.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        enhancer29.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        enhancer29.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer38.setCallbacks(callbackArray43);
        enhancer29.setCallbacks(callbackArray43);
        enhancer22.setCallbacks(callbackArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass13, callbackArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str17, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str21, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(callbackArray43);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor3 = org.mockito.cglib.core.ReflectUtils.findConstructor("java/lang/Class", classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer9.setCallbacks(callbackArray14);
        enhancer0.setCallbacks(callbackArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer17.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        enhancer31.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer37.setCallbacks(callbackArray42);
        enhancer31.setCallbacks(callbackArray42);
        enhancer0.setCallbacks(callbackArray42);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class50 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray42);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setHidden(true);
        boolean boolean20 = propertyDescriptor10.isHidden();
        java.lang.reflect.Method method21 = propertyDescriptor10.getReadMethod();
        boolean boolean22 = propertyDescriptor10.isPreferred();
        boolean boolean23 = propertyDescriptor10.isExpert();
        boolean boolean24 = propertyDescriptor10.isBound();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer10.getStrategy();
        java.lang.Class<?> wildcardClass16 = enhancer10.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer27.setNamingPolicy(namingPolicy28);
        enhancer27.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray32);
        enhancer27.setInterfaces(classArray36);
        enhancer17.setInterfaces(classArray36);
        java.lang.reflect.Constructor constructor39 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass16, classArray36);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray41, true, true);
        java.lang.Class<?> wildcardClass45 = methodArray44.getClass();
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = enhancer0.create(classArray36, (java.lang.Object[]) propertyDescriptorArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(constructor39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str47, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer19.setCallbacks(callbackArray24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer26.setCallbacks(callbackArray31);
        enhancer19.setCallbacks(callbackArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer19.getStrategy();
        enhancer0.setStrategy(generatorStrategy34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class36 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/lang/Class;" + "'", str13, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(generatorStrategy34);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        boolean boolean13 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        enhancer20.setAttemptLoad(false);
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader32 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        enhancer14.setClassLoader(classLoader32);
        enhancer1.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        boolean boolean47 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        enhancer1.setClassLoader(classLoader52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method55 = org.mockito.cglib.core.ReflectUtils.findMethod("Lva/lang/Object;()S", classLoader52);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass18 = enhancer12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        java.lang.Object obj36 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass18, classArray26, (java.lang.Object[]) classArray34);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot subclass final class class [Ljava.lang.Class;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setShortDescription("char");
        java.lang.String str20 = propertyDescriptor10.getShortDescription();
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor10.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor10.attributeNames();
        boolean boolean23 = propertyDescriptor10.isConstrained();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "char" + "'", str20, "char");
        org.junit.Assert.assertNotNull(strEnumeration21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        boolean boolean16 = classInfo14.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = classInfo14.toString();
        org.mockito.asm.Type type18 = classInfo14.getSuperType();
        propertyDescriptor3.setValue("Z", (java.lang.Object) type18);
        propertyDescriptor3.setName("");
        boolean boolean22 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.lang.Class[]" + "'", str17, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        enhancer8.setSerialVersionUID((java.lang.Long) 10L);
        enhancer8.setAttemptLoad(false);
        enhancer8.setInterceptDuringConstruction(true);
        enhancer8.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer21.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        boolean boolean33 = enhancer28.getAttemptLoad();
        enhancer28.setInterceptDuringConstruction(false);
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        enhancer38.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray43);
        enhancer38.setInterfaces(classArray47);
        enhancer28.setInterfaces(classArray47);
        java.lang.reflect.Constructor constructor50 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass27, classArray47);
        enhancer8.setInterfaces(classArray47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.Class<?> wildcardClass56 = propertyDescriptorArray52.getClass();
        boolean boolean57 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass3, classArray47, (java.lang.Object[]) propertyDescriptorArray59);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(constructor50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        int int9 = type8.getSize();
        int int10 = type8.getSize();
        org.mockito.asm.Type type11 = type8.getElementType();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass18 = enhancer12.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        boolean boolean24 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        enhancer29.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray34);
        enhancer29.setInterfaces(classArray38);
        enhancer19.setInterfaces(classArray38);
        java.lang.reflect.Constructor constructor41 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass18, classArray38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor41, (java.lang.Object[]) propertyDescriptorArray42);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor41, 4);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor41);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor41, (int) (byte) 100);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getReturnType("V");
        java.lang.String str56 = type55.getClassName();
        int int57 = type55.getSize();
        org.mockito.asm.Type[] typeArray59 = org.mockito.asm.Type.getArgumentTypes("()S");
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("java.lang.Object", type55, typeArray59);
        java.lang.Object obj61 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor41, (java.lang.Object[]) typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray59);
        org.mockito.asm.Type type63 = type11.getElementType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(constructor41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "void" + "'", str56, "void");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "()Lva/lang/Object;" + "'", str62, "()Lva/lang/Object;");
        org.junit.Assert.assertNotNull(type63);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        int int3 = type1.getOpcode((int) (short) 1);
        java.lang.String str4 = type1.getDescriptor();
        int int6 = type1.getOpcode((int) (byte) 100);
        boolean boolean8 = type1.equals((java.lang.Object) 'a');
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        java.lang.Class<?> wildcardClass22 = enhancer16.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        boolean boolean28 = enhancer23.getAttemptLoad();
        enhancer23.setInterceptDuringConstruction(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        enhancer33.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        enhancer33.setInterfaces(classArray42);
        enhancer23.setInterfaces(classArray42);
        java.lang.reflect.Constructor constructor45 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass22, classArray42);
        java.lang.String str46 = org.mockito.asm.Type.getConstructorDescriptor(constructor45);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor45, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray49 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor45);
        boolean boolean50 = type15.equals((java.lang.Object) constructor45);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor45, (int) ' ');
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor45, 5);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        java.lang.Class<?> wildcardClass61 = enhancer55.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer62.setNamingPolicy(namingPolicy65);
        boolean boolean67 = enhancer62.getAttemptLoad();
        enhancer62.setInterceptDuringConstruction(false);
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        enhancer72.setNamingPolicy(namingPolicy73);
        enhancer72.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray80 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray77, true, true);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray77);
        enhancer72.setInterfaces(classArray81);
        enhancer62.setInterfaces(classArray81);
        java.lang.reflect.Constructor constructor84 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass61, classArray81);
        java.lang.String str85 = org.mockito.asm.Type.getConstructorDescriptor(constructor84);
        org.mockito.cglib.core.MethodInfo methodInfo87 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor84, (int) (byte) 10);
        java.lang.String str88 = org.mockito.asm.Type.getConstructorDescriptor(constructor84);
        org.mockito.cglib.core.MethodInfo methodInfo89 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor84);
        org.mockito.cglib.core.ClassInfo classInfo90 = methodInfo89.getClassInfo();
        org.mockito.asm.Type[] typeArray91 = methodInfo89.getExceptionTypes();
        java.lang.Object obj92 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor45, (java.lang.Object[]) typeArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature93 = new org.mockito.cglib.core.Signature("(Ljava.lang.Cloneable;Ljava.io.Serializable;)[Ljava.lang.Class;", type1, typeArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(Ljava.lang.Cloneable;Ljava.io.Serializable;)[Ljava.lang.Class;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "V" + "'", str4, "V");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 105 + "'", int6 == 105);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(constructor45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "()V" + "'", str46, "()V");
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(constructor84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "()V" + "'", str85, "()V");
        org.junit.Assert.assertNotNull(methodInfo87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "()V" + "'", str88, "()V");
        org.junit.Assert.assertNotNull(methodInfo89);
        org.junit.Assert.assertNotNull(classInfo90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(obj92);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 3);
        org.mockito.asm.Type[] typeArray36 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str40 = signature39.getName();
        org.mockito.asm.Type type41 = signature39.getReturnType();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type43, type44, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(SSS)S" + "'", str47, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(SSS)S" + "'", str48, "(SSS)S");
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass18 = enhancer12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str23 = signature22.getName();
        org.mockito.asm.Type type24 = signature22.getReturnType();
        org.mockito.asm.Type type25 = signature22.getReturnType();
        boolean boolean26 = classInfo19.equals((java.lang.Object) signature22);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer27.getStrategy();
        java.lang.Class<?> wildcardClass33 = enhancer27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        java.lang.String str35 = classInfo34.toString();
        org.mockito.asm.Type[] typeArray36 = classInfo34.getInterfaces();
        boolean boolean37 = signature22.equals((java.lang.Object) classInfo34);
        org.mockito.asm.Type type38 = classInfo34.getSuperType();
        int int39 = classInfo34.getModifiers();
        boolean boolean40 = signature2.equals((java.lang.Object) int39);
        java.lang.String str41 = signature2.getDescriptor();
        java.lang.String str42 = signature2.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str35, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(SSS)S" + "'", str41, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(SSS)S" + "'", str42, "(SSS)S");
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("D", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.String str7 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=D]" + "'", str7, "java.beans.PropertyDescriptor[name=D]");
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type[] typeArray4 = classInfo3.getInterfaces();
        org.mockito.asm.Type[] typeArray5 = classInfo3.getInterfaces();
        org.mockito.asm.Type[] typeArray6 = classInfo3.getInterfaces();
        org.mockito.asm.Type[] typeArray7 = classInfo3.getInterfaces();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str11 = signature10.getName();
        org.mockito.asm.Type type12 = signature10.getReturnType();
        org.mockito.asm.Type type13 = signature10.getReturnType();
        boolean boolean14 = classInfo7.equals((java.lang.Object) signature10);
        org.mockito.asm.Type type15 = classInfo7.getSuperType();
        java.lang.String str16 = classInfo7.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str16, "org.mockito.cglib.proxy.Enhancer");
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.String str35 = signature34.toString();
        java.lang.String str36 = signature34.getName();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<init>()V" + "'", str35, "<init>()V");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<init>" + "'", str36, "<init>");
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        enhancer0.setStrategy(generatorStrategy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("(SSS)S");
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=void]");
        java.lang.Object obj10 = propertyDescriptor3.getValue("java/lang/Class");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(SSS)S; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setShortDescription("double");
        propertyDescriptor3.setBound(true);
        boolean boolean18 = propertyDescriptor3.equals((java.lang.Object) "()L(SSS)[Ljava/lang/Class;;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setAttemptLoad(false);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy36);
        enhancer1.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        enhancer39.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader44 = enhancer39.getClassLoader();
        enhancer1.setClassLoader(classLoader44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method46 = org.mockito.cglib.core.ReflectUtils.findMethod("org.mockito.cglib.core.AbstractClassGenerator", classLoader44);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer8.getNamingPolicy();
        enhancer8.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer22.getAttemptLoad();
        enhancer22.setInterceptDuringConstruction(false);
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        enhancer32.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        enhancer32.setInterfaces(classArray41);
        enhancer22.setInterfaces(classArray41);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, true);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray48);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray48);
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray53);
        enhancer8.setInterfaces(classArray53);
        java.util.List list56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass4, classArray53, list56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(constructor54);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java.lang.Object", type2, typeArray12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class<?> wildcardClass17 = classArray16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        boolean boolean20 = classInfo18.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = classInfo18.toString();
        int int22 = classInfo18.getModifiers();
        org.mockito.asm.Type type23 = classInfo18.getSuperType();
        org.mockito.asm.Type type24 = classInfo18.getType();
        org.mockito.asm.Type[] typeArray25 = classInfo18.getInterfaces();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("V", type2, typeArray25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer27.setNamingPolicy(namingPolicy28);
        enhancer27.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray32);
        enhancer27.setInterfaces(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        boolean boolean39 = signature26.equals((java.lang.Object) strArray38);
        org.mockito.asm.Type type40 = signature26.getReturnType();
        java.lang.String str41 = signature26.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str11, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.lang.Class[]" + "'", str21, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1041 + "'", int22 == 1041);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)B" + "'", str41, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)B");
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Callback callback27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass21, callback27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(type26);
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/cglib/proxy/Enhancer");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 105);
        int int36 = methodInfo35.getModifiers();
        org.mockito.cglib.core.Signature signature37 = methodInfo35.getSignature();
        org.mockito.asm.Type[] typeArray38 = methodInfo35.getExceptionTypes();
        java.lang.String str39 = methodInfo35.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 105 + "'", int36 == 105);
        org.junit.Assert.assertNotNull(signature37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<init>()V" + "'", str39, "<init>()V");
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer3.setNamingPolicy(namingPolicy4);
        enhancer3.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        enhancer3.setInterfaces(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        int int16 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray19);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, false);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray28);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray19, methodArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = enhancer0.create(classArray12, (java.lang.Object[]) methodArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(methodArray31);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=Lhi!;]", "java.beans.PropertyDescriptor[name=void]");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 40");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/Class;" + "'", str6, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/Class;" + "'", str7, "[Ljava/lang/Class;");
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("(SSS)S");
        boolean boolean10 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V" + "'", str10, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(false);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.Object obj12 = propertyDescriptor3.getValue("[Ljava/beans/PropertyDescriptor;");
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=void]" + "'", str13, "java.beans.PropertyDescriptor[name=void]");
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) ' ');
        org.mockito.cglib.core.ClassInfo classInfo44 = methodInfo43.getClassInfo();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer45.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer45.getStrategy();
        java.lang.Class<?> wildcardClass51 = enhancer45.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer52.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        enhancer52.setNamingPolicy(namingPolicy55);
        boolean boolean57 = enhancer52.getAttemptLoad();
        enhancer52.setInterceptDuringConstruction(false);
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        enhancer62.setNamingPolicy(namingPolicy63);
        enhancer62.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray67);
        enhancer62.setInterfaces(classArray71);
        enhancer52.setInterfaces(classArray71);
        java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass51, classArray71);
        java.lang.String str75 = org.mockito.asm.Type.getConstructorDescriptor(constructor74);
        org.mockito.asm.Type[] typeArray76 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor74);
        org.mockito.asm.Type[] typeArray77 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor74);
        java.lang.String str78 = org.mockito.asm.Type.getConstructorDescriptor(constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74, 10);
        boolean boolean81 = methodInfo43.equals((java.lang.Object) methodInfo80);
        int int82 = methodInfo43.getModifiers();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(constructor74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "()V" + "'", str75, "()V");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "()V" + "'", str78, "()V");
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lva/lang/Object;", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        boolean boolean7 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer8.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = propertyDescriptorArray21.getClass();
        boolean boolean26 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str29, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classArray31);
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type14 = signature13.getReturnType();
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature13);
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "void" + "'", str16, "void");
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        boolean boolean4 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass1);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        boolean boolean10 = enhancer5.getAttemptLoad();
        enhancer5.setInterceptDuringConstruction(false);
        boolean boolean13 = enhancer5.getUseCache();
        boolean boolean14 = enhancer5.getAttemptLoad();
        enhancer5.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        enhancer17.setUseFactory(false);
        boolean boolean22 = enhancer17.getUseCache();
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer25.getStrategy();
        enhancer17.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, true, true);
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, false, true);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        enhancer38.setInterfaces(classArray62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer64.setCallbacks(callbackArray69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback75 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray76 = new org.mockito.cglib.proxy.Callback[] { callback75 };
        enhancer71.setCallbacks(callbackArray76);
        enhancer64.setCallbacks(callbackArray76);
        enhancer38.setCallbacks(callbackArray76);
        enhancer17.setCallbacks(callbackArray76);
        enhancer5.setCallbacks(callbackArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass1, callbackArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(callbackArray76);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Object[] objArray36 = null;
        java.lang.Object obj37 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        boolean boolean42 = methodInfo40.equals((java.lang.Object) 'a');
        java.lang.String str43 = methodInfo40.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<init>()V" + "'", str43, "<init>()V");
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer4.setNamingPolicy(namingPolicy5);
        enhancer4.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        enhancer4.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = enhancer4.getClassLoader();
        enhancer1.setClassLoader(classLoader13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findMethod("java/lang/Class", classLoader13);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        java.lang.String str10 = classInfo4.toString();
        org.mockito.asm.Type type11 = classInfo4.getType();
        java.lang.String str12 = type11.getDescriptor();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/Class;" + "'", str12, "[Ljava/lang/Class;");
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)S");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer2.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean10 = type1.equals((java.lang.Object) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        enhancer14.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        enhancer19.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer19.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback31 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray32 = new org.mockito.cglib.proxy.Callback[] { callback31 };
        enhancer27.setCallbacks(callbackArray32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback38 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray39 = new org.mockito.cglib.proxy.Callback[] { callback38 };
        enhancer34.setCallbacks(callbackArray39);
        enhancer27.setCallbacks(callbackArray39);
        enhancer19.setCallbacks(callbackArray39);
        enhancer14.setCallbacks(callbackArray39);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer44.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer44.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer44.getStrategy();
        java.lang.Class<?> wildcardClass50 = enhancer44.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass53 = type52.getClass();
        org.mockito.cglib.core.ClassInfo classInfo54 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class<?> wildcardClass59 = methodArray58.getClass();
        boolean boolean60 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass62 = type61.getClass();
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        int int68 = type66.getOpcode((int) (short) 1);
        java.lang.String str69 = type66.getDescriptor();
        int int71 = type66.getOpcode((int) (byte) 100);
        boolean boolean72 = signature65.equals((java.lang.Object) int71);
        java.lang.String str73 = signature65.getDescriptor();
        java.lang.Class<?> wildcardClass74 = signature65.getClass();
        java.lang.Class[] classArray75 = new java.lang.Class[] { wildcardClass50, wildcardClass53, wildcardClass59, wildcardClass62, wildcardClass74 };
        java.lang.String[] strArray76 = org.mockito.cglib.core.ReflectUtils.getNames(classArray75);
        int int77 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray75);
        enhancer14.setInterfaces(classArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method79 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass8, "hi!", classArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: hi!");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(callbackArray32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(callbackArray39);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "V" + "'", str69, "V");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 105 + "'", int71 == 105);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(SSS)S" + "'", str73, "(SSS)S");
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        java.lang.Class<?> wildcardClass22 = enhancer16.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        boolean boolean28 = enhancer23.getAttemptLoad();
        enhancer23.setInterceptDuringConstruction(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        enhancer33.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        enhancer33.setInterfaces(classArray42);
        enhancer23.setInterfaces(classArray42);
        java.lang.reflect.Constructor constructor45 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass22, classArray42);
        java.lang.String str46 = org.mockito.asm.Type.getConstructorDescriptor(constructor45);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor45);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor45, (int) (short) 10);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor45);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor45);
        java.lang.Object[] objArray52 = null;
        java.lang.Object obj53 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor45, objArray52);
        org.mockito.cglib.core.Signature signature54 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor45);
        boolean boolean55 = propertyDescriptor3.equals((java.lang.Object) signature54);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(constructor45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "()V" + "'", str46, "()V");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "()V" + "'", str50, "()V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, false, true);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray21);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, false, false);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = propertyDescriptorArray38.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass42);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, false, true);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray46);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray46);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray46);
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str54 = signature53.getDescriptor();
        java.lang.Class[] classArray55 = new java.lang.Class[] {};
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray55);
        java.lang.Class<?> wildcardClass58 = classArray57.getClass();
        org.mockito.cglib.core.ClassInfo classInfo59 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type60 = classInfo59.getSuperType();
        java.lang.String str61 = classInfo59.toString();
        org.mockito.asm.Type type62 = classInfo59.getSuperType();
        boolean boolean63 = signature53.equals((java.lang.Object) classInfo59);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer64.setNamingPolicy(namingPolicy65);
        enhancer64.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray69);
        enhancer64.setInterfaces(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray73);
        boolean boolean76 = classInfo59.equals((java.lang.Object) classArray73);
        java.lang.String[] strArray77 = org.mockito.cglib.core.ReflectUtils.getNames(classArray73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray78, true, true);
        java.lang.Class<?> wildcardClass82 = methodArray81.getClass();
        org.mockito.cglib.core.ClassInfo classInfo83 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass82);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, true, true);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray77, methodArray88);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray89);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(SSS)S" + "'", str54, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(classInfo59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.lang.Class[]" + "'", str61, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(classInfo83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str84, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("org.mockito.cglib.core.ReflectUtils$3", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str5, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str6, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        org.mockito.asm.Type[] typeArray37 = methodInfo36.getExceptionTypes();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        boolean boolean53 = enhancer38.getAttemptLoad();
        enhancer38.setUseCache(false);
        boolean boolean56 = methodInfo36.equals((java.lang.Object) enhancer38);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer61.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer61.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy66);
        enhancer38.setNamingPolicy(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        enhancer0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(false);
        enhancer6.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer11.setNamingPolicy(namingPolicy12);
        enhancer11.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, true, true);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray16);
        enhancer11.setInterfaces(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        enhancer6.setInterfaces(classArray20);
        enhancer0.setInterfaces(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setUseFactory(true);
        enhancer5.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer11.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = enhancer11.getClassLoader();
        org.mockito.cglib.proxy.Callback callback15 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray16 = new org.mockito.cglib.proxy.Callback[] { callback15 };
        enhancer11.setCallbacks(callbackArray16);
        enhancer5.setCallbacks(callbackArray16);
        enhancer5.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer21.setCallback(callback24);
        java.lang.Class[] classArray26 = new java.lang.Class[] {};
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class<?> wildcardClass29 = classArray28.getClass();
        enhancer21.setSuperclass((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        enhancer31.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer37.setCallbacks(callbackArray42);
        enhancer31.setCallbacks(callbackArray42);
        enhancer21.setCallbacks(callbackArray42);
        enhancer5.setCallbacks(callbackArray42);
        enhancer0.setCallbacks(callbackArray42);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer48.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        enhancer65.setNamingPolicy(namingPolicy66);
        enhancer65.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        enhancer65.setInterfaces(classArray74);
        enhancer55.setInterfaces(classArray74);
        java.lang.reflect.Constructor constructor77 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass54, classArray74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(callbackArray16);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(constructor77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature31 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class<?> wildcardClass36 = propertyDescriptorArray32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) methodArray43);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 12);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(signature31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(methodInfo46);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer8.getStrategy();
        enhancer0.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer0.setCallback(callback21);
        enhancer0.setUseFactory(true);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray25);
        int int28 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray27);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer33.setNamingPolicy(namingPolicy36);
        boolean boolean38 = enhancer33.getAttemptLoad();
        enhancer33.setInterceptDuringConstruction(false);
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer33.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer33.setCallbackFilter(callbackFilter46);
        boolean boolean48 = enhancer33.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass55 = enhancer49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str60 = signature59.getName();
        org.mockito.asm.Type type61 = signature59.getReturnType();
        org.mockito.asm.Type type62 = signature59.getReturnType();
        boolean boolean63 = classInfo56.equals((java.lang.Object) signature59);
        java.lang.Class[] classArray64 = new java.lang.Class[] {};
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray64);
        int int67 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray66);
        boolean boolean69 = signature59.equals((java.lang.Object) classArray66);
        enhancer33.setInterfaces(classArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj71 = enhancer0.create(classArray32, (java.lang.Object[]) classArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        boolean boolean12 = propertyDescriptor3.isHidden();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        enhancer14.setAttemptLoad(false);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer21.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy31);
        propertyDescriptor3.setValue("[Ljava/lang/Class;", (java.lang.Object) namingPolicy31);
        propertyDescriptor3.setDisplayName("(SSS)[Ljava/lang/Class;");
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        boolean boolean47 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer36.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor55 = propertyDescriptor3.createPropertyEditor((java.lang.Object) namingPolicy54);
        propertyDescriptor3.setPreferred(true);
        boolean boolean58 = propertyDescriptor3.isExpert();
        java.lang.String str59 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=(SSS)LV;; expert; propertyEditorClass=class [Ljava.lang.Class;]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNull(propertyEditor55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str59, "(SSS)[Ljava/lang/Class;");
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "()LV;" + "'", str18, "()LV;");
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("D", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        boolean boolean5 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "D" + "'", str4, "D");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, false, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass5, classArray16, callbackFilter19, callbackArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        boolean boolean10 = signature2.equals((java.lang.Object) enhancer3);
        java.lang.String str11 = signature2.toString();
        java.lang.String str12 = signature2.getDescriptor();
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        java.lang.Class<?> wildcardClass16 = classArray15.getClass();
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        boolean boolean19 = classInfo17.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = classInfo17.toString();
        org.mockito.asm.Type type21 = classInfo17.getSuperType();
        java.lang.String str22 = classInfo17.toString();
        int int23 = classInfo17.getModifiers();
        org.mockito.asm.Type type24 = classInfo17.getSuperType();
        org.mockito.asm.Type type25 = type24.getElementType();
        boolean boolean26 = signature2.equals((java.lang.Object) type25);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.Class[]Z" + "'", str11, "java.lang.Class[]Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Z" + "'", str12, "Z");
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1041 + "'", int23 == 1041);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        int int3 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray2);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray2);
        int int5 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray2);
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray2);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, false);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray18);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray19);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(false);
        java.lang.Class<?> wildcardClass10 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setUseFactory(true);
        boolean boolean15 = enhancer11.getUseCache();
        java.lang.ClassLoader classLoader16 = enhancer11.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        boolean boolean25 = enhancer17.getAttemptLoad();
        java.lang.Class[] classArray26 = new java.lang.Class[] {};
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class<?> wildcardClass29 = classArray28.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        enhancer17.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean32 = enhancer17.getUseCache();
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setUseFactory(true);
        enhancer35.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer41.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = enhancer41.getClassLoader();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer41.setCallbacks(callbackArray46);
        enhancer35.setCallbacks(callbackArray46);
        enhancer17.setCallbacks(callbackArray46);
        enhancer11.setCallbacks(callbackArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass10, callbackArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[Ljava/lang/Class;" + "'", str30, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray46);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer38.getStrategy();
        enhancer0.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer0.getStrategy();
        enhancer0.setUseCache(false);
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        java.lang.Class<?> wildcardClass61 = classArray60.getClass();
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = classInfo62.getSuperType();
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str67 = signature66.getName();
        org.mockito.asm.Type type68 = signature66.getReturnType();
        boolean boolean69 = classInfo62.equals((java.lang.Object) type68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class<?> wildcardClass74 = propertyDescriptorArray70.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass74);
        boolean boolean76 = classInfo62.equals((java.lang.Object) wildcardClass74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer0.getStrategy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray83 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray80, true, true);
        java.lang.Class<?> wildcardClass84 = propertyDescriptorArray80.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass84);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, false, true);
        java.lang.Class[] classArray89 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray88);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(methodArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("void", method16, method17);
        propertyDescriptor18.setExpert(false);
        propertyDescriptor18.setExpert(false);
        propertyDescriptor18.setValue("java.lang.Class[]", (java.lang.Object) "org/mockito/asm/Type");
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor18);
        boolean boolean27 = propertyDescriptor18.isPreferred();
        propertyDescriptor18.setPreferred(false);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        propertyDescriptor3.setShortDescription("Ljava/lang/Class;");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer22.getAttemptLoad();
        enhancer22.setInterceptDuringConstruction(false);
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        enhancer32.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        enhancer32.setInterfaces(classArray41);
        enhancer22.setInterfaces(classArray41);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray41);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor44);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray51);
        java.lang.Object obj54 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor44, (java.lang.Object[]) classArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor55 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray51);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(obj54);
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        java.util.List list17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list18 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass13, list17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        boolean boolean18 = classInfo4.equals((java.lang.Object) wildcardClass16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.util.List list20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list21 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass16, list20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class [Ljava.lang.Class;]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) ' ');
        org.mockito.cglib.core.ClassInfo classInfo44 = methodInfo43.getClassInfo();
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class<?> wildcardClass48 = classArray47.getClass();
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        boolean boolean51 = classInfo49.equals((java.lang.Object) (-1.0f));
        java.lang.String str52 = classInfo49.toString();
        int int53 = classInfo49.getModifiers();
        org.mockito.asm.Type type54 = classInfo49.getSuperType();
        java.lang.String str55 = type54.getClassName();
        boolean boolean56 = methodInfo43.equals((java.lang.Object) str55);
        org.mockito.cglib.core.Signature signature57 = methodInfo43.getSignature();
        org.mockito.asm.Type type58 = signature57.getReturnType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.lang.Class[]" + "'", str52, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1041 + "'", int53 == 1041);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.lang.Object" + "'", str55, "java.lang.Object");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(signature57);
        org.junit.Assert.assertNotNull(type58);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class39 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str15 = type14.toString();
        java.lang.String str16 = type14.getInternalName();
        propertyDescriptor3.setValue("", (java.lang.Object) str16);
        boolean boolean18 = propertyDescriptor3.isExpert();
        boolean boolean19 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Ljava/lang/Class;" + "'", str15, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=void; expert; values={java.beans.PropertyDescriptor[name=I]=false}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setExpert(false);
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setHidden(false);
        boolean boolean11 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "void" + "'", str8, "void");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer38.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        enhancer44.setAttemptLoad(false);
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer51.getStrategy();
        enhancer51.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader56 = enhancer51.getClassLoader();
        enhancer44.setClassLoader(classLoader56);
        enhancer38.setClassLoader(classLoader56);
        enhancer0.setClassLoader(classLoader56);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer62.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer62.getStrategy();
        java.lang.Class<?> wildcardClass68 = enhancer62.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        int int70 = type69.getDimensions();
        int int72 = type69.getOpcode(2);
        java.lang.String str73 = type69.getClassName();
        java.lang.String str74 = type69.getInternalName();
        java.lang.Class<?> wildcardClass75 = type69.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str73, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org/mockito/cglib/proxy/Enhancer" + "'", str74, "org/mockito/cglib/proxy/Enhancer");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        java.lang.String str10 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V" + "'", str10, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setUseFactory(true);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        enhancer14.setInterfaces(classArray17);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = enhancer0.create(classArray17, (java.lang.Object[]) methodArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(methodArray30);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.String str12 = signature2.getName();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        enhancer13.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer13.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer24.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer24.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer31.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer31.getAttemptLoad();
        enhancer31.setInterceptDuringConstruction(false);
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer31.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy41);
        enhancer13.setNamingPolicy(namingPolicy41);
        boolean boolean44 = signature2.equals((java.lang.Object) namingPolicy41);
        org.mockito.asm.Type type45 = signature2.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = type45.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.String str7 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        propertyDescriptor3.setDisplayName("(SSS)Ljava/lang/Object;");
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(false);
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type12, type13, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray15);
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray15);
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray15);
        java.lang.String str19 = type5.getClassName();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass23 = classArray22.getClass();
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        boolean boolean26 = classInfo24.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type27 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]", type5, typeArray28);
        java.lang.String str30 = type5.getClassName();
        java.lang.String str31 = type5.getInternalName();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass38 = enhancer32.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer39.setNamingPolicy(namingPolicy42);
        boolean boolean44 = enhancer39.getAttemptLoad();
        enhancer39.setInterceptDuringConstruction(false);
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer49.setNamingPolicy(namingPolicy50);
        enhancer49.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray54, true, true);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray54);
        enhancer49.setInterfaces(classArray58);
        enhancer39.setInterfaces(classArray58);
        java.lang.reflect.Constructor constructor61 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray58);
        java.lang.String str62 = org.mockito.asm.Type.getConstructorDescriptor(constructor61);
        org.mockito.asm.Type[] typeArray63 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.cglib.core.MethodInfo methodInfo65 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61, (int) (short) 10);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor61);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor61);
        org.mockito.cglib.core.MethodInfo methodInfo68 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray69);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray69);
        java.lang.Object obj75 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor61, (java.lang.Object[]) classArray74);
        org.mockito.cglib.core.Signature signature76 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor61);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61, (int) (short) 0);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61, 9);
        org.mockito.asm.Type[] typeArray81 = methodInfo80.getExceptionTypes();
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray81);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(SSS)S" + "'", str16, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)S" + "'", str17, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str18, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.lang.Class[]" + "'", str30, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[Ljava/lang/Class;" + "'", str31, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(constructor61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "()V" + "'", str62, "()V");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(methodInfo65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "()V" + "'", str66, "()V");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(methodInfo68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(signature76);
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "()[Ljava/lang/Class;" + "'", str82, "()[Ljava/lang/Class;");
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method18 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getUseCache();
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer10.getStrategy();
        enhancer10.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer10.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        boolean boolean23 = enhancer19.getUseCache();
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer19.setCallback(callback24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer26.setCallbacks(callbackArray31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer33.setNamingPolicy(namingPolicy36);
        enhancer33.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer33.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy40);
        enhancer19.setNamingPolicy(namingPolicy40);
        enhancer10.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        enhancer44.setUseCache(true);
        enhancer44.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer51.setNamingPolicy(namingPolicy52);
        enhancer51.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        enhancer51.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback64 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray65 = new org.mockito.cglib.proxy.Callback[] { callback64 };
        enhancer60.setCallbacks(callbackArray65);
        enhancer51.setCallbacks(callbackArray65);
        enhancer44.setCallbacks(callbackArray65);
        enhancer10.setCallbacks(callbackArray65);
        enhancer0.setCallbacks(callbackArray65);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        enhancer71.setUseFactory(true);
        enhancer71.setUseFactory(false);
        boolean boolean76 = enhancer71.getUseCache();
        enhancer71.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer79.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = null;
        enhancer79.setNamingPolicy(namingPolicy82);
        boolean boolean84 = enhancer79.getAttemptLoad();
        enhancer79.setInterceptDuringConstruction(false);
        enhancer79.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = enhancer79.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer79.getStrategy();
        enhancer71.setStrategy(generatorStrategy90);
        enhancer0.setStrategy(generatorStrategy90);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(callbackArray65);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str7, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) (short) 1);
        java.lang.String str3 = type0.getDescriptor();
        int int5 = type0.getOpcode((int) (byte) 100);
        boolean boolean7 = type0.equals((java.lang.Object) 'a');
        int int8 = type0.getSort();
        java.lang.String str9 = type0.toString();
        int int10 = type0.getSort();
        java.lang.String str11 = type0.getDescriptor();
        int int12 = type0.getSort();
        int int14 = type0.getOpcode((int) (short) 10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 105 + "'", int5 == 105);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "V" + "'", str9, "V");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 1, (byte) 10, (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        enhancer8.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer8.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        enhancer16.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        enhancer16.setInterfaces(classArray25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer27.getAttemptLoad();
        enhancer27.setInterceptDuringConstruction(false);
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer27.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer27.setCallbackFilter(callbackFilter40);
        boolean boolean42 = enhancer27.getUseCache();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        int int48 = type46.getOpcode((int) (short) 1);
        java.lang.String str49 = type46.getDescriptor();
        int int51 = type46.getOpcode((int) (byte) 100);
        boolean boolean52 = signature45.equals((java.lang.Object) int51);
        org.mockito.asm.Type[] typeArray53 = signature45.getArgumentTypes();
        java.lang.String str54 = signature45.toString();
        java.lang.String str55 = signature45.getName();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        enhancer56.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader61 = enhancer56.getClassLoader();
        boolean boolean62 = signature45.equals((java.lang.Object) classLoader61);
        enhancer27.setClassLoader(classLoader61);
        enhancer16.setClassLoader(classLoader61);
        enhancer8.setClassLoader(classLoader61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class66 = org.mockito.cglib.core.ReflectUtils.defineClass("S", byteArray7, classLoader61);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -1, 10, 1, 10, 100]");
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "V" + "'", str49, "V");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 105 + "'", int51 == 105);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(SSS)S" + "'", str54, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader3);
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method3 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str9, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer7.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = enhancer7.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer7.setCallbacks(callbackArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass3, callbackArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setUseFactory(true);
        boolean boolean10 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer6.setCallback(callback11);
        enhancer6.setUseCache(false);
        enhancer6.setUseFactory(false);
        enhancer6.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        enhancer19.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseFactory(true);
        enhancer24.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer24.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer32.setCallbacks(callbackArray37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer39.setCallbacks(callbackArray44);
        enhancer32.setCallbacks(callbackArray44);
        enhancer24.setCallbacks(callbackArray44);
        enhancer19.setCallbacks(callbackArray44);
        enhancer6.setCallbacks(callbackArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass4, callbackArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str5, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray44);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        org.mockito.asm.Type[] typeArray12 = classInfo4.getInterfaces();
        org.mockito.asm.Type type13 = classInfo4.getSuperType();
        int int15 = type13.getOpcode(18);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("void", method17, method18);
        propertyDescriptor19.setExpert(true);
        java.lang.reflect.Method method22 = propertyDescriptor19.getReadMethod();
        propertyDescriptor19.setBound(true);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor19.getPropertyType();
        boolean boolean26 = type13.equals((java.lang.Object) wildcardClass25);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        enhancer11.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer11.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        enhancer11.setInterfaces(classArray23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray26, true, true);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray26, false, true);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        enhancer11.setInterfaces(classArray35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer37.setCallbacks(callbackArray42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback48 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray49 = new org.mockito.cglib.proxy.Callback[] { callback48 };
        enhancer44.setCallbacks(callbackArray49);
        enhancer37.setCallbacks(callbackArray49);
        enhancer11.setCallbacks(callbackArray49);
        enhancer0.setCallbacks(callbackArray49);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(callbackArray49);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor38 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass9, classArray33);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str12, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/Class;" + "'", str7, "[Ljava/lang/Class;");
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray10 = null;
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer12.getAttemptLoad();
        enhancer12.setInterceptDuringConstruction(false);
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer12.getNamingPolicy();
        boolean boolean23 = enhancer12.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer24.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        enhancer12.setClassLoader(classLoader28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setAttemptLoad(false);
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer37.setNamingPolicy(namingPolicy40);
        boolean boolean42 = enhancer37.getAttemptLoad();
        enhancer37.setInterceptDuringConstruction(false);
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer37.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy47);
        enhancer12.setNamingPolicy(namingPolicy47);
        enhancer12.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setUseFactory(true);
        enhancer52.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer58.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer58.setCallbacks(callbackArray63);
        enhancer52.setCallbacks(callbackArray63);
        enhancer52.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback71 = null;
        enhancer68.setCallback(callback71);
        java.lang.Class[] classArray73 = new java.lang.Class[] {};
        java.lang.String[] strArray74 = org.mockito.cglib.core.ReflectUtils.getNames(classArray73);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class<?> wildcardClass76 = classArray75.getClass();
        enhancer68.setSuperclass((java.lang.Class) wildcardClass76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setUseFactory(true);
        enhancer78.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = null;
        enhancer84.setNamingPolicy(namingPolicy85);
        java.lang.ClassLoader classLoader87 = enhancer84.getClassLoader();
        org.mockito.cglib.proxy.Callback callback88 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray89 = new org.mockito.cglib.proxy.Callback[] { callback88 };
        enhancer84.setCallbacks(callbackArray89);
        enhancer78.setCallbacks(callbackArray89);
        enhancer68.setCallbacks(callbackArray89);
        enhancer52.setCallbacks(callbackArray89);
        enhancer12.setCallbacks(callbackArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj95 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass3, classArray10, callbackFilter11, callbackArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(callbackArray89);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list19 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass14, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(classInfo17);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer17.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer24.setNamingPolicy(namingPolicy27);
        boolean boolean29 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(false);
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer24.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy34);
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer37.setNamingPolicy(namingPolicy40);
        boolean boolean42 = enhancer37.getAttemptLoad();
        enhancer37.setInterceptDuringConstruction(false);
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer37.getNamingPolicy();
        boolean boolean48 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer49.setNamingPolicy(namingPolicy50);
        boolean boolean52 = enhancer49.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        enhancer37.setClassLoader(classLoader53);
        enhancer37.setAttemptLoad(true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass58 = type57.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        enhancer37.setSuperclass((java.lang.Class) wildcardClass58);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter61 = null;
        enhancer37.setCallbackFilter(callbackFilter61);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer63.setNamingPolicy(namingPolicy64);
        enhancer63.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer68.getStrategy();
        enhancer63.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback76 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray77 = new org.mockito.cglib.proxy.Callback[] { callback76 };
        enhancer72.setCallbacks(callbackArray77);
        enhancer63.setCallbacks(callbackArray77);
        enhancer37.setCallbacks(callbackArray77);
        java.lang.ClassLoader classLoader81 = enhancer37.getClassLoader();
        enhancer0.setClassLoader(classLoader81);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(callbackArray77);
        org.junit.Assert.assertNotNull(classLoader81);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("LV;");
        boolean boolean11 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer; propertyEditorClass=class org.mockito.asm.Type]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=I; preferred]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=void; hidden]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=void; hidden]");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=void;" + "'", str2, "Lava.beans.PropertyDescriptor[name=void;");
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setAttemptLoad(false);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy36);
        enhancer1.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        enhancer39.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader44 = enhancer39.getClassLoader();
        enhancer1.setClassLoader(classLoader44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.findConstructor("void", classLoader44);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("LLV;;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        boolean boolean30 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray31);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.lang.String[] strArray37 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, false, false);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray37, methodArray44);
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray36, methodArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray36);
        org.mockito.cglib.proxy.Callback callback48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass6, classArray47, callback48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=void; expert]" + "'", str7, "java.beans.PropertyDescriptor[name=void; expert]");
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        int int8 = type7.getSize();
        org.mockito.asm.Type type9 = type7.getElementType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass42 = enhancer36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.lang.String str44 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray45 = classInfo43.getInterfaces();
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("java.lang.Object", type35, typeArray45);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        boolean boolean53 = classInfo51.equals((java.lang.Object) (-1.0f));
        java.lang.String str54 = classInfo51.toString();
        int int55 = classInfo51.getModifiers();
        org.mockito.asm.Type type56 = classInfo51.getSuperType();
        org.mockito.asm.Type type57 = classInfo51.getType();
        org.mockito.asm.Type[] typeArray58 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("V", type35, typeArray58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer60.setNamingPolicy(namingPolicy61);
        enhancer60.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        enhancer60.setInterfaces(classArray69);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        boolean boolean72 = signature59.equals((java.lang.Object) strArray71);
        java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) strArray71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type76 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type77, type78, type79 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str44, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.lang.Class[]" + "'", str54, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1041 + "'", int55 == 1041);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(SSS)S" + "'", str81, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(SSS)LV;" + "'", str82, "(SSS)LV;");
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; bound; propertyEditorClass=class [Ljava.lang.Class;]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        int int6 = type5.getSort();
        int int8 = type5.getOpcode((int) (byte) -1);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer9.setNamingPolicy(namingPolicy10);
        enhancer9.setUseCache(true);
        enhancer9.setSerialVersionUID((java.lang.Long) 10L);
        enhancer9.setUseFactory(true);
        boolean boolean18 = type5.equals((java.lang.Object) true);
        java.lang.String str19 = type5.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Ljava/lang/Object;" + "'", str19, "Ljava/lang/Object;");
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("ava.beans.PropertyDescriptor[name=void");
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=; shortDescription=java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class [Ljava.lang.Class;]]");
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method4 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        enhancer7.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer7.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer15.setCallbacks(callbackArray20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback26 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray27 = new org.mockito.cglib.proxy.Callback[] { callback26 };
        enhancer22.setCallbacks(callbackArray27);
        enhancer15.setCallbacks(callbackArray27);
        enhancer7.setCallbacks(callbackArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer7.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        enhancer32.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer32.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        enhancer32.setInterfaces(classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, true);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer32.setInterfaces(classArray56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer58.setCallbacks(callbackArray63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer65.setCallbacks(callbackArray70);
        enhancer58.setCallbacks(callbackArray70);
        enhancer32.setCallbacks(callbackArray70);
        enhancer7.setCallbacks(callbackArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass6, callbackArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(callbackArray27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray70);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.util.List list15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list16 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass9, list15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str11, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Object obj7 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setName("()D");
        java.lang.String str10 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setReadMethod(method13);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo2 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class<?> wildcardClass12 = propertyDescriptorArray8.getClass();
        boolean boolean13 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, true, true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptorArray16.getClass();
        boolean boolean21 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer24.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class<?> wildcardClass33 = methodArray32.getClass();
        enhancer24.setSuperclass((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class<?> wildcardClass39 = methodArray38.getClass();
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.Class<?> wildcardClass46 = propertyDescriptorArray42.getClass();
        boolean boolean47 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.String str50 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass5, wildcardClass12, wildcardClass20, wildcardClass33, wildcardClass39, wildcardClass46 };
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        org.mockito.cglib.proxy.Callback callback56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass1, classArray52, callback56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(classInfo2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str41, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str50, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        enhancer13.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer13.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        int int26 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray25);
        enhancer13.setInterfaces(classArray25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, false, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        enhancer13.setInterfaces(classArray37);
        enhancer13.setUseCache(false);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;]", (java.lang.Object) enhancer13);
        enhancer13.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean44 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setUseFactory(true);
        enhancer45.setUseFactory(false);
        boolean boolean50 = enhancer45.getUseCache();
        enhancer45.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer45.getStrategy();
        enhancer13.setStrategy(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("void", method6, method7);
        propertyDescriptor8.setExpert(false);
        propertyDescriptor8.setBound(false);
        boolean boolean13 = propertyDescriptor8.isPreferred();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor8.setReadMethod(method14);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type21 = classInfo20.getType();
        boolean boolean23 = classInfo20.equals((java.lang.Object) 0.0f);
        org.mockito.asm.Type type24 = classInfo20.getSuperType();
        org.mockito.asm.Type[] typeArray25 = classInfo20.getInterfaces();
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor8.createPropertyEditor((java.lang.Object) typeArray25);
        java.beans.PropertyEditor propertyEditor27 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor8);
        boolean boolean28 = propertyDescriptor8.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertNull(propertyEditor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.lang.String str8 = classInfo7.toString();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptorArray9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        boolean boolean15 = classInfo7.equals((java.lang.Object) propertyDescriptorArray14);
        java.lang.String str16 = classInfo7.toString();
        java.lang.Object obj17 = null;
        boolean boolean18 = classInfo7.equals(obj17);
        int int19 = classInfo7.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str8, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str16, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        boolean boolean5 = enhancer1.getUseCache();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        boolean boolean14 = enhancer8.getUseCache();
        boolean boolean15 = enhancer8.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        enhancer16.setUseCache(true);
        enhancer16.setSerialVersionUID((java.lang.Long) 10L);
        enhancer16.setUseFactory(true);
        java.lang.ClassLoader classLoader25 = enhancer16.getClassLoader();
        enhancer8.setClassLoader(classLoader25);
        enhancer1.setClassLoader(classLoader25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.findConstructor("org/mockito/asm/Type", classLoader25);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = methodInfo31.getExceptionTypes();
        java.lang.Class<?> wildcardClass33 = methodInfo31.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray34);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Callback callback42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass33, classArray40, callback42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean15 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str7 = signature6.getName();
        org.mockito.asm.Type type8 = signature6.getReturnType();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray13 = new org.mockito.asm.Type[] { type10, type11, type12 };
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray13);
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray13);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class<?> wildcardClass19 = classArray18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        boolean boolean22 = classInfo20.equals((java.lang.Object) (-1.0f));
        java.lang.String str23 = classInfo20.toString();
        java.lang.String str24 = classInfo20.toString();
        int int25 = classInfo20.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class<?> wildcardClass34 = classArray33.getClass();
        enhancer26.setSuperclass((java.lang.Class) wildcardClass34);
        boolean boolean36 = classInfo20.equals((java.lang.Object) wildcardClass34);
        org.mockito.asm.Type type37 = classInfo20.getSuperType();
        org.mockito.asm.Type type38 = classInfo20.getType();
        org.mockito.asm.Type type39 = classInfo20.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        java.lang.Class<?> wildcardClass46 = enhancer40.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer47.setNamingPolicy(namingPolicy50);
        boolean boolean52 = enhancer47.getAttemptLoad();
        enhancer47.setInterceptDuringConstruction(false);
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer57.setNamingPolicy(namingPolicy58);
        enhancer57.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, true);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray62);
        enhancer57.setInterfaces(classArray66);
        enhancer47.setInterfaces(classArray66);
        java.lang.reflect.Constructor constructor69 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass46, classArray66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        java.lang.Object obj75 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor69, (java.lang.Object[]) propertyDescriptorArray70);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor69, 4);
        int int78 = methodInfo77.getModifiers();
        org.mockito.cglib.core.Signature signature79 = methodInfo77.getSignature();
        org.mockito.asm.Type[] typeArray80 = methodInfo77.getExceptionTypes();
        boolean boolean81 = type39.equals((java.lang.Object) typeArray80);
        org.mockito.cglib.core.Signature signature82 = new org.mockito.cglib.core.Signature("V", type8, typeArray80);
        org.mockito.cglib.core.Signature signature83 = new org.mockito.cglib.core.Signature("", type2, typeArray80);
        int int85 = type2.getOpcode(97);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(SSS)S" + "'", str14, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(SSS)S" + "'", str15, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.Class[]" + "'", str23, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.lang.Class[]" + "'", str24, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1041 + "'", int25 == 1041);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(constructor69);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(signature79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 102 + "'", int85 == 102);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("boolean");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        enhancer0.setStrategy(generatorStrategy6);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer0.setInterfaces(classArray18);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        java.lang.Object[] objArray33 = null;
        java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray33);
        org.mockito.cglib.core.Signature signature35 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(signature35);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        enhancer32.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer32.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        enhancer32.setInterfaces(classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, true);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer32.setInterfaces(classArray56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer58.setCallbacks(callbackArray63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer65.setCallbacks(callbackArray70);
        enhancer58.setCallbacks(callbackArray70);
        enhancer32.setCallbacks(callbackArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass6, callbackArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray70);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = classInfo9.getSuperType();
        java.lang.String str11 = classInfo9.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo9.getInterfaces();
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        java.lang.Class<?> wildcardClass16 = classArray15.getClass();
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        boolean boolean19 = classInfo17.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = classInfo17.toString();
        org.mockito.asm.Type type21 = classInfo17.getSuperType();
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        boolean boolean24 = classInfo9.equals((java.lang.Object) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        java.beans.PropertyEditor propertyEditor26 = propertyDescriptor3.createPropertyEditor((java.lang.Object) wildcardClass22);
        boolean boolean27 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        org.mockito.cglib.proxy.Callback callback28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass22, callback28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.Class[]" + "'", str11, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propertyEditor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        propertyDescriptor3.setDisplayName("I(SSS)S");
        java.lang.String str14 = propertyDescriptor3.getName();
        java.lang.String str15 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=void; displayName=I(SSS)S; values={char=char}]" + "'", str15, "java.beans.PropertyDescriptor[name=void; displayName=I(SSS)S; values={char=char}]");
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setUseFactory(true);
        enhancer4.setUseFactory(false);
        boolean boolean9 = enhancer4.getUseCache();
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer12.getAttemptLoad();
        enhancer12.setInterceptDuringConstruction(false);
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer12.getStrategy();
        enhancer4.setStrategy(generatorStrategy23);
        boolean boolean25 = type1.equals((java.lang.Object) enhancer4);
        boolean boolean26 = enhancer4.getUseCache();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[Ljava/lang/Class;" + "'", str2, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[Ljava/lang/Class;" + "'", str3, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass15 = classArray14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        boolean boolean18 = classInfo16.equals((java.lang.Object) (-1.0f));
        java.lang.String str19 = classInfo16.toString();
        java.lang.String str20 = classInfo16.toString();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        java.lang.String str22 = classInfo16.toString();
        boolean boolean23 = signature2.equals((java.lang.Object) classInfo16);
        org.mockito.asm.Type type24 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class<?> wildcardClass31 = enhancer25.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer32.getAttemptLoad();
        enhancer32.setInterceptDuringConstruction(false);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        enhancer42.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer42.setInterfaces(classArray51);
        enhancer32.setInterfaces(classArray51);
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray51);
        java.lang.String str55 = org.mockito.asm.Type.getConstructorDescriptor(constructor54);
        org.mockito.asm.Type[] typeArray56 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor54);
        org.mockito.cglib.core.MethodInfo methodInfo58 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54, (int) (short) 10);
        java.lang.String str59 = org.mockito.asm.Type.getConstructorDescriptor(constructor54);
        org.mockito.asm.Type[] typeArray60 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor54);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("void", method63, method64);
        propertyDescriptor65.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration68 = propertyDescriptor65.attributeNames();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("void", method71, method72);
        propertyDescriptor73.setExpert(false);
        java.lang.String str76 = propertyDescriptor73.getName();
        java.lang.String str77 = propertyDescriptor73.getName();
        boolean boolean78 = propertyDescriptor73.isExpert();
        java.lang.String str79 = propertyDescriptor73.getName();
        propertyDescriptor73.setDisplayName("(SSS)S");
        boolean boolean82 = propertyDescriptor73.isExpert();
        propertyDescriptor65.setValue("Lhi!;", (java.lang.Object) boolean82);
        boolean boolean84 = methodInfo61.equals((java.lang.Object) "Lhi!;");
        int int85 = methodInfo61.getModifiers();
        boolean boolean86 = signature2.equals((java.lang.Object) methodInfo61);
        org.mockito.asm.Type[] typeArray87 = methodInfo61.getExceptionTypes();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(constructor54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "()V" + "'", str55, "()V");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(methodInfo58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()V" + "'", str59, "()V");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(strEnumeration68);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "void" + "'", str76, "void");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "void" + "'", str77, "void");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "void" + "'", str79, "void");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(typeArray87);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass6, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=I; constrained]", method1, method2);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        boolean boolean6 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.core.Signature signature9 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        int int12 = type10.getOpcode((int) (short) 1);
        java.lang.String str13 = type10.getDescriptor();
        int int15 = type10.getOpcode((int) (byte) 100);
        boolean boolean16 = signature9.equals((java.lang.Object) int15);
        org.mockito.asm.Type[] typeArray17 = signature9.getArgumentTypes();
        java.lang.String str18 = signature9.toString();
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class<?> wildcardClass22 = classArray21.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        boolean boolean25 = classInfo23.equals((java.lang.Object) (-1.0f));
        java.lang.String str26 = classInfo23.toString();
        java.lang.String str27 = classInfo23.toString();
        org.mockito.asm.Type type28 = classInfo23.getSuperType();
        java.lang.String str29 = classInfo23.toString();
        boolean boolean30 = signature9.equals((java.lang.Object) classInfo23);
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor3.createPropertyEditor((java.lang.Object) boolean30);
        java.lang.String str32 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=I]");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "V" + "'", str13, "V");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 105 + "'", int15 == 105);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(SSS)S" + "'", str18, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.lang.Class[]" + "'", str26, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.lang.Class[]" + "'", str27, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.lang.Class[]" + "'", str29, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "void" + "'", str32, "void");
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        boolean boolean18 = classInfo4.equals((java.lang.Object) wildcardClass16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class<?> wildcardClass31 = enhancer25.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer32.getAttemptLoad();
        enhancer32.setInterceptDuringConstruction(false);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        enhancer42.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer42.setInterfaces(classArray51);
        enhancer32.setInterfaces(classArray51);
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray51);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        int int56 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method57 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass16, "java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]", classArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str21, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str23, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(constructor54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor10.setWriteMethod(method18);
        java.lang.reflect.Method method20 = propertyDescriptor10.getWriteMethod();
        java.lang.String str21 = propertyDescriptor10.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor[name=Z]" + "'", str21, "java.beans.PropertyDescriptor[name=Z]");
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        int int8 = classInfo4.getModifiers();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        java.lang.String str10 = type9.getClassName();
        org.mockito.asm.Type type11 = type9.getElementType();
        int int12 = type11.getSize();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1041 + "'", int8 == 1041);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Object" + "'", str10, "java.lang.Object");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type40 = classInfo39.getSuperType();
        org.mockito.asm.Type[] typeArray41 = classInfo39.getInterfaces();
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method43 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass3, "", classArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(classArray42);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer9.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        boolean boolean21 = enhancer16.getAttemptLoad();
        enhancer16.setInterceptDuringConstruction(false);
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer16.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy26);
        enhancer1.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback34 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray35 = new org.mockito.cglib.proxy.Callback[] { callback34 };
        enhancer30.setCallbacks(callbackArray35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer37.setNamingPolicy(namingPolicy40);
        enhancer37.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer37.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy44);
        enhancer1.setNamingPolicy(namingPolicy44);
        enhancer1.setSerialVersionUID((java.lang.Long) 1L);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.Class<?> wildcardClass53 = propertyDescriptorArray49.getClass();
        boolean boolean54 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        boolean boolean57 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass53);
        java.lang.ClassLoader classLoader60 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method61 = org.mockito.cglib.core.ReflectUtils.findMethod("LV;", classLoader60);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(callbackArray35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str56, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        int int6 = classInfo5.getModifiers();
        org.mockito.asm.Type type7 = classInfo5.getSuperType();
        java.lang.String str8 = classInfo5.toString();
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1041 + "'", int6 == 1041);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.reflect.Method[]" + "'", str8, "java.lang.reflect.Method[]");
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = methodInfo31.getExceptionTypes();
        boolean boolean34 = methodInfo31.equals((java.lang.Object) "V");
        org.mockito.cglib.core.Signature signature35 = methodInfo31.getSignature();
        org.mockito.cglib.core.Signature signature36 = methodInfo31.getSignature();
        java.lang.Object obj37 = null;
        boolean boolean38 = signature36.equals(obj37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertNotNull(signature36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(false);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass16);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        boolean boolean20 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        boolean boolean22 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.beans.PropertyDescriptor;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str21, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer38.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        enhancer44.setAttemptLoad(false);
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer51.getStrategy();
        enhancer51.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader56 = enhancer51.getClassLoader();
        enhancer44.setClassLoader(classLoader56);
        enhancer38.setClassLoader(classLoader56);
        enhancer0.setClassLoader(classLoader56);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer62.setNamingPolicy(namingPolicy65);
        boolean boolean67 = enhancer62.getAttemptLoad();
        enhancer62.setInterceptDuringConstruction(false);
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer62.getNamingPolicy();
        boolean boolean73 = enhancer62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer62.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer75.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        enhancer75.setNamingPolicy(namingPolicy78);
        enhancer75.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = enhancer75.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer75.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy83);
        enhancer0.setNamingPolicy(namingPolicy83);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer38.getStrategy();
        enhancer0.setStrategy(generatorStrategy53);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        java.lang.Class[] classArray57 = new java.lang.Class[] {};
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class<?> wildcardClass60 = classArray59.getClass();
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        boolean boolean63 = classInfo61.equals((java.lang.Object) (-1.0f));
        java.lang.String str64 = classInfo61.toString();
        java.lang.String str65 = classInfo61.toString();
        int int66 = classInfo61.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer67.setCallback(callback70);
        java.lang.Class[] classArray72 = new java.lang.Class[] {};
        java.lang.String[] strArray73 = org.mockito.cglib.core.ReflectUtils.getNames(classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class<?> wildcardClass75 = classArray74.getClass();
        enhancer67.setSuperclass((java.lang.Class) wildcardClass75);
        boolean boolean77 = classInfo61.equals((java.lang.Object) wildcardClass75);
        org.mockito.asm.Type[] typeArray78 = classInfo61.getInterfaces();
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray78);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.lang.Class[]" + "'", str64, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.lang.Class[]" + "'", str65, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1041 + "'", int66 == 1041);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(classArray79);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) '4');
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        enhancer44.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        enhancer44.setInterfaces(classArray53);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass57 = type56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray58, true, true);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray61);
        java.lang.Object obj63 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor36, (java.lang.Object[]) methodArray62);
        java.lang.String str64 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "()V" + "'", str64, "()V");
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        java.lang.Object[] objArray33 = null;
        java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray33);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 0);
        java.lang.String str38 = methodInfo37.toString();
        org.mockito.asm.Type[] typeArray39 = methodInfo37.getExceptionTypes();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<init>()V" + "'", str38, "<init>()V");
        org.junit.Assert.assertNotNull(typeArray39);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        enhancer0.setInterfaces(classArray39);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        boolean boolean13 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        enhancer20.setAttemptLoad(false);
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader32 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        enhancer14.setClassLoader(classLoader32);
        enhancer1.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        boolean boolean47 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        enhancer1.setClassLoader(classLoader52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method55 = org.mockito.cglib.core.ReflectUtils.findMethod(")LV", classLoader52);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.asm.Type", method1, method2);
        propertyDescriptor3.setDisplayName("");
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        java.lang.reflect.Constructor constructor0 = null;
        java.beans.PropertyDescriptor[] propertyDescriptorArray1 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, true, true);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray1);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray1);
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, false, true);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray1);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        int int16 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray13);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, true, true);
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, false, false);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray17, methodArray24);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, true, true);
        java.lang.Class<?> wildcardClass31 = propertyDescriptorArray27.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, false, true);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray35);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray35);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer39.setNamingPolicy(namingPolicy40);
        enhancer39.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        enhancer39.setInterfaces(classArray48);
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.lang.Class<?> wildcardClass55 = propertyDescriptorArray51.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass55);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, false, true);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray59);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray59);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) methodArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray1);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        java.lang.Class<?> wildcardClass38 = namingPolicy35.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.util.List list41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list42 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass38, list41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/cglib/core/DefaultNamingPolicy" + "'", str39, "org/mockito/cglib/core/DefaultNamingPolicy");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/cglib/core/DefaultNamingPolicy" + "'", str40, "org/mockito/cglib/core/DefaultNamingPolicy");
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str6, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass14);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer19.getAttemptLoad();
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        enhancer24.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader29 = enhancer24.getClassLoader();
        enhancer19.setClassLoader(classLoader29);
        enhancer19.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer19.setCallback(callback33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer35.setNamingPolicy(namingPolicy36);
        enhancer35.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        enhancer35.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = enhancer35.getClassLoader();
        enhancer19.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer46.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer46.getStrategy();
        java.lang.Class<?> wildcardClass52 = enhancer46.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer53.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        enhancer53.setNamingPolicy(namingPolicy56);
        boolean boolean58 = enhancer53.getAttemptLoad();
        enhancer53.setInterceptDuringConstruction(false);
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer63.setNamingPolicy(namingPolicy64);
        enhancer63.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray68, true, true);
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray68);
        enhancer63.setInterfaces(classArray72);
        enhancer53.setInterfaces(classArray72);
        java.lang.reflect.Constructor constructor75 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray72);
        int int76 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray72);
        enhancer19.setInterfaces(classArray72);
        java.lang.Object[] objArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj79 = enhancer0.create(classArray72, objArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(constructor75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) -1);
        org.mockito.cglib.core.Signature signature43 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 1041);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.ClassInfo classInfo47 = methodInfo46.getClassInfo();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(signature43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(classInfo47);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        org.mockito.asm.Type[] typeArray12 = signature2.getArgumentTypes();
        boolean boolean14 = signature2.equals((java.lang.Object) 102);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        int int5 = type3.getOpcode(8);
        java.lang.String str6 = type3.getClassName();
        int int8 = type3.getOpcode(26);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "short" + "'", str6, "short");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        int int9 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray8);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 10);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Object[] objArray49 = null;
        java.lang.Object obj50 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray49);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = enhancer0.create(classArray8, (java.lang.Object[]) typeArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        boolean boolean12 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setAttemptLoad(false);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader31 = enhancer26.getClassLoader();
        enhancer19.setClassLoader(classLoader31);
        enhancer13.setClassLoader(classLoader31);
        enhancer0.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer35.getNamingPolicy();
        boolean boolean46 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = enhancer47.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        enhancer35.setClassLoader(classLoader51);
        enhancer0.setClassLoader(classLoader51);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer0.setCallbackFilter(callbackFilter54);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("void", method10, method11);
        propertyDescriptor12.setExpert(false);
        java.lang.String str15 = propertyDescriptor12.getName();
        java.lang.String str16 = propertyDescriptor12.getName();
        boolean boolean17 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setValue("char", (java.lang.Object) "char");
        java.util.Enumeration<java.lang.String> strEnumeration21 = propertyDescriptor12.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration22 = propertyDescriptor12.attributeNames();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer24.setNamingPolicy(namingPolicy27);
        boolean boolean29 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(false);
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer24.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer37.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer37.getStrategy();
        enhancer37.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer37.getStrategy();
        enhancer24.setStrategy(generatorStrategy45);
        propertyDescriptor12.setValue("(SSS)[Ljava/lang/Class;", (java.lang.Object) generatorStrategy45);
        propertyDescriptor3.setValue("Lava.beans.PropertyDescriptor[name=void;", (java.lang.Object) "(SSS)[Ljava/lang/Class;");
        boolean boolean49 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "void" + "'", str16, "void");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strEnumeration21);
        org.junit.Assert.assertNotNull(strEnumeration22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        boolean boolean22 = enhancer11.getAttemptLoad();
        boolean boolean23 = enhancer11.getUseCache();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer26.setNamingPolicy(namingPolicy27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class<?> wildcardClass35 = methodArray34.getClass();
        enhancer26.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean37 = enhancer26.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer26.getStrategy();
        enhancer11.setStrategy(generatorStrategy38);
        enhancer0.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer49.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer56.setNamingPolicy(namingPolicy59);
        boolean boolean61 = enhancer56.getAttemptLoad();
        enhancer56.setInterceptDuringConstruction(false);
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer56.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy66);
        enhancer41.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer41.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback74 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray75 = new org.mockito.cglib.proxy.Callback[] { callback74 };
        enhancer70.setCallbacks(callbackArray75);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer77.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        enhancer77.setNamingPolicy(namingPolicy80);
        enhancer77.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer77.getNamingPolicy();
        enhancer70.setNamingPolicy(namingPolicy84);
        enhancer41.setNamingPolicy(namingPolicy84);
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader88 = enhancer87.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = enhancer87.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = null;
        enhancer87.setNamingPolicy(namingPolicy90);
        enhancer87.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = enhancer87.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer95 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader96 = enhancer95.getClassLoader();
        enhancer87.setClassLoader(classLoader96);
        enhancer41.setClassLoader(classLoader96);
        enhancer0.setClassLoader(classLoader96);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(callbackArray75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Class;", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("Z()S");
        java.lang.String str7 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=Z()S]" + "'", str7, "java.beans.PropertyDescriptor[name=Z()S]");
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        boolean boolean7 = enhancer2.getAttemptLoad();
        enhancer2.setInterceptDuringConstruction(false);
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer2.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer2.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer2.setCallbackFilter(callbackFilter15);
        boolean boolean17 = enhancer2.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer18.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        java.lang.Class<?> wildcardClass24 = enhancer18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str29 = signature28.getName();
        org.mockito.asm.Type type30 = signature28.getReturnType();
        org.mockito.asm.Type type31 = signature28.getReturnType();
        boolean boolean32 = classInfo25.equals((java.lang.Object) signature28);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        boolean boolean38 = signature28.equals((java.lang.Object) classArray35);
        enhancer2.setInterfaces(classArray35);
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor41 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass1, classArray35);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)Ljava/lang/Object;");
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray3, true, true);
        java.lang.Class<?> wildcardClass7 = propertyDescriptorArray3.getClass();
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        int int13 = type12.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer31.setNamingPolicy(namingPolicy32);
        enhancer31.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        enhancer31.setInterfaces(classArray40);
        enhancer21.setInterfaces(classArray40);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray44);
        java.lang.Object obj49 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor43, (java.lang.Object[]) propertyDescriptorArray44);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor43, 4);
        int int52 = methodInfo51.getModifiers();
        int int53 = methodInfo51.getModifiers();
        org.mockito.cglib.core.Signature signature54 = methodInfo51.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo55 = methodInfo51.getClassInfo();
        org.mockito.asm.Type[] typeArray56 = methodInfo51.getExceptionTypes();
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("", type12, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray56);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(methodArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str11, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "()Ljava/lang/Object;" + "'", str58, "()Ljava/lang/Object;");
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass4, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str8, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer7.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        enhancer18.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer18.getClassLoader();
        enhancer13.setClassLoader(classLoader23);
        enhancer7.setClassLoader(classLoader23);
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer31.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer31.getAttemptLoad();
        enhancer31.setInterceptDuringConstruction(false);
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer41.setNamingPolicy(namingPolicy42);
        enhancer41.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        enhancer41.setInterfaces(classArray50);
        enhancer31.setInterfaces(classArray50);
        int int53 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = methodInfo31.getExceptionTypes();
        boolean boolean34 = methodInfo31.equals((java.lang.Object) "V");
        org.mockito.cglib.core.Signature signature35 = methodInfo31.getSignature();
        java.lang.String str36 = signature35.getName();
        java.lang.String str37 = signature35.getName();
        java.lang.Object obj38 = null;
        boolean boolean39 = signature35.equals(obj38);
        java.lang.String str40 = signature35.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<init>" + "'", str36, "<init>");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<init>" + "'", str37, "<init>");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<init>()V" + "'", str40, "<init>()V");
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setInterceptDuringConstruction(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        boolean boolean22 = enhancer14.getAttemptLoad();
        enhancer14.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        enhancer25.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer25.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer25.setInterfaces(classArray37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer48.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer55.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy65);
        enhancer40.setNamingPolicy(namingPolicy65);
        enhancer25.setNamingPolicy(namingPolicy65);
        enhancer14.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader70 = enhancer14.getClassLoader();
        java.lang.ClassLoader classLoader71 = enhancer14.getClassLoader();
        enhancer1.setClassLoader(classLoader71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method73 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/cglib/proxy/Enhancer", classLoader71);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer6.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray1 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, true, true);
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, false, false);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray7);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        enhancer12.setSerialVersionUID((java.lang.Long) 10L);
        enhancer12.setAttemptLoad(false);
        enhancer12.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        enhancer23.setSerialVersionUID((java.lang.Long) 10L);
        enhancer23.setAttemptLoad(false);
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray34 = new java.lang.Class[] {};
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class<?> wildcardClass37 = classArray36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass37);
        boolean boolean40 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer41.setNamingPolicy(namingPolicy42);
        enhancer41.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer46.setNamingPolicy(namingPolicy47);
        enhancer46.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer51.getStrategy();
        enhancer46.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback59 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray60 = new org.mockito.cglib.proxy.Callback[] { callback59 };
        enhancer55.setCallbacks(callbackArray60);
        enhancer46.setCallbacks(callbackArray60);
        enhancer41.setCallbacks(callbackArray60);
        enhancer23.setCallbacks(callbackArray60);
        enhancer12.setCallbacks(callbackArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass9, callbackArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray1);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str11, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(callbackArray60);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class17 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 10, (byte) -1, (byte) 0, (byte) 100, (byte) 1 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setUseFactory(true);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        enhancer11.setInterfaces(classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        enhancer8.setInterfaces(classArray17);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setUseFactory(true);
        boolean boolean25 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer21.setCallback(callback26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer28.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer45.setNamingPolicy(namingPolicy46);
        enhancer45.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        enhancer45.setInterfaces(classArray54);
        enhancer35.setInterfaces(classArray54);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass34, classArray54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        enhancer21.setSuperclass((java.lang.Class) wildcardClass34);
        java.lang.ClassLoader classLoader60 = enhancer21.getClassLoader();
        enhancer8.setClassLoader(classLoader60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class62 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(SSS)S; bound]", byteArray7, classLoader60);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 10, -1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        org.mockito.asm.Type type10 = classInfo4.getSuperType();
        java.lang.String str11 = type10.getDescriptor();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ljava/lang/Object;" + "'", str11, "Ljava/lang/Object;");
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method20 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo2 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(classInfo2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        int int8 = classInfo7.getModifiers();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        int int11 = type9.getOpcode((int) (byte) 1);
        int int12 = type9.getSize();
        int int13 = type9.getDimensions();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer31.setNamingPolicy(namingPolicy32);
        enhancer31.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        enhancer31.setInterfaces(classArray40);
        enhancer21.setInterfaces(classArray40);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray40);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.reflect.Constructor constructor53 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray52);
        boolean boolean54 = type9.equals((java.lang.Object) wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(constructor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg.mockito.cglib.proxy.Enhancer;", "org.mockito.cglib.core.ReflectUtils$3");
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature31 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class<?> wildcardClass36 = propertyDescriptorArray32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) methodArray43);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature46 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray47 = signature46.getArgumentTypes();
        java.lang.String str48 = signature46.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(signature31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(signature46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>()V" + "'", str48, "<init>()V");
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        boolean boolean8 = enhancer3.getAttemptLoad();
        enhancer3.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer3.getAttemptLoad();
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass15 = classArray14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        enhancer3.setSuperclass((java.lang.Class) wildcardClass15);
        boolean boolean18 = enhancer3.getUseCache();
        java.lang.ClassLoader classLoader19 = enhancer3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class20 = org.mockito.cglib.core.ReflectUtils.defineClass("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/beans/PropertyDescriptor;", byteArray2, classLoader19);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("La.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->La.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer1.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        enhancer1.setCallbackFilter(callbackFilter16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer21.setNamingPolicy(namingPolicy22);
        enhancer21.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer21.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer18.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback35 = null;
        enhancer32.setCallback(callback35);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray37);
        java.lang.Class<?> wildcardClass40 = classArray39.getClass();
        enhancer32.setSuperclass((java.lang.Class) wildcardClass40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        enhancer42.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = enhancer47.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.Class<?> wildcardClass56 = methodArray55.getClass();
        enhancer47.setSuperclass((java.lang.Class) wildcardClass56);
        boolean boolean58 = enhancer47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer47.getStrategy();
        enhancer42.setStrategy(generatorStrategy59);
        enhancer32.setStrategy(generatorStrategy59);
        enhancer18.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader63 = enhancer18.getClassLoader();
        enhancer1.setClassLoader(classLoader63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=Lhi!;]", classLoader63);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray6 = classInfo4.getInterfaces();
        java.lang.String str7 = classInfo4.toString();
        java.lang.Class<?> wildcardClass8 = classInfo4.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer9.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer9.getAttemptLoad();
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        enhancer14.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader19 = enhancer14.getClassLoader();
        enhancer9.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer21.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        boolean boolean33 = enhancer28.getAttemptLoad();
        enhancer28.setInterceptDuringConstruction(false);
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        enhancer38.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray43);
        enhancer38.setInterfaces(classArray47);
        enhancer28.setInterfaces(classArray47);
        java.lang.reflect.Constructor constructor50 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass27, classArray47);
        enhancer9.setInterfaces(classArray47);
        org.mockito.cglib.proxy.Callback callback52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass8, classArray47, callback52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(constructor50);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer3.getNamingPolicy();
        boolean boolean9 = enhancer3.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer10.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer16.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = enhancer16.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        enhancer21.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader26 = enhancer21.getClassLoader();
        enhancer16.setClassLoader(classLoader26);
        enhancer10.setClassLoader(classLoader26);
        enhancer3.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader30 = enhancer3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class31 = org.mockito.cglib.core.ReflectUtils.defineClass("V", byteArray2, classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer0.setClassLoader(classLoader9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptorArray11.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer20.getAttemptLoad();
        boolean boolean24 = enhancer20.getUseCache();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer27.getNamingPolicy();
        boolean boolean33 = enhancer27.getUseCache();
        boolean boolean34 = enhancer27.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer35.setNamingPolicy(namingPolicy36);
        enhancer35.setUseCache(true);
        enhancer35.setSerialVersionUID((java.lang.Long) 10L);
        enhancer35.setUseFactory(true);
        java.lang.ClassLoader classLoader44 = enhancer35.getClassLoader();
        enhancer27.setClassLoader(classLoader44);
        enhancer20.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer20.getNamingPolicy();
        boolean boolean48 = enhancer20.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer49.setNamingPolicy(namingPolicy50);
        enhancer49.setAttemptLoad(false);
        enhancer49.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        enhancer56.setNamingPolicy(namingPolicy57);
        java.lang.ClassLoader classLoader59 = enhancer56.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer56.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer20.setCallbacks(callbackArray61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass15, callbackArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str17, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setPreferred(true);
        boolean boolean20 = propertyDescriptor10.isPreferred();
        java.lang.reflect.Method method21 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method22 = propertyDescriptor10.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNull(method22);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass5 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list9 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass5, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classInfo7);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj6 = propertyDescriptor3.getValue("java.lang.Object");
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("void", method9, method10);
        propertyDescriptor11.setExpert(true);
        java.lang.String str14 = propertyDescriptor11.getName();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("void", method16, method17);
        propertyDescriptor18.setExpert(false);
        propertyDescriptor18.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor11.createPropertyEditor((java.lang.Object) propertyDescriptor18);
        propertyDescriptor18.setName("Z");
        java.util.Enumeration<java.lang.String> strEnumeration26 = propertyDescriptor18.attributeNames();
        boolean boolean27 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertNotNull(strEnumeration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("D", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("()Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "D" + "'", str4, "D");
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        enhancer0.setInterfaces(classArray34);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class43 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        boolean boolean18 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer25.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer32.getAttemptLoad();
        enhancer32.setInterceptDuringConstruction(false);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer32.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer21.getNamingPolicy();
        java.lang.Class<?> wildcardClass45 = enhancer21.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer0.setNamingPolicy(namingPolicy17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class19 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("ava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        boolean boolean5 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setUseFactory(true);
        enhancer6.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader15 = enhancer12.getClassLoader();
        org.mockito.cglib.proxy.Callback callback16 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray17 = new org.mockito.cglib.proxy.Callback[] { callback16 };
        enhancer12.setCallbacks(callbackArray17);
        enhancer6.setCallbacks(callbackArray17);
        enhancer6.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer22.setCallback(callback25);
        java.lang.Class[] classArray27 = new java.lang.Class[] {};
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class<?> wildcardClass30 = classArray29.getClass();
        enhancer22.setSuperclass((java.lang.Class) wildcardClass30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        enhancer32.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = enhancer38.getClassLoader();
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer38.setCallbacks(callbackArray43);
        enhancer32.setCallbacks(callbackArray43);
        enhancer22.setCallbacks(callbackArray43);
        enhancer6.setCallbacks(callbackArray43);
        enhancer1.setCallbacks(callbackArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(callbackArray17);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray43);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseFactory(false);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg.mockito.cglib.proxy.Enhancer;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setUseFactory(true);
        enhancer17.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer17.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback29 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray30 = new org.mockito.cglib.proxy.Callback[] { callback29 };
        enhancer25.setCallbacks(callbackArray30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer32.setCallbacks(callbackArray37);
        enhancer25.setCallbacks(callbackArray37);
        enhancer17.setCallbacks(callbackArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer17.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        enhancer42.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer42.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        enhancer42.setInterfaces(classArray54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, false, true);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        enhancer42.setInterfaces(classArray66);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback72 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray73 = new org.mockito.cglib.proxy.Callback[] { callback72 };
        enhancer68.setCallbacks(callbackArray73);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback79 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray80 = new org.mockito.cglib.proxy.Callback[] { callback79 };
        enhancer75.setCallbacks(callbackArray80);
        enhancer68.setCallbacks(callbackArray80);
        enhancer42.setCallbacks(callbackArray80);
        enhancer17.setCallbacks(callbackArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass6, classArray11, callbackFilter16, callbackArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/cglib/proxy/Enhancer" + "'", str8, "org/mockito/cglib/proxy/Enhancer");
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(callbackArray80);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()LV;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("boolean");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; bound; propertyEditorClass=class [Ljava.lang.Class;]");
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class<?> wildcardClass7 = classArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        boolean boolean10 = classInfo8.equals((java.lang.Object) (-1.0f));
        java.lang.String str11 = classInfo8.toString();
        java.lang.String str12 = classInfo8.toString();
        int int13 = classInfo8.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback17 = null;
        enhancer14.setCallback(callback17);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class<?> wildcardClass22 = classArray21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass22);
        boolean boolean24 = classInfo8.equals((java.lang.Object) wildcardClass22);
        org.mockito.asm.Type type25 = classInfo8.getType();
        org.mockito.asm.Type type26 = type25.getElementType();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer27.getStrategy();
        java.lang.Class<?> wildcardClass33 = enhancer27.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        boolean boolean39 = enhancer34.getAttemptLoad();
        enhancer34.setInterceptDuringConstruction(false);
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        enhancer44.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        enhancer44.setInterfaces(classArray53);
        enhancer34.setInterfaces(classArray53);
        java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass33, classArray53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        java.lang.Object obj62 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor56, (java.lang.Object[]) propertyDescriptorArray57);
        org.mockito.cglib.core.MethodInfo methodInfo64 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor56, 4);
        int int65 = methodInfo64.getModifiers();
        org.mockito.cglib.core.Signature signature66 = methodInfo64.getSignature();
        org.mockito.asm.Type[] typeArray67 = methodInfo64.getExceptionTypes();
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray67);
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("java.lang.Object", type3, typeArray67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, true, true);
        java.lang.Class<?> wildcardClass75 = methodArray74.getClass();
        boolean boolean76 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass75);
        boolean boolean77 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass75);
        org.mockito.cglib.core.ClassInfo classInfo78 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type79 = classInfo78.getType();
        org.mockito.cglib.core.Signature signature82 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        int int85 = type83.getOpcode((int) (short) 1);
        java.lang.String str86 = type83.getDescriptor();
        int int88 = type83.getOpcode((int) (byte) 100);
        boolean boolean89 = signature82.equals((java.lang.Object) int88);
        java.lang.String str90 = signature82.getDescriptor();
        org.mockito.asm.Type type91 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean92 = signature82.equals((java.lang.Object) type91);
        java.lang.String str93 = signature82.toString();
        org.mockito.asm.Type[] typeArray94 = signature82.getArgumentTypes();
        org.mockito.asm.Type[] typeArray95 = signature82.getArgumentTypes();
        java.lang.Class[] classArray96 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray95);
        org.mockito.cglib.core.Signature signature97 = new org.mockito.cglib.core.Signature("hi!", type79, typeArray95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature98 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]", type3, typeArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.Class[]" + "'", str11, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.lang.Class[]" + "'", str12, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1041 + "'", int13 == 1041);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(constructor56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(methodInfo64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(signature66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "()Ljava/lang/Class;" + "'", str68, "()Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "V" + "'", str86, "V");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 105 + "'", int88 == 105);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(SSS)S" + "'", str90, "(SSS)S");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(SSS)S" + "'", str93, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray94);
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("<init>");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer7.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        boolean boolean16 = enhancer0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("()Lorg/mockito/cglib/core/AbstractClassGenerator;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        enhancer1.setUseCache(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.ClassLoader classLoader8 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method9 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=void]", classLoader8);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        boolean boolean6 = enhancer0.getUseCache();
        boolean boolean7 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer10.getAttemptLoad();
        enhancer10.setInterceptDuringConstruction(false);
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer10.getNamingPolicy();
        boolean boolean21 = enhancer10.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer22.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer22.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        enhancer10.setClassLoader(classLoader26);
        enhancer10.setAttemptLoad(true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass31 = type30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass31);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(type36);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass42 = enhancer36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.lang.String str44 = classInfo43.toString();
        org.mockito.asm.Type[] typeArray45 = classInfo43.getInterfaces();
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("java.lang.Object", type35, typeArray45);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        boolean boolean53 = classInfo51.equals((java.lang.Object) (-1.0f));
        java.lang.String str54 = classInfo51.toString();
        int int55 = classInfo51.getModifiers();
        org.mockito.asm.Type type56 = classInfo51.getSuperType();
        org.mockito.asm.Type type57 = classInfo51.getType();
        org.mockito.asm.Type[] typeArray58 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("V", type35, typeArray58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer60.setNamingPolicy(namingPolicy61);
        enhancer60.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        enhancer60.setInterfaces(classArray69);
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        boolean boolean72 = signature59.equals((java.lang.Object) strArray71);
        java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) strArray71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getReturnType("(SSS)S");
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer76.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        enhancer76.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        java.lang.Class<?> wildcardClass82 = enhancer76.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass82);
        boolean boolean84 = type75.equals((java.lang.Object) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass82);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray86, false, true);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray71, methodArray89);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str44, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.lang.Class[]" + "'", str54, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1041 + "'", int55 == 1041);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        boolean boolean16 = classInfo14.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = classInfo14.toString();
        int int18 = classInfo14.getModifiers();
        org.mockito.asm.Type type19 = classInfo14.getSuperType();
        org.mockito.asm.Type type20 = classInfo14.getType();
        boolean boolean21 = classInfo5.equals((java.lang.Object) classInfo14);
        org.mockito.asm.Type type22 = classInfo5.getSuperType();
        org.mockito.asm.Type type23 = type22.getElementType();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        int int29 = type27.getOpcode((int) (short) 1);
        java.lang.String str30 = type27.getDescriptor();
        int int32 = type27.getOpcode((int) (byte) 100);
        boolean boolean33 = signature26.equals((java.lang.Object) int32);
        java.lang.String str34 = signature26.getDescriptor();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean36 = signature26.equals((java.lang.Object) type35);
        int int37 = type35.getSort();
        int int38 = type35.getSort();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass40 = type39.getClass();
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type[] typeArray42 = classInfo41.getInterfaces();
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("(SSS)Ljava/lang/Object;", type23, typeArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(SSS)Ljava/lang/Object;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.lang.Class[]" + "'", str17, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1041 + "'", int18 == 1041);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "V" + "'", str30, "V");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 105 + "'", int32 == 105);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(SSS)S" + "'", str34, "(SSS)S");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()S" + "'", str43, "()S");
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = classInfo7.getType();
        org.mockito.asm.Type[] typeArray9 = classInfo7.getInterfaces();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        java.beans.PropertyDescriptor[] propertyDescriptorArray1 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, true, true);
        java.lang.Class<?> wildcardClass5 = methodArray4.getClass();
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        boolean boolean7 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type[] typeArray12 = classInfo11.getInterfaces();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("[Ljava/lang/reflect/Method;", type8, typeArray12);
        org.mockito.asm.Type[] typeArray14 = signature13.getArgumentTypes();
        java.lang.String str15 = signature13.toString();
        org.junit.Assert.assertNotNull(propertyDescriptorArray1);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Ljava/lang/reflect/Method;()[Ljava/lang/reflect/Method;" + "'", str15, "[Ljava/lang/reflect/Method;()[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type[] typeArray7 = classInfo4.getInterfaces();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        boolean boolean14 = classInfo12.equals((java.lang.Object) (-1.0f));
        java.lang.String str15 = classInfo12.toString();
        org.mockito.asm.Type type16 = classInfo12.getSuperType();
        java.lang.Class<?> wildcardClass17 = type16.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass17);
        boolean boolean19 = classInfo4.equals((java.lang.Object) wildcardClass17);
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        enhancer21.setSerialVersionUID((java.lang.Long) 10L);
        enhancer21.setAttemptLoad(false);
        enhancer21.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class<?> wildcardClass35 = classArray34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        enhancer21.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean38 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer39.setNamingPolicy(namingPolicy40);
        enhancer39.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        enhancer44.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        enhancer44.setStrategy(generatorStrategy51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback57 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray58 = new org.mockito.cglib.proxy.Callback[] { callback57 };
        enhancer53.setCallbacks(callbackArray58);
        enhancer44.setCallbacks(callbackArray58);
        enhancer39.setCallbacks(callbackArray58);
        enhancer21.setCallbacks(callbackArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass17, callbackArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.lang.Class[]" + "'", str15, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(callbackArray58);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Callback callback7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass4, callback7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str5, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        boolean boolean9 = enhancer6.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        enhancer11.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader16 = enhancer11.getClassLoader();
        enhancer6.setClassLoader(classLoader16);
        enhancer0.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader19 = null;
        enhancer0.setClassLoader(classLoader19);
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Callback callback7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass3, callback7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=Lhi!;]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        enhancer6.setAttemptLoad(false);
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        enhancer13.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader18 = enhancer13.getClassLoader();
        enhancer6.setClassLoader(classLoader18);
        enhancer0.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader21 = enhancer0.getClassLoader();
        boolean boolean22 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        boolean boolean28 = enhancer23.getAttemptLoad();
        enhancer23.setInterceptDuringConstruction(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer23.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer23.setCallbackFilter(callbackFilter36);
        boolean boolean38 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer39.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer39.getStrategy();
        java.lang.Class<?> wildcardClass45 = enhancer39.getClass();
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass45);
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str50 = signature49.getName();
        org.mockito.asm.Type type51 = signature49.getReturnType();
        org.mockito.asm.Type type52 = signature49.getReturnType();
        boolean boolean53 = classInfo46.equals((java.lang.Object) signature49);
        java.lang.Class[] classArray54 = new java.lang.Class[] {};
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray54);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray56);
        boolean boolean59 = signature49.equals((java.lang.Object) classArray56);
        enhancer23.setInterfaces(classArray56);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.Signature signature42 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer47.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer47.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        enhancer54.setNamingPolicy(namingPolicy57);
        boolean boolean59 = enhancer54.getAttemptLoad();
        enhancer54.setInterceptDuringConstruction(false);
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer54.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer66.setNamingPolicy(namingPolicy67);
        enhancer66.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer71.getStrategy();
        enhancer66.setStrategy(generatorStrategy73);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback79 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray80 = new org.mockito.cglib.proxy.Callback[] { callback79 };
        enhancer75.setCallbacks(callbackArray80);
        enhancer66.setCallbacks(callbackArray80);
        enhancer43.setCallbacks(callbackArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor36, (java.lang.Object[]) callbackArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(signature42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(callbackArray80);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        java.lang.Class<?> wildcardClass22 = enhancer16.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        boolean boolean28 = enhancer23.getAttemptLoad();
        enhancer23.setInterceptDuringConstruction(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        enhancer33.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        enhancer33.setInterfaces(classArray42);
        enhancer23.setInterfaces(classArray42);
        java.lang.reflect.Constructor constructor45 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass22, classArray42);
        enhancer8.setInterfaces(classArray42);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter47 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass3, classArray42, callbackFilter47, callbackArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/Class;" + "'", str7, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(constructor45);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer15.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        enhancer28.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer28.getStrategy();
        enhancer15.setStrategy(generatorStrategy36);
        propertyDescriptor3.setValue("(SSS)[Ljava/lang/Class;", (java.lang.Object) generatorStrategy36);
        java.lang.reflect.Method method39 = propertyDescriptor3.getReadMethod();
        boolean boolean40 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer7.setCallback(callback15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setAttemptLoad(false);
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = enhancer24.getClassLoader();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer24.setCallbacks(callbackArray29);
        enhancer17.setCallbacks(callbackArray29);
        enhancer7.setCallbacks(callbackArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass3, callbackArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classInfo6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray29);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setBound(true);
        java.lang.String str14 = propertyDescriptor3.getName();
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNull(method15);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor19 = org.mockito.cglib.core.ReflectUtils.findConstructor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)B", classLoader17);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        propertyDescriptor3.setShortDescription("Ljava/lang/Class;");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class", "(SSS)Ljava/lang/Object;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.junit.Assert.assertNotNull(type3);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) ' ');
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer46.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer46.getAttemptLoad();
        enhancer46.setInterceptDuringConstruction(false);
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer46.getNamingPolicy();
        boolean boolean57 = enhancer46.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer58.setNamingPolicy(namingPolicy59);
        boolean boolean61 = enhancer58.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        enhancer46.setClassLoader(classLoader62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer64.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer64.setNamingPolicy(namingPolicy67);
        enhancer64.setSerialVersionUID((java.lang.Long) 10L);
        enhancer64.setAttemptLoad(false);
        enhancer64.setUseFactory(true);
        java.lang.Class[] classArray75 = new java.lang.Class[] {};
        java.lang.String[] strArray76 = org.mockito.cglib.core.ReflectUtils.getNames(classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray75);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray77);
        java.lang.String[] strArray80 = org.mockito.cglib.core.ReflectUtils.getNames(classArray77);
        int int81 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray77);
        enhancer64.setInterfaces(classArray77);
        enhancer46.setInterfaces(classArray77);
        java.lang.Object obj84 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor36, (java.lang.Object[]) classArray77);
        org.mockito.cglib.core.Signature signature85 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor36);
        java.lang.String str86 = signature85.toString();
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray87, true, true);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray87);
        java.lang.String[] strArray92 = org.mockito.cglib.core.ReflectUtils.getNames(classArray91);
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray91);
        boolean boolean94 = signature85.equals((java.lang.Object) classArray91);
        java.lang.String str95 = signature85.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(signature85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "<init>()V" + "'", str86, "<init>()V");
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "<init>()V" + "'", str95, "<init>()V");
    }
}


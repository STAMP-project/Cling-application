import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        java.lang.String str5 = propertyDescriptor3.toString();
        org.junit.Assert.assertNotNull(strEnumeration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]]" + "'", str5, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]]");
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("double", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=void; hidden]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=Lorg/mockito/cglib/proxy/Enhancer;; shortDescription=void]", method1, method2);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=D]");
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        java.lang.String str9 = classInfo5.toString();
        int int10 = classInfo5.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer11.setCallback(callback14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class<?> wildcardClass19 = classArray18.getClass();
        enhancer11.setSuperclass((java.lang.Class) wildcardClass19);
        boolean boolean21 = classInfo5.equals((java.lang.Object) wildcardClass19);
        org.mockito.asm.Type type22 = classInfo5.getSuperType();
        org.mockito.asm.Type type23 = classInfo5.getType();
        org.mockito.asm.Type type24 = classInfo5.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class<?> wildcardClass31 = enhancer25.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer32.getAttemptLoad();
        enhancer32.setInterceptDuringConstruction(false);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        enhancer42.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer42.setInterfaces(classArray51);
        enhancer32.setInterfaces(classArray51);
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        java.lang.Object obj60 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor54, (java.lang.Object[]) propertyDescriptorArray55);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54, 4);
        int int63 = methodInfo62.getModifiers();
        org.mockito.cglib.core.Signature signature64 = methodInfo62.getSignature();
        org.mockito.asm.Type[] typeArray65 = methodInfo62.getExceptionTypes();
        boolean boolean66 = type24.equals((java.lang.Object) typeArray65);
        org.mockito.cglib.core.Signature signature69 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str70 = signature69.getName();
        org.mockito.asm.Type type71 = signature69.getReturnType();
        org.mockito.asm.Type[] typeArray72 = signature69.getArgumentTypes();
        org.mockito.cglib.core.Signature signature73 = new org.mockito.cglib.core.Signature("Lhi!;", type24, typeArray72);
        org.mockito.asm.Type type74 = type24.getElementType();
        java.lang.String str75 = type74.toString();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.lang.Class[]" + "'", str9, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1041 + "'", int10 == 1041);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(constructor54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lva/lang/Object;" + "'", str75, "Lva/lang/Object;");
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer38.getStrategy();
        enhancer0.setStrategy(generatorStrategy53);
        boolean boolean55 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        int int10 = type9.getSize();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str19 = signature18.getName();
        org.mockito.asm.Type type20 = signature18.getReturnType();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type22, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray25);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("", type9, typeArray25);
        int int30 = type9.getSize();
        int int31 = type9.getSort();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(SSS)S" + "'", str26, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(SSS)S" + "'", str27, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str28, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        boolean boolean10 = classInfo4.equals((java.lang.Object) "()D");
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setUseFactory(true);
        boolean boolean15 = enhancer11.getUseCache();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer11.setCallback(callback16);
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer11.setCallback(callback18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer20.getStrategy();
        java.lang.Class<?> wildcardClass26 = enhancer20.getClass();
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass26);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, false, false);
        boolean boolean34 = classInfo4.equals((java.lang.Object) methodArray33);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 10);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.ClassInfo classInfo37 = methodInfo36.getClassInfo();
        org.mockito.cglib.core.Signature signature38 = methodInfo36.getSignature();
        java.lang.String str39 = methodInfo36.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<init>()V" + "'", str39, "<init>()V");
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str39 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo41 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        int int42 = methodInfo41.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()V" + "'", str39, "()V");
        org.junit.Assert.assertNotNull(methodInfo41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor10 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass3, classArray7);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setName("<init>");
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer5.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer12.getAttemptLoad();
        enhancer12.setInterceptDuringConstruction(false);
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer12.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer29.getStrategy();
        enhancer24.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback37 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray38 = new org.mockito.cglib.proxy.Callback[] { callback37 };
        enhancer33.setCallbacks(callbackArray38);
        enhancer24.setCallbacks(callbackArray38);
        enhancer1.setCallbacks(callbackArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer1.getStrategy();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer46.setNamingPolicy(namingPolicy47);
        boolean boolean49 = enhancer46.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer51.getStrategy();
        enhancer51.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader56 = enhancer51.getClassLoader();
        enhancer46.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer58.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer58.setNamingPolicy(namingPolicy61);
        boolean boolean63 = enhancer58.getAttemptLoad();
        enhancer58.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback66 = null;
        enhancer58.setCallback(callback66);
        enhancer58.setUseCache(true);
        java.lang.ClassLoader classLoader70 = enhancer58.getClassLoader();
        enhancer46.setClassLoader(classLoader70);
        enhancer1.setClassLoader(classLoader70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor73 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=()LV;; expert; values={Z=Ljava/lang/Object;}]", classLoader70);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray38);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        org.mockito.asm.Type type9 = classInfo4.getType();
        org.mockito.asm.Type[] typeArray10 = classInfo4.getInterfaces();
        int int11 = classInfo4.getModifiers();
        org.mockito.asm.Type[] typeArray12 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray13 = classInfo4.getInterfaces();
        org.mockito.asm.Type type14 = classInfo4.getType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1041 + "'", int11 == 1041);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type14);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        int int3 = type1.getOpcode((int) (short) 1);
        java.lang.String str4 = type1.getDescriptor();
        int int6 = type1.getOpcode((int) (byte) 100);
        boolean boolean8 = type1.equals((java.lang.Object) 'a');
        int int9 = type1.getSort();
        java.lang.String str10 = type1.toString();
        int int11 = type1.getSort();
        java.lang.String str12 = type1.getDescriptor();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 0);
        org.mockito.cglib.core.ClassInfo classInfo46 = methodInfo45.getClassInfo();
        org.mockito.asm.Type[] typeArray47 = classInfo46.getInterfaces();
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("[Ljava/lang/reflect/Method;", type1, typeArray47);
        org.mockito.asm.Type type49 = signature48.getReturnType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "V" + "'", str4, "V");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 105 + "'", int6 == 105);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "V" + "'", str10, "V");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(type49);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;", method1, method2);
        boolean boolean4 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("S", "java.lang.Object()B");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.asm.Type type4 = signature2.getReturnType();
        java.lang.String str5 = signature2.getName();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "S" + "'", str5, "S");
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod(")LV");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer4.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer23.setNamingPolicy(namingPolicy24);
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        enhancer23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer32.setCallbacks(callbackArray37);
        enhancer23.setCallbacks(callbackArray37);
        enhancer0.setCallbacks(callbackArray37);
        boolean boolean41 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback42 = null;
        enhancer0.setCallback(callback42);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=Lorg/mockito/asm/Type;; expert]");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str14 = signature13.getName();
        org.mockito.asm.Type type15 = signature13.getReturnType();
        org.mockito.asm.Type type16 = signature13.getReturnType();
        boolean boolean17 = classInfo10.equals((java.lang.Object) signature13);
        org.mockito.asm.Type[] typeArray18 = classInfo10.getInterfaces();
        org.mockito.asm.Type type19 = classInfo10.getType();
        int int20 = classInfo10.getModifiers();
        org.mockito.asm.Type type21 = classInfo10.getSuperType();
        org.mockito.asm.Type[] typeArray22 = classInfo10.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;]", type2, typeArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray22);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor10.setWriteMethod(method18);
        java.lang.reflect.Method method20 = null;
        propertyDescriptor10.setWriteMethod(method20);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=I; propertyEditorClass=class [Ljava.lang.Class;]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("void", method38, method39);
        propertyDescriptor40.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration43 = propertyDescriptor40.attributeNames();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("void", method46, method47);
        propertyDescriptor48.setExpert(false);
        java.lang.String str51 = propertyDescriptor48.getName();
        java.lang.String str52 = propertyDescriptor48.getName();
        boolean boolean53 = propertyDescriptor48.isExpert();
        java.lang.String str54 = propertyDescriptor48.getName();
        propertyDescriptor48.setDisplayName("(SSS)S");
        boolean boolean57 = propertyDescriptor48.isExpert();
        propertyDescriptor40.setValue("Lhi!;", (java.lang.Object) boolean57);
        boolean boolean59 = methodInfo36.equals((java.lang.Object) "Lhi!;");
        int int60 = methodInfo36.getModifiers();
        int int61 = methodInfo36.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(strEnumeration43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "void" + "'", str51, "void");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "void" + "'", str52, "void");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "void" + "'", str54, "void");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy25);
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer29.setCallbacks(callbackArray34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        enhancer36.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer36.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy43);
        enhancer0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer0.setCallbackFilter(callbackFilter46);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader50 = enhancer0.getClassLoader();
        java.lang.Class[] classArray51 = null;
        enhancer0.setInterfaces(classArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class<?> wildcardClass38 = propertyDescriptorArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        java.lang.Object obj40 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray39);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 0);
        org.mockito.asm.Type[] typeArray43 = methodInfo42.getExceptionTypes();
        int int44 = methodInfo42.getModifiers();
        java.lang.String str45 = methodInfo42.toString();
        int int46 = methodInfo42.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<init>()V" + "'", str45, "<init>()V");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray1 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, true, true);
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, false, false);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray7);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass9, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray1);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type6, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray9);
        boolean boolean12 = type2.equals((java.lang.Object) type4);
        int int13 = type2.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.String str22 = classInfo21.toString();
        org.mockito.asm.Type[] typeArray23 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("", type2, typeArray23);
        org.mockito.asm.Type type25 = signature24.getReturnType();
        java.lang.String str26 = signature24.toString();
        java.lang.String str27 = signature24.getName();
        java.lang.String str28 = signature24.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)LV;" + "'", str11, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str22, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "()[Ljava/lang/Class;" + "'", str26, "()[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "()[Ljava/lang/Class;" + "'", str28, "()[Ljava/lang/Class;");
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 100, (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer5.setNamingPolicy(namingPolicy8);
        boolean boolean10 = enhancer5.getAttemptLoad();
        enhancer5.setInterceptDuringConstruction(false);
        enhancer5.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer5.getNamingPolicy();
        boolean boolean16 = enhancer5.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer17.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer5.setClassLoader(classLoader21);
        enhancer5.setAttemptLoad(true);
        boolean boolean25 = enhancer5.getUseCache();
        java.lang.ClassLoader classLoader26 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer27.getStrategy();
        enhancer5.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = enhancer5.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class31 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class org.mockito.cglib.proxy.Enhancer]", byteArray4, classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 100, 0]");
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LZ;");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        enhancer4.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer4.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        enhancer4.setInterfaces(classArray16);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass2, "org/mockito/asm/Type", classArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: org/mockito/asm/Type");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("LZ;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 10);
        org.mockito.asm.Type[] typeArray36 = methodInfo35.getExceptionTypes();
        java.lang.Class<?> wildcardClass37 = methodInfo35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list42 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass37, list41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/cglib/core/ReflectUtils$3;" + "'", str39, "Lorg/mockito/cglib/core/ReflectUtils$3;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type5, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray8);
        java.lang.String str11 = type3.toString();
        java.lang.String str12 = type3.getClassName();
        int int14 = type3.getOpcode(0);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        boolean boolean27 = enhancer22.getAttemptLoad();
        enhancer22.setInterceptDuringConstruction(false);
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        enhancer32.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        enhancer32.setInterfaces(classArray41);
        enhancer22.setInterfaces(classArray41);
        java.lang.reflect.Constructor constructor44 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray41);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor44);
        org.mockito.asm.Type[] typeArray47 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor44);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("V", type3, typeArray47);
        org.mockito.asm.Type type49 = signature48.getReturnType();
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class<?> wildcardClass53 = classArray52.getClass();
        org.mockito.cglib.core.ClassInfo classInfo54 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass53);
        boolean boolean56 = classInfo54.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type57 = classInfo54.getSuperType();
        org.mockito.asm.Type[] typeArray58 = classInfo54.getInterfaces();
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("Lhi!;", type49, typeArray58);
        java.lang.String str60 = signature59.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(SSS)S" + "'", str9, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)LV;" + "'", str10, "(SSS)LV;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LV;" + "'", str11, "LV;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(constructor44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)LV;" + "'", str60, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)LV;");
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.toString();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer4.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer4.getClassLoader();
        org.mockito.cglib.proxy.Callback callback8 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray9 = new org.mockito.cglib.proxy.Callback[] { callback8 };
        enhancer4.setCallbacks(callbackArray9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer4.setCallbackFilter(callbackFilter11);
        enhancer4.setInterceptDuringConstruction(false);
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        enhancer17.setUseFactory(false);
        boolean boolean22 = enhancer17.getUseCache();
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer25.getStrategy();
        enhancer17.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, true, true);
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, false, true);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        enhancer38.setInterfaces(classArray62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer64.setCallbacks(callbackArray69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback75 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray76 = new org.mockito.cglib.proxy.Callback[] { callback75 };
        enhancer71.setCallbacks(callbackArray76);
        enhancer64.setCallbacks(callbackArray76);
        enhancer38.setCallbacks(callbackArray76);
        enhancer17.setCallbacks(callbackArray76);
        enhancer4.setCallbacks(callbackArray76);
        boolean boolean82 = type0.equals((java.lang.Object) callbackArray76);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "D" + "'", str3, "D");
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(callbackArray9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(callbackArray76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass2);
        java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray3, true, true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(methodArray6);
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=void; hidden]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 0);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(methodInfo46);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 105);
        int int36 = methodInfo35.getModifiers();
        org.mockito.cglib.core.Signature signature37 = methodInfo35.getSignature();
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        int int43 = type41.getOpcode((int) (short) 1);
        java.lang.String str44 = type41.getDescriptor();
        int int46 = type41.getOpcode((int) (byte) 100);
        boolean boolean47 = signature40.equals((java.lang.Object) int46);
        org.mockito.asm.Type[] typeArray48 = signature40.getArgumentTypes();
        java.lang.String str49 = signature40.toString();
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class<?> wildcardClass53 = classArray52.getClass();
        org.mockito.cglib.core.ClassInfo classInfo54 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass53);
        boolean boolean56 = classInfo54.equals((java.lang.Object) (-1.0f));
        java.lang.String str57 = classInfo54.toString();
        java.lang.String str58 = classInfo54.toString();
        org.mockito.asm.Type type59 = classInfo54.getSuperType();
        java.lang.String str60 = classInfo54.toString();
        boolean boolean61 = signature40.equals((java.lang.Object) classInfo54);
        java.lang.String str62 = signature40.getName();
        java.lang.String str63 = signature40.toString();
        org.mockito.asm.Type type64 = signature40.getReturnType();
        boolean boolean65 = methodInfo35.equals((java.lang.Object) signature40);
        java.lang.String str66 = methodInfo35.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 105 + "'", int36 == 105);
        org.junit.Assert.assertNotNull(signature37);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 105 + "'", int46 == 105);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(SSS)S" + "'", str49, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.lang.Class[]" + "'", str57, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.lang.Class[]" + "'", str58, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.lang.Class[]" + "'", str60, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(SSS)S" + "'", str63, "(SSS)S");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "<init>()V" + "'", str66, "<init>()V");
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.String str35 = signature34.getDescriptor();
        org.mockito.asm.Type type36 = signature34.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = type36.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "()V" + "'", str35, "()V");
        org.junit.Assert.assertNotNull(type36);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(SSS)V]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer14.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer22.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer22.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer28.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        enhancer33.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader38 = enhancer33.getClassLoader();
        enhancer28.setClassLoader(classLoader38);
        enhancer22.setClassLoader(classLoader38);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer0.getAttemptLoad();
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        java.lang.String str10 = signature2.getDescriptor();
        java.lang.Class<?> wildcardClass11 = signature2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass11, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setInterceptDuringConstruction(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        boolean boolean22 = enhancer14.getAttemptLoad();
        enhancer14.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        enhancer25.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer25.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer25.setInterfaces(classArray37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer48.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer55.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy65);
        enhancer40.setNamingPolicy(namingPolicy65);
        enhancer25.setNamingPolicy(namingPolicy65);
        enhancer14.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader70 = enhancer14.getClassLoader();
        java.lang.ClassLoader classLoader71 = enhancer14.getClassLoader();
        enhancer1.setClassLoader(classLoader71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method73 = org.mockito.cglib.core.ReflectUtils.findMethod("ava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void", classLoader71);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class<?> wildcardClass11 = propertyDescriptorArray7.getClass();
        boolean boolean12 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray16);
        java.lang.Object[] objArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass3, classArray17, objArray18);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str15, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(classArray17);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        int int6 = classInfo5.getModifiers();
        java.lang.String str7 = classInfo5.toString();
        org.mockito.asm.Type type8 = classInfo5.getType();
        org.mockito.asm.Type[] typeArray9 = classInfo5.getInterfaces();
        java.lang.String str10 = classInfo5.toString();
        java.lang.String str11 = classInfo5.toString();
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1041 + "'", int6 == 1041);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.reflect.Method[]" + "'", str7, "java.lang.reflect.Method[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.reflect.Method[]" + "'", str10, "java.lang.reflect.Method[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.reflect.Method[]" + "'", str11, "java.lang.reflect.Method[]");
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org.mockito.asm.Type", "(Ljava/lang/Cloneable;Ljava/io/Serializable;)LZ;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        int int5 = type3.getOpcode(57);
        int int6 = type3.getSort();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 61 + "'", int5 == 61);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java/lang/Class");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass15 = classArray14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        boolean boolean18 = classInfo16.equals((java.lang.Object) (-1.0f));
        java.lang.String str19 = classInfo16.toString();
        java.lang.String str20 = classInfo16.toString();
        org.mockito.asm.Type type21 = classInfo16.getSuperType();
        java.lang.String str22 = classInfo16.toString();
        boolean boolean23 = signature2.equals((java.lang.Object) classInfo16);
        org.mockito.asm.Type type24 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class<?> wildcardClass31 = enhancer25.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer32.getAttemptLoad();
        enhancer32.setInterceptDuringConstruction(false);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        enhancer42.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer42.setInterfaces(classArray51);
        enhancer32.setInterfaces(classArray51);
        java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray51);
        java.lang.String str55 = org.mockito.asm.Type.getConstructorDescriptor(constructor54);
        org.mockito.asm.Type[] typeArray56 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor54);
        org.mockito.cglib.core.MethodInfo methodInfo58 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54, (int) (short) 10);
        java.lang.String str59 = org.mockito.asm.Type.getConstructorDescriptor(constructor54);
        org.mockito.asm.Type[] typeArray60 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor54);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor54);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("void", method63, method64);
        propertyDescriptor65.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration68 = propertyDescriptor65.attributeNames();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("void", method71, method72);
        propertyDescriptor73.setExpert(false);
        java.lang.String str76 = propertyDescriptor73.getName();
        java.lang.String str77 = propertyDescriptor73.getName();
        boolean boolean78 = propertyDescriptor73.isExpert();
        java.lang.String str79 = propertyDescriptor73.getName();
        propertyDescriptor73.setDisplayName("(SSS)S");
        boolean boolean82 = propertyDescriptor73.isExpert();
        propertyDescriptor65.setValue("Lhi!;", (java.lang.Object) boolean82);
        boolean boolean84 = methodInfo61.equals((java.lang.Object) "Lhi!;");
        int int85 = methodInfo61.getModifiers();
        boolean boolean86 = signature2.equals((java.lang.Object) methodInfo61);
        int int87 = methodInfo61.getModifiers();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(constructor54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "()V" + "'", str55, "()V");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(methodInfo58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "()V" + "'", str59, "()V");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(strEnumeration68);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "void" + "'", str76, "void");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "void" + "'", str77, "void");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "void" + "'", str79, "void");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 100, (byte) 10, (byte) 0, (byte) 10, (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer8.getNamingPolicy();
        boolean boolean19 = enhancer8.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        enhancer8.setClassLoader(classLoader24);
        enhancer8.setAttemptLoad(true);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass29 = type28.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer8.setCallbackFilter(callbackFilter32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer34.setNamingPolicy(namingPolicy35);
        enhancer34.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        enhancer34.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback47 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray48 = new org.mockito.cglib.proxy.Callback[] { callback47 };
        enhancer43.setCallbacks(callbackArray48);
        enhancer34.setCallbacks(callbackArray48);
        enhancer8.setCallbacks(callbackArray48);
        java.lang.ClassLoader classLoader52 = enhancer8.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class53 = org.mockito.cglib.core.ReflectUtils.defineClass("()L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;", byteArray7, classLoader52);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 10, 0, 10, 0]");
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray48);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("()D");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        boolean boolean11 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str5, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        enhancer0.setUseFactory(false);
        enhancer0.setAttemptLoad(false);
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("void", method23, method24);
        propertyDescriptor25.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration28 = propertyDescriptor25.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration29 = propertyDescriptor25.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration30 = propertyDescriptor25.attributeNames();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor25.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.beans.PropertyDescriptor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(strEnumeration28);
        org.junit.Assert.assertNotNull(strEnumeration29);
        org.junit.Assert.assertNotNull(strEnumeration30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str5, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str6, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor10.setWriteMethod(method18);
        propertyDescriptor10.setName("(SSS)LV;");
        java.lang.String str22 = propertyDescriptor10.getShortDescription();
        org.mockito.cglib.core.Signature signature25 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type26 = signature25.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        enhancer27.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer27.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray39);
        enhancer27.setInterfaces(classArray39);
        boolean boolean42 = enhancer27.getAttemptLoad();
        boolean boolean43 = signature25.equals((java.lang.Object) enhancer27);
        java.beans.PropertyEditor propertyEditor44 = propertyDescriptor10.createPropertyEditor((java.lang.Object) boolean43);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(SSS)LV;" + "'", str22, "(SSS)LV;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(propertyEditor44);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        enhancer0.setCallback(callback10);
        enhancer0.setUseFactory(false);
        java.lang.ClassLoader classLoader14 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.util.List list25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list26 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass21, list25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer26.setCallbacks(callbackArray31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback37 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray38 = new org.mockito.cglib.proxy.Callback[] { callback37 };
        enhancer33.setCallbacks(callbackArray38);
        enhancer26.setCallbacks(callbackArray38);
        enhancer0.setCallbacks(callbackArray38);
        boolean boolean42 = enhancer0.getUseCache();
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray43);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray49);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(classArray50);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.asm.Type[] typeArray43 = methodInfo42.getExceptionTypes();
        org.mockito.cglib.core.Signature signature44 = methodInfo42.getSignature();
        org.mockito.asm.Type[] typeArray45 = methodInfo42.getExceptionTypes();
        int int46 = methodInfo42.getModifiers();
        org.mockito.asm.Type[] typeArray47 = methodInfo42.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo48 = methodInfo42.getClassInfo();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(classInfo48);
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=void; propertyEditorClass=class [Ljava.lang.Class;]", "java.beans.PropertyDescriptor[name=void; expert]");
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/core/AbstractClassGenerator;", "java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=java.beans.PropertyDescriptor[name=I]]");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(callbackArray5);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("void");
        propertyDescriptor3.setExpert(true);
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "void" + "'", str13, "void");
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer6.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer31.setNamingPolicy(namingPolicy32);
        enhancer31.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        enhancer31.setInterfaces(classArray40);
        enhancer21.setInterfaces(classArray40);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray40);
        int int44 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        enhancer0.setInterfaces(classArray40);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("C", method1, method2);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=void; hidden]");
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=D]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        boolean boolean13 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=void]", method1, method2);
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        boolean boolean4 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass2);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass2);
        java.util.List list6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list7 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass2, list6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.Signature signature39 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.String str40 = signature39.getName();
        java.lang.String str41 = signature39.getName();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(signature39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "<init>" + "'", str40, "<init>");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<init>" + "'", str41, "<init>");
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method17 = propertyDescriptor10.getReadMethod();
        propertyDescriptor10.setName("Lorg/mockito/cglib/core/DefaultNamingPolicy;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setUseFactory(true);
        enhancer10.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = enhancer16.getClassLoader();
        org.mockito.cglib.proxy.Callback callback20 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray21 = new org.mockito.cglib.proxy.Callback[] { callback20 };
        enhancer16.setCallbacks(callbackArray21);
        enhancer10.setCallbacks(callbackArray21);
        enhancer10.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class<?> wildcardClass34 = classArray33.getClass();
        enhancer26.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseFactory(true);
        enhancer36.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        java.lang.ClassLoader classLoader45 = enhancer42.getClassLoader();
        org.mockito.cglib.proxy.Callback callback46 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray47 = new org.mockito.cglib.proxy.Callback[] { callback46 };
        enhancer42.setCallbacks(callbackArray47);
        enhancer36.setCallbacks(callbackArray47);
        enhancer26.setCallbacks(callbackArray47);
        enhancer10.setCallbacks(callbackArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass4, callbackArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(callbackArray21);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(callbackArray47);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer26.setCallbackFilter(callbackFilter31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setUseFactory(true);
        enhancer34.setUseFactory(false);
        boolean boolean39 = enhancer34.getUseCache();
        enhancer34.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        boolean boolean47 = enhancer42.getAttemptLoad();
        enhancer42.setInterceptDuringConstruction(false);
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer42.getStrategy();
        enhancer34.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        enhancer55.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer55.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, true, true);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray63);
        int int68 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray67);
        enhancer55.setInterfaces(classArray67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, false, true);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        enhancer55.setInterfaces(classArray79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback85 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray86 = new org.mockito.cglib.proxy.Callback[] { callback85 };
        enhancer81.setCallbacks(callbackArray86);
        org.mockito.cglib.proxy.Enhancer enhancer88 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader89 = enhancer88.getClassLoader();
        enhancer88.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback92 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray93 = new org.mockito.cglib.proxy.Callback[] { callback92 };
        enhancer88.setCallbacks(callbackArray93);
        enhancer81.setCallbacks(callbackArray93);
        enhancer55.setCallbacks(callbackArray93);
        enhancer34.setCallbacks(callbackArray93);
        enhancer26.setCallbacks(callbackArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass21, callbackArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(callbackArray86);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(callbackArray93);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        boolean boolean6 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, false);
        boolean boolean15 = type5.equals((java.lang.Object) methodArray14);
        org.mockito.asm.Type type16 = type5.getElementType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "void" + "'", str2, "void");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        java.lang.String str10 = signature2.getDescriptor();
        java.lang.String str11 = signature2.getDescriptor();
        org.mockito.asm.Type type12 = signature2.getReturnType();
        org.mockito.asm.Type type13 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseFactory(true);
        enhancer14.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        enhancer20.setCallbacks(callbackArray25);
        enhancer14.setCallbacks(callbackArray25);
        enhancer14.setInterceptDuringConstruction(false);
        java.lang.Class class30 = null;
        enhancer14.setSuperclass(class30);
        boolean boolean32 = type13.equals((java.lang.Object) enhancer14);
        enhancer14.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer35.getStrategy();
        java.lang.Class<?> wildcardClass41 = enhancer35.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        boolean boolean47 = enhancer42.getAttemptLoad();
        enhancer42.setInterceptDuringConstruction(false);
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        enhancer52.setNamingPolicy(namingPolicy53);
        enhancer52.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        enhancer52.setInterfaces(classArray61);
        enhancer42.setInterfaces(classArray61);
        java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray61);
        int int65 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        enhancer14.setInterfaces(classArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class68 = enhancer14.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(callbackArray25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(constructor64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        enhancer2.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer2.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray14);
        enhancer2.setInterfaces(classArray14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer2.getNamingPolicy();
        boolean boolean19 = enhancer2.getAttemptLoad();
        java.lang.Class<?> wildcardClass20 = enhancer2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.reflect.Constructor constructor28 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method29 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(class0, "org.mockito.cglib.proxy.Enhancer", classArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(constructor28);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) '4');
        int int41 = methodInfo40.getModifiers();
        org.mockito.cglib.core.Signature signature42 = methodInfo40.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo43 = methodInfo40.getClassInfo();
        int int44 = classInfo43.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(signature42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        enhancer0.setInterfaces(classArray34);
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class41 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        enhancer7.setSerialVersionUID((java.lang.Long) 10L);
        enhancer7.setAttemptLoad(false);
        enhancer7.setUseFactory(true);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        int int21 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray20);
        enhancer7.setInterfaces(classArray20);
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass3, classArray20, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        int int7 = classInfo4.getModifiers();
        int int8 = classInfo4.getModifiers();
        org.mockito.asm.Type[] typeArray9 = classInfo4.getInterfaces();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1041 + "'", int7 == 1041);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1041 + "'", int8 == 1041);
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str8, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str9, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        boolean boolean12 = propertyDescriptor3.isHidden();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        enhancer14.setAttemptLoad(false);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer21.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy31);
        propertyDescriptor3.setValue("[Ljava/lang/Class;", (java.lang.Object) namingPolicy31);
        propertyDescriptor3.setExpert(false);
        java.lang.String str36 = propertyDescriptor3.getDisplayName();
        boolean boolean37 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "void" + "'", str36, "void");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass30 = type29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass30);
        boolean boolean32 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass30);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass30);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass30);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method36 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer9.setCallbacks(callbackArray14);
        enhancer0.setCallbacks(callbackArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer17.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, false, true);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray28);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class<?> wildcardClass35 = classArray34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type37 = classInfo36.getSuperType();
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str41 = signature40.getName();
        org.mockito.asm.Type type42 = signature40.getReturnType();
        boolean boolean43 = classInfo36.equals((java.lang.Object) type42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class<?> wildcardClass48 = propertyDescriptorArray44.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        boolean boolean50 = classInfo36.equals((java.lang.Object) wildcardClass48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo53 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = enhancer0.create(classArray29, (java.lang.Object[]) propertyDescriptorArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/lang/Class;" + "'", str13, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type type8 = type7.getElementType();
        int int9 = type7.getSort();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer9.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        boolean boolean21 = enhancer16.getAttemptLoad();
        enhancer16.setInterceptDuringConstruction(false);
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer16.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        enhancer28.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        enhancer28.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer37.setCallbacks(callbackArray42);
        enhancer28.setCallbacks(callbackArray42);
        enhancer5.setCallbacks(callbackArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer5.getStrategy();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer5.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer50.setNamingPolicy(namingPolicy51);
        boolean boolean53 = enhancer50.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader60 = enhancer55.getClassLoader();
        enhancer50.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer62.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer62.setNamingPolicy(namingPolicy65);
        boolean boolean67 = enhancer62.getAttemptLoad();
        enhancer62.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer62.setCallback(callback70);
        enhancer62.setUseCache(true);
        java.lang.ClassLoader classLoader74 = enhancer62.getClassLoader();
        enhancer50.setClassLoader(classLoader74);
        enhancer5.setClassLoader(classLoader74);
        enhancer1.setClassLoader(classLoader74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]", classLoader74);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; bound; propertyEditorClass=class [Ljava.lang.Class;]", method1, method2);
        propertyDescriptor3.setHidden(false);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(method6);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        int int7 = classInfo4.getModifiers();
        int int8 = classInfo4.getModifiers();
        org.mockito.asm.Type type9 = classInfo4.getType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1041 + "'", int7 == 1041);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1041 + "'", int8 == 1041);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Z");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        int int5 = type1.getOpcode(70);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LZ;" + "'", str3, "LZ;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray7 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray4, true, true);
        java.lang.Class<?> wildcardClass8 = propertyDescriptorArray4.getClass();
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = methodArray28.getClass();
        enhancer20.setSuperclass((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class<?> wildcardClass35 = methodArray34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = propertyDescriptorArray38.getClass();
        boolean boolean43 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass1, wildcardClass8, wildcardClass16, wildcardClass29, wildcardClass35, wildcardClass42 };
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray51);
        java.lang.Class[] classArray53 = new java.lang.Class[] {};
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray53);
        java.lang.Class<?> wildcardClass56 = classArray55.getClass();
        org.mockito.cglib.core.ClassInfo classInfo57 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, false);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, false, false);
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(methodArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str37, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str46, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(methodArray66);
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (-1));
        java.lang.Class<?> wildcardClass36 = constructor29.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method37 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.lang.reflect.Constructor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) -1);
        org.mockito.asm.Type[] typeArray43 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        int int45 = methodInfo44.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo46 = methodInfo44.getClassInfo();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int48 = type47.getSize();
        java.lang.Class<?> wildcardClass49 = type47.getClass();
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        boolean boolean51 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass49);
        boolean boolean52 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass49);
        boolean boolean53 = classInfo46.equals((java.lang.Object) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, true);
        java.lang.Class<?> wildcardClass59 = propertyDescriptorArray55.getClass();
        boolean boolean60 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass59);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method66 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass49, "(SSS)B", classArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: (SSS)B");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str63, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer5.setNamingPolicy(namingPolicy6);
        enhancer5.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        enhancer5.setInterfaces(classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        enhancer0.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer18.setNamingPolicy(namingPolicy21);
        enhancer18.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer18.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray26, true, true);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        int int31 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        enhancer18.setInterfaces(classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy33);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        int int8 = classInfo7.getModifiers();
        int int9 = classInfo7.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(false);
        enhancer10.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer10.getStrategy();
        boolean boolean16 = classInfo7.equals((java.lang.Object) enhancer10);
        org.mockito.asm.Type[] typeArray17 = classInfo7.getInterfaces();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeArray17);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=I]");
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=I]" + "'", str7, "java.beans.PropertyDescriptor[name=I]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("boolean", "");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("D", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getDisplayName();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor6.setWriteMethod(method8);
        boolean boolean10 = signature2.equals((java.lang.Object) propertyDescriptor6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "D" + "'", str7, "D");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        java.beans.PropertyDescriptor[] propertyDescriptorArray1 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, true, true);
        java.lang.Class<?> wildcardClass5 = methodArray4.getClass();
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        boolean boolean7 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = classInfo8.getType();
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        int int15 = type13.getOpcode((int) (short) 1);
        java.lang.String str16 = type13.getDescriptor();
        int int18 = type13.getOpcode((int) (byte) 100);
        boolean boolean19 = signature12.equals((java.lang.Object) int18);
        java.lang.String str20 = signature12.getDescriptor();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean22 = signature12.equals((java.lang.Object) type21);
        java.lang.String str23 = signature12.toString();
        org.mockito.asm.Type[] typeArray24 = signature12.getArgumentTypes();
        org.mockito.asm.Type[] typeArray25 = signature12.getArgumentTypes();
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("hi!", type9, typeArray25);
        int int28 = type9.getSort();
        org.junit.Assert.assertNotNull(propertyDescriptorArray1);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "V" + "'", str16, "V");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 105 + "'", int18 == 105);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(SSS)S" + "'", str20, "(SSS)S");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(SSS)S" + "'", str23, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.Signature signature39 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        java.lang.Class<?> wildcardClass46 = enhancer40.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer47.setNamingPolicy(namingPolicy50);
        boolean boolean52 = enhancer47.getAttemptLoad();
        enhancer47.setInterceptDuringConstruction(false);
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer57.setNamingPolicy(namingPolicy58);
        enhancer57.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, true);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray62);
        enhancer57.setInterfaces(classArray66);
        enhancer47.setInterfaces(classArray66);
        java.lang.reflect.Constructor constructor69 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass46, classArray66);
        java.lang.String str70 = org.mockito.asm.Type.getConstructorDescriptor(constructor69);
        org.mockito.asm.Type[] typeArray71 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor69);
        org.mockito.cglib.core.MethodInfo methodInfo73 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor69, (int) (short) 10);
        java.lang.String str74 = org.mockito.asm.Type.getConstructorDescriptor(constructor69);
        org.mockito.asm.Type[] typeArray75 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor69);
        java.lang.Object obj76 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray75);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.ClassInfo classInfo78 = methodInfo77.getClassInfo();
        org.mockito.asm.Type type79 = classInfo78.getType();
        org.mockito.asm.Type type80 = classInfo78.getSuperType();
        org.mockito.asm.Type[] typeArray81 = classInfo78.getInterfaces();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(signature39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(constructor69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "()V" + "'", str70, "()V");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(methodInfo73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()V" + "'", str74, "()V");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(typeArray81);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()LLV;;", "Ljava/beans/PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()LLV;;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        int int38 = methodInfo37.getModifiers();
        int int39 = methodInfo37.getModifiers();
        org.mockito.cglib.core.Signature signature40 = methodInfo37.getSignature();
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class<?> wildcardClass44 = classArray43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type46 = classInfo45.getSuperType();
        org.mockito.cglib.core.Signature signature49 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str50 = signature49.getName();
        org.mockito.asm.Type type51 = signature49.getReturnType();
        boolean boolean52 = classInfo45.equals((java.lang.Object) type51);
        org.mockito.asm.Type type53 = classInfo45.getType();
        boolean boolean54 = signature40.equals((java.lang.Object) classInfo45);
        org.mockito.asm.Type type55 = signature40.getReturnType();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.Class<?> wildcardClass61 = propertyDescriptorArray57.getClass();
        boolean boolean62 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        boolean boolean65 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        boolean boolean67 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        boolean boolean69 = type56.equals((java.lang.Object) propertyDescriptorArray68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class<?> wildcardClass74 = methodArray73.getClass();
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass74);
        int int76 = classInfo75.getModifiers();
        int int77 = classInfo75.getModifiers();
        org.mockito.asm.Type[] typeArray78 = classInfo75.getInterfaces();
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray78);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(signature40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str64, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1041 + "'", int76 == 1041);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1041 + "'", int77 == 1041);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)F" + "'", str79, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)F");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V" + "'", str80, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setShortDescription("char");
        propertyDescriptor10.setShortDescription("boolean");
        propertyDescriptor10.setPreferred(true);
        java.lang.Object obj24 = null;
        boolean boolean25 = propertyDescriptor10.equals(obj24);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.beans.PropertyDescriptor[] propertyDescriptorArray1 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray4 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray1, true, true);
        java.lang.Class<?> wildcardClass5 = propertyDescriptorArray1.getClass();
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        boolean boolean13 = type0.equals((java.lang.Object) propertyDescriptorArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray14, true, true);
        java.lang.Class<?> wildcardClass18 = methodArray17.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        int int20 = classInfo19.getModifiers();
        int int21 = classInfo19.getModifiers();
        org.mockito.asm.Type[] typeArray22 = classInfo19.getInterfaces();
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        int int24 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray1);
        org.junit.Assert.assertNotNull(methodArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str8, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1041 + "'", int20 == 1041);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1041 + "'", int21 == 1041);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)F" + "'", str23, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)F");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getName();
        org.mockito.asm.Type[] typeArray4 = signature2.getArgumentTypes();
        java.lang.String str5 = signature2.toString();
        org.mockito.asm.Type type6 = signature2.getReturnType();
        java.lang.String str7 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(SSS)S" + "'", str5, "(SSS)S");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(SSS)S" + "'", str7, "(SSS)S");
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        int int10 = type9.getSize();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str19 = signature18.getName();
        org.mockito.asm.Type type20 = signature18.getReturnType();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type22, type23, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray25);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray25);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("", type9, typeArray25);
        int int30 = type9.getSize();
        org.mockito.asm.Type type31 = type9.getElementType();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(SSS)S" + "'", str26, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(SSS)S" + "'", str27, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str28, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("void", method7, method8);
        propertyDescriptor9.setExpert(false);
        propertyDescriptor9.setBound(false);
        propertyDescriptor9.setBound(false);
        propertyDescriptor9.setBound(false);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        propertyDescriptor9.setValue("", (java.lang.Object) classArray19);
        java.util.List list23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass3, classArray19, list23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer18.setNamingPolicy(namingPolicy21);
        enhancer18.setSerialVersionUID((java.lang.Long) 10L);
        enhancer18.setAttemptLoad(false);
        enhancer18.setUseFactory(true);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray29);
        int int32 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray31);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray31);
        enhancer18.setInterfaces(classArray31);
        enhancer0.setInterfaces(classArray31);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type5, type6, type7 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray8);
        boolean boolean11 = type1.equals((java.lang.Object) type3);
        java.lang.String str12 = type1.toString();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.Signature signature45 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor42);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray46);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(SSS)S" + "'", str9, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)LV;" + "'", str10, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/Class;" + "'", str12, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(signature45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()[Ljava/lang/Class;" + "'", str47, "()[Ljava/lang/Class;");
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("LZ;");
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class<?> wildcardClass7 = classArray6.getClass();
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = type9.getElementType();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("Z");
        int int13 = type12.getSize();
        java.lang.String str14 = type12.getClassName();
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass18 = classArray17.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        boolean boolean21 = classInfo19.equals((java.lang.Object) (-1.0f));
        java.lang.String str22 = classInfo19.toString();
        java.lang.String str23 = classInfo19.toString();
        int int24 = classInfo19.getModifiers();
        org.mockito.asm.Type type25 = classInfo19.getType();
        org.mockito.asm.Type[] typeArray26 = classInfo19.getInterfaces();
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray26);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("void", type10, typeArray26);
        org.mockito.asm.Type[] typeArray29 = signature28.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=()LV;; expert; values={Z=Ljava/lang/Object;}]", type2, typeArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=()LV;; expert; values={Z=Ljava/lang/Object;}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/lang/Class;" + "'", str8, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Z" + "'", str14, "Z");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.Class[]" + "'", str22, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.Class[]" + "'", str23, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1041 + "'", int24 == 1041);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)LZ;" + "'", str27, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)LZ;");
        org.junit.Assert.assertNotNull(typeArray29);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, true, true);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray16);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        enhancer0.setInterfaces(classArray23);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classArray23);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type]");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ljava.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type];" + "'", str2, "Ljava.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type];");
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        boolean boolean13 = enhancer9.getUseCache();
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer9.setCallback(callback14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray21 = new org.mockito.cglib.proxy.Callback[] { callback20 };
        enhancer16.setCallbacks(callbackArray21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        enhancer23.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer23.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy30);
        enhancer9.setNamingPolicy(namingPolicy30);
        enhancer0.setNamingPolicy(namingPolicy30);
        java.lang.Class[] classArray34 = new java.lang.Class[] {};
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class<?> wildcardClass37 = classArray36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type39 = classInfo38.getSuperType();
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str43 = signature42.getName();
        org.mockito.asm.Type type44 = signature42.getReturnType();
        boolean boolean45 = classInfo38.equals((java.lang.Object) type44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class<?> wildcardClass50 = propertyDescriptorArray46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass50);
        boolean boolean52 = classInfo38.equals((java.lang.Object) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.cglib.core.ClassInfo classInfo54 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray56);
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, true);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray59);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        java.lang.String[] strArray71 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray75 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray72, true, true);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray72, false, false);
        java.lang.reflect.Method[] methodArray79 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray71, methodArray78);
        java.lang.reflect.Method[] methodArray80 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray70, methodArray78);
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray64, methodArray78);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass83 = type82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, false, true);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray64, methodArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj90 = enhancer0.create(classArray57, (java.lang.Object[]) methodArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(callbackArray21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str55, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertNotNull(methodArray75);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(methodArray79);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 65);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(methodInfo37);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("va.lang.Object", "I");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        boolean boolean8 = enhancer3.getAttemptLoad();
        enhancer3.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer3.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer3.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer3.getStrategy();
        boolean boolean14 = signature2.equals((java.lang.Object) enhancer3);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer15.setNamingPolicy(namingPolicy16);
        enhancer15.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        enhancer15.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseFactory(true);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray28);
        enhancer24.setInterfaces(classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        enhancer15.setInterfaces(classArray32);
        // The following exception was thrown during execution in test generation
        try {
            enhancer3.setCallbackTypes(classArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray32);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) ' ');
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, 0);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        java.lang.String str48 = signature47.getDescriptor();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()V" + "'", str48, "()V");
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        boolean boolean4 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass2);
        java.util.List list5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list6 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass2, list5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lorg/mockito/cglib/core/ReflectUtils$3;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer7.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer16.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = enhancer16.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = methodArray24.getClass();
        enhancer16.setSuperclass((java.lang.Class) wildcardClass25);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass25);
        java.lang.Class[] classArray28 = null;
        java.util.List list29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass25, classArray28, list29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str39 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class<?> wildcardClass44 = propertyDescriptorArray40.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass44);
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, true);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray48);
        java.lang.Object obj51 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray55 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        int int61 = type59.getOpcode((int) (short) 1);
        java.lang.String str62 = type59.getDescriptor();
        int int64 = type59.getOpcode((int) (byte) 100);
        boolean boolean65 = signature58.equals((java.lang.Object) int64);
        java.lang.String str66 = signature58.getDescriptor();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean68 = signature58.equals((java.lang.Object) type67);
        java.lang.String str69 = signature58.toString();
        org.mockito.asm.Type[] typeArray70 = signature58.getArgumentTypes();
        java.lang.String str71 = signature58.toString();
        org.mockito.asm.Type[] typeArray72 = signature58.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()V" + "'", str39, "()V");
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "()V" + "'", str54, "()V");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "V" + "'", str62, "V");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 105 + "'", int64 == 105);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(SSS)S" + "'", str66, "(SSS)S");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(SSS)S" + "'", str69, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(SSS)S" + "'", str71, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray72);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer11.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer18.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer18.getAttemptLoad();
        enhancer18.setInterceptDuringConstruction(false);
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer18.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy28);
        enhancer0.setNamingPolicy(namingPolicy28);
        enhancer0.setUseFactory(false);
        enhancer0.setUseCache(false);
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        enhancer11.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer11.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        enhancer11.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer34.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer41.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy51);
        enhancer26.setNamingPolicy(namingPolicy51);
        enhancer11.setNamingPolicy(namingPolicy51);
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.Class<?> wildcardClass56 = namingPolicy51.getClass();
        org.mockito.cglib.proxy.Callback callback57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass56, callback57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer8.setNamingPolicy(namingPolicy9);
        enhancer8.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer8.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer19.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy36);
        enhancer8.setNamingPolicy(namingPolicy36);
        enhancer0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.Class<?> wildcardClass47 = propertyDescriptorArray43.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, false, true);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray51);
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        java.lang.Class[] classArray59 = new java.lang.Class[] {};
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class<?> wildcardClass62 = classArray61.getClass();
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass62);
        boolean boolean65 = signature58.equals((java.lang.Object) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type[] typeArray67 = classInfo66.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = enhancer0.create(classArray53, (java.lang.Object[]) typeArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(typeArray67);
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        java.lang.String str6 = classInfo4.toString();
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type type8 = classInfo4.getType();
        int int9 = type8.getSort();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.Class[]" + "'", str6, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setPreferred(true);
        boolean boolean20 = propertyDescriptor10.isPreferred();
        propertyDescriptor10.setConstrained(false);
        propertyDescriptor10.setConstrained(true);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class<?> wildcardClass28 = classArray27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = classInfo29.getSuperType();
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str34 = signature33.getName();
        org.mockito.asm.Type type35 = signature33.getReturnType();
        boolean boolean36 = classInfo29.equals((java.lang.Object) type35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class<?> wildcardClass41 = propertyDescriptorArray37.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        boolean boolean43 = classInfo29.equals((java.lang.Object) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass41);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, false);
        boolean boolean51 = propertyDescriptor10.equals((java.lang.Object) propertyDescriptorArray47);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str46, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer38.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer38.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer45.setNamingPolicy(namingPolicy48);
        boolean boolean50 = enhancer45.getAttemptLoad();
        enhancer45.setInterceptDuringConstruction(false);
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        enhancer55.setNamingPolicy(namingPolicy56);
        enhancer55.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, true, true);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray60);
        enhancer55.setInterfaces(classArray64);
        enhancer45.setInterfaces(classArray64);
        java.lang.reflect.Constructor constructor67 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass44, classArray64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray68, true, true);
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray68);
        java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor67, (java.lang.Object[]) propertyDescriptorArray68);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67, 4);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor67);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67, (int) (byte) -1);
        org.mockito.asm.Type[] typeArray81 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor67);
        java.lang.Object obj82 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass6, classArray34, (java.lang.Object[]) typeArray81);
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list84 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass6, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(constructor67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "()V" + "'", str76, "()V");
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("()D");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setPreferred(true);
        java.lang.String str15 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str5, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=()D; preferred]" + "'", str15, "java.beans.PropertyDescriptor[name=()D; preferred]");
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        org.mockito.asm.Type type9 = classInfo4.getType();
        java.lang.String str10 = type9.getInternalName();
        java.lang.String str11 = type9.getClassName();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.Class[]" + "'", str11, "java.lang.Class[]");
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        boolean boolean6 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer7.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        enhancer18.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer18.getClassLoader();
        enhancer13.setClassLoader(classLoader23);
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader27 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        enhancer30.setStrategy(generatorStrategy34);
        enhancer0.setStrategy(generatorStrategy34);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback39 = null;
        enhancer0.setCallback(callback39);
        java.lang.Class[] classArray41 = null;
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer42.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        boolean boolean54 = enhancer49.getAttemptLoad();
        enhancer49.setInterceptDuringConstruction(false);
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer59.setNamingPolicy(namingPolicy60);
        enhancer59.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        enhancer59.setInterfaces(classArray68);
        enhancer49.setInterfaces(classArray68);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass48, classArray68);
        java.lang.String str72 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.asm.Type[] typeArray73 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71, (int) (byte) 100);
        int int76 = methodInfo75.getModifiers();
        org.mockito.asm.Type[] typeArray77 = methodInfo75.getExceptionTypes();
        java.lang.Class[] classArray78 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = enhancer0.create(classArray41, (java.lang.Object[]) classArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()V" + "'", str72, "()V");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        boolean boolean15 = enhancer0.getAttemptLoad();
        boolean boolean16 = enhancer0.getAttemptLoad();
        boolean boolean17 = enhancer0.getUseCache();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, true, true);
        java.lang.Class<?> wildcardClass22 = propertyDescriptorArray18.getClass();
        boolean boolean23 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass22);
        boolean boolean26 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass22);
        boolean boolean28 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.beans.PropertyDescriptor;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str25, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo2 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray13);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        boolean boolean21 = enhancer16.getAttemptLoad();
        enhancer16.setInterceptDuringConstruction(false);
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer16.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer16.setCallbackFilter(callbackFilter29);
        boolean boolean31 = enhancer16.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass38 = enhancer32.getClass();
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        org.mockito.cglib.core.Signature signature42 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str43 = signature42.getName();
        org.mockito.asm.Type type44 = signature42.getReturnType();
        org.mockito.asm.Type type45 = signature42.getReturnType();
        boolean boolean46 = classInfo39.equals((java.lang.Object) signature42);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray49);
        boolean boolean52 = signature42.equals((java.lang.Object) classArray49);
        enhancer16.setInterfaces(classArray49);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setUseFactory(true);
        enhancer54.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer54.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer62.setCallbacks(callbackArray67);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback73 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray74 = new org.mockito.cglib.proxy.Callback[] { callback73 };
        enhancer69.setCallbacks(callbackArray74);
        enhancer62.setCallbacks(callbackArray74);
        enhancer54.setCallbacks(callbackArray74);
        enhancer16.setCallbacks(callbackArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj79 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass1, classArray13, callbackFilter15, callbackArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(classInfo2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/Type" + "'", str3, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(callbackArray67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(callbackArray74);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer17.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer24.setNamingPolicy(namingPolicy27);
        boolean boolean29 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(false);
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer24.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy34);
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer0.setCallbackFilter(callbackFilter37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        java.lang.String str9 = classInfo4.toString();
        int int10 = classInfo4.getModifiers();
        org.mockito.asm.Type type11 = classInfo4.getSuperType();
        int int12 = classInfo4.getModifiers();
        org.mockito.asm.Type[] typeArray13 = classInfo4.getInterfaces();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.lang.Class[]" + "'", str9, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1041 + "'", int10 == 1041);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1041 + "'", int12 == 1041);
        org.junit.Assert.assertNotNull(typeArray13);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Object obj7 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setName("()D");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        boolean boolean17 = classInfo15.equals((java.lang.Object) (-1.0f));
        java.lang.String str18 = classInfo15.toString();
        org.mockito.asm.Type type19 = classInfo15.getSuperType();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass23 = classArray22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = type25.getElementType();
        boolean boolean27 = type19.equals((java.lang.Object) type26);
        int int28 = type19.getSize();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int28);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor3.setReadMethod(method30);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type35.getOpcode((int) (short) 1);
        java.lang.String str38 = type35.getDescriptor();
        int int40 = type35.getOpcode((int) (byte) 100);
        boolean boolean41 = signature34.equals((java.lang.Object) int40);
        java.lang.String str42 = signature34.getDescriptor();
        java.beans.PropertyEditor propertyEditor43 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature34);
        propertyDescriptor3.setShortDescription("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;");
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.lang.Class[]" + "'", str18, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[Ljava/lang/Class;" + "'", str24, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "V" + "'", str38, "V");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 105 + "'", int40 == 105);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(SSS)S" + "'", str42, "(SSS)S");
        org.junit.Assert.assertNull(propertyEditor43);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer11.setCallback(callback14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class<?> wildcardClass19 = classArray18.getClass();
        enhancer11.setSuperclass((java.lang.Class) wildcardClass19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer21.setNamingPolicy(namingPolicy22);
        enhancer21.setAttemptLoad(false);
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        boolean boolean33 = enhancer28.getAttemptLoad();
        enhancer28.setInterceptDuringConstruction(false);
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer28.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        java.lang.String str38 = org.mockito.asm.Type.getConstructorDescriptor(constructor37);
        org.mockito.cglib.core.MethodInfo methodInfo40 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor37, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor37);
        boolean boolean42 = type7.equals((java.lang.Object) constructor37);
        int int43 = type7.getSize();
        int int44 = type7.getSize();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass46 = type45.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass46);
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = classInfo49.getSuperType();
        int int51 = classInfo49.getModifiers();
        java.lang.String str52 = classInfo49.toString();
        boolean boolean53 = type7.equals((java.lang.Object) str52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass55 = type54.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.mockito.cglib.core.ClassInfo classInfo58 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type59 = classInfo58.getType();
        java.lang.String str60 = type59.getDescriptor();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer61.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        java.lang.Class<?> wildcardClass67 = enhancer61.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer68.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        enhancer68.setNamingPolicy(namingPolicy71);
        boolean boolean73 = enhancer68.getAttemptLoad();
        enhancer68.setInterceptDuringConstruction(false);
        enhancer68.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        enhancer78.setNamingPolicy(namingPolicy79);
        enhancer78.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray83, true, true);
        java.lang.Class[] classArray87 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray83);
        enhancer78.setInterfaces(classArray87);
        enhancer68.setInterfaces(classArray87);
        java.lang.reflect.Constructor constructor90 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass67, classArray87);
        java.lang.String str91 = org.mockito.asm.Type.getConstructorDescriptor(constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo93 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray94 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor90);
        boolean boolean95 = type59.equals((java.lang.Object) typeArray94);
        org.mockito.cglib.core.Signature signature96 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=Z]", type7, typeArray94);
        int int97 = type7.getSort();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "()V" + "'", str38, "()V");
        org.junit.Assert.assertNotNull(methodInfo40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.mockito.asm.Type" + "'", str52, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(classInfo58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str60, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(constructor90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "()V" + "'", str91, "()V");
        org.junit.Assert.assertNotNull(methodInfo93);
        org.junit.Assert.assertNotNull(typeArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 9 + "'", int97 == 9);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer20.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        enhancer25.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader30 = enhancer25.getClassLoader();
        enhancer20.setClassLoader(classLoader30);
        enhancer20.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer20.getStrategy();
        enhancer0.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback44 = null;
        enhancer36.setCallback(callback44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer46.setNamingPolicy(namingPolicy47);
        enhancer46.setAttemptLoad(false);
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        enhancer53.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = enhancer53.getClassLoader();
        org.mockito.cglib.proxy.Callback callback57 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray58 = new org.mockito.cglib.proxy.Callback[] { callback57 };
        enhancer53.setCallbacks(callbackArray58);
        enhancer46.setCallbacks(callbackArray58);
        enhancer36.setCallbacks(callbackArray58);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter62 = null;
        enhancer36.setCallbackFilter(callbackFilter62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        enhancer64.setNamingPolicy(namingPolicy65);
        enhancer64.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray69);
        enhancer64.setInterfaces(classArray73);
        int int75 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray73);
        enhancer36.setInterfaces(classArray73);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(callbackArray58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("double", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("void", method6, method7);
        propertyDescriptor8.setExpert(true);
        boolean boolean11 = propertyDescriptor8.isPreferred();
        java.lang.String str12 = propertyDescriptor8.getShortDescription();
        propertyDescriptor8.setName("void");
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray16, true, true);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray16);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray26);
        java.lang.String[] strArray28 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, false, false);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray35);
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray35);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray35);
        propertyDescriptor8.setValue("LV;", (java.lang.Object) methodArray38);
        java.lang.reflect.Method method40 = null;
        propertyDescriptor8.setWriteMethod(method40);
        java.lang.reflect.Method method42 = propertyDescriptor8.getWriteMethod();
        boolean boolean43 = propertyDescriptor3.equals((java.lang.Object) method42);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(methodArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.Object obj43 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 100);
        org.mockito.cglib.core.MethodInfo methodInfo47 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(methodInfo47);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Object obj7 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setName("()D");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        boolean boolean17 = classInfo15.equals((java.lang.Object) (-1.0f));
        java.lang.String str18 = classInfo15.toString();
        org.mockito.asm.Type type19 = classInfo15.getSuperType();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass23 = classArray22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = type25.getElementType();
        boolean boolean27 = type19.equals((java.lang.Object) type26);
        int int28 = type19.getSize();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int28);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor3.setReadMethod(method30);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type35.getOpcode((int) (short) 1);
        java.lang.String str38 = type35.getDescriptor();
        int int40 = type35.getOpcode((int) (byte) 100);
        boolean boolean41 = signature34.equals((java.lang.Object) int40);
        java.lang.String str42 = signature34.getDescriptor();
        java.beans.PropertyEditor propertyEditor43 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature34);
        boolean boolean44 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.lang.Class[]" + "'", str18, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[Ljava/lang/Class;" + "'", str24, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "V" + "'", str38, "V");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 105 + "'", int40 == 105);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(SSS)S" + "'", str42, "(SSS)S");
        org.junit.Assert.assertNull(propertyEditor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int2 = type0.getOpcode(100);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 103 + "'", int2 == 103);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "double" + "'", str3, "double");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer8.getStrategy();
        enhancer0.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer0.setCallback(callback21);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Object[] objArray36 = null;
        java.lang.Object obj37 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, objArray36);
        org.mockito.asm.Type[] typeArray38 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature40 = methodInfo39.getSignature();
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class<?> wildcardClass44 = classArray43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        boolean boolean47 = classInfo45.equals((java.lang.Object) (-1.0f));
        java.lang.String str48 = classInfo45.toString();
        org.mockito.asm.Type type49 = classInfo45.getSuperType();
        org.mockito.asm.Type type50 = classInfo45.getType();
        org.mockito.asm.Type[] typeArray51 = classInfo45.getInterfaces();
        int int52 = classInfo45.getModifiers();
        org.mockito.asm.Type type53 = classInfo45.getType();
        boolean boolean54 = signature40.equals((java.lang.Object) type53);
        java.lang.String str55 = signature40.getDescriptor();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(signature40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.lang.Class[]" + "'", str48, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1041 + "'", int52 == 1041);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "()V" + "'", str55, "()V");
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lva/lang/Object;()S");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str5, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str6, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classInfo7);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setWriteMethod(method5);
        boolean boolean7 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass14);
        org.mockito.cglib.proxy.Callback callback17 = null;
        enhancer0.setCallback(callback17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer27.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        boolean boolean39 = enhancer34.getAttemptLoad();
        enhancer34.setInterceptDuringConstruction(false);
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer34.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy44);
        enhancer19.setNamingPolicy(namingPolicy44);
        enhancer0.setNamingPolicy(namingPolicy44);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class<?> wildcardClass51 = classArray50.getClass();
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass51);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray55, true, false);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        boolean boolean9 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        enhancer1.setUseCache(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer8.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=java.beans.PropertyDescriptor[name=I]]]", classLoader20);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=void; shortDescription=java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer0.setCallbackFilter(callbackFilter12);
        enhancer0.setAttemptLoad(false);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class<?> wildcardClass19 = classArray18.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass19);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass19);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Ljava/lang/Class;" + "'", str21, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[Ljava/lang/Class;" + "'", str24, "[Ljava/lang/Class;");
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        boolean boolean9 = enhancer1.getAttemptLoad();
        enhancer1.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        enhancer12.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer12.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray20);
        int int25 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        enhancer12.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer35.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        boolean boolean47 = enhancer42.getAttemptLoad();
        enhancer42.setInterceptDuringConstruction(false);
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer42.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy52);
        enhancer27.setNamingPolicy(namingPolicy52);
        enhancer12.setNamingPolicy(namingPolicy52);
        enhancer1.setNamingPolicy(namingPolicy52);
        java.lang.ClassLoader classLoader57 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.findConstructor("Z", classLoader57);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader57);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("int");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.String str7 = propertyDescriptor3.getDisplayName();
        boolean boolean8 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        enhancer1.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer1.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findMethod("()LV;", classLoader10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        boolean boolean12 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setAttemptLoad(false);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader31 = enhancer26.getClassLoader();
        enhancer19.setClassLoader(classLoader31);
        enhancer13.setClassLoader(classLoader31);
        enhancer0.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer35.getNamingPolicy();
        boolean boolean46 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = enhancer47.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        enhancer35.setClassLoader(classLoader51);
        enhancer0.setClassLoader(classLoader51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        boolean boolean12 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setAttemptLoad(false);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader31 = enhancer26.getClassLoader();
        enhancer19.setClassLoader(classLoader31);
        enhancer13.setClassLoader(classLoader31);
        enhancer0.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer35.getNamingPolicy();
        boolean boolean46 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        enhancer47.setNamingPolicy(namingPolicy48);
        boolean boolean50 = enhancer47.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        enhancer35.setClassLoader(classLoader51);
        enhancer0.setClassLoader(classLoader51);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer0.setCallback(callback55);
        java.lang.Class[] classArray57 = new java.lang.Class[] {};
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class<?> wildcardClass60 = classArray59.getClass();
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        boolean boolean62 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.cglib.proxy.Callback callback66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass60, callback66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer7.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer16.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = enhancer16.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = methodArray24.getClass();
        enhancer16.setSuperclass((java.lang.Class) wildcardClass25);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        enhancer28.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer28.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        enhancer28.setInterfaces(classArray40);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.util.List list45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass25, classArray40, list45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy25);
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer29.setCallbacks(callbackArray34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        enhancer36.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer36.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy43);
        enhancer0.setNamingPolicy(namingPolicy43);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy43);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setUseFactory(true);
        enhancer6.setUseFactory(false);
        boolean boolean11 = enhancer6.getUseCache();
        enhancer6.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer6.getNamingPolicy();
        boolean boolean15 = enhancer6.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(false);
        enhancer16.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer21.setNamingPolicy(namingPolicy22);
        enhancer21.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray26, true, true);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        enhancer21.setInterfaces(classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        enhancer16.setInterfaces(classArray30);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        enhancer6.setInterfaces(classArray30);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer6.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer37.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer37.getStrategy();
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer45.setNamingPolicy(namingPolicy46);
        enhancer45.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        enhancer45.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer54.setCallbacks(callbackArray59);
        enhancer45.setCallbacks(callbackArray59);
        enhancer37.setCallbacks(callbackArray59);
        enhancer6.setCallbacks(callbackArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass4, callbackArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(callbackArray59);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("(Ljava/lang/Cloneable;Ljava/io/Serializable;)B", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray6 = classInfo4.getInterfaces();
        java.lang.String str7 = classInfo4.toString();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer8.setNamingPolicy(namingPolicy9);
        enhancer8.setUseCache(true);
        enhancer8.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = enhancer8.getClassLoader();
        boolean boolean28 = classInfo4.equals((java.lang.Object) enhancer8);
        org.mockito.asm.Type type29 = classInfo4.getType();
        java.lang.String str30 = type29.getClassName();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.lang.Class[]" + "'", str30, "java.lang.Class[]");
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        propertyDescriptor3.setHidden(true);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("L<init>()V;");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) '4');
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.ClassInfo classInfo45 = methodInfo44.getClassInfo();
        org.mockito.asm.Type[] typeArray46 = classInfo45.getInterfaces();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(typeArray46);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str36 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo38 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str39 = methodInfo38.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()V" + "'", str36, "()V");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<init>()V" + "'", str39, "<init>()V");
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = methodInfo33.toString();
        java.lang.String str35 = methodInfo33.toString();
        org.mockito.cglib.core.Signature signature36 = methodInfo33.getSignature();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        enhancer37.setUseCache(true);
        boolean boolean42 = signature36.equals((java.lang.Object) enhancer37);
        enhancer37.setUseCache(false);
        enhancer37.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<init>()V" + "'", str34, "<init>()V");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<init>()V" + "'", str35, "<init>()V");
        org.junit.Assert.assertNotNull(signature36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)S");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer2.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean10 = type1.equals((java.lang.Object) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, true);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        enhancer28.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer28.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray40);
        enhancer28.setInterfaces(classArray40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray43);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray43);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, false, true);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray43);
        enhancer28.setInterfaces(classArray52);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(classArray52);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        enhancer11.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer11.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        enhancer11.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer34.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer41.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy51);
        enhancer26.setNamingPolicy(namingPolicy51);
        enhancer11.setNamingPolicy(namingPolicy51);
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader56 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass57 = classLoader56.getClass();
        org.mockito.cglib.proxy.Callback callback58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass57, callback58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer6.setNamingPolicy(namingPolicy9);
        boolean boolean11 = enhancer6.getAttemptLoad();
        enhancer6.setInterceptDuringConstruction(false);
        boolean boolean14 = enhancer6.getAttemptLoad();
        enhancer6.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        enhancer17.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer17.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray25);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        enhancer17.setInterfaces(classArray29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer40.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer40.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        enhancer47.setNamingPolicy(namingPolicy50);
        boolean boolean52 = enhancer47.getAttemptLoad();
        enhancer47.setInterceptDuringConstruction(false);
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer47.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy57);
        enhancer32.setNamingPolicy(namingPolicy57);
        enhancer17.setNamingPolicy(namingPolicy57);
        enhancer6.setNamingPolicy(namingPolicy57);
        enhancer0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Callback callback63 = null;
        enhancer0.setCallback(callback63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setAttemptLoad(false);
        enhancer65.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        enhancer70.setNamingPolicy(namingPolicy71);
        enhancer70.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray75, true, true);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray75);
        enhancer70.setInterfaces(classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray79);
        enhancer65.setInterfaces(classArray79);
        int int83 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray79);
        enhancer0.setInterfaces(classArray79);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass8, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Z()S", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.Class<?> wildcardClass16 = propertyDescriptor10.getPropertyType();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer17.setCallback(callback20);
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass25 = classArray24.getClass();
        enhancer17.setSuperclass((java.lang.Class) wildcardClass25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer27.setNamingPolicy(namingPolicy28);
        enhancer27.setAttemptLoad(false);
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        boolean boolean39 = enhancer34.getAttemptLoad();
        enhancer34.setInterceptDuringConstruction(false);
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer34.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy44);
        enhancer17.setNamingPolicy(namingPolicy44);
        java.beans.PropertyEditor propertyEditor47 = propertyDescriptor10.createPropertyEditor((java.lang.Object) enhancer17);
        java.lang.reflect.Method method48 = propertyDescriptor10.getWriteMethod();
        java.lang.Class<?> wildcardClass49 = propertyDescriptor10.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNull(propertyEditor47);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNull(wildcardClass49);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setAttemptLoad(false);
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        java.lang.Class<?> wildcardClass38 = namingPolicy35.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.util.List list41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list42 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass38, list41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/cglib/core/DefaultNamingPolicy" + "'", str39, "org/mockito/cglib/core/DefaultNamingPolicy");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/cglib/core/DefaultNamingPolicy" + "'", str40, "org/mockito/cglib/core/DefaultNamingPolicy");
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)S");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer2.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean10 = type1.equals((java.lang.Object) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list13 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass8, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=()LV;; expert; values={Z=Ljava/lang/Object;}]", "java.beans.PropertyDescriptor[name=void; preferred](Ljava/lang/Cloneable;Ljava/io/Serializable;)Lorg/mockito/asm/Type;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; hidden]; displayName=()LV;; expert; values={Z=Ljava/lang/Object;}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer1.getStrategy();
        java.lang.Class<?> wildcardClass7 = enhancer1.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray23);
        enhancer18.setInterfaces(classArray27);
        enhancer8.setInterfaces(classArray27);
        java.lang.reflect.Constructor constructor30 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type33 = classInfo32.getSuperType();
        boolean boolean34 = type0.equals((java.lang.Object) type33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer35.getStrategy();
        java.lang.Class<?> wildcardClass41 = enhancer35.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        boolean boolean47 = enhancer42.getAttemptLoad();
        enhancer42.setInterceptDuringConstruction(false);
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        enhancer52.setNamingPolicy(namingPolicy53);
        enhancer52.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray57, true, true);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray57);
        enhancer52.setInterfaces(classArray61);
        enhancer42.setInterfaces(classArray61);
        java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass41, classArray61);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.asm.Type[] typeArray66 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        java.lang.String str68 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor64, 10);
        org.mockito.asm.Type[] typeArray71 = methodInfo70.getExceptionTypes();
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray71);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(constructor30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(constructor64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "()V" + "'", str65, "()V");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "()V" + "'", str68, "()V");
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()C" + "'", str72, "()C");
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray7 = new org.mockito.asm.Type[] { type4, type5, type6 };
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray7);
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray7);
        java.lang.String str10 = type2.toString();
        java.lang.String str11 = type2.getClassName();
        int int13 = type2.getOpcode(0);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method15, method16);
        boolean boolean18 = propertyDescriptor17.isExpert();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer20.getStrategy();
        java.lang.Class<?> wildcardClass26 = enhancer20.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer27.getAttemptLoad();
        enhancer27.setInterceptDuringConstruction(false);
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        enhancer37.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        enhancer37.setInterfaces(classArray46);
        enhancer27.setInterfaces(classArray46);
        java.lang.reflect.Constructor constructor49 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass26, classArray46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray50);
        java.lang.Object obj55 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor49, (java.lang.Object[]) propertyDescriptorArray50);
        org.mockito.cglib.core.MethodInfo methodInfo57 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor49, 4);
        int int58 = methodInfo57.getModifiers();
        int int59 = methodInfo57.getModifiers();
        int int60 = methodInfo57.getModifiers();
        org.mockito.asm.Type[] typeArray61 = methodInfo57.getExceptionTypes();
        propertyDescriptor17.setValue("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V", (java.lang.Object) typeArray61);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("<init>", type2, typeArray61);
        java.lang.String str64 = type2.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(SSS)S" + "'", str8, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(SSS)LV;" + "'", str9, "(SSS)LV;");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LV;" + "'", str10, "LV;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(constructor49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(methodInfo57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "LV;" + "'", str64, "LV;");
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, true, true);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray6);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        int int7 = classInfo4.getModifiers();
        java.lang.Class<?> wildcardClass8 = classInfo4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, false, true);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor19 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass8, classArray18);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.cglib.core.ReflectUtils$4.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1041 + "'", int7 == 1041);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(classArray18);
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Lorg/mockito/cglib/core/AbstractClassGenerator;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        boolean boolean4 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray5);
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseFactory(true);
        boolean boolean17 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        enhancer13.setUseCache(false);
        enhancer13.setUseFactory(false);
        enhancer13.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        enhancer31.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer31.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer39.setCallbacks(callbackArray44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer46.setCallbacks(callbackArray51);
        enhancer39.setCallbacks(callbackArray51);
        enhancer31.setCallbacks(callbackArray51);
        enhancer26.setCallbacks(callbackArray51);
        enhancer13.setCallbacks(callbackArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass1, classArray9, callbackFilter12, callbackArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(callbackArray51);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) 100, (byte) 1, (byte) 0, (byte) 1 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class10 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(Ljava/lang/Cloneable;Ljava/io/Serializable;)V; displayName=[Ljava/lang/reflect/Method;]", byteArray7, classLoader9);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 0, 100, 1, 0, 1]");
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.Object obj7 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setName("()D");
        java.lang.String str10 = propertyDescriptor3.getName();
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        boolean boolean17 = classInfo15.equals((java.lang.Object) (-1.0f));
        java.lang.String str18 = classInfo15.toString();
        org.mockito.asm.Type type19 = classInfo15.getSuperType();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass23 = classArray22.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = type25.getElementType();
        boolean boolean27 = type19.equals((java.lang.Object) type26);
        int int28 = type19.getSize();
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int28);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor3.setReadMethod(method30);
        org.mockito.cglib.core.Signature signature34 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        int int37 = type35.getOpcode((int) (short) 1);
        java.lang.String str38 = type35.getDescriptor();
        int int40 = type35.getOpcode((int) (byte) 100);
        boolean boolean41 = signature34.equals((java.lang.Object) int40);
        java.lang.String str42 = signature34.getDescriptor();
        java.beans.PropertyEditor propertyEditor43 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature34);
        propertyDescriptor3.setShortDescription("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;");
        propertyDescriptor3.setName("()L(SSS)[Ljava/lang/Class;;");
        java.lang.String str48 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "()D" + "'", str10, "()D");
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.lang.Class[]" + "'", str18, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[Ljava/lang/Class;" + "'", str24, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "V" + "'", str38, "V");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 105 + "'", int40 == 105);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(SSS)S" + "'", str42, "(SSS)S");
        org.junit.Assert.assertNull(propertyEditor43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "()L(SSS)[Ljava/lang/Class;;" + "'", str48, "()L(SSS)[Ljava/lang/Class;;");
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        enhancer0.setStrategy(generatorStrategy4);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass9 = classArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str16 = type15.getInternalName();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Ljava/lang/Class;" + "'", str14, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setAttemptLoad(false);
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer17.setCallbacks(callbackArray22);
        enhancer10.setCallbacks(callbackArray22);
        enhancer0.setCallbacks(callbackArray22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        enhancer28.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        enhancer28.setInterfaces(classArray37);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer0.setInterfaces(classArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader41 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, true, true);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, true, false);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str11 = type10.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.lang.reflect.Method[]" + "'", str11, "java.lang.reflect.Method[]");
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer7.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        boolean boolean16 = enhancer0.getUseCache();
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class<?> wildcardClass20 = classArray19.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type22 = classInfo21.getSuperType();
        java.lang.String str23 = classInfo21.toString();
        org.mockito.asm.Type[] typeArray24 = classInfo21.getInterfaces();
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class<?> wildcardClass28 = classArray27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        boolean boolean31 = classInfo29.equals((java.lang.Object) (-1.0f));
        java.lang.String str32 = classInfo29.toString();
        org.mockito.asm.Type type33 = classInfo29.getSuperType();
        java.lang.Class<?> wildcardClass34 = type33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        boolean boolean36 = classInfo21.equals((java.lang.Object) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        boolean boolean38 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass34);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.Class[]" + "'", str23, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.lang.Class[]" + "'", str32, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray9 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray6, true, true);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor11 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass3, classArray10);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(methodArray9);
        org.junit.Assert.assertNotNull(classArray10);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("<init>", "V");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<init>" + "'", str3, "<init>");
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 68");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        boolean boolean9 = enhancer6.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        enhancer11.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader16 = enhancer11.getClassLoader();
        enhancer6.setClassLoader(classLoader16);
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        enhancer20.setUseCache(true);
        enhancer20.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.ClassLoader classLoader27 = enhancer20.getClassLoader();
        enhancer0.setClassLoader(classLoader27);
        java.lang.Class<?> wildcardClass29 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass29, callback30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class<?> wildcardClass7 = classArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type type11 = classInfo8.getSuperType();
        boolean boolean12 = signature2.equals((java.lang.Object) classInfo8);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str16 = signature15.getName();
        org.mockito.asm.Type type17 = signature15.getReturnType();
        org.mockito.asm.Type type18 = signature15.getReturnType();
        java.lang.String str19 = signature15.getDescriptor();
        boolean boolean20 = signature2.equals((java.lang.Object) str19);
        org.mockito.asm.Type[] typeArray21 = signature2.getArgumentTypes();
        org.mockito.asm.Type type22 = signature2.getReturnType();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type27 = signature26.getReturnType();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer30.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer30.getStrategy();
        java.lang.Class<?> wildcardClass36 = enhancer30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        java.lang.String str38 = classInfo37.toString();
        org.mockito.asm.Type[] typeArray39 = classInfo37.getInterfaces();
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("java.lang.Object", type29, typeArray39);
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("", type27, typeArray39);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class<?> wildcardClass45 = classArray44.getClass();
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = classInfo46.getSuperType();
        java.lang.String str48 = classInfo46.toString();
        org.mockito.asm.Type[] typeArray49 = classInfo46.getInterfaces();
        boolean boolean50 = signature41.equals((java.lang.Object) typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray49);
        int int52 = type22.getSize();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(SSS)S" + "'", str3, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(SSS)S" + "'", str19, "(SSS)S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str38, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.lang.Class[]" + "'", str48, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(Ljava/lang/Cloneable;Ljava/io/Serializable;)S" + "'", str51, "(Ljava/lang/Cloneable;Ljava/io/Serializable;)S");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        boolean boolean12 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer15.setNamingPolicy(namingPolicy16);
        boolean boolean18 = enhancer15.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.Class<?> wildcardClass24 = methodArray23.getClass();
        enhancer15.setSuperclass((java.lang.Class) wildcardClass24);
        boolean boolean26 = enhancer15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer15.getStrategy();
        enhancer0.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list8 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass3, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classInfo6);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader28 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        enhancer0.setUseCache(false);
        java.lang.Class class18 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType(class18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer7.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader12 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int17 = type16.getSize();
        java.lang.Class<?> wildcardClass18 = type16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        boolean boolean20 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass18);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer5.setNamingPolicy(namingPolicy6);
        enhancer5.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        enhancer5.setInterfaces(classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        enhancer0.setInterfaces(classArray14);
        boolean boolean18 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer7.setNamingPolicy(namingPolicy8);
        enhancer7.setUseCache(true);
        enhancer7.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer14.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy24);
        enhancer0.setNamingPolicy(namingPolicy24);
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptorArray9.getClass();
        boolean boolean14 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        propertyDescriptor3.setValue("()V", (java.lang.Object) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list23 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass13, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str17, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        org.mockito.cglib.proxy.Callback callback9 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray10 = new org.mockito.cglib.proxy.Callback[] { callback9 };
        enhancer0.setCallbacks(callbackArray10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer0.setCallbackFilter(callbackFilter12);
        boolean boolean14 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class15 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(callbackArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()S");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray11 = new org.mockito.asm.Type[] { type8, type9, type10 };
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray11);
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray11);
        boolean boolean14 = type4.equals((java.lang.Object) type6);
        int int15 = type4.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        java.lang.Class<?> wildcardClass22 = enhancer16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        java.lang.String str24 = classInfo23.toString();
        org.mockito.asm.Type[] typeArray25 = classInfo23.getInterfaces();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("", type4, typeArray25);
        boolean boolean27 = type1.equals((java.lang.Object) signature26);
        int int28 = type1.getSize();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = type1.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(SSS)S" + "'", str12, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(SSS)LV;" + "'", str13, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str24, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        int int10 = classInfo8.getModifiers();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=I; preferred]", type1, typeArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=I; preferred]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "char" + "'", str2, "char");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(typeArray11);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str1 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "S" + "'", str1, "S");
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        enhancer4.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer4.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        enhancer4.setInterfaces(classArray16);
        boolean boolean19 = enhancer4.getAttemptLoad();
        boolean boolean20 = signature2.equals((java.lang.Object) enhancer4);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        boolean boolean29 = enhancer21.getAttemptLoad();
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class<?> wildcardClass33 = classArray32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        enhancer21.setSuperclass((java.lang.Class) wildcardClass33);
        boolean boolean36 = enhancer21.getUseCache();
        enhancer21.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseFactory(true);
        enhancer39.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer45.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Callback callback49 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray50 = new org.mockito.cglib.proxy.Callback[] { callback49 };
        enhancer45.setCallbacks(callbackArray50);
        enhancer39.setCallbacks(callbackArray50);
        enhancer21.setCallbacks(callbackArray50);
        boolean boolean54 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        enhancer55.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer55.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer55.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer21.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        enhancer67.setNamingPolicy(namingPolicy68);
        enhancer67.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer72.getStrategy();
        enhancer67.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback80 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray81 = new org.mockito.cglib.proxy.Callback[] { callback80 };
        enhancer76.setCallbacks(callbackArray81);
        enhancer67.setCallbacks(callbackArray81);
        enhancer4.setCallbacks(callbackArray81);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter85 = null;
        enhancer4.setCallbackFilter(callbackFilter85);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[Ljava/lang/Class;" + "'", str34, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(callbackArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(callbackArray81);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        org.mockito.cglib.core.Signature signature34 = methodInfo33.getSignature();
        org.mockito.asm.Type[] typeArray35 = methodInfo33.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo36 = methodInfo33.getClassInfo();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        enhancer37.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer37.setCallbackFilter(callbackFilter42);
        boolean boolean44 = enhancer37.getUseCache();
        enhancer37.setAttemptLoad(false);
        boolean boolean47 = classInfo36.equals((java.lang.Object) enhancer37);
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setUseFactory(true);
        boolean boolean54 = enhancer50.getUseCache();
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer50.setCallback(callback55);
        enhancer50.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, true);
        java.lang.Class<?> wildcardClass63 = propertyDescriptorArray59.getClass();
        boolean boolean64 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass63);
        enhancer50.setSuperclass((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer50.getStrategy();
        enhancer37.setStrategy(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str66, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(generatorStrategy68);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        enhancer0.setInterfaces(classArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        boolean boolean16 = classInfo14.equals((java.lang.Object) (-1.0f));
        java.lang.String str17 = classInfo14.toString();
        int int18 = classInfo14.getModifiers();
        org.mockito.asm.Type type19 = classInfo14.getSuperType();
        org.mockito.asm.Type type20 = classInfo14.getType();
        boolean boolean21 = classInfo5.equals((java.lang.Object) classInfo14);
        org.mockito.asm.Type type22 = classInfo5.getSuperType();
        int int23 = type22.getSort();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptorArray25.getClass();
        boolean boolean30 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        int int35 = type34.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass42 = enhancer36.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer43.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer43.setNamingPolicy(namingPolicy46);
        boolean boolean48 = enhancer43.getAttemptLoad();
        enhancer43.setInterceptDuringConstruction(false);
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        enhancer53.setNamingPolicy(namingPolicy54);
        enhancer53.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray58, true, true);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray58);
        enhancer53.setInterfaces(classArray62);
        enhancer43.setInterfaces(classArray62);
        java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass42, classArray62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray66, true, true);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray66);
        java.lang.Object obj71 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor65, (java.lang.Object[]) propertyDescriptorArray66);
        org.mockito.cglib.core.MethodInfo methodInfo73 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65, 4);
        int int74 = methodInfo73.getModifiers();
        int int75 = methodInfo73.getModifiers();
        org.mockito.cglib.core.Signature signature76 = methodInfo73.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo77 = methodInfo73.getClassInfo();
        org.mockito.asm.Type[] typeArray78 = methodInfo73.getExceptionTypes();
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("", type34, typeArray78);
        org.mockito.cglib.core.Signature signature80 = new org.mockito.cglib.core.Signature("java.lang.Object", type22, typeArray78);
        java.lang.String str81 = type22.getClassName();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.lang.Class[]" + "'", str17, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1041 + "'", int18 == 1041);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str33, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(constructor65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(methodInfo73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(signature76);
        org.junit.Assert.assertNotNull(classInfo77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.lang.Object" + "'", str81, "java.lang.Object");
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setAttemptLoad(false);
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer17.setCallbacks(callbackArray22);
        enhancer10.setCallbacks(callbackArray22);
        enhancer0.setCallbacks(callbackArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) callbackArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(callbackArray22);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        boolean boolean13 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        boolean boolean15 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        boolean boolean16 = classInfo4.equals((java.lang.Object) boolean15);
        org.mockito.asm.Type[] typeArray17 = classInfo4.getInterfaces();
        int int18 = classInfo4.getModifiers();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1041 + "'", int18 == 1041);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        enhancer0.setInterfaces(classArray34);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer44.setNamingPolicy(namingPolicy45);
        boolean boolean47 = enhancer44.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(false);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, false, false);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray58);
        java.lang.Class<?> wildcardClass60 = methodArray58.getClass();
        enhancer44.setSuperclass((java.lang.Class) wildcardClass60);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.lang.reflect.Method;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.cglib.core.ReflectUtils$3");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = methodInfo33.toString();
        java.lang.String str35 = methodInfo33.toString();
        org.mockito.cglib.core.Signature signature36 = methodInfo33.getSignature();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        enhancer37.setUseCache(true);
        boolean boolean42 = signature36.equals((java.lang.Object) enhancer37);
        enhancer37.setInterceptDuringConstruction(false);
        enhancer37.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<init>()V" + "'", str34, "<init>()V");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<init>()V" + "'", str35, "<init>()V");
        org.junit.Assert.assertNotNull(signature36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer0.setInterfaces(classArray18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer0.setCallbackFilter(callbackFilter22);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Callback callback19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass9, classArray18, callback19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass25 = classArray24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.lang.Class;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/lang/Class;" + "'", str13, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[Ljava/lang/Class;" + "'", str26, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("[Ljava/lang/Class;");
        boolean boolean3 = type1.equals((java.lang.Object) "short");
        java.lang.String str4 = type1.getInternalName();
        int int5 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(false);
        boolean boolean13 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer31.setNamingPolicy(namingPolicy32);
        enhancer31.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray39 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray36, true, true);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray36);
        enhancer31.setInterfaces(classArray40);
        enhancer21.setInterfaces(classArray40);
        java.lang.reflect.Constructor constructor43 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray40);
        java.lang.String str44 = org.mockito.asm.Type.getConstructorDescriptor(constructor43);
        org.mockito.asm.Type[] typeArray45 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        org.mockito.asm.Type[] typeArray46 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor43);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray49);
        java.lang.Object obj52 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor43, (java.lang.Object[]) classArray49);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(constructor43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "()V" + "'", str44, "()V");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(obj52);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=I]");
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.String str8 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.beans.PropertyDescriptor[name=I]" + "'", str7, "java.beans.PropertyDescriptor[name=I]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.beans.PropertyDescriptor[name=I]" + "'", str8, "java.beans.PropertyDescriptor[name=I]");
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "int");
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        java.lang.Object obj38 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray35);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]");
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        enhancer44.setInterfaces(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray50);
        enhancer41.setInterfaces(classArray50);
        boolean boolean54 = type40.equals((java.lang.Object) classArray50);
        java.lang.Object obj55 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray50);
        org.mockito.cglib.core.Signature signature56 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.Class<?> wildcardClass57 = signature56.getClass();
        java.util.List list58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list59 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass57, list58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(signature56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        boolean boolean15 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type6, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray9);
        boolean boolean12 = type2.equals((java.lang.Object) type4);
        int int13 = type2.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.String str22 = classInfo21.toString();
        org.mockito.asm.Type[] typeArray23 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("", type2, typeArray23);
        org.mockito.asm.Type type25 = signature24.getReturnType();
        java.lang.String str26 = signature24.toString();
        org.mockito.asm.Type type27 = signature24.getReturnType();
        int int29 = type27.getOpcode(7);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)LV;" + "'", str11, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str22, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "()[Ljava/lang/Class;" + "'", str26, "()[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setUseFactory(true);
        enhancer1.setUseFactory(false);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer1.setCallback(callback9);
        enhancer1.setAttemptLoad(false);
        java.lang.ClassLoader classLoader13 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor14 = org.mockito.cglib.core.ReflectUtils.findConstructor("", classLoader13);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor10.setWriteMethod(method18);
        boolean boolean20 = propertyDescriptor10.isPreferred();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor10.getPropertyEditorClass();
        propertyDescriptor10.setDisplayName("java.beans.PropertyDescriptor[name=Lhi!;]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        org.mockito.asm.Type type10 = classInfo4.getType();
        int int11 = classInfo4.getModifiers();
        org.mockito.asm.Type type12 = classInfo4.getType();
        org.mockito.asm.Type type13 = classInfo4.getSuperType();
        int int14 = classInfo4.getModifiers();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1041 + "'", int11 == 1041);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1041 + "'", int14 == 1041);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer0.setInterfaces(classArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class22 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        boolean boolean5 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setUseFactory(true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        enhancer6.setSuperclass((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/Type" + "'", str19, "org/mockito/asm/Type");
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        boolean boolean12 = propertyDescriptor3.isHidden();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        enhancer14.setAttemptLoad(false);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer21.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy31);
        propertyDescriptor3.setValue("[Ljava/lang/Class;", (java.lang.Object) namingPolicy31);
        propertyDescriptor3.setDisplayName("(SSS)[Ljava/lang/Class;");
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        boolean boolean47 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer36.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor55 = propertyDescriptor3.createPropertyEditor((java.lang.Object) namingPolicy54);
        propertyDescriptor3.setPreferred(true);
        boolean boolean58 = propertyDescriptor3.isExpert();
        java.lang.String str59 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setExpert(true);
        org.mockito.cglib.core.Signature signature64 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str65 = signature64.getName();
        org.mockito.asm.Type[] typeArray66 = signature64.getArgumentTypes();
        java.lang.String str67 = signature64.toString();
        org.mockito.asm.Type type68 = signature64.getReturnType();
        java.lang.String str69 = signature64.getName();
        org.mockito.asm.Type[] typeArray70 = signature64.getArgumentTypes();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer71.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        enhancer71.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = enhancer71.getStrategy();
        java.lang.Class<?> wildcardClass77 = enhancer71.getClass();
        org.mockito.cglib.core.ClassInfo classInfo78 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass77);
        org.mockito.cglib.core.Signature signature81 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str82 = signature81.getName();
        org.mockito.asm.Type type83 = signature81.getReturnType();
        org.mockito.asm.Type type84 = signature81.getReturnType();
        boolean boolean85 = classInfo78.equals((java.lang.Object) signature81);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = enhancer86.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = null;
        enhancer86.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = enhancer86.getStrategy();
        java.lang.Class<?> wildcardClass92 = enhancer86.getClass();
        org.mockito.cglib.core.ClassInfo classInfo93 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass92);
        java.lang.String str94 = classInfo93.toString();
        org.mockito.asm.Type[] typeArray95 = classInfo93.getInterfaces();
        boolean boolean96 = signature81.equals((java.lang.Object) classInfo93);
        org.mockito.asm.Type type97 = classInfo93.getType();
        boolean boolean98 = signature64.equals((java.lang.Object) classInfo93);
        java.beans.PropertyEditor propertyEditor99 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo93);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNull(propertyEditor55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str59, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(SSS)S" + "'", str67, "(SSS)S");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(classInfo78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(classInfo93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str94, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(propertyEditor99);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class<?> wildcardClass15 = classArray14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass15);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer18.setNamingPolicy(namingPolicy21);
        boolean boolean23 = enhancer18.getAttemptLoad();
        enhancer18.setInterceptDuringConstruction(false);
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer18.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer18.setCallbackFilter(callbackFilter31);
        java.lang.ClassLoader classLoader33 = enhancer18.getClassLoader();
        enhancer1.setClassLoader(classLoader33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method35 = org.mockito.cglib.core.ReflectUtils.findMethod("Lorg/mockito/cglib/proxy/Enhancer;", classLoader33);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader33);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer9.setCallbacks(callbackArray14);
        enhancer0.setCallbacks(callbackArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer17.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        enhancer31.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer37.setCallbacks(callbackArray42);
        enhancer31.setCallbacks(callbackArray42);
        enhancer0.setCallbacks(callbackArray42);
        enhancer0.setInterceptDuringConstruction(false);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, true);
        java.lang.Class<?> wildcardClass52 = methodArray51.getClass();
        boolean boolean53 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass52);
        boolean boolean54 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass52);
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass52);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.reflect.Method;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str57, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str58, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass3);
        boolean boolean7 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method8 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[Ljava/lang/Class;" + "'", str5, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/Class;" + "'", str11, "[Ljava/lang/Class;");
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class<?> wildcardClass7 = classArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type type11 = classInfo8.getSuperType();
        boolean boolean12 = signature2.equals((java.lang.Object) classInfo8);
        org.mockito.asm.Type type13 = signature2.getReturnType();
        org.mockito.asm.Type type14 = signature2.getReturnType();
        org.mockito.asm.Type[] typeArray15 = signature2.getArgumentTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(SSS)S" + "'", str3, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(SSS)S", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setShortDescription("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyType();
        boolean boolean8 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature35 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 0);
        org.mockito.cglib.core.Signature signature38 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.ClassInfo classInfo40 = methodInfo39.getClassInfo();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(classInfo40);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setUseFactory(true);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray12);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        int int18 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray14);
        enhancer1.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer20.getStrategy();
        java.lang.Class<?> wildcardClass26 = enhancer20.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, true, true);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray39);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, true, true);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, true, true);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray52, false, false);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray51, methodArray58);
        java.lang.reflect.Method[] methodArray60 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray58);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray44, methodArray58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray58);
        java.lang.Object obj63 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass26, classArray35, (java.lang.Object[]) methodArray58);
        enhancer1.setInterfaces(classArray35);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer65.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        enhancer65.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer65.getNamingPolicy();
        boolean boolean71 = enhancer65.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer72.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        enhancer72.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = enhancer72.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = null;
        enhancer78.setNamingPolicy(namingPolicy79);
        boolean boolean81 = enhancer78.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = enhancer78.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer83.getStrategy();
        enhancer83.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader88 = enhancer83.getClassLoader();
        enhancer78.setClassLoader(classLoader88);
        enhancer72.setClassLoader(classLoader88);
        enhancer65.setClassLoader(classLoader88);
        java.lang.ClassLoader classLoader92 = enhancer65.getClassLoader();
        enhancer1.setClassLoader(classLoader92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method94 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=I; preferred]", classLoader92);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/cglib/proxy/Enhancer;" + "'", str28, "Lorg/mockito/cglib/proxy/Enhancer;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(methodArray60);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader92);
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.lang.String str8 = classInfo7.toString();
        org.mockito.asm.Type type9 = classInfo7.getSuperType();
        org.mockito.asm.Type[] typeArray10 = classInfo7.getInterfaces();
        org.mockito.asm.Type type11 = classInfo7.getType();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass18 = enhancer12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass18);
        java.lang.String str20 = classInfo19.toString();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = propertyDescriptorArray21.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        boolean boolean27 = classInfo19.equals((java.lang.Object) propertyDescriptorArray26);
        java.lang.String str28 = classInfo19.toString();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = classInfo19.equals((java.lang.Object) enhancer29);
        org.mockito.asm.Type type33 = classInfo19.getSuperType();
        boolean boolean34 = classInfo7.equals((java.lang.Object) type33);
        int int35 = type33.getDimensions();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str8, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str20, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str28, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setShortDescription("LV;");
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setAttemptLoad(false);
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer17.setCallbacks(callbackArray22);
        enhancer10.setCallbacks(callbackArray22);
        enhancer0.setCallbacks(callbackArray22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        enhancer28.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        enhancer28.setInterfaces(classArray37);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer0.setInterfaces(classArray37);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        boolean boolean49 = enhancer41.getAttemptLoad();
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class<?> wildcardClass53 = classArray52.getClass();
        java.lang.String str54 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass53);
        boolean boolean56 = enhancer41.getUseCache();
        enhancer41.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer41.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer60.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        enhancer60.setNamingPolicy(namingPolicy63);
        boolean boolean65 = enhancer60.getAttemptLoad();
        enhancer60.setInterceptDuringConstruction(false);
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer60.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer60.getStrategy();
        enhancer41.setStrategy(generatorStrategy71);
        enhancer0.setStrategy(generatorStrategy71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class74 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[Ljava/lang/Class;" + "'", str54, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setName("void");
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray17);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, true, true);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, false, false);
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray23, methodArray30);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray22, methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray16, methodArray30);
        propertyDescriptor3.setValue("LV;", (java.lang.Object) methodArray33);
        java.lang.reflect.Method method35 = null;
        propertyDescriptor3.setWriteMethod(method35);
        java.lang.String str37 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer10.setCallback(callback13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass18 = classArray17.getClass();
        enhancer10.setSuperclass((java.lang.Class) wildcardClass18);
        boolean boolean20 = classInfo4.equals((java.lang.Object) wildcardClass18);
        java.lang.Class[] classArray21 = null;
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass18, classArray21, (java.lang.Object[]) strArray24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(classArray25);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer4.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer23.setNamingPolicy(namingPolicy24);
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        enhancer23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer32.setCallbacks(callbackArray37);
        enhancer23.setCallbacks(callbackArray37);
        enhancer0.setCallbacks(callbackArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("[Ljava/lang/reflect/Method;()[Ljava/lang/reflect/Method;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 56");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        boolean boolean9 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Lorg/mockito/cglib/proxy/Enhancer;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        boolean boolean13 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.util.List list20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass4, classArray15, list20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str6, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str8, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) ' ');
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class<?> wildcardClass41 = propertyDescriptorArray37.getClass();
        boolean boolean42 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        int int47 = type46.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer48.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        enhancer65.setNamingPolicy(namingPolicy66);
        enhancer65.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray70, true, true);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray70);
        enhancer65.setInterfaces(classArray74);
        enhancer55.setInterfaces(classArray74);
        java.lang.reflect.Constructor constructor77 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass54, classArray74);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray81 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray78, true, true);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray78);
        java.lang.Object obj83 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor77, (java.lang.Object[]) propertyDescriptorArray78);
        org.mockito.cglib.core.MethodInfo methodInfo85 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77, 4);
        int int86 = methodInfo85.getModifiers();
        int int87 = methodInfo85.getModifiers();
        org.mockito.cglib.core.Signature signature88 = methodInfo85.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo89 = methodInfo85.getClassInfo();
        org.mockito.asm.Type[] typeArray90 = methodInfo85.getExceptionTypes();
        org.mockito.cglib.core.Signature signature91 = new org.mockito.cglib.core.Signature("", type46, typeArray90);
        java.lang.Object obj92 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) typeArray90);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str45, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(constructor77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(methodArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNotNull(methodInfo85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(signature88);
        org.junit.Assert.assertNotNull(classInfo89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(obj92);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        java.lang.Object obj5 = propertyDescriptor3.getValue("Lhi!;");
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        enhancer1.setAttemptLoad(false);
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer8.setNamingPolicy(namingPolicy9);
        java.lang.ClassLoader classLoader11 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer8.setCallbacks(callbackArray13);
        enhancer1.setCallbacks(callbackArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(callbackArray13);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()D");
        int int2 = type1.getDimensions();
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray3);
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass10 = classArray9.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, false);
        boolean boolean22 = type12.equals((java.lang.Object) methodArray21);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray21);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray24);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, false, false);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        enhancer37.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        enhancer37.setInterfaces(classArray46);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass50 = type49.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass50);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray54);
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray28, methodArray54);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray6, methodArray54);
        boolean boolean58 = type1.equals((java.lang.Object) strArray6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/Class;" + "'", str11, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback7 = null;
        enhancer0.setCallback(callback7);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(false);
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer17.setCallback(callback25);
        enhancer17.setUseCache(true);
        java.lang.ClassLoader classLoader29 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer30.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer30.setNamingPolicy(namingPolicy33);
        boolean boolean35 = enhancer30.getAttemptLoad();
        enhancer30.setInterceptDuringConstruction(false);
        boolean boolean38 = enhancer30.getAttemptLoad();
        enhancer30.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        enhancer41.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer41.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        enhancer41.setInterfaces(classArray53);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer64.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer64.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer64.getNamingPolicy();
        enhancer60.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer71.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        enhancer71.setNamingPolicy(namingPolicy74);
        boolean boolean76 = enhancer71.getAttemptLoad();
        enhancer71.setInterceptDuringConstruction(false);
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = enhancer71.getNamingPolicy();
        enhancer60.setNamingPolicy(namingPolicy81);
        enhancer56.setNamingPolicy(namingPolicy81);
        enhancer41.setNamingPolicy(namingPolicy81);
        enhancer30.setNamingPolicy(namingPolicy81);
        enhancer17.setNamingPolicy(namingPolicy81);
        enhancer12.setNamingPolicy(namingPolicy81);
        enhancer0.setNamingPolicy(namingPolicy81);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature32 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.lang.String str35 = signature34.getName();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(signature32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<init>" + "'", str35, "<init>");
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(callbackArray5);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("double", "org/mockito/cglib/proxy/Enhancer");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "double" + "'", str3, "double");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "doubleorg/mockito/cglib/proxy/Enhancer" + "'", str4, "doubleorg/mockito/cglib/proxy/Enhancer");
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = type5.getElementType();
        java.lang.String str7 = type6.toString();
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        java.lang.Class<?> wildcardClass11 = classArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = classInfo12.getSuperType();
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str17 = signature16.getName();
        org.mockito.asm.Type type18 = signature16.getReturnType();
        boolean boolean19 = classInfo12.equals((java.lang.Object) type18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        java.lang.Class<?> wildcardClass24 = propertyDescriptorArray20.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        boolean boolean26 = classInfo12.equals((java.lang.Object) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        boolean boolean28 = type6.equals((java.lang.Object) type27);
        org.mockito.asm.Type type29 = type6.getElementType();
        int int31 = type6.getOpcode((int) 'a');
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/lang/Class;" + "'", str7, "Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 101 + "'", int31 == 101);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        enhancer25.setInterfaces(classArray34);
        enhancer15.setInterfaces(classArray34);
        java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass14, classArray34);
        enhancer0.setInterfaces(classArray34);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class41 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(constructor37);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        enhancer0.setStrategy(generatorStrategy4);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass9 = classArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        enhancer14.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setUseFactory(true);
        enhancer20.setUseFactory(false);
        boolean boolean25 = enhancer20.getUseCache();
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer28.setNamingPolicy(namingPolicy31);
        boolean boolean33 = enhancer28.getAttemptLoad();
        enhancer28.setInterceptDuringConstruction(false);
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer28.getStrategy();
        enhancer20.setStrategy(generatorStrategy39);
        enhancer14.setStrategy(generatorStrategy39);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer42.setNamingPolicy(namingPolicy43);
        boolean boolean45 = enhancer42.getAttemptLoad();
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        enhancer42.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        boolean boolean54 = enhancer49.getAttemptLoad();
        enhancer49.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback57 = null;
        enhancer49.setCallback(callback57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer59.setNamingPolicy(namingPolicy60);
        enhancer59.setAttemptLoad(false);
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer66.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = enhancer66.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer66.setCallbacks(callbackArray71);
        enhancer59.setCallbacks(callbackArray71);
        enhancer49.setCallbacks(callbackArray71);
        enhancer42.setCallbacks(callbackArray71);
        enhancer14.setCallbacks(callbackArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass9, callbackArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        boolean boolean12 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("void");
        propertyDescriptor3.setExpert(true);
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "void" + "'", str13, "void");
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy2 = null;
        enhancer1.setNamingPolicy(namingPolicy2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        java.lang.ClassLoader classLoader5 = enhancer1.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer6.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader11 = enhancer6.getClassLoader();
        enhancer1.setClassLoader(classLoader11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        boolean boolean18 = enhancer13.getAttemptLoad();
        enhancer13.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer13.setCallback(callback21);
        enhancer13.setUseCache(true);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor27 = org.mockito.cglib.core.ReflectUtils.findConstructor("()[Ljava/beans/PropertyDescriptor;", classLoader25);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor10.getPropertyEditorClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type23, type24, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray26);
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray26);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer29.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        java.lang.Class<?> wildcardClass35 = enhancer29.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        java.lang.String str37 = classInfo36.toString();
        org.mockito.asm.Type[] typeArray38 = classInfo36.getInterfaces();
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray38);
        propertyDescriptor10.setValue("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V", (java.lang.Object) typeArray38);
        propertyDescriptor10.setConstrained(true);
        java.lang.String str43 = propertyDescriptor10.getShortDescription();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(SSS)S" + "'", str27, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(SSS)LV;" + "'", str28, "(SSS)LV;");
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str37, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()LV;" + "'", str39, "()LV;");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Z" + "'", str43, "Z");
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray7);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.util.List list15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass3, classArray11, list15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) (short) 1);
        java.lang.String str3 = type0.getDescriptor();
        int int5 = type0.getOpcode((int) (byte) 100);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        int int11 = type9.getOpcode((int) (short) 1);
        java.lang.String str12 = type9.getDescriptor();
        int int14 = type9.getOpcode((int) (byte) 100);
        boolean boolean15 = signature8.equals((java.lang.Object) int14);
        org.mockito.asm.Type[] typeArray16 = signature8.getArgumentTypes();
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        java.lang.String str18 = type0.getClassName();
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class<?> wildcardClass22 = classArray21.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        boolean boolean25 = classInfo23.equals((java.lang.Object) (-1.0f));
        java.lang.String str26 = classInfo23.toString();
        org.mockito.asm.Type type27 = classInfo23.getSuperType();
        int int28 = type27.getSize();
        org.mockito.cglib.core.Signature signature31 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str32 = signature31.getName();
        org.mockito.asm.Type type33 = signature31.getReturnType();
        org.mockito.asm.Type type34 = signature31.getReturnType();
        org.mockito.asm.Type[] typeArray35 = signature31.getArgumentTypes();
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray35);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 105 + "'", int5 == 105);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 105 + "'", int14 == 105);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)V" + "'", str17, "(SSS)V");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.lang.Class[]" + "'", str26, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(SSS)Ljava/lang/Object;" + "'", str36, "(SSS)Ljava/lang/Object;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(SSS)V" + "'", str37, "(SSS)V");
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        org.mockito.asm.Type type1 = null;
        org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str5 = signature4.getName();
        org.mockito.asm.Type[] typeArray6 = signature4.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; displayName=; propertyEditorClass=class [Ljava.beans.PropertyDescriptor;]", type1, typeArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)S");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer2.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        boolean boolean10 = type1.equals((java.lang.Object) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.lang.Object obj12 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy25);
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        enhancer28.setAttemptLoad(false);
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer35.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy45);
        enhancer0.setNamingPolicy(namingPolicy45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()S", "java.beans.PropertyDescriptor[name=void; shortDescription=java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=java.beans.PropertyDescriptor[name=I]]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()S' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer11.setCallback(callback14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class<?> wildcardClass19 = classArray18.getClass();
        enhancer11.setSuperclass((java.lang.Class) wildcardClass19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setUseFactory(true);
        enhancer21.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer27.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = enhancer27.getClassLoader();
        org.mockito.cglib.proxy.Callback callback31 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray32 = new org.mockito.cglib.proxy.Callback[] { callback31 };
        enhancer27.setCallbacks(callbackArray32);
        enhancer21.setCallbacks(callbackArray32);
        enhancer11.setCallbacks(callbackArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass6, callbackArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(callbackArray32);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 0, (byte) 100, (byte) 10, (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        enhancer7.setSerialVersionUID((java.lang.Long) 10L);
        enhancer7.setAttemptLoad(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer7.getStrategy();
        java.lang.ClassLoader classLoader19 = enhancer7.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class20 = org.mockito.cglib.core.ReflectUtils.defineClass("hi!", byteArray6, classLoader19);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 100, 10, 100]");
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("va.lang.Object");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 5);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature38 = methodInfo37.getSignature();
        org.mockito.asm.Type[] typeArray39 = signature38.getArgumentTypes();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertNotNull(signature38);
        org.junit.Assert.assertNotNull(typeArray39);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str8 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setReadMethod(method9);
        propertyDescriptor3.setValue("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/beans/PropertyDescriptor;", (java.lang.Object) "java.beans.PropertyDescriptor[name=Lorg/mockito/cglib/proxy/Enhancer;; shortDescription=void]");
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "void" + "'", str8, "void");
        org.junit.Assert.assertNull(method16);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/Type" + "'", str9, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setUseFactory(true);
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        enhancer3.setInterfaces(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        enhancer0.setInterfaces(classArray9);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(classArray11);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method24 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 10 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer10.setNamingPolicy(namingPolicy11);
        enhancer10.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        enhancer10.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader19 = enhancer10.getClassLoader();
        enhancer7.setClassLoader(classLoader19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class21 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(Ljava/lang/Cloneable;Ljava/io/Serializable;)V; displayName=[Ljava/lang/reflect/Method;]", byteArray6, classLoader19);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 1, 1, 0, 10]");
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]", "()Lorg/mockito/cglib/core/AbstractClassGenerator;");
        java.lang.String str3 = signature2.getName();
        java.lang.String str4 = signature2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]" + "'", str3, "java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]()Lorg/mockito/cglib/core/AbstractClassGenerator;" + "'", str4, "java.beans.PropertyDescriptor[name=void; shortDescription=Lorg/mockito/asm/Type;; expert]()Lorg/mockito/cglib/core/AbstractClassGenerator;");
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer0.setClassLoader(classLoader9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptorArray11.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Callback callback21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass15, callback21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str17, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type20);
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        enhancer13.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer13.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        boolean boolean28 = enhancer23.getAttemptLoad();
        enhancer23.setInterceptDuringConstruction(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer23.getNamingPolicy();
        boolean boolean34 = enhancer23.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer35.setNamingPolicy(namingPolicy36);
        boolean boolean38 = enhancer35.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        enhancer23.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer41.setNamingPolicy(namingPolicy42);
        enhancer41.setAttemptLoad(false);
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        boolean boolean53 = enhancer48.getAttemptLoad();
        enhancer48.setInterceptDuringConstruction(false);
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer48.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy58);
        enhancer23.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer61.setNamingPolicy(namingPolicy64);
        enhancer61.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer61.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray69);
        int int74 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray73);
        enhancer61.setInterfaces(classArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = enhancer61.getStrategy();
        enhancer23.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer23.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer79.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = null;
        enhancer79.setNamingPolicy(namingPolicy82);
        boolean boolean84 = enhancer79.getAttemptLoad();
        enhancer79.setInterceptDuringConstruction(false);
        enhancer79.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = enhancer79.getStrategy();
        enhancer23.setStrategy(generatorStrategy89);
        enhancer0.setStrategy(generatorStrategy89);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer0.setCallback(callback9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        enhancer6.setAttemptLoad(false);
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        java.lang.ClassLoader classLoader16 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Callback callback17 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray18 = new org.mockito.cglib.proxy.Callback[] { callback17 };
        enhancer13.setCallbacks(callbackArray18);
        enhancer6.setCallbacks(callbackArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass3, callbackArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(callbackArray18);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        enhancer7.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy14);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        java.lang.String str10 = signature2.getDescriptor();
        java.lang.Class<?> wildcardClass11 = signature2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass11, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        java.lang.String[] strArray0 = null;
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray1);
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass9 = classArray8.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, false);
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer17.getStrategy();
        java.lang.Class<?> wildcardClass23 = enhancer17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, true, true);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class<?> wildcardClass32 = classArray31.getClass();
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray42 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray39, false, true);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray5, methodArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray0, methodArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(methodArray42);
        org.junit.Assert.assertNotNull(methodArray43);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class<?> wildcardClass7 = classArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type type11 = classInfo8.getSuperType();
        boolean boolean12 = signature2.equals((java.lang.Object) classInfo8);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str16 = signature15.getName();
        org.mockito.asm.Type type17 = signature15.getReturnType();
        org.mockito.asm.Type type18 = signature15.getReturnType();
        java.lang.String str19 = signature15.getDescriptor();
        boolean boolean20 = signature2.equals((java.lang.Object) str19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, false, false);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray34);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray34);
        boolean boolean37 = signature2.equals((java.lang.Object) methodArray34);
        java.lang.String str38 = signature2.getName();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("void", method40, method41);
        propertyDescriptor42.setExpert(false);
        java.lang.String str45 = propertyDescriptor42.getName();
        boolean boolean46 = propertyDescriptor42.isPreferred();
        boolean boolean47 = signature2.equals((java.lang.Object) propertyDescriptor42);
        propertyDescriptor42.setDisplayName("java.beans.PropertyDescriptor[name=D]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(SSS)S" + "'", str3, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(SSS)S" + "'", str19, "(SSS)S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "void" + "'", str45, "void");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str11, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature35 = methodInfo34.getSignature();
        org.mockito.asm.Type[] typeArray36 = signature35.getArgumentTypes();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertNotNull(typeArray36);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        enhancer0.setStrategy(generatorStrategy4);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass9 = classArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.cglib.proxy.Callback callback16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass9, callback16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[Ljava/lang/Class;" + "'", str14, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type15);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        enhancer7.setSerialVersionUID((java.lang.Long) 10L);
        enhancer7.setAttemptLoad(false);
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class<?> wildcardClass21 = classArray20.getClass();
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        enhancer7.setSuperclass((java.lang.Class) wildcardClass21);
        boolean boolean24 = enhancer7.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        enhancer25.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        enhancer30.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer39.setCallbacks(callbackArray44);
        enhancer30.setCallbacks(callbackArray44);
        enhancer25.setCallbacks(callbackArray44);
        enhancer7.setCallbacks(callbackArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass3, callbackArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray44);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        boolean boolean18 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer0.setCallbackFilter(callbackFilter19);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setUseFactory(true);
        enhancer16.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer22.setNamingPolicy(namingPolicy23);
        java.lang.ClassLoader classLoader25 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback26 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray27 = new org.mockito.cglib.proxy.Callback[] { callback26 };
        enhancer22.setCallbacks(callbackArray27);
        enhancer16.setCallbacks(callbackArray27);
        enhancer16.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback35 = null;
        enhancer32.setCallback(callback35);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray37);
        java.lang.Class<?> wildcardClass40 = classArray39.getClass();
        enhancer32.setSuperclass((java.lang.Class) wildcardClass40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setUseFactory(true);
        enhancer42.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader51 = enhancer48.getClassLoader();
        org.mockito.cglib.proxy.Callback callback52 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray53 = new org.mockito.cglib.proxy.Callback[] { callback52 };
        enhancer48.setCallbacks(callbackArray53);
        enhancer42.setCallbacks(callbackArray53);
        enhancer32.setCallbacks(callbackArray53);
        enhancer16.setCallbacks(callbackArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass4, classArray10, callbackFilter15, callbackArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str6, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str8, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(callbackArray27);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(callbackArray53);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        boolean boolean11 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer6.setNamingPolicy(namingPolicy9);
        boolean boolean11 = enhancer6.getAttemptLoad();
        enhancer6.setInterceptDuringConstruction(false);
        boolean boolean14 = enhancer6.getAttemptLoad();
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass18 = classArray17.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        enhancer6.setSuperclass((java.lang.Class) wildcardClass18);
        boolean boolean21 = enhancer6.getUseCache();
        enhancer6.setUseCache(false);
        enhancer6.setInterceptDuringConstruction(false);
        enhancer6.setUseFactory(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.Class<?> wildcardClass32 = propertyDescriptorArray28.getClass();
        boolean boolean33 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        boolean boolean36 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, false);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray41);
        enhancer6.setInterfaces(classArray42);
        java.util.List list44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass3, classArray42, list44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/lang/Class;" + "'", str19, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str35, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(classArray42);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        enhancer6.setAttemptLoad(false);
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        enhancer13.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader18 = enhancer13.getClassLoader();
        enhancer6.setClassLoader(classLoader18);
        enhancer0.setClassLoader(classLoader18);
        java.lang.ClassLoader classLoader21 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        propertyDescriptor10.setName("Z");
        java.lang.reflect.Method method18 = null;
        propertyDescriptor10.setWriteMethod(method18);
        boolean boolean20 = propertyDescriptor10.isPreferred();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor10.getPropertyEditorClass();
        boolean boolean22 = propertyDescriptor10.isPreferred();
        java.lang.reflect.Method method23 = propertyDescriptor10.getWriteMethod();
        java.lang.reflect.Method method24 = null;
        propertyDescriptor10.setReadMethod(method24);
        java.lang.Class<?> wildcardClass26 = propertyDescriptor10.getPropertyEditorClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(method23);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass6);
        org.mockito.cglib.proxy.Callback callback10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass6, callback10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/cglib/proxy/Enhancer" + "'", str8, "org/mockito/cglib/proxy/Enhancer");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        org.mockito.cglib.core.Signature signature34 = methodInfo33.getSignature();
        org.mockito.asm.Type[] typeArray35 = methodInfo33.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo36 = methodInfo33.getClassInfo();
        org.mockito.asm.Type type37 = classInfo36.getType();
        int int39 = type37.getOpcode(0);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.String[] strArray3 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.reflect.Method[] methodArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray6 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray4, methodArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) '#');
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        boolean boolean13 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        enhancer20.setAttemptLoad(false);
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader32 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        enhancer14.setClassLoader(classLoader32);
        enhancer1.setClassLoader(classLoader32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method36 = org.mockito.cglib.core.ReflectUtils.findMethod("void", classLoader32);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class<?> wildcardClass11 = methodArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        int int13 = classInfo12.getModifiers();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1041 + "'", int13 == 1041);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer6.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setUseFactory(true);
        enhancer11.setUseFactory(false);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        boolean boolean24 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer19.getStrategy();
        enhancer11.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        enhancer32.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer32.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        enhancer32.setInterfaces(classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, true);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer32.setInterfaces(classArray56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer58.setCallbacks(callbackArray63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer65.setCallbacks(callbackArray70);
        enhancer58.setCallbacks(callbackArray70);
        enhancer32.setCallbacks(callbackArray70);
        enhancer11.setCallbacks(callbackArray70);
        enhancer6.setCallbacks(callbackArray70);
        enhancer0.setCallbacks(callbackArray70);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback81 = null;
        enhancer0.setCallback(callback81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class83 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray70);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass6);
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str11 = signature10.getName();
        org.mockito.asm.Type type12 = signature10.getReturnType();
        org.mockito.asm.Type type13 = signature10.getReturnType();
        boolean boolean14 = classInfo7.equals((java.lang.Object) signature10);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        java.lang.String str23 = classInfo22.toString();
        org.mockito.asm.Type[] typeArray24 = classInfo22.getInterfaces();
        boolean boolean25 = signature10.equals((java.lang.Object) classInfo22);
        java.lang.String str26 = signature10.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str23, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(SSS)S" + "'", str26, "(SSS)S");
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        java.lang.ClassLoader classLoader9 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        enhancer12.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        enhancer17.setUseFactory(false);
        boolean boolean22 = enhancer17.getUseCache();
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer25.getStrategy();
        enhancer17.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, true, true);
        java.lang.Class[] classArray57 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray53, false, true);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray53);
        enhancer38.setInterfaces(classArray62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer64.setCallbacks(callbackArray69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback75 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray76 = new org.mockito.cglib.proxy.Callback[] { callback75 };
        enhancer71.setCallbacks(callbackArray76);
        enhancer64.setCallbacks(callbackArray76);
        enhancer38.setCallbacks(callbackArray76);
        enhancer17.setCallbacks(callbackArray76);
        enhancer12.setCallbacks(callbackArray76);
        enhancer6.setCallbacks(callbackArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass2, callbackArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(methodArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(callbackArray76);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str4 = signature3.getName();
        org.mockito.asm.Type type5 = signature3.getReturnType();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray10 = new org.mockito.asm.Type[] { type7, type8, type9 };
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray10);
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray13);
        java.lang.Class<?> wildcardClass16 = classArray15.getClass();
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        boolean boolean19 = classInfo17.equals((java.lang.Object) (-1.0f));
        java.lang.String str20 = classInfo17.toString();
        java.lang.String str21 = classInfo17.toString();
        int int22 = classInfo17.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer23.setCallback(callback26);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray28);
        java.lang.Class<?> wildcardClass31 = classArray30.getClass();
        enhancer23.setSuperclass((java.lang.Class) wildcardClass31);
        boolean boolean33 = classInfo17.equals((java.lang.Object) wildcardClass31);
        org.mockito.asm.Type type34 = classInfo17.getSuperType();
        org.mockito.asm.Type type35 = classInfo17.getType();
        org.mockito.asm.Type type36 = classInfo17.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        enhancer37.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer37.getStrategy();
        java.lang.Class<?> wildcardClass43 = enhancer37.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer44.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        enhancer44.setNamingPolicy(namingPolicy47);
        boolean boolean49 = enhancer44.getAttemptLoad();
        enhancer44.setInterceptDuringConstruction(false);
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = null;
        enhancer54.setNamingPolicy(namingPolicy55);
        enhancer54.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, true);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray59);
        enhancer54.setInterfaces(classArray63);
        enhancer44.setInterfaces(classArray63);
        java.lang.reflect.Constructor constructor66 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass43, classArray63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray67, true, true);
        java.lang.Class[] classArray71 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray67);
        java.lang.Object obj72 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor66, (java.lang.Object[]) propertyDescriptorArray67);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor66, 4);
        int int75 = methodInfo74.getModifiers();
        org.mockito.cglib.core.Signature signature76 = methodInfo74.getSignature();
        org.mockito.asm.Type[] typeArray77 = methodInfo74.getExceptionTypes();
        boolean boolean78 = type36.equals((java.lang.Object) typeArray77);
        org.mockito.cglib.core.Signature signature79 = new org.mockito.cglib.core.Signature("V", type5, typeArray77);
        org.mockito.asm.Type type80 = signature79.getReturnType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(SSS)S" + "'", str12, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.lang.Class[]" + "'", str20, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.lang.Class[]" + "'", str21, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1041 + "'", int22 == 1041);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(constructor66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(signature76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type80);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.core.Signature signature7 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str8 = signature7.getName();
        org.mockito.asm.Type type9 = signature7.getReturnType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type11, type12, type13 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray14);
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray14);
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray14);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("void", method19, method20);
        propertyDescriptor21.setExpert(true);
        boolean boolean24 = propertyDescriptor21.isPreferred();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = methodArray28.getClass();
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        int int31 = classInfo30.getModifiers();
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor21.createPropertyEditor((java.lang.Object) int31);
        propertyDescriptor21.setName("Lorg/mockito/asm/Type;");
        boolean boolean35 = type4.equals((java.lang.Object) propertyDescriptor21);
        propertyDescriptor21.setName("java.lang.Class[]Z");
        java.lang.String str38 = propertyDescriptor21.toString();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(SSS)S" + "'", str15, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(SSS)S" + "'", str16, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str17, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1041 + "'", int31 == 1041);
        org.junit.Assert.assertNull(propertyEditor32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.beans.PropertyDescriptor[name=java.lang.Class[]Z; expert]" + "'", str38, "java.beans.PropertyDescriptor[name=java.lang.Class[]Z; expert]");
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer13.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer13.getStrategy();
        java.lang.Class<?> wildcardClass19 = enhancer13.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        enhancer20.setNamingPolicy(namingPolicy23);
        boolean boolean25 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        enhancer30.setNamingPolicy(namingPolicy31);
        enhancer30.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray35);
        enhancer30.setInterfaces(classArray39);
        enhancer20.setInterfaces(classArray39);
        java.lang.reflect.Constructor constructor42 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass19, classArray39);
        java.lang.String str43 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray44 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor42, (int) (short) 10);
        java.lang.String str47 = org.mockito.asm.Type.getConstructorDescriptor(constructor42);
        org.mockito.asm.Type[] typeArray48 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Object[] objArray49 = null;
        java.lang.Object obj50 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor42, objArray49);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor42);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray51);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(constructor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "()V" + "'", str43, "()V");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "()V" + "'", str47, "()V");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(classArray52);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        boolean boolean18 = classInfo4.equals((java.lang.Object) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type20 = classInfo19.getSuperType();
        int int21 = type20.getSize();
        org.mockito.asm.Type type22 = type20.getElementType();
        java.lang.String str23 = type20.getClassName();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.Object" + "'", str23, "java.lang.Object");
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, true);
        java.lang.Class<?> wildcardClass14 = methodArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass14);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.lang.reflect.Method;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str16, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = methodInfo31.getExceptionTypes();
        boolean boolean34 = methodInfo31.equals((java.lang.Object) "V");
        org.mockito.cglib.core.Signature signature35 = methodInfo31.getSignature();
        java.lang.String str36 = signature35.getName();
        java.lang.String str37 = signature35.getDescriptor();
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray38);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray38);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, false, false);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray49);
        java.lang.Class[] classArray51 = new java.lang.Class[] {};
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class<?> wildcardClass54 = classArray53.getClass();
        java.lang.String str55 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass58 = type57.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, true);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray59, true, false);
        boolean boolean66 = type56.equals((java.lang.Object) methodArray65);
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray65);
        boolean boolean68 = signature35.equals((java.lang.Object) methodArray65);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(signature35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<init>" + "'", str36, "<init>");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[Ljava/lang/Class;" + "'", str55, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass9);
        boolean boolean12 = propertyDescriptor3.equals((java.lang.Object) str11);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str11, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer6.getStrategy();
        enhancer6.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setUseFactory(true);
        enhancer11.setUseFactory(false);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        boolean boolean24 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer19.getStrategy();
        enhancer11.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer32.setNamingPolicy(namingPolicy35);
        enhancer32.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer32.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        enhancer32.setInterfaces(classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class[] classArray51 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        java.lang.reflect.Method[] methodArray55 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, false, true);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray47);
        enhancer32.setInterfaces(classArray56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer58.setCallbacks(callbackArray63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer65.setCallbacks(callbackArray70);
        enhancer58.setCallbacks(callbackArray70);
        enhancer32.setCallbacks(callbackArray70);
        enhancer11.setCallbacks(callbackArray70);
        enhancer6.setCallbacks(callbackArray70);
        enhancer0.setCallbacks(callbackArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class77 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(methodArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray70);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type14 = signature13.getReturnType();
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature13);
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        boolean boolean20 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "void" + "'", str16, "void");
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("L()L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;;", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.cglib.core.AbstractClassGenerator");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer9.setCallbacks(callbackArray14);
        enhancer0.setCallbacks(callbackArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        boolean boolean22 = enhancer17.getAttemptLoad();
        enhancer17.setInterceptDuringConstruction(false);
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer17.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseFactory(true);
        enhancer31.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer37.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer37.setCallbacks(callbackArray42);
        enhancer31.setCallbacks(callbackArray42);
        enhancer0.setCallbacks(callbackArray42);
        enhancer0.setInterceptDuringConstruction(false);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, true);
        java.lang.Class<?> wildcardClass52 = methodArray51.getClass();
        boolean boolean53 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass52);
        boolean boolean54 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass52);
        java.util.List list57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list58 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass52, list57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy25);
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer29.setCallbacks(callbackArray34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        enhancer36.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer36.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy43);
        enhancer0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer0.setCallbackFilter(callbackFilter46);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader50 = enhancer0.getClassLoader();
        java.lang.Class[] classArray51 = null;
        enhancer0.setInterfaces(classArray51);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer0.setCallback(callback55);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass1);
        java.lang.reflect.Method[] methodArray5 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray2, true, true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(methodArray5);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer6.setNamingPolicy(namingPolicy7);
        enhancer6.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        enhancer6.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = enhancer6.getClassLoader();
        enhancer3.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer17.setCallback(callback20);
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass25 = classArray24.getClass();
        enhancer17.setSuperclass((java.lang.Class) wildcardClass25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        enhancer32.setNamingPolicy(namingPolicy33);
        boolean boolean35 = enhancer32.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class<?> wildcardClass41 = methodArray40.getClass();
        enhancer32.setSuperclass((java.lang.Class) wildcardClass41);
        boolean boolean43 = enhancer32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer32.getStrategy();
        enhancer27.setStrategy(generatorStrategy44);
        enhancer17.setStrategy(generatorStrategy44);
        enhancer3.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer48.setCallbackFilter(callbackFilter53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer48.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback60 = null;
        enhancer57.setCallback(callback60);
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class<?> wildcardClass65 = classArray64.getClass();
        enhancer57.setSuperclass((java.lang.Class) wildcardClass65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer67.getStrategy();
        enhancer67.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        enhancer72.setNamingPolicy(namingPolicy73);
        boolean boolean75 = enhancer72.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = enhancer72.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray80 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray77, true, true);
        java.lang.Class<?> wildcardClass81 = methodArray80.getClass();
        enhancer72.setSuperclass((java.lang.Class) wildcardClass81);
        boolean boolean83 = enhancer72.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = enhancer72.getStrategy();
        enhancer67.setStrategy(generatorStrategy84);
        enhancer57.setStrategy(generatorStrategy84);
        enhancer3.setStrategy(generatorStrategy84);
        enhancer0.setStrategy(generatorStrategy84);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(methodArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=Lorg/mockito/asm/Type;; expert]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lorg/mockito/cglib/proxy/Enhancer;", "org/mockito/cglib/core/Signature");
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        int int38 = methodInfo37.getModifiers();
        org.mockito.cglib.core.Signature signature39 = methodInfo37.getSignature();
        org.mockito.cglib.core.Signature signature40 = methodInfo37.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo41 = methodInfo37.getClassInfo();
        org.mockito.cglib.core.ClassInfo classInfo42 = methodInfo37.getClassInfo();
        org.mockito.cglib.core.ClassInfo classInfo43 = methodInfo37.getClassInfo();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(signature39);
        org.junit.Assert.assertNotNull(signature40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNotNull(classInfo43);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray4 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.util.List list5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list6 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass3, list5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(propertyDescriptorArray4);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray30);
        java.lang.Object obj35 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray30);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, 4);
        int int38 = methodInfo37.getModifiers();
        org.mockito.cglib.core.Signature signature39 = methodInfo37.getSignature();
        org.mockito.cglib.core.Signature signature40 = methodInfo37.getSignature();
        int int41 = methodInfo37.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(signature39);
        org.junit.Assert.assertNotNull(signature40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("org/mockito/asm/Type(Ljava/lang/Cloneable;Ljava/io/Serializable;)S");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer7.setNamingPolicy(namingPolicy8);
        boolean boolean10 = enhancer7.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        enhancer12.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader17 = enhancer12.getClassLoader();
        enhancer7.setClassLoader(classLoader17);
        enhancer1.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer21.setNamingPolicy(namingPolicy22);
        enhancer21.setUseCache(true);
        enhancer21.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.ClassLoader classLoader28 = enhancer21.getClassLoader();
        enhancer1.setClassLoader(classLoader28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method30 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=Z]", classLoader28);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("ava.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class", "java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; bound; propertyEditorClass=class [Ljava.lang.Class;]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'ava.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; shortDescription=I; constrained]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setUseFactory(true);
        enhancer1.setUseFactory(false);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        boolean boolean14 = enhancer9.getAttemptLoad();
        enhancer9.setInterceptDuringConstruction(false);
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer9.getStrategy();
        enhancer1.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer1.setCallback(callback22);
        java.lang.ClassLoader classLoader24 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor25 = org.mockito.cglib.core.ReflectUtils.findConstructor("java/lang/Class", classLoader24);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("LV;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org/mockito/cglib/core/AbstractClassGenerator");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        boolean boolean7 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader8 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        boolean boolean14 = enhancer9.getAttemptLoad();
        enhancer9.setInterceptDuringConstruction(false);
        boolean boolean17 = enhancer9.getAttemptLoad();
        enhancer9.setSerialVersionUID((java.lang.Long) 1L);
        enhancer9.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback26 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray27 = new org.mockito.cglib.proxy.Callback[] { callback26 };
        enhancer22.setCallbacks(callbackArray27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer29.setCallbacks(callbackArray34);
        enhancer22.setCallbacks(callbackArray34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer38.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer38.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray46 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray43, true, true);
        java.lang.Class<?> wildcardClass47 = methodArray46.getClass();
        enhancer38.setSuperclass((java.lang.Class) wildcardClass47);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass47);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer22.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy50);
        enhancer0.setNamingPolicy(namingPolicy50);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(callbackArray27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(methodArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.String[] strArray7 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, false, false);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray7, methodArray14);
        java.lang.Class<?> wildcardClass16 = methodArray14.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray18, true, true);
        java.lang.Class<?> wildcardClass22 = methodArray21.getClass();
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass22);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Ljava.lang.reflect.Method;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str23, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        boolean boolean17 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class18 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        boolean boolean13 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        enhancer20.setAttemptLoad(false);
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader32 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        enhancer14.setClassLoader(classLoader32);
        enhancer1.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        boolean boolean47 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        enhancer1.setClassLoader(classLoader52);
        enhancer1.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer57.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer57.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer57.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer63.setNamingPolicy(namingPolicy64);
        boolean boolean66 = enhancer63.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer68.getStrategy();
        enhancer68.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader73 = enhancer68.getClassLoader();
        enhancer63.setClassLoader(classLoader73);
        enhancer57.setClassLoader(classLoader73);
        enhancer1.setClassLoader(classLoader73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor77 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=D]", classLoader73);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        boolean boolean13 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        boolean boolean17 = enhancer14.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer20.setNamingPolicy(namingPolicy21);
        enhancer20.setAttemptLoad(false);
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader32 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        enhancer14.setClassLoader(classLoader32);
        enhancer1.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        boolean boolean41 = enhancer36.getAttemptLoad();
        enhancer36.setInterceptDuringConstruction(false);
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer36.getNamingPolicy();
        boolean boolean47 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer48.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer48.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        enhancer1.setClassLoader(classLoader52);
        enhancer1.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer57.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer57.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer57.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        enhancer63.setNamingPolicy(namingPolicy64);
        boolean boolean66 = enhancer63.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer68.getStrategy();
        enhancer68.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader73 = enhancer68.getClassLoader();
        enhancer63.setClassLoader(classLoader73);
        enhancer57.setClassLoader(classLoader73);
        enhancer1.setClassLoader(classLoader73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method77 = org.mockito.cglib.core.ReflectUtils.findMethod("[Ljava/beans/PropertyDescriptor;", classLoader73);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray10 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray7, true, true);
        java.lang.Class<?> wildcardClass11 = methodArray10.getClass();
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        int int13 = classInfo12.getModifiers();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setExpert(true);
        boolean boolean22 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(methodArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1041 + "'", int13 == 1041);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseFactory(true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        enhancer7.setSuperclass((java.lang.Class) wildcardClass12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass12);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        java.lang.String str10 = signature2.getDescriptor();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean12 = signature2.equals((java.lang.Object) type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptorArray17.getClass();
        boolean boolean22 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class<?> wildcardClass29 = propertyDescriptorArray25.getClass();
        boolean boolean30 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer33.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray41 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray38, true, true);
        java.lang.Class<?> wildcardClass42 = methodArray41.getClass();
        enhancer33.setSuperclass((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray47 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray44, true, true);
        java.lang.Class<?> wildcardClass48 = methodArray47.getClass();
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.lang.Class<?> wildcardClass55 = propertyDescriptorArray51.getClass();
        boolean boolean56 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass14, wildcardClass21, wildcardClass29, wildcardClass42, wildcardClass48, wildcardClass55 };
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        boolean boolean63 = signature2.equals((java.lang.Object) strArray62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.Class<?> wildcardClass68 = propertyDescriptorArray64.getClass();
        boolean boolean69 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        boolean boolean72 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray73 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        boolean boolean74 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass68);
        boolean boolean77 = signature2.equals((java.lang.Object) wildcardClass68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass68);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str16, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(methodArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(methodArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str50, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str59, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str71, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("La.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;");
        int int3 = type1.getOpcode(62);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 66 + "'", int3 == 66);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer3.setNamingPolicy(namingPolicy4);
        enhancer3.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        enhancer3.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = enhancer3.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback17 = null;
        enhancer14.setCallback(callback17);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class<?> wildcardClass22 = classArray21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        enhancer24.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer29.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class<?> wildcardClass38 = methodArray37.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass38);
        boolean boolean40 = enhancer29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer29.getStrategy();
        enhancer24.setStrategy(generatorStrategy41);
        enhancer14.setStrategy(generatorStrategy41);
        enhancer0.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer45.setCallbackFilter(callbackFilter50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer45.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer0.setStrategy(generatorStrategy7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        enhancer9.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        enhancer16.setUseCache(true);
        enhancer16.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        boolean boolean28 = enhancer23.getAttemptLoad();
        enhancer23.setInterceptDuringConstruction(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer23.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy33);
        enhancer9.setNamingPolicy(namingPolicy33);
        enhancer0.setNamingPolicy(namingPolicy33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj37 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method14 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[Ljava/lang/Class;" + "'", str11, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer3.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = null;
        enhancer3.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer3.getStrategy();
        java.lang.Class<?> wildcardClass9 = enhancer3.getClass();
        boolean boolean10 = signature2.equals((java.lang.Object) enhancer3);
        org.mockito.asm.Type type11 = signature2.getReturnType();
        java.lang.String str12 = type11.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type13 = type11.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Callback callback6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass3, callback6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class[] classArray15 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray11);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor19 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass4, classArray18);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str9, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray8);
        int int11 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray10);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) int13);
        propertyDescriptor3.setName("hi!");
        boolean boolean17 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strEnumeration18);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        org.mockito.asm.Type type0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer1.getStrategy();
        java.lang.Class<?> wildcardClass7 = enhancer1.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray23);
        enhancer18.setInterfaces(classArray27);
        enhancer8.setInterfaces(classArray27);
        java.lang.reflect.Constructor constructor30 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray27);
        java.lang.String str31 = org.mockito.asm.Type.getConstructorDescriptor(constructor30);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor30);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray37);
        java.lang.Object obj40 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor30, (java.lang.Object[]) classArray37);
        org.mockito.cglib.core.MethodInfo methodInfo41 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor30);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer42.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer42.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer49.setNamingPolicy(namingPolicy52);
        boolean boolean54 = enhancer49.getAttemptLoad();
        enhancer49.setInterceptDuringConstruction(false);
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer59.setNamingPolicy(namingPolicy60);
        enhancer59.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        enhancer59.setInterfaces(classArray68);
        enhancer49.setInterfaces(classArray68);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass48, classArray68);
        java.lang.String str72 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71, (int) (byte) 10);
        java.lang.String str75 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71, 5);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        org.mockito.cglib.core.Signature signature79 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray81 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        java.lang.Object obj82 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor30, (java.lang.Object[]) typeArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(constructor30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "()V" + "'", str31, "()V");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(methodInfo41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()V" + "'", str72, "()V");
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "()V" + "'", str75, "()V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(signature79);
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("org/mockito/asm/Type");
        propertyDescriptor3.setDisplayName("(Ljava/lang/Cloneable;Ljava/io/Serializable;)V");
        propertyDescriptor3.setShortDescription("char");
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        boolean boolean7 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        int int14 = type12.getOpcode((int) (short) 1);
        java.lang.String str15 = type12.getDescriptor();
        int int17 = type12.getOpcode((int) (byte) 100);
        boolean boolean18 = signature11.equals((java.lang.Object) int17);
        java.lang.String str19 = signature11.getDescriptor();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean21 = signature11.equals((java.lang.Object) type20);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=I]", (java.lang.Object) boolean21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor3.setReadMethod(method23);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass27 = propertyDescriptor3.getPropertyType();
        java.lang.String str28 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "V" + "'", str15, "V");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 105 + "'", int17 == 105);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(SSS)S" + "'", str19, "(SSS)S");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor[name=void; expert; values={java.beans.PropertyDescriptor[name=I]=false}; constrained]" + "'", str28, "java.beans.PropertyDescriptor[name=void; expert; values={java.beans.PropertyDescriptor[name=I]=false}; constrained]");
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        int int2 = type0.getSize();
        java.lang.String str3 = type0.toString();
        int int5 = type0.getOpcode(26);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "D" + "'", str3, "D");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 29 + "'", int5 == 29);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        org.mockito.asm.Type[] typeArray37 = methodInfo36.getExceptionTypes();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        enhancer38.setNamingPolicy(namingPolicy41);
        enhancer38.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer38.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray46, true, true);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        enhancer38.setInterfaces(classArray50);
        boolean boolean53 = enhancer38.getAttemptLoad();
        enhancer38.setUseCache(false);
        boolean boolean56 = methodInfo36.equals((java.lang.Object) enhancer38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer38.getStrategy();
        boolean boolean58 = enhancer38.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("L()L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->L");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        org.mockito.cglib.core.Signature signature34 = methodInfo33.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo35 = methodInfo33.getClassInfo();
        int int36 = classInfo35.getModifiers();
        java.lang.String str37 = classInfo35.toString();
        int int38 = classInfo35.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str37, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray8, methodArray14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray15);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type[] typeArray5 = classInfo4.getInterfaces();
        org.mockito.asm.Type[] typeArray6 = classInfo4.getInterfaces();
        java.lang.String str7 = classInfo4.toString();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer8.setNamingPolicy(namingPolicy9);
        enhancer8.setUseCache(true);
        enhancer8.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = enhancer8.getClassLoader();
        boolean boolean28 = classInfo4.equals((java.lang.Object) enhancer8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer8.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class30 = enhancer8.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertNotNull(type37);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("()Ljava/lang/Object;", method1, method2);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setValue("java.lang.Class[]", (java.lang.Object) "org/mockito/asm/Type");
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strEnumeration12);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer7.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        enhancer18.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer18.getClassLoader();
        enhancer13.setClassLoader(classLoader23);
        enhancer7.setClassLoader(classLoader23);
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer0.setCallbackFilter(callbackFilter33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setUseFactory(true);
        enhancer35.setUseFactory(false);
        boolean boolean40 = enhancer35.getUseCache();
        enhancer35.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer43.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer43.setNamingPolicy(namingPolicy46);
        boolean boolean48 = enhancer43.getAttemptLoad();
        enhancer43.setInterceptDuringConstruction(false);
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer43.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer43.getStrategy();
        enhancer35.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer56.setNamingPolicy(namingPolicy59);
        enhancer56.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer56.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        enhancer56.setInterfaces(classArray68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, true, true);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray71);
        java.lang.Class[] classArray76 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray71);
        java.lang.reflect.Method[] methodArray79 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, false, true);
        java.lang.Class[] classArray80 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray71);
        enhancer56.setInterfaces(classArray80);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback86 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray87 = new org.mockito.cglib.proxy.Callback[] { callback86 };
        enhancer82.setCallbacks(callbackArray87);
        org.mockito.cglib.proxy.Enhancer enhancer89 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader90 = enhancer89.getClassLoader();
        enhancer89.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback93 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray94 = new org.mockito.cglib.proxy.Callback[] { callback93 };
        enhancer89.setCallbacks(callbackArray94);
        enhancer82.setCallbacks(callbackArray94);
        enhancer56.setCallbacks(callbackArray94);
        enhancer35.setCallbacks(callbackArray94);
        enhancer0.setCallbacks(callbackArray94);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(methodArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(callbackArray87);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(callbackArray94);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer7.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer7.setCallbackFilter(callbackFilter12);
        boolean boolean14 = enhancer7.getUseCache();
        java.lang.ClassLoader classLoader15 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer17.setNamingPolicy(namingPolicy20);
        enhancer17.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer17.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray25);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        enhancer17.setInterfaces(classArray29);
        boolean boolean32 = enhancer17.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer33.setNamingPolicy(namingPolicy36);
        boolean boolean38 = enhancer33.getAttemptLoad();
        enhancer33.setInterceptDuringConstruction(false);
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer33.getNamingPolicy();
        boolean boolean44 = enhancer33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer33.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer46.setNamingPolicy(namingPolicy49);
        enhancer46.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer46.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer46.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer33.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer57.setNamingPolicy(namingPolicy58);
        enhancer57.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray62, true, true);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray62);
        enhancer57.setInterfaces(classArray66);
        int int68 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray66);
        enhancer33.setInterfaces(classArray66);
        enhancer17.setInterfaces(classArray66);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray35 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, true, true);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray37);
        java.lang.Object obj43 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray42);
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type type45 = signature44.getReturnType();
        java.lang.String str46 = signature44.toString();
        java.lang.String str47 = signature44.toString();
        java.lang.String str48 = signature44.getName();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()V" + "'", str34, "()V");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<init>()V" + "'", str46, "<init>()V");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<init>()V" + "'", str47, "<init>()V");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<init>" + "'", str48, "<init>");
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer5.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader10 = enhancer5.getClassLoader();
        enhancer0.setClassLoader(classLoader10);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer16.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer22.getStrategy();
        enhancer22.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setUseFactory(true);
        enhancer27.setUseFactory(false);
        boolean boolean32 = enhancer27.getUseCache();
        enhancer27.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer35.getStrategy();
        enhancer27.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        enhancer48.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer48.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, true, true);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray56);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray60);
        enhancer48.setInterfaces(classArray60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, true, true);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray63);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray63);
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, false, true);
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray63);
        enhancer48.setInterfaces(classArray72);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer74.setCallbacks(callbackArray79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback85 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray86 = new org.mockito.cglib.proxy.Callback[] { callback85 };
        enhancer81.setCallbacks(callbackArray86);
        enhancer74.setCallbacks(callbackArray86);
        enhancer48.setCallbacks(callbackArray86);
        enhancer27.setCallbacks(callbackArray86);
        enhancer22.setCallbacks(callbackArray86);
        enhancer16.setCallbacks(callbackArray86);
        enhancer0.setCallbacks(callbackArray86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = enhancer0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(callbackArray79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(callbackArray86);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        enhancer11.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer11.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, true, true);
        java.lang.Class[] classArray23 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray19);
        int int24 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray23);
        enhancer11.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer34.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer41.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy51);
        enhancer26.setNamingPolicy(namingPolicy51);
        enhancer11.setNamingPolicy(namingPolicy51);
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader56 = enhancer0.getClassLoader();
        boolean boolean57 = enhancer0.getAttemptLoad();
        boolean boolean58 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setValue("java.lang.Class[]", (java.lang.Object) "org/mockito/asm/Type");
        boolean boolean11 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj15 = propertyDescriptor3.getValue("()Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        java.lang.String[] strArray10 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, false);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray17);
        enhancer0.setInterfaces(classArray19);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer0.setInterfaces(classArray18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer0.setCallbackFilter(callbackFilter22);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setUseFactory(true);
        enhancer27.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer33.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = enhancer33.getClassLoader();
        org.mockito.cglib.proxy.Callback callback37 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray38 = new org.mockito.cglib.proxy.Callback[] { callback37 };
        enhancer33.setCallbacks(callbackArray38);
        enhancer27.setCallbacks(callbackArray38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass47 = enhancer41.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        boolean boolean53 = enhancer48.getAttemptLoad();
        enhancer48.setInterceptDuringConstruction(false);
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        enhancer58.setNamingPolicy(namingPolicy59);
        enhancer58.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray66 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray63, true, true);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray63);
        enhancer58.setInterfaces(classArray67);
        enhancer48.setInterfaces(classArray67);
        java.lang.reflect.Constructor constructor70 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass47, classArray67);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray67);
        enhancer27.setInterfaces(classArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = enhancer27.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(callbackArray38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertNotNull(methodArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(constructor70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer4.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer11.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer11.getAttemptLoad();
        enhancer11.setInterceptDuringConstruction(false);
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer23.setNamingPolicy(namingPolicy24);
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer28.getStrategy();
        enhancer23.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer32.setCallbacks(callbackArray37);
        enhancer23.setCallbacks(callbackArray37);
        enhancer0.setCallbacks(callbackArray37);
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray37);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(false);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        boolean boolean13 = enhancer8.getAttemptLoad();
        enhancer8.setInterceptDuringConstruction(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer8.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer8.getStrategy();
        enhancer0.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer0.setCallback(callback21);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("void", method27, method28);
        propertyDescriptor29.setExpert(true);
        boolean boolean32 = propertyDescriptor29.isPreferred();
        boolean boolean33 = propertyDescriptor29.isExpert();
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, true, true);
        java.lang.Class<?> wildcardClass39 = propertyDescriptorArray35.getClass();
        boolean boolean40 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        propertyDescriptor29.setValue("()V", (java.lang.Object) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, false, true);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        enhancer54.setUseFactory(true);
        enhancer54.setUseFactory(false);
        boolean boolean59 = enhancer54.getUseCache();
        enhancer54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer54.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer54.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer64.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer64.setNamingPolicy(namingPolicy67);
        boolean boolean69 = enhancer64.getAttemptLoad();
        enhancer64.setInterceptDuringConstruction(false);
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        enhancer74.setNamingPolicy(namingPolicy75);
        enhancer74.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, true, true);
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray79);
        enhancer74.setInterfaces(classArray83);
        enhancer64.setInterfaces(classArray83);
        int int86 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray83);
        java.lang.String[] strArray87 = org.mockito.cglib.core.ReflectUtils.getNames(classArray83);
        int int88 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray83);
        enhancer54.setInterfaces(classArray83);
        int int90 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray83);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = enhancer0.create(classArray53, (java.lang.Object[]) classArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str43, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str45, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(classArray91);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        enhancer5.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader10 = enhancer5.getClassLoader();
        enhancer0.setClassLoader(classLoader10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer12.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass18 = enhancer12.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        boolean boolean24 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        enhancer29.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class[] classArray38 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray34);
        enhancer29.setInterfaces(classArray38);
        enhancer19.setInterfaces(classArray38);
        java.lang.reflect.Constructor constructor41 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass18, classArray38);
        enhancer0.setInterfaces(classArray38);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        java.lang.Class[] classArray44 = new java.lang.Class[] {};
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass47 = type46.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method[] methodArray51 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray48, true, true);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray45, methodArray51);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray51);
        java.lang.Class[] classArray54 = new java.lang.Class[] {};
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass57 = type56.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray58, true, true);
        java.lang.reflect.Method[] methodArray62 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray61);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(constructor41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(methodArray51);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray62);
        org.junit.Assert.assertNotNull(methodArray63);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.String str33 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.Signature signature34 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray36 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()V" + "'", str33, "()V");
        org.junit.Assert.assertNotNull(signature34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertNotNull(typeArray36);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Ljava/lang/Class;", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("Z()S");
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(method7);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptorArray9.getClass();
        boolean boolean14 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        propertyDescriptor3.setValue("()V", (java.lang.Object) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer23.setNamingPolicy(namingPolicy24);
        enhancer23.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        enhancer23.setInterfaces(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method37 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass13, "java.beans.PropertyDescriptor[name=; shortDescription=java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class [Ljava.lang.Class;]]", classArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=; shortDescription=java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class [Ljava.lang.Class;]]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str17, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        java.lang.reflect.Method method16 = propertyDescriptor10.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor10.attributeNames();
        propertyDescriptor10.setPreferred(true);
        boolean boolean20 = propertyDescriptor10.isHidden();
        propertyDescriptor10.setBound(false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        boolean boolean4 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass10 = classArray9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass10);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray16);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        int int20 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass10, "java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer; propertyEditorClass=class org.mockito.asm.Type]", classArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer; propertyEditorClass=class org.mockito.asm.Type]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[Ljava/lang/Class;" + "'", str12, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        boolean boolean28 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        enhancer1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor22 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava.beans.PropertyDescriptor[name=void; hidden; propertyEditorClass=class org.mockito.asm.Type];", classLoader21);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]; expert]", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]; expert]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]; expert]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass21 = type20.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer0.setCallbackFilter(callbackFilter24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer26.setNamingPolicy(namingPolicy27);
        enhancer26.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        enhancer26.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer35.setCallbacks(callbackArray40);
        enhancer26.setCallbacks(callbackArray40);
        enhancer0.setCallbacks(callbackArray40);
        boolean boolean44 = enhancer0.getAttemptLoad();
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray48 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, true, true);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray45, false, true);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray54);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        enhancer0.setInterfaces(classArray55);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        enhancer1.setInterfaces(classArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer10.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer10.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer10.setCallback(callback16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setUseCache(true);
        enhancer18.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        boolean boolean30 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = enhancer18.getClassLoader();
        enhancer10.setClassLoader(classLoader37);
        enhancer1.setClassLoader(classLoader37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method40 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]; expert]", classLoader37);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method7 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.Class<?> wildcardClass15 = methodArray14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        propertyDescriptor3.setValue("", (java.lang.Object) wildcardClass15);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str16, "[Ljava/lang/reflect/Method;");
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass4);
        boolean boolean10 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str7, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(SSS)S");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("org.mockito.cglib.proxy.Enhancer", method3, method4);
        propertyDescriptor5.setShortDescription("()Ljava/lang/Object;");
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer9.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer9.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        boolean boolean21 = enhancer16.getAttemptLoad();
        enhancer16.setInterceptDuringConstruction(false);
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer26.setNamingPolicy(namingPolicy27);
        enhancer26.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray31, true, true);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray31);
        enhancer26.setInterfaces(classArray35);
        enhancer16.setInterfaces(classArray35);
        java.lang.reflect.Constructor constructor38 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass15, classArray35);
        java.lang.String str39 = org.mockito.asm.Type.getConstructorDescriptor(constructor38);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor38);
        org.mockito.asm.Type[] typeArray41 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor38);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        int int45 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray44);
        java.lang.Object obj47 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor38, (java.lang.Object[]) classArray44);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]");
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setUseFactory(true);
        java.lang.Class[] classArray57 = new java.lang.Class[] {};
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray57);
        enhancer53.setInterfaces(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray59);
        enhancer50.setInterfaces(classArray59);
        boolean boolean63 = type49.equals((java.lang.Object) classArray59);
        java.lang.Object obj64 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor38, (java.lang.Object[]) classArray59);
        org.mockito.asm.Type[] typeArray65 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor38);
        propertyDescriptor5.setValue("java.lang.Class[]", (java.lang.Object) typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray65);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(constructor38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "()V" + "'", str39, "()V");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "()S" + "'", str67, "()S");
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Ljava/lang/reflect/Method;()[Ljava/lang/reflect/Method;", "org.mockito.cglib.core.ReflectUtils$3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '[Ljava/lang/reflect/Method;()[Ljava/lang/reflect/Method;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature31 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray32, true, true);
        java.lang.Class<?> wildcardClass36 = propertyDescriptorArray32.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray37, false, true);
        java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) methodArray43);
        java.lang.String str45 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo46 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.Signature signature47 = methodInfo46.getSignature();
        org.mockito.asm.Type type48 = signature47.getReturnType();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(signature31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()V" + "'", str45, "()V");
        org.junit.Assert.assertNotNull(methodInfo46);
        org.junit.Assert.assertNotNull(signature47);
        org.junit.Assert.assertNotNull(type48);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass14 = enhancer8.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        java.lang.String str16 = classInfo15.toString();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray20 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray17, true, true);
        java.lang.Class<?> wildcardClass21 = propertyDescriptorArray17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        boolean boolean23 = classInfo15.equals((java.lang.Object) propertyDescriptorArray22);
        java.lang.String str24 = classInfo15.toString();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer25.setNamingPolicy(namingPolicy26);
        boolean boolean28 = classInfo15.equals((java.lang.Object) enhancer25);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        enhancer29.setNamingPolicy(namingPolicy32);
        boolean boolean34 = enhancer29.getAttemptLoad();
        enhancer29.setInterceptDuringConstruction(false);
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer29.getNamingPolicy();
        boolean boolean40 = enhancer29.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer41.setNamingPolicy(namingPolicy42);
        boolean boolean44 = enhancer41.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        enhancer29.setClassLoader(classLoader45);
        enhancer29.setAttemptLoad(true);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass50 = type49.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer29.setCallbackFilter(callbackFilter53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        enhancer55.setNamingPolicy(namingPolicy56);
        enhancer55.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer60.getStrategy();
        enhancer55.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer64.setCallbacks(callbackArray69);
        enhancer55.setCallbacks(callbackArray69);
        enhancer29.setCallbacks(callbackArray69);
        enhancer25.setCallbacks(callbackArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass3, callbackArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str16, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertNotNull(methodArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str24, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray69);
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        boolean boolean7 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass3);
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, false, true);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        org.mockito.cglib.core.MethodInfo methodInfo30 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo31 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray34 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo36 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) ' ');
        java.lang.String str37 = methodInfo36.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertNotNull(methodInfo30);
        org.junit.Assert.assertNotNull(methodInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(methodInfo36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<init>()V" + "'", str37, "<init>()V");
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer3.setNamingPolicy(namingPolicy4);
        enhancer3.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        enhancer3.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = enhancer3.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback17 = null;
        enhancer14.setCallback(callback17);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class<?> wildcardClass22 = classArray21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        enhancer24.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer29.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class<?> wildcardClass38 = methodArray37.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass38);
        boolean boolean40 = enhancer29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer29.getStrategy();
        enhancer24.setStrategy(generatorStrategy41);
        enhancer14.setStrategy(generatorStrategy41);
        enhancer0.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer45.setCallbackFilter(callbackFilter50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer45.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        enhancer54.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback57 = null;
        enhancer54.setCallback(callback57);
        java.lang.Class[] classArray59 = new java.lang.Class[] {};
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class<?> wildcardClass62 = classArray61.getClass();
        enhancer54.setSuperclass((java.lang.Class) wildcardClass62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer64.getStrategy();
        enhancer64.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        enhancer69.setNamingPolicy(namingPolicy70);
        boolean boolean72 = enhancer69.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = enhancer69.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray74 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray74, true, true);
        java.lang.Class<?> wildcardClass78 = methodArray77.getClass();
        enhancer69.setSuperclass((java.lang.Class) wildcardClass78);
        boolean boolean80 = enhancer69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer69.getStrategy();
        enhancer64.setStrategy(generatorStrategy81);
        enhancer54.setStrategy(generatorStrategy81);
        enhancer0.setStrategy(generatorStrategy81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(propertyDescriptorArray74);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray45);
        enhancer0.setInterfaces(classArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader48 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(constructor46);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=()D; preferred]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("char", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strEnumeration5);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=void; preferred]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        java.lang.ClassLoader classLoader3 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        enhancer12.setNamingPolicy(namingPolicy13);
        boolean boolean15 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        enhancer0.setAttemptLoad(true);
        boolean boolean20 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader21 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        enhancer24.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(false);
        enhancer30.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = null;
        enhancer35.setNamingPolicy(namingPolicy36);
        enhancer35.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        enhancer35.setInterfaces(classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray44);
        enhancer30.setInterfaces(classArray44);
        enhancer24.setInterfaces(classArray44);
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray51);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray51);
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, false, true);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray51);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray60);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = enhancer0.create(classArray44, (java.lang.Object[]) classArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(classArray63);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("void");
        propertyDescriptor3.setName("Lorg/mockito/cglib/proxy/Enhancer;");
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class<?> wildcardClass17 = classArray16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        boolean boolean20 = classInfo18.equals((java.lang.Object) (-1.0f));
        java.lang.String str21 = classInfo18.toString();
        org.mockito.asm.Type type22 = classInfo18.getSuperType();
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=()[Ljava/beans/PropertyDescriptor;]", (java.lang.Object) wildcardClass23);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer27.setCallbackFilter(callbackFilter32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer27.getNamingPolicy();
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer27.setInterfaces(classArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray37);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray42, true, true);
        java.lang.Class<?> wildcardClass46 = methodArray45.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass23, classArray37, (java.lang.Object[]) methodArray52);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.lang.Class[]" + "'", str21, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str26, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str48, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        org.mockito.cglib.core.ClassInfo classInfo3 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        java.beans.PropertyDescriptor[] propertyDescriptorArray7 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass5);
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        int int10 = classInfo8.getModifiers();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, true);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass2, classArray12, (java.lang.Object[]) methodArray19);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(classInfo3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(propertyDescriptorArray7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(methodArray19);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass14);
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass14);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray21);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method24 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass14, "java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class org.mockito.cglib.proxy.Enhancer]", classArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class org.mockito.cglib.proxy.Enhancer]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setUseFactory(true);
        enhancer1.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        enhancer7.setNamingPolicy(namingPolicy8);
        java.lang.ClassLoader classLoader10 = enhancer7.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer7.setCallbacks(callbackArray12);
        enhancer1.setCallbacks(callbackArray12);
        enhancer1.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader17 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method18 = org.mockito.cglib.core.ReflectUtils.findMethod("()Ljava/lang/Class;", classLoader17);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass4, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str8, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray40);
        java.lang.reflect.Constructor constructor46 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray45);
        enhancer0.setInterfaces(classArray45);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(constructor46);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        java.lang.Class[] classArray9 = null;
        enhancer0.setInterfaces(classArray9);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass13 = type12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.cglib.proxy.Callback callback17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass13, callback17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        java.lang.String[] strArray10 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, true);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, false, false);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray10, methodArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray17);
        enhancer0.setInterfaces(classArray19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer0.setCallback(callback21);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        boolean boolean5 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str7 = type6.getClassName();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy25);
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer28.setNamingPolicy(namingPolicy29);
        enhancer28.setAttemptLoad(false);
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer35.setNamingPolicy(namingPolicy38);
        boolean boolean40 = enhancer35.getAttemptLoad();
        enhancer35.setInterceptDuringConstruction(false);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer35.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy45);
        enhancer0.setNamingPolicy(namingPolicy45);
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = methodArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean6 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass4);
        org.mockito.cglib.proxy.Callback callback7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass4, callback7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.asm.Type[] typeArray32 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray33);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        java.lang.Object obj38 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray35);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=void; shortDescription=()D; values={char=char}]");
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        enhancer44.setInterfaces(classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray50);
        enhancer41.setInterfaces(classArray50);
        boolean boolean54 = type40.equals((java.lang.Object) classArray50);
        java.lang.Object obj55 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) classArray50);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "()V" + "'", str56, "()V");
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback6 = null;
        enhancer0.setCallback(callback6);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = classInfo4.getSuperType();
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        boolean boolean11 = classInfo4.equals((java.lang.Object) type10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.Class<?> wildcardClass16 = propertyDescriptorArray12.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        boolean boolean18 = classInfo4.equals((java.lang.Object) wildcardClass16);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass16);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method21 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.beans.PropertyDescriptor; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str19, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str20, "[Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        org.mockito.asm.Type type8 = classInfo4.getSuperType();
        int int9 = classInfo4.getModifiers();
        org.mockito.asm.Type type10 = classInfo4.getSuperType();
        org.mockito.asm.Type type11 = type10.getElementType();
        java.lang.String str12 = type10.getClassName();
        int int14 = type10.getOpcode(9);
        int int16 = type10.getOpcode((int) ' ');
        int int17 = type10.getSort();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.lang.Object" + "'", str12, "java.lang.Object");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36 + "'", int16 == 36);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class<?> wildcardClass8 = classArray7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(false);
        enhancer13.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer18.setNamingPolicy(namingPolicy19);
        enhancer18.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray23, true, true);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray23);
        enhancer18.setInterfaces(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray27);
        enhancer13.setInterfaces(classArray27);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        int int32 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray27);
        org.mockito.cglib.proxy.Callback callback33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass8, classArray27, callback33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[Ljava/lang/Class;" + "'", str10, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("(SSS)[Ljava/beans/PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setUseFactory(true);
        enhancer1.setUseFactory(false);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        boolean boolean14 = enhancer9.getAttemptLoad();
        enhancer9.setInterceptDuringConstruction(false);
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer9.getStrategy();
        enhancer1.setStrategy(generatorStrategy20);
        boolean boolean22 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        enhancer23.setNamingPolicy(namingPolicy26);
        enhancer23.setSerialVersionUID((java.lang.Long) 10L);
        enhancer23.setAttemptLoad(false);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer23.getStrategy();
        java.lang.ClassLoader classLoader35 = enhancer23.getClassLoader();
        enhancer1.setClassLoader(classLoader35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor37 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer; displayName=(Ljava/lang/Cloneable;Ljava/io/Serializable;)F; propertyEditorClass=class org.mockito.asm.Type]", classLoader35);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer; displayName=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("char", "java.lang.Class[]");
        java.lang.String str3 = signature2.getName();
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str7 = signature6.getDescriptor();
        org.mockito.asm.Type[] typeArray8 = signature6.getArgumentTypes();
        boolean boolean9 = signature2.equals((java.lang.Object) typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer11.setNamingPolicy(namingPolicy12);
        enhancer11.setUseCache(true);
        enhancer11.setSerialVersionUID((java.lang.Long) 10L);
        enhancer11.setUseFactory(true);
        java.lang.ClassLoader classLoader20 = enhancer11.getClassLoader();
        java.lang.String[] strArray21 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, false);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray28);
        enhancer11.setInterfaces(classArray30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class<?> wildcardClass35 = classArray34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        enhancer39.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer39.getStrategy();
        java.lang.Class<?> wildcardClass45 = enhancer39.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        enhancer46.setNamingPolicy(namingPolicy49);
        boolean boolean51 = enhancer46.getAttemptLoad();
        enhancer46.setInterceptDuringConstruction(false);
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        enhancer56.setNamingPolicy(namingPolicy57);
        enhancer56.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, true, true);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray61);
        enhancer56.setInterfaces(classArray65);
        enhancer46.setInterfaces(classArray65);
        java.lang.reflect.Constructor constructor68 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass45, classArray65);
        java.lang.String str69 = org.mockito.asm.Type.getConstructorDescriptor(constructor68);
        org.mockito.cglib.core.MethodInfo methodInfo71 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor68, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray72 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor68);
        boolean boolean73 = type38.equals((java.lang.Object) constructor68);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor68);
        org.mockito.asm.Type[] typeArray75 = methodInfo74.getExceptionTypes();
        org.mockito.cglib.core.Signature signature76 = methodInfo74.getSignature();
        org.mockito.asm.Type[] typeArray77 = methodInfo74.getExceptionTypes();
        int int78 = methodInfo74.getModifiers();
        org.mockito.asm.Type[] typeArray79 = methodInfo74.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass10, classArray30, (java.lang.Object[]) typeArray79);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Lorg.mockito.asm.Type;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(SSS)S" + "'", str7, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(methodArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(constructor68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "()V" + "'", str69, "()V");
        org.junit.Assert.assertNotNull(methodInfo71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(signature76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(typeArray79);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("(Ljava/lang/Cloneable;Ljava/io/Serializable;)Ljava/lang/Object;");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("java.lang.Class[]", "Z");
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        enhancer4.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer4.getStrategy();
        java.lang.Class<?> wildcardClass10 = enhancer4.getClass();
        boolean boolean11 = signature3.equals((java.lang.Object) enhancer4);
        org.mockito.asm.Type type12 = signature3.getReturnType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        int int16 = type14.getOpcode((int) (short) 1);
        java.lang.String str17 = type14.getDescriptor();
        int int19 = type14.getOpcode((int) (byte) 100);
        boolean boolean21 = type14.equals((java.lang.Object) 'a');
        int int22 = type14.getSort();
        int int24 = type14.getOpcode((int) '4');
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class<?> wildcardClass31 = enhancer25.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        org.mockito.cglib.core.Signature signature35 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str36 = signature35.getName();
        org.mockito.asm.Type type37 = signature35.getReturnType();
        org.mockito.asm.Type type38 = signature35.getReturnType();
        boolean boolean39 = classInfo32.equals((java.lang.Object) signature35);
        org.mockito.asm.Type[] typeArray40 = classInfo32.getInterfaces();
        org.mockito.asm.Type type41 = classInfo32.getType();
        int int42 = classInfo32.getModifiers();
        org.mockito.asm.Type type43 = classInfo32.getSuperType();
        org.mockito.asm.Type[] typeArray44 = classInfo32.getInterfaces();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("java/lang/Class", type14, typeArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=()D]", type12, typeArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=()D]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "V" + "'", str17, "V");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 105 + "'", int19 == 105);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 57 + "'", int24 == 57);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class<?> wildcardClass4 = propertyDescriptorArray0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        java.beans.PropertyDescriptor[] propertyDescriptorArray6 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.ClassInfo classInfo7 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.beans.PropertyDescriptor;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(propertyDescriptorArray6);
        org.junit.Assert.assertNotNull(classInfo7);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class<?> wildcardClass38 = propertyDescriptorArray34.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        java.lang.Object obj40 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray39);
        org.mockito.cglib.core.MethodInfo methodInfo42 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 0);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer43.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer43.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer43.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer43.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        enhancer50.setNamingPolicy(namingPolicy53);
        boolean boolean55 = enhancer50.getAttemptLoad();
        enhancer50.setInterceptDuringConstruction(false);
        enhancer50.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer60.setNamingPolicy(namingPolicy61);
        enhancer60.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        enhancer60.setInterfaces(classArray69);
        enhancer50.setInterfaces(classArray69);
        java.lang.reflect.Constructor constructor72 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass49, classArray69);
        java.lang.String str73 = org.mockito.asm.Type.getConstructorDescriptor(constructor72);
        org.mockito.asm.Type[] typeArray74 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor72);
        org.mockito.cglib.core.MethodInfo methodInfo76 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72, (int) (short) 10);
        java.lang.String str77 = org.mockito.asm.Type.getConstructorDescriptor(constructor72);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor72);
        java.lang.Object[] objArray79 = null;
        java.lang.Object obj80 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor72, objArray79);
        org.mockito.asm.Type[] typeArray81 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor72);
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray82, true, true);
        java.lang.Class<?> wildcardClass86 = propertyDescriptorArray82.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray87 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass86);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray87, false, true);
        java.lang.Object obj91 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor72, (java.lang.Object[]) propertyDescriptorArray87);
        java.lang.reflect.Method[] methodArray94 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray87, false, true);
        java.lang.Object obj95 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor29, (java.lang.Object[]) propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(methodInfo42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(constructor72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()V" + "'", str73, "()V");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(methodInfo76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "()V" + "'", str77, "()V");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(propertyDescriptorArray87);
        org.junit.Assert.assertNotNull(methodArray90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(methodArray94);
        org.junit.Assert.assertNotNull(obj95);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        java.lang.String str8 = classInfo4.toString();
        int int9 = classInfo4.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer10.setCallback(callback13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass18 = classArray17.getClass();
        enhancer10.setSuperclass((java.lang.Class) wildcardClass18);
        boolean boolean20 = classInfo4.equals((java.lang.Object) wildcardClass18);
        org.mockito.asm.Type type21 = classInfo4.getSuperType();
        org.mockito.asm.Type type22 = classInfo4.getType();
        java.lang.String str23 = type22.getDescriptor();
        int int24 = type22.getDimensions();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1041 + "'", int9 == 1041);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[Ljava/lang/Class;" + "'", str23, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setAttemptLoad(false);
        enhancer1.setInterceptDuringConstruction(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        boolean boolean22 = enhancer14.getAttemptLoad();
        enhancer14.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer25.setNamingPolicy(namingPolicy28);
        enhancer25.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer25.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray33, true, true);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray33);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray37);
        enhancer25.setInterfaces(classArray37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        enhancer48.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer48.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        enhancer55.setNamingPolicy(namingPolicy58);
        boolean boolean60 = enhancer55.getAttemptLoad();
        enhancer55.setInterceptDuringConstruction(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer55.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy65);
        enhancer40.setNamingPolicy(namingPolicy65);
        enhancer25.setNamingPolicy(namingPolicy65);
        enhancer14.setNamingPolicy(namingPolicy65);
        java.lang.ClassLoader classLoader70 = enhancer14.getClassLoader();
        java.lang.ClassLoader classLoader71 = enhancer14.getClassLoader();
        enhancer1.setClassLoader(classLoader71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor73 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class;; propertyEditorClass=class [Ljava.lang.Class;]", classLoader71);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = null;
        enhancer8.setNamingPolicy(namingPolicy9);
        enhancer8.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer8.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer19.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer19.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        enhancer26.setNamingPolicy(namingPolicy29);
        boolean boolean31 = enhancer26.getAttemptLoad();
        enhancer26.setInterceptDuringConstruction(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy36);
        enhancer8.setNamingPolicy(namingPolicy36);
        enhancer0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer7.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer18.getStrategy();
        enhancer18.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer18.getClassLoader();
        enhancer13.setClassLoader(classLoader23);
        enhancer7.setClassLoader(classLoader23);
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer7.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy29);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer0.setCallbackFilter(callbackFilter33);
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setUseFactory(true);
        enhancer18.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = enhancer24.getClassLoader();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer24.setCallbacks(callbackArray29);
        enhancer18.setCallbacks(callbackArray29);
        enhancer0.setCallbacks(callbackArray29);
        boolean boolean33 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        enhancer34.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer34.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer34.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Ljava/lang/Class;" + "'", str13, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=void; displayName=I(SSS)S; values={char=char}]", "[Ljava/lang/reflect/Method;()[Ljava/lang/reflect/Method;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=void; displayName=I(SSS)S; values={char=char}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass14 = classArray13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass14);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass14);
        org.mockito.cglib.proxy.Callback callback17 = null;
        enhancer0.setCallback(callback17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer27.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer27.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        boolean boolean39 = enhancer34.getAttemptLoad();
        enhancer34.setInterceptDuringConstruction(false);
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer34.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy44);
        enhancer19.setNamingPolicy(namingPolicy44);
        enhancer0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, true, true);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        java.lang.Class[] classArray54 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, false, true);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray49);
        java.lang.Class[] classArray59 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray58);
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.cglib.core.Signature signature8 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str9 = signature8.getName();
        org.mockito.asm.Type type10 = signature8.getReturnType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type12, type13, type14 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray15);
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray15);
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray15);
        java.lang.String str19 = type5.getClassName();
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.Class<?> wildcardClass23 = classArray22.getClass();
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        boolean boolean26 = classInfo24.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type27 = classInfo24.getSuperType();
        org.mockito.asm.Type[] typeArray28 = classInfo24.getInterfaces();
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]", type5, typeArray28);
        int int30 = type5.getDimensions();
        java.lang.String str31 = type5.toString();
        java.lang.String str32 = type5.getInternalName();
        java.lang.String str33 = type5.getInternalName();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        enhancer34.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer34.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer34.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        enhancer41.setNamingPolicy(namingPolicy44);
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        enhancer51.setNamingPolicy(namingPolicy52);
        enhancer51.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray59 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray56, true, true);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray56);
        enhancer51.setInterfaces(classArray60);
        enhancer41.setInterfaces(classArray60);
        java.lang.reflect.Constructor constructor63 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass40, classArray60);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer64.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer64.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer64.getStrategy();
        java.lang.Class<?> wildcardClass70 = enhancer64.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer71.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        enhancer71.setNamingPolicy(namingPolicy74);
        boolean boolean76 = enhancer71.getAttemptLoad();
        enhancer71.setInterceptDuringConstruction(false);
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = null;
        enhancer81.setNamingPolicy(namingPolicy82);
        enhancer81.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray86, true, true);
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray86);
        enhancer81.setInterfaces(classArray90);
        enhancer71.setInterfaces(classArray90);
        java.lang.reflect.Constructor constructor93 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass70, classArray90);
        java.lang.String str94 = org.mockito.asm.Type.getConstructorDescriptor(constructor93);
        org.mockito.cglib.core.MethodInfo methodInfo96 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor93, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray97 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor93);
        java.lang.Object obj98 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor63, (java.lang.Object[]) typeArray97);
        java.lang.String str99 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray97);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(SSS)S" + "'", str16, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)S" + "'", str17, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(SSS)[Ljava/lang/Class;" + "'", str18, "(SSS)[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.lang.Class[]" + "'", str19, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[Ljava/lang/Class;" + "'", str31, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[Ljava/lang/Class;" + "'", str32, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[Ljava/lang/Class;" + "'", str33, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(methodArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(constructor63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(constructor93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "()V" + "'", str94, "()V");
        org.junit.Assert.assertNotNull(methodInfo96);
        org.junit.Assert.assertNotNull(typeArray97);
        org.junit.Assert.assertNotNull(obj98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "()[Ljava/lang/Class;" + "'", str99, "()[Ljava/lang/Class;");
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        java.lang.String str7 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.asm.Type[] typeArray31 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo33 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (short) 10);
        java.lang.String str34 = methodInfo33.toString();
        java.lang.String str35 = methodInfo33.toString();
        org.mockito.cglib.core.Signature signature36 = methodInfo33.getSignature();
        java.lang.String str37 = methodInfo33.toString();
        java.lang.String str38 = methodInfo33.toString();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(methodInfo33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<init>()V" + "'", str34, "<init>()V");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<init>()V" + "'", str35, "<init>()V");
        org.junit.Assert.assertNotNull(signature36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<init>()V" + "'", str37, "<init>()V");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<init>()V" + "'", str38, "<init>()V");
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        int int5 = type3.getOpcode((int) (short) 1);
        java.lang.String str6 = type3.getDescriptor();
        int int8 = type3.getOpcode((int) (byte) 100);
        boolean boolean9 = signature2.equals((java.lang.Object) int8);
        org.mockito.asm.Type[] typeArray10 = signature2.getArgumentTypes();
        java.lang.String str11 = signature2.toString();
        java.lang.String str12 = signature2.getName();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        enhancer13.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer13.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        enhancer24.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer24.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        enhancer31.setNamingPolicy(namingPolicy34);
        boolean boolean36 = enhancer31.getAttemptLoad();
        enhancer31.setInterceptDuringConstruction(false);
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer31.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy41);
        enhancer13.setNamingPolicy(namingPolicy41);
        boolean boolean44 = signature2.equals((java.lang.Object) namingPolicy41);
        org.mockito.asm.Type type45 = signature2.getReturnType();
        org.mockito.asm.Type type46 = signature2.getReturnType();
        java.lang.String str47 = signature2.getName();
        java.lang.String str48 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "V" + "'", str6, "V");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 105 + "'", int8 == 105);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)S" + "'", str11, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(SSS)S" + "'", str48, "(SSS)S");
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer7.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader12 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer0.setCallback(callback14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer16.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer16.setNamingPolicy(namingPolicy19);
        enhancer16.setSerialVersionUID((java.lang.Long) 10L);
        enhancer16.setAttemptLoad(false);
        enhancer16.setUseFactory(true);
        java.lang.Class[] classArray27 = new java.lang.Class[] {};
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray27);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray29);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        enhancer16.setInterfaces(classArray29);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        boolean boolean6 = propertyDescriptor3.isPreferred();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setWriteMethod(method8);
        boolean boolean10 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str3 = signature2.getDescriptor();
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        java.lang.Class[] classArray6 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray4);
        java.lang.Class<?> wildcardClass7 = classArray6.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = classInfo8.getSuperType();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type type11 = classInfo8.getSuperType();
        boolean boolean12 = signature2.equals((java.lang.Object) classInfo8);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str16 = signature15.getName();
        org.mockito.asm.Type type17 = signature15.getReturnType();
        org.mockito.asm.Type type18 = signature15.getReturnType();
        java.lang.String str19 = signature15.getDescriptor();
        boolean boolean20 = signature2.equals((java.lang.Object) str19);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray21);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray31 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, true, true);
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray28, false, false);
        java.lang.reflect.Method[] methodArray35 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray27, methodArray34);
        java.lang.reflect.Method[] methodArray36 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray26, methodArray34);
        boolean boolean37 = signature2.equals((java.lang.Object) methodArray34);
        java.lang.String str38 = signature2.getName();
        java.lang.Class[] classArray39 = new java.lang.Class[] {};
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray39);
        java.lang.Class<?> wildcardClass42 = classArray41.getClass();
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        boolean boolean46 = signature2.equals((java.lang.Object) type45);
        java.lang.String str47 = signature2.toString();
        org.mockito.asm.Type[] typeArray48 = signature2.getArgumentTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(SSS)S" + "'", str3, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.lang.Class[]" + "'", str10, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(SSS)S" + "'", str19, "(SSS)S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(methodArray31);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertNotNull(methodArray35);
        org.junit.Assert.assertNotNull(methodArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(SSS)S" + "'", str47, "(SSS)S");
        org.junit.Assert.assertNotNull(typeArray48);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setPreferred(true);
        boolean boolean13 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setHidden(false);
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type14 = signature13.getReturnType();
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature13);
        java.lang.String str16 = signature13.getName();
        java.lang.String str17 = signature13.getDescriptor();
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(SSS)S" + "'", str17, "(SSS)S");
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        java.beans.PropertyDescriptor[] propertyDescriptorArray0 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, true, true);
        java.lang.Class[] classArray4 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray5 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray0, false, true);
        java.lang.Class[] classArray9 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray0);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        int int14 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray10);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray0);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean10 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer12.setCallback(callback15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        java.lang.Class<?> wildcardClass20 = classArray19.getClass();
        enhancer12.setSuperclass((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.lang.Class[] classArray27 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[Ljava/lang/Class;" + "'", str22, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(classArray27);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        enhancer1.setAttemptLoad(true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer1.setCallbackFilter(callbackFilter25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        enhancer27.setNamingPolicy(namingPolicy28);
        enhancer27.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        enhancer27.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback40 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray41 = new org.mockito.cglib.proxy.Callback[] { callback40 };
        enhancer36.setCallbacks(callbackArray41);
        enhancer27.setCallbacks(callbackArray41);
        enhancer1.setCallbacks(callbackArray41);
        java.lang.ClassLoader classLoader45 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method46 = org.mockito.cglib.core.ReflectUtils.findMethod("()Ljava/lang/Class;", classLoader45);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(callbackArray41);
        org.junit.Assert.assertNotNull(classLoader45);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.String str8 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.beans.PropertyDescriptor[name=void; displayName=()LV;]" + "'", str8, "java.beans.PropertyDescriptor[name=void; displayName=()LV;]");
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer26.setCallbacks(callbackArray31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback37 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray38 = new org.mockito.cglib.proxy.Callback[] { callback37 };
        enhancer33.setCallbacks(callbackArray38);
        enhancer26.setCallbacks(callbackArray38);
        enhancer0.setCallbacks(callbackArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer0.getStrategy();
        org.mockito.cglib.core.Signature signature45 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        java.lang.String str46 = signature45.getDescriptor();
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = classInfo51.getSuperType();
        java.lang.String str53 = classInfo51.toString();
        org.mockito.asm.Type type54 = classInfo51.getSuperType();
        boolean boolean55 = signature45.equals((java.lang.Object) classInfo51);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        enhancer56.setNamingPolicy(namingPolicy57);
        enhancer56.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, true, true);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray61);
        enhancer56.setInterfaces(classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray65);
        boolean boolean68 = classInfo51.equals((java.lang.Object) classArray65);
        enhancer0.setInterfaces(classArray65);
        java.lang.Class[] classArray70 = new java.lang.Class[] {};
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        enhancer0.setInterfaces(classArray70);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        enhancer74.setUseFactory(true);
        enhancer74.setUseFactory(false);
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer74.getStrategy();
        enhancer0.setStrategy(generatorStrategy81);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray38);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(SSS)S" + "'", str46, "(SSS)S");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.lang.Class[]" + "'", str53, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        org.mockito.asm.Type type1 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer2.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer2.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer2.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        boolean boolean14 = enhancer9.getAttemptLoad();
        enhancer9.setInterceptDuringConstruction(false);
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        enhancer19.setNamingPolicy(namingPolicy20);
        enhancer19.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray24, true, true);
        java.lang.Class[] classArray28 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray24);
        enhancer19.setInterfaces(classArray28);
        enhancer9.setInterfaces(classArray28);
        java.lang.reflect.Constructor constructor31 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass8, classArray28);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor31);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor31, (int) (short) 0);
        org.mockito.cglib.core.ClassInfo classInfo35 = methodInfo34.getClassInfo();
        org.mockito.asm.Type[] typeArray36 = classInfo35.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("[Ljava/lang/reflect/Method;", type1, typeArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(methodArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(constructor31);
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(typeArray36);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback28 = null;
        enhancer0.setCallback(callback28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(false);
        enhancer30.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer30.getStrategy();
        enhancer0.setStrategy(generatorStrategy35);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setDisplayName("()LV;");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        boolean boolean13 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "()LV;" + "'", str11, "()LV;");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str6 = type5.toString();
        java.lang.String str7 = type5.getInternalName();
        int int8 = type5.getSort();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[Ljava/lang/Class;" + "'", str4, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[Ljava/lang/Class;" + "'", str6, "[Ljava/lang/Class;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[Ljava/lang/Class;" + "'", str7, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback4 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray5 = new org.mockito.cglib.proxy.Callback[] { callback4 };
        enhancer0.setCallbacks(callbackArray5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer9.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer9.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseFactory(true);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray24);
        enhancer20.setInterfaces(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer20.getStrategy();
        enhancer0.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Callback callback30 = null;
        enhancer0.setCallback(callback30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(callbackArray5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/cglib/proxy/Enhancer;" + "'", str17, "Lorg/mockito/cglib/proxy/Enhancer;");
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer2.getStrategy();
        enhancer0.setStrategy(generatorStrategy4);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass9 = classArray8.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass9);
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list17 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass9, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("(Ljava/lang/Cloneable;Ljava/io/Serializable;)B");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type5 = classInfo4.getType();
        boolean boolean7 = classInfo4.equals((java.lang.Object) 0.0f);
        int int8 = classInfo4.getModifiers();
        java.lang.Class[] classArray9 = new java.lang.Class[] {};
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray9);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray9);
        java.lang.Class<?> wildcardClass12 = classArray11.getClass();
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        boolean boolean15 = classInfo13.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type16 = classInfo13.getSuperType();
        int int17 = classInfo13.getModifiers();
        boolean boolean18 = classInfo4.equals((java.lang.Object) classInfo13);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1041 + "'", int17 == 1041);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) ' ');
        org.mockito.cglib.core.MethodInfo methodInfo44 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo45 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36);
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.lang.reflect.Method[] methodArray57 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, false, false);
        java.lang.reflect.Method[] methodArray58 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray57);
        java.lang.Class[] classArray59 = new java.lang.Class[] {};
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray59);
        int int62 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray67 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, true);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, false, false);
        java.lang.reflect.Method[] methodArray71 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray70);
        java.lang.Class[] classArray72 = new java.lang.Class[] {};
        java.lang.String[] strArray73 = org.mockito.cglib.core.ReflectUtils.getNames(classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class<?> wildcardClass75 = classArray74.getClass();
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass79 = type78.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass79);
        java.lang.reflect.Method[] methodArray83 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray80, true, true);
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray80, true, false);
        boolean boolean87 = type77.equals((java.lang.Object) methodArray86);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray63, methodArray86);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj90 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor36, (java.lang.Object[]) methodArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(methodInfo44);
        org.junit.Assert.assertNotNull(methodInfo45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNotNull(methodArray57);
        org.junit.Assert.assertNotNull(methodArray58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(methodArray67);
        org.junit.Assert.assertNotNull(methodArray70);
        org.junit.Assert.assertNotNull(methodArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[Ljava/lang/Class;" + "'", str76, "[Ljava/lang/Class;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(methodArray83);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.mockito.cglib.core.Signature signature3 = new org.mockito.cglib.core.Signature("", "(SSS)S");
        org.mockito.asm.Type type4 = signature3.getReturnType();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.lang.String str15 = classInfo14.toString();
        org.mockito.asm.Type[] typeArray16 = classInfo14.getInterfaces();
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("java.lang.Object", type6, typeArray16);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("", type4, typeArray16);
        java.lang.String str19 = signature18.getDescriptor();
        java.lang.String str20 = signature18.toString();
        java.lang.String str21 = signature18.toString();
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str15, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "()S" + "'", str19, "()S");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "()S" + "'", str20, "()S");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "()S" + "'", str21, "()S");
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;");
        int int3 = type1.getOpcode(14);
        int int4 = type1.getSort();
        java.lang.String str5 = type1.getDescriptor();
        int int6 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18 + "'", int3 == 18);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;" + "'", str5, "L(Ljava/lang/Cloneable;Ljava/io/Serializable;)[Ljava/lang/Class;;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        java.lang.Class<?> wildcardClass4 = classArray3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo5 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass4);
        boolean boolean7 = classInfo5.equals((java.lang.Object) (-1.0f));
        java.lang.String str8 = classInfo5.toString();
        org.mockito.asm.Type type9 = classInfo5.getSuperType();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("void", method11, method12);
        propertyDescriptor13.setExpert(true);
        java.lang.String str16 = propertyDescriptor13.getName();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("void", method18, method19);
        propertyDescriptor20.setExpert(false);
        propertyDescriptor20.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor25 = propertyDescriptor13.createPropertyEditor((java.lang.Object) propertyDescriptor20);
        java.lang.reflect.Method method26 = propertyDescriptor20.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor20.attributeNames();
        propertyDescriptor20.setHidden(true);
        propertyDescriptor20.setHidden(true);
        java.lang.reflect.Method method32 = propertyDescriptor20.getWriteMethod();
        propertyDescriptor20.setBound(true);
        boolean boolean35 = type9.equals((java.lang.Object) true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass37 = type36.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type41 = classInfo40.getType();
        java.lang.String str42 = type41.getDescriptor();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer43.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        enhancer43.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer43.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer43.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        enhancer50.setNamingPolicy(namingPolicy53);
        boolean boolean55 = enhancer50.getAttemptLoad();
        enhancer50.setInterceptDuringConstruction(false);
        enhancer50.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer60.setNamingPolicy(namingPolicy61);
        enhancer60.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray65, true, true);
        java.lang.Class[] classArray69 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray65);
        enhancer60.setInterfaces(classArray69);
        enhancer50.setInterfaces(classArray69);
        java.lang.reflect.Constructor constructor72 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass49, classArray69);
        java.lang.String str73 = org.mockito.asm.Type.getConstructorDescriptor(constructor72);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray76 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor72);
        boolean boolean77 = type41.equals((java.lang.Object) typeArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature78 = new org.mockito.cglib.core.Signature("(SSS)Ljava/lang/Object;", type9, typeArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(SSS)Ljava/lang/Object;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classInfo5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Class[]" + "'", str8, "java.lang.Class[]");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "void" + "'", str16, "void");
        org.junit.Assert.assertNull(propertyEditor25);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str42, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(constructor72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()V" + "'", str73, "()V");
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setShortDescription("void");
        propertyDescriptor3.setName("Lorg/mockito/cglib/proxy/Enhancer;");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        java.lang.String str14 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/cglib/proxy/Enhancer;" + "'", str14, "Lorg/mockito/cglib/proxy/Enhancer;");
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = null;
        enhancer1.setNamingPolicy(namingPolicy4);
        boolean boolean6 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        boolean boolean12 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        enhancer13.setNamingPolicy(namingPolicy14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer1.setClassLoader(classLoader17);
        enhancer1.setAttemptLoad(true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.Class<?> wildcardClass22 = type21.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass22);
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader27 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method28 = org.mockito.cglib.core.ReflectUtils.findMethod("java.lang.Class", classLoader27);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(classLoader27);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        boolean boolean12 = enhancer7.getAttemptLoad();
        enhancer7.setInterceptDuringConstruction(false);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer17.setNamingPolicy(namingPolicy18);
        enhancer17.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, true, true);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray22);
        enhancer17.setInterfaces(classArray26);
        enhancer7.setInterfaces(classArray26);
        java.lang.reflect.Constructor constructor29 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass6, classArray26);
        java.lang.String str30 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo32 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray33 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo34 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo35 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        java.lang.String str36 = org.mockito.asm.Type.getConstructorDescriptor(constructor29);
        org.mockito.cglib.core.MethodInfo methodInfo37 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor29);
        int int38 = methodInfo37.getModifiers();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(constructor29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "()V" + "'", str30, "()V");
        org.junit.Assert.assertNotNull(methodInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(methodInfo34);
        org.junit.Assert.assertNotNull(methodInfo35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "()V" + "'", str36, "()V");
        org.junit.Assert.assertNotNull(methodInfo37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        boolean boolean12 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("()D");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=org.mockito.cglib.proxy.Enhancer]");
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("void", method20, method21);
        propertyDescriptor22.setExpert(true);
        java.util.Enumeration<java.lang.String> strEnumeration25 = propertyDescriptor22.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration26 = propertyDescriptor22.attributeNames();
        java.lang.reflect.Method method27 = null;
        propertyDescriptor22.setWriteMethod(method27);
        java.beans.PropertyEditor propertyEditor29 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor22);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class<?> wildcardClass33 = classArray32.getClass();
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        boolean boolean36 = classInfo34.equals((java.lang.Object) (-1.0f));
        java.lang.String str37 = classInfo34.toString();
        int int38 = classInfo34.getModifiers();
        org.mockito.asm.Type type39 = classInfo34.getType();
        boolean boolean40 = propertyDescriptor22.equals((java.lang.Object) classInfo34);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strEnumeration25);
        org.junit.Assert.assertNotNull(strEnumeration26);
        org.junit.Assert.assertNull(propertyEditor29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.lang.Class[]" + "'", str37, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1041 + "'", int38 == 1041);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        enhancer7.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass13 = enhancer7.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        boolean boolean19 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        enhancer24.setNamingPolicy(namingPolicy25);
        enhancer24.setUseCache(true);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray29);
        enhancer24.setInterfaces(classArray33);
        enhancer14.setInterfaces(classArray33);
        java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass13, classArray33);
        java.lang.String str37 = org.mockito.asm.Type.getConstructorDescriptor(constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo39 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) (byte) 10);
        org.mockito.asm.Type[] typeArray40 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor36);
        boolean boolean41 = type6.equals((java.lang.Object) constructor36);
        org.mockito.cglib.core.MethodInfo methodInfo43 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor36, (int) '4');
        org.mockito.cglib.core.Signature signature44 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor36);
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class<?> wildcardClass48 = classArray47.getClass();
        org.mockito.cglib.core.ClassInfo classInfo49 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        boolean boolean50 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass48);
        java.lang.Object obj53 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor36, (java.lang.Object[]) propertyDescriptorArray52);
        java.lang.Class<?> wildcardClass54 = constructor36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass54);
        java.lang.Class<?> wildcardClass56 = classInfo55.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method57 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(constructor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "()V" + "'", str37, "()V");
        org.junit.Assert.assertNotNull(methodInfo39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(methodInfo43);
        org.junit.Assert.assertNotNull(signature44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=()[Ljava/beans/PropertyDescriptor;]", "()D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=()[Ljava/beans/PropertyDescriptor;]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("void", method8, method9);
        propertyDescriptor10.setExpert(false);
        propertyDescriptor10.setName("(SSS)[Ljava/lang/Class;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor10);
        boolean boolean16 = propertyDescriptor10.isHidden();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray2 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass1);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass1);
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass1);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(propertyDescriptorArray2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Ljava/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(true);
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setShortDescription("I(SSS)S");
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lorg.mockito.cglib.proxy.Enhancer;");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer8.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer8.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer15.setNamingPolicy(namingPolicy18);
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy25);
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer29.setCallbacks(callbackArray34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        enhancer36.setNamingPolicy(namingPolicy39);
        enhancer36.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer36.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy43);
        enhancer0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer0.setCallbackFilter(callbackFilter46);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer0.setCallbackFilter(callbackFilter50);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy43);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        org.mockito.asm.Type type7 = classInfo4.getSuperType();
        org.mockito.asm.Type[] typeArray8 = classInfo4.getInterfaces();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray16 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray13, true, true);
        java.lang.Class<?> wildcardClass17 = propertyDescriptorArray13.getClass();
        boolean boolean18 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray24 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray21, true, true);
        java.lang.Class<?> wildcardClass25 = propertyDescriptorArray21.getClass();
        boolean boolean26 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        enhancer29.setNamingPolicy(namingPolicy30);
        boolean boolean32 = enhancer29.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray37 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray34, true, true);
        java.lang.Class<?> wildcardClass38 = methodArray37.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray43 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray40, true, true);
        java.lang.Class<?> wildcardClass44 = methodArray43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray47, true, true);
        java.lang.Class<?> wildcardClass51 = propertyDescriptorArray47.getClass();
        boolean boolean52 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass10, wildcardClass17, wildcardClass25, wildcardClass38, wildcardClass44, wildcardClass51 };
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        boolean boolean61 = classInfo4.equals((java.lang.Object) classArray57);
        org.mockito.asm.Type type62 = classInfo4.getType();
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(methodArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(methodArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(methodArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[Ljava/lang/reflect/Method;" + "'", str46, "[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[Ljava/beans/PropertyDescriptor;" + "'", str55, "[Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=void; hidden]" + "'", str13, "java.beans.PropertyDescriptor[name=void; hidden]");
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=void; expert; propertyEditorClass=class [Ljava.lang.Class;]");
        int int2 = type1.getDimensions();
        int int3 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=void; values={=[Ljava/lang/Class;}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("[Ljava/lang/Class;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("V");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type6, type7, type8 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray9);
        boolean boolean12 = type2.equals((java.lang.Object) type4);
        int int13 = type2.getSize();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        enhancer14.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer14.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.lang.String str22 = classInfo21.toString();
        org.mockito.asm.Type[] typeArray23 = classInfo21.getInterfaces();
        org.mockito.cglib.core.Signature signature24 = new org.mockito.cglib.core.Signature("", type2, typeArray23);
        org.mockito.asm.Type[] typeArray25 = signature24.getArgumentTypes();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(SSS)S" + "'", str10, "(SSS)S");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(SSS)LV;" + "'", str11, "(SSS)LV;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.cglib.proxy.Enhancer" + "'", str22, "org.mockito.cglib.proxy.Enhancer");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray25);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = null;
        enhancer0.setNamingPolicy(namingPolicy3);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray11 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray8, true, true);
        java.lang.Class[] classArray12 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray8);
        int int13 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray12);
        enhancer0.setInterfaces(classArray12);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, true, true);
        java.lang.Class[] classArray19 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.Class[] classArray20 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, true);
        java.lang.Class[] classArray24 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        enhancer0.setInterfaces(classArray24);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(methodArray11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(classArray24);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setUseFactory(true);
        enhancer1.setUseFactory(false);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        enhancer9.setNamingPolicy(namingPolicy12);
        boolean boolean14 = enhancer9.getAttemptLoad();
        enhancer9.setInterceptDuringConstruction(false);
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer9.getStrategy();
        enhancer1.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer1.setCallback(callback22);
        java.lang.ClassLoader classLoader24 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor25 = org.mockito.cglib.core.ReflectUtils.findConstructor("ava.beans.PropertyDescriptor[name=(SSS)[Ljava/lang/Class", classLoader24);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->ava.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = null;
        enhancer0.setNamingPolicy(namingPolicy1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = new java.beans.PropertyDescriptor[] {};
        java.lang.reflect.Method[] methodArray8 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray5, true, true);
        java.lang.Class<?> wildcardClass9 = methodArray8.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass9);
        boolean boolean11 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean14 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class15 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(methodArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray0);
        java.lang.Class<?> wildcardClass3 = classArray2.getClass();
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass3);
        boolean boolean6 = classInfo4.equals((java.lang.Object) (-1.0f));
        java.lang.String str7 = classInfo4.toString();
        int int8 = classInfo4.getModifiers();
        org.mockito.asm.Type type9 = classInfo4.getSuperType();
        java.lang.Class<?> wildcardClass10 = type9.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass10);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(classArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.Class[]" + "'", str7, "java.lang.Class[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1041 + "'", int8 == 1041);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("void", method1, method2);
        propertyDescriptor3.setExpert(false);
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setValue("char", (java.lang.Object) "char");
        boolean boolean12 = propertyDescriptor3.isHidden();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        enhancer14.setNamingPolicy(namingPolicy15);
        enhancer14.setAttemptLoad(false);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer21.setNamingPolicy(namingPolicy24);
        boolean boolean26 = enhancer21.getAttemptLoad();
        enhancer21.setInterceptDuringConstruction(false);
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer21.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy31);
        propertyDescriptor3.setValue("[Ljava/lang/Class;", (java.lang.Object) namingPolicy31);
        propertyDescriptor3.setDisplayName("(SSS)[Ljava/lang/Class;");
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        java.lang.Class class0 = null;
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        org.mockito.cglib.proxy.Callback callback4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = org.mockito.cglib.proxy.Enhancer.create(class0, classArray1, callback4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(classArray3);
    }
}


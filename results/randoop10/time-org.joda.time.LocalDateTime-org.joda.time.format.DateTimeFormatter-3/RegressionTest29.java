import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setRawOffset(54153800);
        calendar11.setTimeZone(timeZone14);
        // The following exception was thrown during execution in test generation
        try {
            calendar11.roll(26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=54153800,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean10 = timeOfDay6.isSupported(dateTimeFieldType9);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay6.plusSeconds(8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.minutes();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(0L, chronology31);
        mutableDateTime36.addWeeks((int) (short) 10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, 32769, (int) (byte) 10, (int) (short) 1);
        java.lang.String str5 = mutablePeriod4.toString();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) 528, (-2100623334000L));
        org.joda.time.Duration duration13 = duration11.plus((long) 3);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((long) 31, chronology24);
        org.joda.time.Period period29 = duration15.toPeriod(chronology24);
        org.joda.time.DurationField durationField30 = chronology24.weekyears();
        org.joda.time.Period period31 = duration13.toPeriod(chronology24);
        org.joda.time.Period period32 = new org.joda.time.Period(7L, (-2240584440000L), chronology24);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology24);
        mutablePeriod4.setPeriod(51L, chronology24);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT32769M10.001S" + "'", str5, "PT32769M10.001S");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        long long11 = dateMidnight8.getMillis();
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.weekyear();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours(10L);
        long long15 = duration14.getStandardSeconds();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration19 = duration14.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.withMillis((long) 19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration18);
        int int23 = dateMidnight8.getMinuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        int int33 = mutablePeriod32.getDays();
        mutablePeriod32.setValue(0, 10);
        mutablePeriod32.setMonths(11);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, 0);
        long long41 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology45);
        mutablePeriod46.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod46.add(0L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutablePeriod46.add(0L, chronology60);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (-1), chronology60);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 10, chronology72);
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight63.toMutableDateTime(chronology72);
        mutableDateTime75.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime75.secondOfMinute();
        java.lang.String str79 = property78.getAsShortText();
        java.util.Locale locale81 = java.util.Locale.ITALIAN;
        boolean boolean82 = locale81.hasExtensions();
        java.util.Locale.Builder builder83 = new java.util.Locale.Builder();
        java.util.Locale locale84 = builder83.build();
        java.lang.String str85 = locale84.getScript();
        java.lang.String str86 = locale81.getDisplayVariant(locale84);
        org.joda.time.MutableDateTime mutableDateTime87 = property78.set("32", locale81);
        org.joda.time.MutableDateTime mutableDateTime88 = property78.getMutableDateTime();
        int int89 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime88);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime88.setDayOfMonth(54145870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54145870 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488000001L + "'", long11 == 1645488000001L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 36000L + "'", long15 == 36000L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-52L) + "'", long41 == (-52L));
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight3.toMutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        mutableDateTime6.addMillis(12);
        mutableDateTime6.setDayOfYear((int) (short) 10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.minuteOfDay();
        int int13 = mutableDateTime6.getRoundingMode();
        mutableDateTime6.setDate((long) 758);
        int int16 = mutableDateTime6.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str7, "2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        int int9 = mutablePeriod4.getValue(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        org.joda.time.Duration duration14 = mutablePeriod4.toDurationTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.Period period18 = new org.joda.time.Period(1645488000000L, periodType17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration19, readableInstant20);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.Period period23 = period18.normalizedStandard(periodType22);
        org.joda.time.Period period24 = duration14.toPeriodTo(readableInstant15, periodType22);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 0, periodType22);
        mutablePeriod25.addMonths(667);
        int int28 = mutablePeriod25.getMillis();
        mutablePeriod25.addYears((-2023));
        mutablePeriod25.setMinutes(126);
        int int33 = mutablePeriod25.getWeeks();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours(10L);
        long long10 = duration9.getStandardSeconds();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration14 = duration9.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.withMillis((long) 19);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusWeeks(54440785);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withYearOfEra(541537);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000L + "'", long10 == 36000L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        org.joda.time.DateMidnight dateMidnight2 = localDate1.toDateMidnight();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 10, chronology11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (short) 100, chronology22);
        org.joda.time.DateTime dateTime26 = dateTime13.withChronology(chronology22);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        long long33 = dateMidnight30.getMillis();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.days();
        org.joda.time.Period period35 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight30, periodType34);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight30.toMutableDateTimeISO();
        int int37 = mutableDateTime36.getDayOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        mutableDateTime36.setChronology(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime13.withChronology(chronology45);
        org.joda.time.DateTime dateTime51 = dateTime48.withDurationAdded(0L, 1);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime52.property(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localDate1.get(dateTimeFieldType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645401600001L + "'", long33 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology11);
        mutablePeriod12.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod12.add(0L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutablePeriod12.add(0L, chronology26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (-1), chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight29.toMutableDateTime(chronology38);
        mutableDateTime41.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime41.toMutableDateTime(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = yearMonthDay47.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime41, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration51);
        long long53 = duration6.getStandardDays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear(2022);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(36001000L);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        strSet2.clear();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        java.lang.String str6 = periodType4.getName();
        boolean boolean7 = strSet2.contains((java.lang.Object) periodType4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfHalfday();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 726, periodType4, chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.hourOfDay();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Days" + "'", str6, "Days");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusMonths((int) (short) 0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(10L);
        long long6 = duration5.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period8 = duration5.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration14 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, 12);
        org.joda.time.Duration duration15 = duration12.toDuration();
        boolean boolean16 = duration5.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        int int25 = mutablePeriod20.getValue(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        org.joda.time.Duration duration30 = mutablePeriod20.toDurationTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.Period period34 = new org.joda.time.Period(1645488000000L, periodType33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.Period period39 = period34.normalizedStandard(periodType38);
        org.joda.time.Period period40 = duration30.toPeriodTo(readableInstant31, periodType38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardHours(10L);
        long long47 = duration46.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period49 = duration46.toPeriod();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration55 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration53, 12);
        org.joda.time.Duration duration56 = duration53.toDuration();
        boolean boolean57 = duration46.isEqual((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Days days58 = duration56.toStandardDays();
        org.joda.time.Duration duration59 = duration30.minus((org.joda.time.ReadableDuration) duration56);
        boolean boolean60 = duration15.isEqual((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str66 = localDate65.toString();
        org.joda.time.LocalDate.Property property67 = localDate65.weekyear();
        int int68 = localDate65.getCenturyOfEra();
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtMidnight();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate73 = org.joda.time.LocalDate.now(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.Duration duration77 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableDuration) duration77);
        org.joda.time.Interval interval79 = interval70.withDurationAfterStart((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration81 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration77, 70);
        java.lang.String str82 = duration30.toString();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000L + "'", long6 == 36000L);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 36000L + "'", long47 == 36000L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01" + "'", str66, "1970-01-01");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 19 + "'", int68 == 19);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PT-0.011S" + "'", str82, "PT-0.011S");
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = yearMonthDay0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        int int12 = mutablePeriod7.getValue(0);
        mutablePeriod7.addMinutes(0);
        mutablePeriod7.setMonths((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay0.withYear(54272243);
        java.lang.Object obj20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology24);
        mutablePeriod25.setPeriod((long) (short) 10, (long) (short) -1);
        int int30 = mutablePeriod25.getValue(0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        org.joda.time.Duration duration35 = mutablePeriod25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight32, chronology43);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(obj20, periodType21, chronology43);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((java.lang.Object) periodType21);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTime dateTime51 = yearMonthDay50.toDateTimeAtMidnight();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.days();
        org.joda.time.Period period54 = new org.joda.time.Period(1645488000000L, periodType53);
        org.joda.time.Period period55 = period54.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) 100);
        org.joda.time.Period period58 = mutablePeriod57.toPeriod();
        org.joda.time.Period period59 = period55.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period61 = period55.withMonths(1970);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.days();
        int int63 = periodType62.size();
        org.joda.time.PeriodType periodType64 = periodType62.withMinutesRemoved();
        org.joda.time.PeriodType periodType65 = periodType64.withYearsRemoved();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(36000L);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfSecond();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.withZoneRetainFields(dateTimeZone73);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(chronology78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.minusDays((int) (short) -1);
        int int82 = dateMidnight81.getYearOfEra();
        org.joda.time.Chronology chronology83 = dateMidnight81.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (short) 10, chronology83);
        org.joda.time.DateTime dateTime87 = dateTime85.plusSeconds(14);
        boolean boolean88 = dateMidnight74.isBefore((org.joda.time.ReadableInstant) dateTime87);
        java.lang.String str89 = dateMidnight74.toString();
        int int90 = property68.compareTo((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight74.withFieldAdded(durationFieldType91, 15);
        int int94 = periodType64.indexOf(durationFieldType91);
        org.joda.time.Period period96 = period61.withField(durationFieldType91, 192);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay98 = yearMonthDay50.withFieldAdded(durationFieldType91, (-902));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str89, "2022-02-22T00:00:00.000-00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMinutes(0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100, chronology15);
        org.joda.time.DurationField durationField19 = durationFieldType6.getField(chronology15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        int int24 = dateMidnight23.getYearOfEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.DurationField durationField27 = durationFieldType6.getField(chronology25);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(1645455743145L, chronology25);
        int int29 = timeOfDay28.size();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.plusYears(100);
        org.joda.time.DateMidnight.Property property38 = dateMidnight33.yearOfEra();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight33.withWeekyear(54153800);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((-2));
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight40.getZone();
        org.joda.time.DateTime dateTime44 = timeOfDay28.toDateTimeToday(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 904, dateTimeZone43);
        org.joda.time.Chronology chronology46 = chronology3.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 69, chronology9);
        org.joda.time.DurationField durationField14 = chronology9.hours();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(0L);
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        boolean boolean23 = dateTimeFieldType2.isSupported(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.hours();
        org.joda.time.DurationField durationField25 = chronology20.weeks();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 53, 1645455822867L, chronology20);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology30);
        mutablePeriod31.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod31.add(0L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        mutablePeriod31.add(0L, chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (-1), chronology45);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 10, chronology57);
        org.joda.time.MutableDateTime mutableDateTime60 = dateMidnight48.toMutableDateTime(chronology57);
        mutableDateTime60.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime60.millisOfDay();
        mutableDateTime60.setHourOfDay((int) (short) 1);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str68 = localDate67.toString();
        org.joda.time.LocalDate.Property property69 = localDate67.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = localDate67.toString(dateTimeFormatter70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(dateTimeZone73);
        int int76 = dateTimeZone73.getOffsetFromLocal((long) (short) -1);
        java.lang.String str77 = dateTimeZone73.getID();
        org.joda.time.DateTime dateTime78 = localDate67.toDateTimeAtCurrentTime(dateTimeZone73);
        boolean boolean79 = mutableDateTime60.isEqual((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = interval26.contains((org.joda.time.ReadableInstant) mutableDateTime60);
        mutableDateTime60.addYears(1973);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01" + "'", str68, "1970-01-01");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01" + "'", str71, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-00:00:00.001" + "'", str77, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.millisOfDay();
        java.lang.String str3 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withMillisOfDay(921);
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21T15:10:35.953" + "'", str3, "2022-02-21T15:10:35.953");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime10.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime23.withYear(32772);
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property29 = dateTime23.property(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        long long13 = dateMidnight10.getMillis();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.days();
        org.joda.time.Period period15 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight10.toMutableDateTimeISO();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        long long29 = dateMidnight26.getMillis();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration30, readableInstant31);
        org.joda.time.PeriodType periodType33 = period32.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableInstant) dateMidnight26, periodType33);
        mutablePeriod34.add(0L);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setMinutes(667);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology44);
        mutablePeriod45.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod45.add(0L);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology59);
        mutablePeriod45.add(0L, chronology59);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (-1), chronology59);
        org.joda.time.DurationField durationField63 = chronology59.weeks();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology59.millisOfDay();
        mutablePeriod34.setPeriod((-27424800L), chronology59);
        org.joda.time.Period period67 = new org.joda.time.Period(1266796800000L, (long) 19, periodType3, chronology59);
        org.joda.time.Days days68 = period67.toStandardDays();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateMidnight12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645401600001L + "'", long13 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645488000001L + "'", long29 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(days68);
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        boolean boolean7 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration12 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration10, 12);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = duration10.toPeriodFrom(readableInstant13);
        boolean boolean15 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 10, chronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(7);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        int int32 = dateTime28.getMillisOfSecond();
        org.joda.time.DateTime.Property property33 = dateTime28.yearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime28.plusMillis(2022);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay36.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology47.getZone();
        org.joda.time.DateTime dateTime51 = yearMonthDay36.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = dateTime35.withZoneRetainFields(dateTimeZone50);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.Interval interval54 = duration10.toIntervalTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime.Property property55 = dateTime52.yearOfEra();
        int int56 = dateTime52.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = dateTime52.withSecondOfMinute(642);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 642 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1969 + "'", int53 == 1969);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) 24);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration11 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, 12);
        org.joda.time.Duration duration12 = duration9.toDuration();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology16);
        mutablePeriod17.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod17.add(0L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        mutablePeriod17.add(0L, chronology31);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (-1), chronology31);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 10, chronology43);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight34.toMutableDateTime(chronology43);
        mutableDateTime46.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime46.toMutableDateTime(dateTimeZone50);
        int int52 = mutableDateTime51.getSecondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        int int60 = dateMidnight59.getYearOfEra();
        org.joda.time.Chronology chronology61 = dateMidnight59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 10, chronology61);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMonths(10);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) (byte) -1, 36000L, periodType71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(0L, periodType71, chronology73);
        org.joda.time.Period period75 = duration9.toPeriod(periodType71);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration5, periodType71);
        org.joda.time.PeriodType periodType77 = periodType71.withWeeksRemoved();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(periodType77);
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        java.util.TimeZone timeZone14 = calendar11.getTimeZone();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields(calendar11);
        boolean boolean16 = calendar11.isWeekDateSupported();
        java.util.Date date20 = new java.util.Date((-1), (int) (short) 0, 0);
        int int21 = date20.getDate();
        int int22 = date20.getTimezoneOffset();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getYear();
        boolean boolean25 = date20.before(date23);
        int int26 = date20.getSeconds();
        int int27 = date20.getMonth();
        calendar11.setTime(date20);
        int int30 = calendar11.getMinimum(0);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder33 = builder31.setInstant(4320000000L);
        java.util.Date date39 = new java.util.Date((int) (short) 0, 11, (int) (short) 0, (int) (short) -1, (int) (byte) 10);
        int int40 = date39.getYear();
        java.util.Calendar.Builder builder41 = builder33.setInstant(date39);
        date39.setSeconds((int) (byte) 1);
        date39.setHours(24);
        calendar11.setTime(date39);
        date39.setDate(54242996);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-2180216999000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=334,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=999,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sat Dec 31 00:00:00 GMT 1898");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Feb 21 15:10:36 GMT 2022");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 122 + "'", int24 == 122);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(builder33);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Sat Feb 09 00:10:01 GMT 150413");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((-33329265053886L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -33329265053886 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(951, 54144726, 54206680, 998, 54458358);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 998 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((long) 10, chronology7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 10, chronology11);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = timeOfDay12.getFields();
        org.joda.time.Period period14 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay8, (org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean16 = timeOfDay12.isSupported(dateTimeFieldType15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType15.isSupported(chronology24);
        boolean boolean28 = localTime5.isSupported(dateTimeFieldType15);
        org.joda.time.LocalTime localTime30 = localTime5.plusHours(11);
        org.joda.time.LocalTime localTime32 = localTime5.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTimeToday(dateTimeZone33);
        java.util.Locale locale37 = new java.util.Locale("\u97d3\u56fd\u8a9e");
        java.lang.String str38 = dateTimeZone33.getShortName((-1814400000L), locale37);
        java.util.Locale.setDefault(category0, locale37);
        java.util.Locale locale40 = java.util.Locale.getDefault(category0);
        java.util.Locale locale41 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals(locale37.toString(), "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "\u97d3\u56fd\u8a9e");
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property16 = dateTime12.property(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        boolean boolean19 = dateTimeField18.isLenient();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale20.getISO3Language();
        int int22 = dateTimeField18.getMaximumTextLength(locale20);
        java.lang.String str23 = dateTimeField18.getName();
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = nameProvider25.getShortName(locale26, "DateTimeField[clockhourOfDay]", "PT0S");
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = builder30.build();
        java.lang.String str34 = nameProvider25.getShortName(locale31, "Thu Dec 01 00:00:00 UTC 1898", "PT36001.873S");
        java.util.Locale locale38 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String str41 = locale39.getDisplayCountry();
        java.lang.String str42 = locale38.getDisplayScript(locale39);
        java.lang.String str45 = nameProvider25.getShortName(locale39, "2022", "Standard");
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = nameProvider46.getShortName(locale47, "DateTimeField[clockhourOfDay]", "PT0S");
        java.lang.String str51 = locale47.getLanguage();
        java.lang.String str54 = nameProvider25.getName(locale47, "T00:00:00.009", "DurationField[minutes]");
        java.util.Locale locale55 = java.util.Locale.PRC;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Set<java.lang.Character> charSet57 = locale55.getExtensionKeys();
        java.lang.String str60 = nameProvider25.getShortName(locale55, "2039", "2039");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        int int67 = dateMidnight66.getYearOfEra();
        org.joda.time.Chronology chronology68 = dateMidnight66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusMillis(0);
        int[] intArray75 = new int[] {};
        int int76 = dateTimeField70.getMaximumValue((org.joda.time.ReadablePartial) localDateTime74, intArray75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.plusMonths(31);
        int int83 = localDateTime82.getYearOfCentury();
        java.util.Locale locale84 = java.util.Locale.GERMAN;
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(locale84);
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.lang.String str87 = locale84.getDisplayCountry(locale86);
        java.lang.String str88 = dateTimeField70.getAsShortText((org.joda.time.ReadablePartial) localDateTime82, locale86);
        java.lang.String str91 = nameProvider25.getShortName(locale86, "1898/12/31 0:00:00", "+00:00");
        java.lang.String str92 = dateTimeField18.getAsText(24L, locale86);
        int int94 = dateTimeField18.getLeapAmount((long) 25);
        org.joda.time.DurationField durationField95 = dateTimeField18.getDurationField();
        java.lang.String str97 = dateTimeField18.getAsText((long) 54193192);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfHalfday" + "'", str23, "hourOfHalfday");
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals(locale38.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u672c" + "'", str41, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 24 + "'", int76 == 24);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 24 + "'", int83 == 24);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1645456236166,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=36,MILLISECOND=166,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "15" + "'", str88, "15");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0" + "'", str92, "0");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "3" + "'", str97, "3");
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        boolean boolean6 = interval1.isBefore(100L);
        boolean boolean7 = interval1.isBeforeNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        int int10 = dateMidnight9.getMillisOfSecond();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#', periodType12, chronology13);
        org.joda.time.Period period16 = period14.withDays((int) ' ');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval19 = yearMonthDay18.toInterval();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        long long26 = dateMidnight23.getMillis();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.Period period28 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime30 = yearMonthDay29.toDateTimeAtMidnight();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period28, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = interval19.abuts((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval33 = interval17.overlap((org.joda.time.ReadableInterval) interval31);
        long long34 = interval17.getEndMillis();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval36 = yearMonthDay35.toInterval();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval38 = yearMonthDay37.toInterval();
        org.joda.time.Interval interval39 = interval36.gap((org.joda.time.ReadableInterval) interval38);
        boolean boolean40 = interval17.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight42.withMillis((long) 7);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        long long54 = dateMidnight51.getMillis();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        org.joda.time.Period period56 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight51, periodType55);
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight51.toMutableDateTimeISO();
        int int58 = dateMidnight47.compareTo((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight47.plusWeeks(10);
        org.joda.time.Interval interval61 = dateMidnight60.toInterval();
        boolean boolean62 = interval17.abuts((org.joda.time.ReadableInterval) interval61);
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = yearMonthDay63.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology69);
        mutablePeriod70.setPeriod((long) (short) 10, (long) (short) -1);
        int int75 = mutablePeriod70.getValue(0);
        mutablePeriod70.addMinutes(0);
        mutablePeriod70.setMonths((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay63.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Interval interval81 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod70);
        boolean boolean82 = interval1.overlaps((org.joda.time.ReadableInterval) interval81);
        boolean boolean83 = interval81.isBeforeNow();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645401600001L + "'", long26 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(interval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1648166400036L + "'", long34 == 1648166400036L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateMidnight53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645401600001L + "'", long54 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutableDateTime10.setChronology(chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        long long34 = dateMidnight31.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight31, periodType38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight31.withWeekyear(59);
        java.util.Locale locale44 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar45 = dateMidnight31.toCalendar(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology19, locale44, (java.lang.Integer) 6);
        dateTimeParserBucket47.setOffset(1439);
        dateTimeParserBucket47.setOffset((java.lang.Integer) 600);
        java.util.Locale locale52 = dateTimeParserBucket47.getLocale();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645488000001L + "'", long34 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertEquals(locale44.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "periodtype[standard]");
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 0, 32769, (int) (byte) 10, (int) (short) 1);
        mutablePeriod14.add(0L);
        mutablePeriod14.addSeconds(31);
        int int19 = mutablePeriod14.getHours();
        boolean boolean20 = yearMonthDay9.equals((java.lang.Object) int19);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(910, 528, 1973, 579, 2074, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight13.toMutableDateTime();
        java.lang.String str17 = mutableDateTime16.toString();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weeks();
        boolean boolean20 = mutablePeriod18.isSupported(durationFieldType19);
        org.joda.time.Period period21 = mutablePeriod18.toPeriod();
        org.joda.time.Period period23 = period21.plusSeconds(54551054);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str17, "2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minusMonths(10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(0);
        int[] intArray18 = new int[] {};
        int int19 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17, intArray18);
        int int21 = dateTimeField13.getMinimumValue((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField13.getType();
        int int23 = dateMidnight0.get(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        long long28 = dateMidnight25.getMillis();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withMillis((long) 7);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        long long37 = dateMidnight34.getMillis();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.days();
        org.joda.time.Period period39 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight34, periodType38);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight34.toMutableDateTimeISO();
        int int41 = dateMidnight30.compareTo((org.joda.time.ReadableInstant) mutableDateTime40);
        boolean boolean42 = dateMidnight0.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime40.addMinutes(19);
        org.joda.time.DateTime dateTime45 = mutableDateTime40.toDateTimeISO();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology54);
        mutablePeriod55.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod55.add(0L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology69);
        mutablePeriod55.add(0L, chronology69);
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (-1), chronology69);
        org.joda.time.DurationField durationField73 = chronology69.weeks();
        org.joda.time.DateTime dateTime74 = dateMidnight49.toDateTime(chronology69);
        org.joda.time.DurationField durationField75 = chronology69.seconds();
        org.joda.time.DateTime dateTime76 = dateTime45.toDateTime(chronology69);
        org.joda.time.Period period81 = new org.joda.time.Period(11970, 35, 15, 54191870);
        org.joda.time.DateTime dateTime83 = dateTime76.withPeriodAdded((org.joda.time.ReadablePeriod) period81, (-762));
        org.joda.time.Period period85 = period81.minusWeeks(54224336);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 24 + "'", int19 == 24);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 24 + "'", int23 == 24);
        org.junit.Assert.assertNotNull(dateMidnight27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645401600001L + "'", long28 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645401600001L + "'", long37 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 100, (int) (short) 10, (int) (byte) 1, (int) (short) 1, (int) (byte) 1, (int) (byte) 100, (int) (short) 0, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str10 = durationFieldType9.getName();
        int int11 = period8.get(durationFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds12 = period8.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekyears" + "'", str10, "weekyears");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.minuteOfHour();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property16.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str20 = dateTimeFieldType19.getName();
        boolean boolean21 = localDateTime18.isSupported(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfDay" + "'", str20, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours(10L);
        long long8 = duration7.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusSeconds(2);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        long long27 = dateMidnight24.getMillis();
        org.joda.time.DateMidnight.Property property28 = dateMidnight24.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = property28.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight30 = property28.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property28.getFieldType();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.withField(dateTimeFieldType31, 32769);
        org.joda.time.LocalDateTime.Property property34 = localDateTime10.property(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy(80);
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 36000L + "'", long8 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645488000001L + "'", long27 == 1645488000001L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(960010, 54440785, 15902777, 2720, 960, 14, 66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2720 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField17 = property14.getField();
        java.lang.String str18 = dateTimeField17.getName();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfSecond" + "'", str18, "millisOfSecond");
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime17 = property14.roundFloorCopy();
        java.lang.String str18 = property14.getAsText();
        org.joda.time.LocalTime localTime19 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property14.getLocalTime();
        org.joda.time.LocalTime.Property property21 = localTime20.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property21.addWrapFieldToCopy(55367762);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "449" + "'", str18, "449");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((long) 10, chronology15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = timeOfDay16.getFields();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay((long) 10, chronology19);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = timeOfDay20.getFields();
        org.joda.time.Period period22 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay16, (org.joda.time.ReadablePartial) timeOfDay20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean24 = timeOfDay20.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        boolean boolean35 = dateTimeFieldType23.isSupported(chronology32);
        boolean boolean36 = localTime13.isSupported(dateTimeFieldType23);
        org.joda.time.LocalTime localTime38 = localTime13.plusHours(11);
        org.joda.time.LocalTime localTime40 = localTime13.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        boolean boolean42 = localTime40.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime dateTime55 = dateTime53.minusSeconds(4);
        org.joda.time.LocalTime localTime56 = dateTime55.toLocalTime();
        org.joda.time.LocalTime.Property property57 = localTime56.millisOfSecond();
        org.joda.time.LocalTime localTime58 = property57.withMaximumValue();
        org.joda.time.LocalTime localTime59 = property57.roundHalfEvenCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localTime59.toString(dateTimeFormatter60);
        org.joda.time.Period period62 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime40, (org.joda.time.ReadablePartial) localTime59);
        java.lang.String str64 = localTime40.toString("zh");
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.days();
        org.joda.time.Period period67 = new org.joda.time.Period(1645488000000L, periodType66);
        org.joda.time.Period period68 = period67.normalizedStandard();
        int[] intArray69 = period67.getValues();
        int int70 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localTime40, intArray69);
        java.lang.String str71 = localTime40.toString();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "15:10:32.493" + "'", str61, "15:10:32.493");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "12" + "'", str64, "12");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[19045]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "00:00:00.000" + "'", str71, "00:00:00.000");
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval2 = yearMonthDay1.toInterval();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.withChronologyRetainFields(chronology3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTime dateTime16 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone15);
        java.lang.String str21 = dateTimeZone15.getName(54568022L);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-00:00:00.001" + "'", str21, "-00:00:00.001");
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes(0);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (short) 100, chronology16);
        org.joda.time.DurationField durationField20 = durationFieldType7.getField(chronology16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.joda.time.DurationField durationField28 = durationFieldType7.getField(chronology26);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(1645455743145L, chronology26);
        int int30 = timeOfDay29.size();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.plusYears(100);
        org.joda.time.DateMidnight.Property property39 = dateMidnight34.yearOfEra();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight34.withWeekyear(54153800);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((-2));
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight41.getZone();
        org.joda.time.DateTime dateTime45 = timeOfDay29.toDateTimeToday(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 904, dateTimeZone44);
        org.joda.time.Chronology chronology47 = chronology4.withZone(dateTimeZone44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) 10, chronology56);
        org.joda.time.DateTime dateTime60 = dateTime58.minusHours(7);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears((int) (byte) 0);
        int int63 = dateTime62.getMonthOfYear();
        int int64 = dateTime62.getYearOfEra();
        int int65 = dateTime62.getMillisOfSecond();
        org.joda.time.DateTime.Property property66 = dateTime62.dayOfMonth();
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = locale67.getISO3Language();
        int int69 = property66.getMaximumTextLength(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(1645488000000L, chronology4, locale67, (java.lang.Integer) 54389347, 54474);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1969 + "'", int64 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "jpn" + "'", str68, "jpn");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = yearMonthDay0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        int int12 = mutablePeriod7.getValue(0);
        mutablePeriod7.addMinutes(0);
        mutablePeriod7.setMonths((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusMonths((int) (short) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod24.add(0L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        mutablePeriod24.add(0L, chronology38);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (-1), chronology38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight41.toMutableDateTime(chronology50);
        mutableDateTime53.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime53.toMutableDateTime(dateTimeZone57);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = yearMonthDay59.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay59.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) dateTime62);
        mutableDateTime53.setMinuteOfDay(14);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours(10L);
        long long68 = duration67.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.withMillis((long) 24);
        long long72 = dateMidnight71.getMillis();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Period period74 = duration67.toPeriod();
        mutableDateTime53.add((org.joda.time.ReadablePeriod) period74, (int) (short) -1);
        org.joda.time.Minutes minutes77 = period74.toStandardMinutes();
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) period74);
        java.lang.String str79 = period74.toString();
        org.joda.time.Period period81 = period74.withMinutes(54383277);
        org.joda.time.PeriodType periodType82 = period81.getPeriodType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray83 = period81.getFieldTypes();
        org.joda.time.Period period85 = period81.withDays(631);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 36000L + "'", long68 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(minutes77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT10H" + "'", str79, "PT10H");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(durationFieldTypeArray83);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        int int10 = mutablePeriod5.getValue(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        org.joda.time.Duration duration15 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.halfdayOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight12, chronology23);
        org.joda.time.LocalDate localDate29 = localDate27.withDayOfMonth(8);
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths(7);
        org.joda.time.Chronology chronology32 = localDate29.getChronology();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 667, periodType1, chronology32);
        org.joda.time.Period period42 = new org.joda.time.Period((int) (short) 100, (int) (short) 10, (int) (byte) 1, (int) (short) 1, (int) (byte) 1, (int) (byte) 100, (int) (short) 0, (int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str44 = durationFieldType43.getName();
        int int45 = period42.get(durationFieldType43);
        org.joda.time.Period period47 = period42.minusMillis(98);
        org.joda.time.Period period48 = period42.negated();
        long long51 = chronology32.add((org.joda.time.ReadablePeriod) period42, 86400000L, 8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) long51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyears" + "'", str44, "weekyears");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 25461638400000L + "'", long51 == 25461638400000L);
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDayOfMonth(21);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours(10L);
        long long12 = duration11.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period14 = duration11.toPeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        long long21 = dateMidnight18.getMillis();
        org.joda.time.DateMidnight.Property property22 = dateMidnight18.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = property22.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight24 = property22.roundHalfFloorCopy();
        org.joda.time.Period period25 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime1.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime.Property property27 = localDateTime1.era();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        long long30 = dateTimeField28.roundHalfFloor(51L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36000L + "'", long12 == 36000L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645488000001L + "'", long21 == 1645488000001L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-62135596800000L) + "'", long30 == (-62135596800000L));
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        boolean boolean2 = periodType0.equals((java.lang.Object) instant1);
        org.joda.time.Duration duration5 = new org.joda.time.Duration(0L, 3024000001L);
        org.joda.time.Instant instant7 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.joda.time.Instant instant10 = instant8.plus((long) 30872);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 31, chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.secondOfMinute();
        long long16 = dateTimeField13.addWrapField(21854992L, 902);
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = nameProvider17.getShortName(locale18, "DateTimeField[clockhourOfDay]", "PT0S");
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale locale23 = builder22.build();
        java.lang.String str26 = nameProvider17.getShortName(locale23, "Thu Dec 01 00:00:00 UTC 1898", "PT36001.873S");
        java.util.Locale locale30 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale31.getDisplayCountry();
        java.lang.String str34 = locale30.getDisplayScript(locale31);
        java.lang.String str37 = nameProvider17.getShortName(locale31, "2022", "Standard");
        int int38 = dateTimeField13.getMaximumTextLength(locale31);
        long long41 = dateTimeField13.add((long) 54191870, (long) 54191870);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 21856992L + "'", long16 == 21856992L);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals(locale30.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japan" + "'", str33, "Japan");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 54246061870L + "'", long41 == 54246061870L);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((-59655689409016L));
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        int int36 = mutableDateTime33.getYearOfEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMillis(0);
        int[] intArray51 = new int[] {};
        int int52 = dateTimeField46.getMaximumValue((org.joda.time.ReadablePartial) localDateTime50, intArray51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = localDateTime50.get(dateTimeFieldType53);
        int int55 = mutableDateTime33.get(dateTimeFieldType53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withZoneRetainFields(dateTimeZone60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusDays((int) (short) -1);
        int int66 = dateMidnight65.getYearOfEra();
        org.joda.time.Chronology chronology67 = dateMidnight65.getChronology();
        long long68 = dateMidnight65.getMillis();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableDuration69, readableInstant70);
        org.joda.time.PeriodType periodType72 = period71.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight61, (org.joda.time.ReadableInstant) dateMidnight65, periodType72);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod73, 6);
        mutableDateTime33.setYear(54152181);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableDuration78, readableInstant79);
        org.joda.time.Seconds seconds81 = period80.toStandardSeconds();
        mutableDateTime33.add((org.joda.time.ReadablePeriod) seconds81, (-2720));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setMonthOfYear(72494097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72494097 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 24 + "'", int52 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(chronology67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645488000001L + "'", long68 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(seconds81);
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.TimeZone timeZone3 = calendar1.getTimeZone();
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean5 = timeZone3.observesDaylightTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456236753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=36,MILLISECOND=753,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.joda.time.Period period1 = org.joda.time.Period.months(653);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        int int7 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withYearOfEra(4);
        java.util.Date date11 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minusDays(823);
        org.joda.time.LocalDateTime.Property property14 = localDateTime3.weekOfWeekyear();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 15:10:36 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 100, dateTimeZone3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology13.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        long long19 = dateTimeZone3.getMillisKeepLocal(dateTimeZone16, (long) 667);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(0L, dateTimeZone16);
        int int22 = localDateTime21.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 667L + "'", long19 == 667L);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 999 + "'", int22 == 999);
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear(0);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter6.withPivotYear(903);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.parse("2022-02-21T15:08:57.553", dateTimeFormatter15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645456236799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=36,MILLISECOND=799,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfFloorCopy();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate6 = property3.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate8 = property3.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(99);
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks(54392920);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((long) 31, chronology10);
        org.joda.time.Period period15 = duration1.toPeriod(chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfWeek();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(14400004L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(4);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        org.joda.time.LocalTime localTime34 = property33.withMaximumValue();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.Period period37 = new org.joda.time.Period(1645488000000L, periodType36);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(periodType36);
        org.joda.time.PeriodType periodType39 = periodType36.withDaysRemoved();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime18, (org.joda.time.ReadablePartial) localTime34, periodType39);
        org.joda.time.Period period42 = org.joda.time.Period.hours(3);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology51);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        int int61 = dateMidnight60.getYearOfEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.millisOfDay();
        org.joda.time.DateTime dateTime65 = dateTime54.withChronology(chronology62);
        org.joda.time.Period period66 = new org.joda.time.Period((long) 22, chronology62);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.days();
        org.joda.time.Period period69 = new org.joda.time.Period(1645488000000L, periodType68);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.seconds();
        boolean boolean71 = periodType68.isSupported(durationFieldType70);
        org.joda.time.Period period73 = period66.withFieldAdded(durationFieldType70, (-292275054));
        boolean boolean74 = period42.isSupported(durationFieldType70);
        org.joda.time.Period period76 = period42.plusMillis(54206680);
        int[] intArray77 = period42.getValues();
        chronology10.validate((org.joda.time.ReadablePartial) localTime34, intArray77);
        org.joda.time.Period period80 = org.joda.time.Period.minutes((int) (byte) -1);
        org.joda.time.Period period82 = period80.minusMonths((int) (short) 0);
        org.joda.time.LocalTime localTime83 = localTime34.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Weeks weeks84 = period80.toStandardWeeks();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(weeks84);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        int int16 = dateTime12.getMillisOfSecond();
        org.joda.time.DateTime.Property property17 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded((long) 69, (int) (short) 1);
        org.joda.time.Chronology chronology22 = dateTime18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime18.toMutableDateTimeISO();
        boolean boolean24 = mutableDateTime23.isAfterNow();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.setYear(2022);
        mutableDateTime34.setYear((-1));
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        mutableDateTime41.setZone(dateTimeZone43);
        boolean boolean45 = dateTimeZone43.isFixed();
        java.lang.String str47 = dateTimeZone43.getNameKey(2627135940001L);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 598, dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("T00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T00:00:00.001\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        int int61 = mutableDateTime48.getMillisOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusDays((int) (short) -1);
        int int66 = dateMidnight65.getYearOfEra();
        org.joda.time.Chronology chronology67 = dateMidnight65.getChronology();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight65.toMutableDateTime();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime48, (org.joda.time.ReadableInstant) dateMidnight65, periodType69);
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime72 = yearMonthDay71.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime74 = dateTime72.minusMonths((int) (short) 100);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfEra();
        org.joda.time.DateTime dateTime76 = property75.roundFloorCopy();
        mutableDateTime48.setDate((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        int int17 = dateTimeField9.getMinimumValue((long) 1);
        long long19 = dateTimeField9.roundHalfFloor((long) 52);
        long long22 = dateTimeField9.getDifferenceAsLong((long) (byte) -1, (long) 2);
        int int23 = dateTimeField9.getMaximumValue();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfDay();
        long long34 = dateTimeField31.set(0L, (int) (short) 1);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getCountry();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.lang.String str40 = dateTimeField31.getAsText(69, locale38);
        java.lang.String str41 = dateTimeField9.getAsText(1, locale38);
        java.lang.String str42 = locale38.getISO3Language();
        java.lang.String str43 = locale38.getDisplayName();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 24 + "'", int23 == 24);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-79200000L) + "'", long34 == (-79200000L));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "KR" + "'", str37, "KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "69" + "'", str40, "69");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "deu" + "'", str42, "deu");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German (Germany)" + "'", str43, "German (Germany)");
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1858, 0, 54432919, 80);
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfFloorCopy();
        int int10 = dateMidnight9.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDayOfWeek(4);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plus((long) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology18);
        mutablePeriod19.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod19.add(0L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        mutablePeriod19.add(0L, chronology33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (-1), chronology33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 10, chronology45);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight36.toMutableDateTime(chronology45);
        mutableDateTime48.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime48.toMutableDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology56);
        mutablePeriod57.setPeriod((long) (short) 10, (long) (short) -1);
        int int61 = mutablePeriod57.getMonths();
        mutablePeriod57.addMinutes((int) (short) 0);
        mutableDateTime48.add((org.joda.time.ReadablePeriod) mutablePeriod57, 12);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime48.secondOfDay();
        mutableDateTime48.addSeconds((-23641));
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardHours(10L);
        long long71 = duration70.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.withMillis((long) 24);
        long long75 = dateMidnight74.getMillis();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateMidnight74);
        int int77 = dateMidnight74.getSecondOfDay();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval79 = yearMonthDay78.toInterval();
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval81 = yearMonthDay80.toInterval();
        org.joda.time.Interval interval82 = interval79.gap((org.joda.time.ReadableInterval) interval81);
        boolean boolean84 = interval79.isBefore(100L);
        long long85 = interval79.toDurationMillis();
        long long86 = interval79.getStartMillis();
        org.joda.time.Duration duration87 = interval79.toDuration();
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight74, (org.joda.time.ReadableDuration) duration87);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime48, (org.joda.time.ReadableDuration) duration87);
        boolean boolean90 = dateMidnight9.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        int int91 = dateMidnight9.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 36000L + "'", long71 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight74);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 86400000L + "'", long85 == 86400000L);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645401600001L + "'", long86 == 1645401600001L);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2022 + "'", int91 == 2022);
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology9);
        mutablePeriod10.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod10.add(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        mutablePeriod10.add(0L, chronology24);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (-1), chronology24);
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType5.getField(chronology24);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 21, chronology24);
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-23641), chronology24);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.minuteOfDay();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 70, (long) 667, chronology24);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay((long) 366, chronology24);
        int int34 = localTime33.getHourOfDay();
        org.joda.time.LocalTime localTime36 = localTime33.minusSeconds(909);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(15, (int) ' ');
        int int3 = timeOfDay2.getSecondOfMinute();
        int int4 = timeOfDay2.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.minusMillis((-709));
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 10, chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours(7);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) (byte) 0);
        int int22 = dateTime21.getMonthOfYear();
        int int23 = dateTime21.getYearOfEra();
        int int24 = dateTime21.getMillisOfSecond();
        org.joda.time.DateTime dateTime26 = dateTime21.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths(7);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (short) 100, chronology38);
        org.joda.time.DurationField durationField42 = durationFieldType29.getField(chronology38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfDay();
        org.joda.time.DurationField durationField50 = durationFieldType29.getField(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime28.withChronology(chronology48);
        org.joda.time.DateTime dateTime52 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int int53 = dateTime52.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1969 + "'", int23 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1969 + "'", int53 == 1969);
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime17 = property14.roundFloorCopy();
        org.joda.time.LocalTime localTime18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime20 = property14.setCopy(11);
        org.joda.time.LocalTime localTime22 = property14.addCopy((long) (short) 1);
        org.joda.time.LocalTime localTime24 = property14.addCopy(600L);
        org.joda.time.DateTimeField dateTimeField25 = property14.getField();
        int int26 = dateTimeField25.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType2.getField(chronology21);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.Period period28 = new org.joda.time.Period(1645488000000L, periodType27);
        org.joda.time.Period period29 = period28.normalizedStandard();
        int int30 = period29.getSeconds();
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) period29, (long) (short) 0);
        org.joda.time.PeriodType periodType33 = period29.getPeriodType();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        long long43 = dateMidnight40.getMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.days();
        org.joda.time.Period period45 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight40.toMutableDateTimeISO();
        int int47 = mutableDateTime46.getDayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        mutableDateTime46.setChronology(chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.withZoneRetainFields(dateTimeZone62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        long long70 = dateMidnight67.getMillis();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType74 = period73.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableInstant) dateMidnight67, periodType74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight67.withWeekyear(59);
        java.util.Locale locale80 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar81 = dateMidnight67.toCalendar(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology55, locale80, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField84 = chronology55.clockhourOfDay();
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology55);
        org.joda.time.DateTimeField dateTimeField86 = chronology55.era();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 32778, 1645455776047L, periodType34, chronology55);
        org.joda.time.DateTimeField dateTimeField88 = chronology55.hourOfHalfday();
        long long90 = dateTimeField88.roundHalfFloor((long) 84);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645401600001L + "'", long43 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645488000001L + "'", long70 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertEquals(locale80.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField88);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours(10L);
        long long10 = duration9.getStandardSeconds();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration14 = duration9.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.withMillis((long) 19);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        int int30 = mutablePeriod26.getMonths();
        mutableDateTime22.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Interval interval32 = duration13.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime22.setMillisOfDay((int) 'u');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime22.minuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000L + "'", long10 == 36000L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateMidnight9.toDateTime();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.plus(3600000L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod21.setPeriod(22, (int) (byte) 0, (int) (short) -1, (int) '4', (int) (byte) 0, 0, 31, 9);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int47 = mutablePeriod42.getValue(0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        org.joda.time.Duration duration52 = mutablePeriod42.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        org.joda.time.Period period56 = new org.joda.time.Period(1645488000000L, periodType55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableDuration57, readableInstant58);
        org.joda.time.PeriodType periodType60 = period59.getPeriodType();
        org.joda.time.Period period61 = period56.normalizedStandard(periodType60);
        org.joda.time.Period period62 = duration52.toPeriodTo(readableInstant53, periodType60);
        java.lang.String str63 = periodType60.getName();
        org.joda.time.PeriodType periodType64 = periodType60.withSecondsRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period(19, 22, 11, 13, (int) (short) 100, 4, (-2), (int) 'u', periodType60);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight12.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusDays((int) (short) -1);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardHours(10L);
        long long74 = duration73.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableDuration) duration73);
        org.joda.time.Period period76 = duration73.toPeriod();
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration82 = duration78.withDurationAdded((org.joda.time.ReadableDuration) duration80, 12);
        org.joda.time.Duration duration83 = duration80.toDuration();
        boolean boolean84 = duration73.isEqual((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration85 = duration73.toDuration();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight12.plusDays(15);
        int int89 = dateMidnight12.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Standard" + "'", str63, "Standard");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 36000L + "'", long74 == 36000L);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 23 + "'", int89 == 23);
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("52", "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setUnicodeLocaleKeyword("Property[yearOfEra]", "PT-2123.746S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Property[yearOfEra] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        int int10 = mutablePeriod5.getValue(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        org.joda.time.Duration duration15 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration21 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, 12);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology38);
        org.joda.time.DateTime dateTime42 = dateTime40.minusHours(7);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears((int) (byte) 0);
        int int45 = dateTime44.getMonthOfYear();
        org.joda.time.Interval interval46 = duration28.toIntervalFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = duration17.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration48 = duration15.plus((org.joda.time.ReadableDuration) duration28);
        boolean boolean49 = duration1.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration52 = duration28.withDurationAdded((long) 999, 53);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        long long59 = dateMidnight56.getMillis();
        org.joda.time.DateMidnight.Property property60 = dateMidnight56.weekyear();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardHours(10L);
        long long63 = duration62.getStandardSeconds();
        org.joda.time.Duration duration66 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration67 = duration62.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration69 = duration66.withMillis((long) 19);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight56.minus((org.joda.time.ReadableDuration) duration66);
        java.lang.String str71 = dateMidnight56.toString();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = period72.getFieldTypes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645488000001L + "'", long59 == 1645488000001L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 36000L + "'", long63 == 36000L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str71, "2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours(10L);
        long long8 = duration7.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3, dateTimeZone12);
        int int16 = localDateTime15.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks(44);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusSeconds(2);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        long long33 = dateMidnight30.getMillis();
        org.joda.time.DateMidnight.Property property34 = dateMidnight30.weekyear();
        org.joda.time.DateMidnight dateMidnight35 = property34.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight36 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.withField(dateTimeFieldType37, 32769);
        org.joda.time.LocalDateTime.Property property40 = localDateTime26.year();
        org.joda.time.LocalDateTime.Property property41 = localDateTime26.year();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusSeconds(2);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        long long57 = dateMidnight54.getMillis();
        org.joda.time.DateMidnight.Property property58 = dateMidnight54.weekyear();
        org.joda.time.DateMidnight dateMidnight59 = property58.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight60 = property58.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property58.getFieldType();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime50.withField(dateTimeFieldType61, 32769);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime50.minusMinutes((int) 'a');
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours(10L);
        long long68 = duration67.getStandardSeconds();
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration72 = duration67.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime50.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration71.toDuration();
        org.joda.time.DateMidnight dateMidnight76 = org.joda.time.DateMidnight.parse("2022-02-21");
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardDays(86400000L);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology81);
        mutablePeriod82.setPeriod((long) (short) 10, (long) (short) -1);
        int int87 = mutablePeriod82.getValue(0);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(chronology88);
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight89.minusDays((int) (short) -1);
        org.joda.time.Duration duration92 = mutablePeriod82.toDurationTo((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.ReadableDuration readableDuration93 = null;
        boolean boolean94 = duration92.isShorterThan(readableDuration93);
        boolean boolean95 = duration78.isShorterThan((org.joda.time.ReadableDuration) duration92);
        org.joda.time.DateMidnight dateMidnight96 = dateMidnight76.plus((org.joda.time.ReadableDuration) duration78);
        int int97 = duration71.compareTo((org.joda.time.ReadableDuration) duration78);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime42.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Period period99 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime18, (org.joda.time.ReadablePartial) localDateTime98);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 36000L + "'", long8 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645488000001L + "'", long33 == 1645488000001L);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645488000001L + "'", long57 == 1645488000001L);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 36000L + "'", long68 == 36000L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateMidnight96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(localDateTime98);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology8 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 926);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTimeFormatter11.parseDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear(2022);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        int int15 = property14.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withWeekOfWeekyear(12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        long long31 = dateMidnight28.getMillis();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType35 = period34.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight24, (org.joda.time.ReadableInstant) dateMidnight28, periodType35);
        int int37 = dateMidnight24.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight24.plusMonths(363);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean41 = dateMidnight39.equals((java.lang.Object) dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getDurationType();
        boolean boolean43 = dateMidnight18.isSupported(dateTimeFieldType40);
        boolean boolean44 = localDateTime9.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDateTime.Property property45 = localDateTime0.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.halfdayOfDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) '#');
        int int59 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.Period period60 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate61 = localDate58.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.LocalDate.Property property62 = localDate61.dayOfYear();
        org.joda.time.LocalDate localDate64 = localDate61.plusMonths((-2));
        org.joda.time.LocalDate localDate66 = localDate64.plusDays(59);
        org.joda.time.LocalDate.Property property67 = localDate66.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDate66);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645488000001L + "'", long31 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addWrapFieldToCopy(10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(7);
        int int19 = dateTime18.getCenturyOfEra();
        int int20 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime.Property property21 = dateTime18.monthOfYear();
        java.util.Locale locale25 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        boolean boolean27 = locale26.hasExtensions();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale25.getDisplayScript(locale26);
        java.lang.String str30 = locale26.getDisplayScript();
        int int31 = property21.getMaximumTextLength(locale26);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        boolean boolean33 = locale32.hasExtensions();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale locale35 = builder34.build();
        java.lang.String str36 = locale35.getScript();
        java.lang.String str37 = locale32.getDisplayVariant(locale35);
        java.lang.String str38 = locale32.getDisplayVariant();
        java.lang.String str39 = locale26.getDisplayCountry(locale32);
        java.lang.String str40 = property3.getAsShortText(locale32);
        int int41 = property3.get();
        org.joda.time.YearMonthDay yearMonthDay42 = property3.getYearMonthDay();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(locale25.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japan" + "'", str28, "Japan");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Giappone" + "'", str39, "Giappone");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        int int17 = dateTimeField9.getMinimumValue((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField9.getType();
        org.joda.time.DurationField durationField19 = dateTimeField9.getRangeDurationField();
        int int22 = durationField19.getValue(1648166400035L, 60480000000L);
        long long25 = durationField19.getMillis((long) (-2), (long) 54399444);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19076 + "'", int22 == 19076);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-172800000L) + "'", long25 == (-172800000L));
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 11, dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(27L, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfSecond(53);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) 32772);
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property17.roundHalfEvenCopy();
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (-1), chronology40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight43.toMutableDateTime(chronology52);
        org.joda.time.DurationField durationField56 = chronology52.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology52.getZone();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) 54153800, dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology63);
        mutablePeriod64.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod64.add(0L);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(chronology73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minusDays((int) (short) -1);
        int int77 = dateMidnight76.getYearOfEra();
        org.joda.time.Chronology chronology78 = dateMidnight76.getChronology();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology78);
        mutablePeriod64.add(0L, chronology78);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((long) (-1), chronology78);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType59.getField(chronology78);
        org.joda.time.DateMidnight dateMidnight83 = org.joda.time.DateMidnight.now(chronology78);
        org.joda.time.DateTimeZone dateTimeZone84 = chronology78.getZone();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight58.withZoneRetainFields(dateTimeZone84);
        java.lang.String str87 = dateTimeZone84.getNameKey((-259200L));
        org.joda.time.DateTime dateTime88 = dateTime19.withZoneRetainFields(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateMidnight85);
// flaky:         org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(10L);
        long long6 = duration5.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period8 = duration5.toPeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        long long15 = dateMidnight12.getMillis();
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = property16.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight18 = property16.roundHalfFloorCopy();
        org.joda.time.Period period19 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minus((long) 50);
        org.joda.time.DateMidnight.Property property22 = dateMidnight18.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = property22.addToCopy((long) 26);
        org.joda.time.DateMidnight dateMidnight25 = property22.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight26 = property22.getDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000L + "'", long6 == 36000L);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645488000001L + "'", long15 == 1645488000001L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) 10, chronology2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = timeOfDay3.getFields();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        boolean boolean22 = dateTimeFieldType10.isSupported(chronology19);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(9L, chronology19, locale23, (java.lang.Integer) 365);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.millisOfSecond();
        int int27 = dateTimeField26.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 999 + "'", int27 == 999);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone38);
        mutableDateTime33.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(528, 16);
        long long45 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 50);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(dateTimeZone43);
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.lang.String str49 = locale48.getCountry();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.lang.String str52 = dateTimeZone43.getName((long) 59, locale48);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1901759951L) + "'", long45 == (-1901759951L));
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "KR" + "'", str49, "KR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+528:16" + "'", str52, "+528:16");
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(14);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        mutableDateTime13.addWeeks((-11));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear(903);
        org.joda.time.Chronology chronology11 = dateTimeFormatter5.getChronology();
        java.io.Writer writer12 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (short) 100, chronology22);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 69, chronology22);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.plusMinutes(52);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) 10, chronology30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = timeOfDay31.getFields();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((long) 10, chronology34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay31, (org.joda.time.ReadablePartial) timeOfDay35);
        int[] intArray38 = timeOfDay35.getValues();
        org.joda.time.DateTime dateTime39 = timeOfDay35.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay35.plusMinutes((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay41.withPeriodAdded(readablePeriod42, 54153800);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.plusMillis(86399999);
        java.lang.String str47 = timeOfDay44.toString();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 98898743301000L);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay44.minus((org.joda.time.ReadablePeriod) mutablePeriod50);
        int int52 = mutablePeriod50.getHours();
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay26.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer12, (org.joda.time.ReadablePartial) timeOfDay26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 9]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "T00:10:00.009" + "'", str47, "T00:10:00.009");
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(timeOfDay53);
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        int int6 = localDateTime2.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.year();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = property18.getAsText(locale20);
        java.lang.String str22 = locale20.getDisplayVariant();
        boolean boolean23 = locale20.hasExtensions();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = locale26.getDisplayName();
        java.util.Locale.setDefault(category24, locale26);
        java.lang.String str29 = locale20.getDisplayVariant(locale26);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str32 = locale20.getDisplayScript(locale31);
        java.lang.String str33 = locale31.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "1970_15:02:00.475");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Korean (South Korea)" + "'", str27, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "und" + "'", str33, "und");
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(98);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((-287224704209760999L), dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        long long1 = instant0.getMillis();
        org.joda.time.Instant instant3 = instant0.withMillis(8L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (-1), chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight25.toMutableDateTime(chronology34);
        mutableDateTime37.setYear(2022);
        int int40 = mutableDateTime37.getYearOfEra();
        mutableDateTime37.addMonths(11);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardHours(10L);
        long long45 = duration44.getStandardSeconds();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration49 = duration44.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration50 = duration48.toDuration();
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration48);
        long long52 = duration48.getMillis();
        org.joda.time.Instant instant53 = instant3.plus((org.joda.time.ReadableDuration) duration48);
        org.junit.Assert.assertNotNull(instant0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456237578L + "'", long1 == 1645456237578L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 36000L + "'", long45 == 36000L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1873L + "'", long52 == 1873L);
        org.junit.Assert.assertNotNull(instant53);
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        int int15 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime.Property property16 = dateTime14.monthOfYear();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) 10, chronology28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths(10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        int int40 = dateMidnight39.getYearOfEra();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 10, chronology41);
        org.joda.time.DateTime dateTime44 = dateTime32.toDateTime(chronology41);
        org.joda.time.DurationField durationField45 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.millisOfDay();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale47);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(4L, chronology41, locale47, (java.lang.Integer) 10);
        java.util.Calendar calendar53 = dateTime18.toCalendar(locale47);
        org.joda.time.DateTime dateTime55 = dateTime18.minus(1000L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645456237610,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=37,MILLISECOND=610,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-28882799990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=9,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime12.plusMinutes(1);
        int int18 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime21 = property19.setCopy(55509);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 54693656 + "'", int18 == 54693656);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.minusSeconds(50401);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        org.joda.time.Period period19 = new org.joda.time.Period(1645488000000L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (short) 100, chronology30);
        org.joda.time.DurationField durationField34 = durationFieldType21.getField(chronology30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfDay();
        org.joda.time.DurationField durationField42 = durationFieldType21.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.clockhourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology46);
        mutablePeriod47.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod47.addMonths((int) (byte) -1);
        mutablePeriod47.addWeeks(1969);
        mutablePeriod47.add((long) 'a');
        int[] intArray59 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod47, (long) 21, (long) 59);
        org.joda.time.Period period60 = new org.joda.time.Period(1000L, 5907L, periodType18, chronology40);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 156, periodType18);
        org.joda.time.DateTime dateTime63 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period61, 15);
        org.joda.time.DateTime.Property property64 = dateTime13.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 38]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDate localDate5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfEra();
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight();
        int int8 = localDate5.getYearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970" + "'", str4, "1970");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths(10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime12.toDateTime(chronology21);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology34);
        mutablePeriod35.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod35.add(0L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        mutablePeriod35.add(0L, chronology49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 0, (long) 6, chronology49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology49);
        org.joda.time.DateTime dateTime54 = dateTime12.withChronology(chronology49);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withChronology(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 69);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfHour();
        int int10 = mutableDateTime8.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.millisOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) 100, (long) 1439);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration14);
        boolean boolean16 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withChronology(chronology8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeFormatter12.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((-8896135385L), dateTimeZone13);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField17 = localDate12.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate12.plusYears(8);
        org.joda.time.LocalDate localDate21 = localDate12.withYearOfCentury(0);
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfMonth();
        org.joda.time.LocalDate localDate24 = property22.addToCopy(0);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth(2);
        org.joda.time.DateTime dateTime19 = dateTime15.plus(0L);
        org.joda.time.DateTime.Property property20 = dateTime15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillisOfSecond(53);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(17);
        org.joda.time.DateTime.Property property30 = dateTime24.dayOfMonth();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.DateTime dateTime43 = dateTime41.minusHours(7);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property47 = dateTime43.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = property47.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField49 = property47.getField();
        boolean boolean50 = dateTimeField49.isLenient();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str52 = locale51.getISO3Language();
        int int53 = dateTimeField49.getMaximumTextLength(locale51);
        org.joda.time.DurationField durationField54 = dateTimeField49.getDurationField();
        long long57 = dateTimeField49.addWrapField(9L, 902);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField49.getType();
        int int59 = dateTime24.get(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = dateTime15.withField(dateTimeFieldType58, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zho" + "'", str52, "zho");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 7200009L + "'", long57 == 7200009L);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.year();
        org.joda.time.DateMidnight dateMidnight11 = property10.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property6.roundHalfEvenCopy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar11);
        java.lang.String str15 = calendar11.getCalendarType();
        java.util.TimeZone timeZone16 = calendar11.getTimeZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        long long23 = dateMidnight20.getMillis();
        java.util.Locale locale27 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar28 = dateMidnight20.toCalendar(locale27);
        int int30 = calendar28.getLeastMaximum(3);
        java.util.TimeZone timeZone31 = calendar28.getTimeZone();
        timeZone31.setID("PT0S");
        java.lang.String str34 = timeZone31.getID();
        java.lang.String str35 = timeZone31.getID();
        java.lang.String str36 = timeZone31.getID();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone31);
        calendar11.setTimeZone(timeZone31);
        java.lang.Object obj39 = timeZone31.clone();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645488000001L + "'", long23 == 1645488000001L);
        org.junit.Assert.assertEquals(locale27.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0S" + "'", str35, "PT0S");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645456237852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=37,MILLISECOND=851,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfDay();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology19);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology19);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusYears(292269054);
        int int27 = dateMidnight24.getSecondOfDay();
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder30 = builder28.setInstant(4320000000L);
        java.util.Date date36 = new java.util.Date((int) (short) 0, 11, (int) (short) 0, (int) (short) -1, (int) (byte) 10);
        int int37 = date36.getYear();
        java.util.Calendar.Builder builder38 = builder30.setInstant(date36);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar.Builder builder40 = builder30.setLocale(locale39);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Builder builder43 = builder41.setLocale(locale42);
        java.util.Locale locale44 = builder43.build();
        java.util.Calendar.Builder builder45 = builder40.setLocale(locale44);
        java.lang.String str46 = locale44.getLanguage();
        java.util.Calendar calendar47 = dateMidnight24.toCalendar(locale44);
        int int48 = dateMidnight24.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(builder30);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Nov 29 23:10:00 GMT 1900");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645401600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfYear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(0L, chronology8);
        int int14 = localDate13.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate1.weekOfWeekyear();
        int int6 = property5.getLeapAmount();
        org.joda.time.LocalDate localDate7 = property5.withMaximumValue();
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfCentury(30);
        int int10 = localDate7.getDayOfMonth();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.plus(1L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours(10L);
        long long10 = duration9.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period12 = duration9.toPeriod();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        org.joda.time.DateTime dateTime25 = dateTime23.minusHours(7);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) (byte) 0);
        int int28 = dateTime27.getMonthOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology32);
        mutablePeriod33.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod33.add(0L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        mutablePeriod33.add(0L, chronology47);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (-1), chronology47);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 10, chronology59);
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight50.toMutableDateTime(chronology59);
        mutableDateTime62.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime62.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime62.toMutableDateTime(dateTimeZone66);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = yearMonthDay68.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = yearMonthDay68.toDateTimeAtCurrentTime(dateTimeZone70);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType76 = periodType75.withWeeksRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 1970, (long) 3, periodType75);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration72, periodType75);
        org.joda.time.Period period79 = duration9.toPeriod(periodType75);
        org.joda.time.Instant instant80 = instant3.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Instant instant83 = instant80.withDurationAdded((long) 823, 9);
        org.joda.time.DateTime dateTime84 = instant80.toDateTimeISO();
        org.joda.time.DateTime.Property property85 = dateTime84.yearOfEra();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000L + "'", long10 == 36000L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime.Property property12 = dateTime10.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) dateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        int int39 = mutableDateTime33.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime33, readableInstant40);
        java.lang.String str42 = mutableDateTime33.toString();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime33.millisOfSecond();
        int int44 = mutableDateTime33.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime33.secondOfDay();
        mutableDateTime33.addMinutes(22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setDayOfWeek(23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-0001-12-31T00:00:00.000-00:00:00.001" + "'", str42, "-0001-12-31T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        long long8 = dateMidnight5.getMillis();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.days();
        org.joda.time.Period period10 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight5.toMutableDateTimeISO();
        int int12 = mutableDateTime11.getDayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutableDateTime11.setChronology(chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        long long35 = dateMidnight32.getMillis();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateMidnight32, periodType39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight32.withWeekyear(59);
        java.util.Locale locale45 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar46 = dateMidnight32.toCalendar(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology20, locale45, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField49 = chronology20.clockhourOfDay();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology20);
        org.joda.time.LocalTime.Property property51 = localTime50.secondOfMinute();
        org.joda.time.LocalTime localTime53 = property51.addCopy(19045);
        org.joda.time.LocalTime localTime54 = property51.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateMidnight7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645401600001L + "'", long8 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645488000001L + "'", long35 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertEquals(locale45.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate1.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localDate1.isSupported(durationFieldType6);
        org.joda.time.LocalDate.Property property8 = localDate1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal((long) (short) -1);
        java.lang.String str14 = dateTimeZone10.getID();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.Interval interval16 = localDate1.toInterval(dateTimeZone10);
        org.joda.time.LocalDate localDate18 = localDate1.plusYears(86399);
        int int19 = localDate1.getCenturyOfEra();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#', periodType21, chronology22);
        org.joda.time.Period period25 = period23.withDays((int) ' ');
        org.joda.time.Days days26 = period23.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod27 = period23.toMutablePeriod();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology32);
        mutablePeriod33.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod33.add(0L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        mutablePeriod33.add(0L, chronology47);
        org.joda.time.Period period50 = new org.joda.time.Period((long) 0, (long) 6, chronology47);
        org.joda.time.DurationFieldType[] durationFieldTypeArray51 = period50.getFieldTypes();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.forFields(durationFieldTypeArray51);
        org.joda.time.Period period53 = period23.normalizedStandard(periodType52);
        org.joda.time.Period period55 = period23.plusWeeks(54389348);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate57 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 54590576);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 54389348 * 54590576");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-00:00:00.001" + "'", str14, "-00:00:00.001");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(days26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationFieldTypeArray51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 12);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.days();
        org.joda.time.Period period10 = new org.joda.time.Period(1645488000000L, periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        org.joda.time.DurationField durationField25 = durationFieldType12.getField(chronology21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        org.joda.time.DurationField durationField33 = durationFieldType12.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.clockhourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology37);
        mutablePeriod38.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod38.addMonths((int) (byte) -1);
        mutablePeriod38.addWeeks(1969);
        mutablePeriod38.add((long) 'a');
        int[] intArray50 = chronology31.get((org.joda.time.ReadablePeriod) mutablePeriod38, (long) 21, (long) 59);
        org.joda.time.Period period51 = new org.joda.time.Period(1000L, 5907L, periodType9, chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter2.withChronology(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withPivotYear(1978);
        java.util.Locale locale55 = dateTimeFormatter54.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 38]");
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(locale55);
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.joda.time.Period period1 = org.joda.time.Period.hours(3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology21);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 22, chronology21);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.Period period28 = new org.joda.time.Period(1645488000000L, periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.seconds();
        boolean boolean30 = periodType27.isSupported(durationFieldType29);
        org.joda.time.Period period32 = period25.withFieldAdded(durationFieldType29, (-292275054));
        boolean boolean33 = period1.isSupported(durationFieldType29);
        org.joda.time.Period period35 = org.joda.time.Period.millis(0);
        int int36 = period35.getSeconds();
        org.joda.time.Period period38 = period35.minusDays(22);
        org.joda.time.Period period39 = period1.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = period39.withHours(217);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = dateTime45.withMillisOfSecond(53);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime48.withChronology(chronology56);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardHours(10L);
        long long62 = duration61.getStandardSeconds();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration66 = duration61.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.days();
        org.joda.time.Period period70 = new org.joda.time.Period(1645488000000L, periodType69);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(periodType69);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusDays((int) (short) -1);
        int int79 = dateMidnight78.getYearOfEra();
        org.joda.time.Chronology chronology80 = dateMidnight78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.millisOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.era();
        org.joda.time.DurationField durationField84 = chronology80.weeks();
        org.joda.time.Chronology chronology85 = chronology80.withUTC();
        boolean boolean86 = durationFieldType72.isSupported(chronology80);
        int int87 = periodType69.indexOf(durationFieldType72);
        org.joda.time.Period period88 = interval67.toPeriod(periodType69);
        org.joda.time.Period period89 = period39.minus((org.joda.time.ReadablePeriod) period88);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 36000L + "'", long62 == 36000L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withChronology(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withZone(dateTimeZone10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        org.joda.time.DurationField durationField25 = durationFieldType12.getField(chronology21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        org.joda.time.DurationField durationField33 = durationFieldType12.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        java.lang.String str36 = dateTimeField34.getAsText(1645455738650L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        long long43 = dateMidnight40.getMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.days();
        org.joda.time.Period period45 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight40.toMutableDateTimeISO();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withZoneRetainFields(dateTimeZone51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        long long59 = dateMidnight56.getMillis();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period(readableDuration60, readableInstant61);
        org.joda.time.PeriodType periodType63 = period62.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableInstant) dateMidnight56, periodType63);
        mutablePeriod64.add(0L);
        mutableDateTime46.add((org.joda.time.ReadablePeriod) mutablePeriod64);
        mutableDateTime46.setDayOfMonth(16);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        org.joda.time.MutableDateTime mutableDateTime72 = property70.roundHalfCeiling();
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.lang.String str74 = locale73.toLanguageTag();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleAttributes();
        int int76 = property70.getMaximumTextLength(locale73);
        int int77 = dateTimeField34.getMaximumTextLength(locale73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter8.withLocale(locale73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter8.withPivotYear((-292275054));
        java.lang.Appendable appendable81 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.now(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.DateTime dateTime87 = dateTime85.withMillisOfSecond(53);
        org.joda.time.DateTime dateTime89 = dateTime87.withDayOfYear(363);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter80.printTo(appendable81, (org.joda.time.ReadableInstant) dateTime87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "52" + "'", str36, "52");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645401600001L + "'", long43 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645488000001L + "'", long59 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "zh-CN" + "'", str74, "zh-CN");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 8, (long) 378);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.withMonthOfYear(2);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus(readableDuration12);
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.dayOfYear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645401600001L + "'", long14 == 1645401600001L);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        long long17 = dateMidnight14.getMillis();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withMillis((long) 7);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateMidnight14, periodType20);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType30);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration12, (-3));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645401600001L + "'", long17 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int7 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology11);
        mutablePeriod12.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod12.add(0L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutablePeriod12.add(0L, chronology26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (-1), chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight29.toMutableDateTime(chronology38);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration44);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology50);
        mutablePeriod51.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod51.add(0L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays((int) (short) -1);
        int int64 = dateMidnight63.getYearOfEra();
        org.joda.time.Chronology chronology65 = dateMidnight63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology65);
        mutablePeriod51.add(0L, chronology65);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (-1), chronology65);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusDays((int) (short) -1);
        int int76 = dateMidnight75.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateMidnight75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) 10, chronology77);
        org.joda.time.MutableDateTime mutableDateTime80 = dateMidnight68.toMutableDateTime(chronology77);
        mutableDateTime80.setYear(2022);
        mutableDateTime80.setYear((-1));
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime80.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime86 = property85.roundFloor();
        mutableDateTime86.addWeekyears(22);
        org.joda.time.Period period89 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime86);
        mutableDateTime86.addSeconds(54370703);
        mutableDateTime86.addWeeks(54480104);
        org.joda.time.MutableDateTime.Property property94 = mutableDateTime86.yearOfEra();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4320000000L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) (short) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        long long11 = dateMidnight8.getMillis();
        java.util.Locale locale15 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar16 = dateMidnight8.toCalendar(locale15);
        int int18 = calendar16.getLeastMaximum(3);
        java.util.TimeZone timeZone19 = calendar16.getTimeZone();
        timeZone19.setID("PT0S");
        java.util.TimeZone.setDefault(timeZone19);
        java.util.Calendar.Builder builder23 = builder2.setTimeZone(timeZone19);
        java.util.Calendar.Builder builder25 = builder23.setInstant((long) 366);
        java.util.Calendar.Builder builder27 = builder23.setLenient(true);
        java.util.Date date31 = new java.util.Date(49, (int) 'a', (int) 'u');
        java.util.Calendar.Builder builder32 = builder27.setInstant(date31);
        java.util.Calendar calendar33 = builder27.build();
        java.util.Date date34 = calendar33.getTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488000001L + "'", long11 == 1645488000001L);
        org.junit.Assert.assertEquals(locale15.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals(date31.toString(), "Tue May 28 00:00:00 GMT+00:00 1957");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-397526399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1957,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=148,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue May 28 00:00:00 GMT+00:00 1957");
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        calendar1.roll((int) (short) 0, true);
        calendar1.set(32772, 19, 1969, 31, 22);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds(9);
        boolean boolean25 = calendar1.before((java.lang.Object) dateTime22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology28);
        mutablePeriod29.setPeriod((long) (short) 10, (long) (short) -1);
        int int34 = mutablePeriod29.getValue(0);
        mutablePeriod29.addMinutes(0);
        mutablePeriod29.setMonths((int) (byte) 10);
        boolean boolean39 = calendar1.after((java.lang.Object) mutablePeriod29);
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        int int41 = calendar1.getWeekYear();
        java.lang.String str42 = calendar1.getCalendarType();
        calendar1.set(86399999, 625, 55415243, 54399444, 897);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=86399999,MONTH=625,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=55415243,DAY_OF_YEAR=356,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=54399444,MINUTE=897,SECOND=38,MILLISECOND=203,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32778 + "'", int41 == 32778);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "gregory" + "'", str42, "gregory");
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property7.withMaximumValue();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours(10L);
        long long16 = duration15.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period18 = duration15.toPeriod();
        org.joda.time.Duration duration21 = duration15.withDurationAdded((long) (short) 0, (int) (byte) 0);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration27 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration25, 12);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration33 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration31, 12);
        boolean boolean34 = duration27.isEqual((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 10, chronology51);
        org.joda.time.DateTime dateTime55 = dateTime53.minusHours(7);
        org.joda.time.DateTime dateTime57 = dateTime55.plusYears((int) (byte) 0);
        int int58 = dateTime57.getMonthOfYear();
        org.joda.time.Interval interval59 = duration41.toIntervalFrom((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration66 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration64, 12);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration72 = duration68.withDurationAdded((org.joda.time.ReadableDuration) duration70, 12);
        boolean boolean73 = duration66.isEqual((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Seconds seconds74 = duration66.toStandardSeconds();
        int int75 = duration41.compareTo((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration77 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration66, 15);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight9.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.YearMonthDay yearMonthDay79 = dateMidnight78.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay79.plusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType83 = yearMonthDay79.getFieldType(54402318);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54402318");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 36000L + "'", long16 == 36000L);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(seconds74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate1.plusYears(2024);
        org.joda.time.LocalDate localDate11 = localDate9.withYear((-100));
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = dateTime15.getDayOfMonth();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        long long1 = instant0.getMillis();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        java.lang.String str4 = mutableDateTime3.toString();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456238245L + "'", long1 == 1645456238245L);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T15:10:38.244-00:00:00.001" + "'", str4, "2022-02-21T15:10:38.244-00:00:00.001");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (short) 100, chronology13);
        org.joda.time.DurationField durationField17 = durationFieldType4.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(666L, 63113904000L, chronology13);
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 361, chronology13);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1645455780819L, chronology13);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.DurationField durationField24 = dateTimeField23.getRangeDurationField();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutableDateTime10.setChronology(chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        long long34 = dateMidnight31.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight31, periodType38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight31.withWeekyear(59);
        java.util.Locale locale44 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar45 = dateMidnight31.toCalendar(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology19, locale44, (java.lang.Integer) 6);
        java.lang.Integer int48 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval50 = yearMonthDay49.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay49.withChronologyRetainFields(chronology51);
        org.joda.time.DateTime dateTime53 = yearMonthDay49.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay49.plusMonths(0);
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay49.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay57 = property56.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay59 = property56.addWrapFieldToCopy((int) (byte) -1);
        java.util.Locale locale60 = java.util.Locale.UK;
        int int61 = property56.getMaximumShortTextLength(locale60);
        java.util.Locale locale66 = new java.util.Locale("ISOChronology[Etc/UTC]", "24", "Days");
        org.joda.time.YearMonthDay yearMonthDay67 = property56.setCopy("22", locale66);
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor69 = strSet68.iterator();
        java.lang.String[] strArray71 = java.util.TimeZone.getAvailableIDs((int) (short) 0);
        java.lang.Comparable<java.lang.String>[] strComparableArray72 = strSet68.toArray((java.lang.Comparable<java.lang.String>[]) strArray71);
        boolean boolean73 = dateTimeParserBucket47.restoreState((java.lang.Object) strComparableArray72);
        java.lang.Object obj74 = dateTimeParserBucket47.saveState();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645488000001L + "'", long34 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertEquals(locale44.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals(locale66.toString(), "isochronology[etc/utc]_24_Days");
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strComparableArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        calendar11.add(99, (int) (byte) 0);
        int int15 = calendar11.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[-00:00:00.001]");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "isochronology[-00:00:00.001]" + "'", str3, "isochronology[-00:00:00.001]");
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime10.withChronology(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.millis();
        long long25 = durationField22.getMillis(54191870, (long) 1858);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 54191870L + "'", long25 == 54191870L);
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(41, 54152173);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfFloorCopy();
        int int10 = dateMidnight9.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDayOfWeek(4);
        org.joda.time.LocalDate localDate13 = dateMidnight9.toLocalDate();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        long long21 = dateMidnight18.getMillis();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight18, periodType22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight18.toMutableDateTimeISO();
        int int25 = mutableDateTime24.getDayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        mutableDateTime24.setChronology(chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        long long48 = dateMidnight45.getMillis();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableDuration49, readableInstant50);
        org.joda.time.PeriodType periodType52 = period51.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight41, (org.joda.time.ReadableInstant) dateMidnight45, periodType52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight45.withWeekyear(59);
        java.util.Locale locale58 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar59 = dateMidnight45.toCalendar(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology33, locale58, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField62 = chronology33.minuteOfDay();
        org.joda.time.DateTime dateTime63 = dateMidnight9.toDateTime(chronology33);
        org.joda.time.DurationField durationField64 = chronology33.months();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology33.withZone(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645401600001L + "'", long21 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645488000001L + "'", long48 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertEquals(locale58.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType2.getField(chronology21);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.Period period28 = new org.joda.time.Period(1645488000000L, periodType27);
        org.joda.time.Period period29 = period28.normalizedStandard();
        int int30 = period29.getSeconds();
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) period29, (long) (short) 0);
        org.joda.time.PeriodType periodType33 = period29.getPeriodType();
        org.joda.time.PeriodType periodType34 = periodType33.withMinutesRemoved();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        long long43 = dateMidnight40.getMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.days();
        org.joda.time.Period period45 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight40.toMutableDateTimeISO();
        int int47 = mutableDateTime46.getDayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        mutableDateTime46.setChronology(chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.withZoneRetainFields(dateTimeZone62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        long long70 = dateMidnight67.getMillis();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType74 = period73.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableInstant) dateMidnight67, periodType74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight67.withWeekyear(59);
        java.util.Locale locale80 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar81 = dateMidnight67.toCalendar(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology55, locale80, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField84 = chronology55.clockhourOfDay();
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology55);
        org.joda.time.DateTimeField dateTimeField86 = chronology55.era();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 32778, 1645455776047L, periodType34, chronology55);
        org.joda.time.DurationField durationField88 = chronology55.days();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645401600001L + "'", long43 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645488000001L + "'", long70 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertEquals(locale80.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField88);
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusDays((int) (short) -1);
        int int5 = dateMidnight4.getYearOfEra();
        org.joda.time.Chronology chronology6 = dateMidnight4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) (-30296314897474243L), chronology6);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, 36000L, periodType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(0L, periodType4, chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((java.lang.Object) 54458358, periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withYear((int) (byte) 0);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) 23);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        int int23 = dateMidnight22.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645488000001L + "'", long12 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withDayOfMonth((int) (short) 10);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withFields(readablePartial16);
        org.joda.time.DateTime.Property property18 = dateTime15.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime36.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime36.toMutableDateTime(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = yearMonthDay42.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay42.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime36, (org.joda.time.ReadableInstant) dateTime45);
        mutableDateTime36.setMinuteOfDay(14);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours(10L);
        long long51 = duration50.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withMillis((long) 24);
        long long55 = dateMidnight54.getMillis();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Period period57 = duration50.toPeriod();
        mutableDateTime36.add((org.joda.time.ReadablePeriod) period57, (int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay2.withPeriodAdded((org.joda.time.ReadablePeriod) period57, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay2.toDateMidnight();
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay2.dayOfMonth();
        java.lang.String str64 = property63.getAsString();
        java.lang.String str65 = property63.getName();
        org.joda.time.DateTimeField dateTimeField66 = property63.getField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 36000L + "'", long51 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "dayOfMonth" + "'", str65, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((long) 10, chronology3);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((long) 10, chronology7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.Period period10 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay4, (org.joda.time.ReadablePartial) timeOfDay8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean12 = timeOfDay8.isSupported(dateTimeFieldType11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        boolean boolean23 = dateTimeFieldType11.isSupported(chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        boolean boolean31 = dateTimeFieldType11.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.era();
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay((-85107623641L), chronology29);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 868, chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = property18.getAsText(locale20);
        int int22 = property18.get();
        java.util.Locale locale23 = null;
        int int24 = property18.getMaximumTextLength(locale23);
        org.joda.time.TimeOfDay timeOfDay26 = property18.addWrapFieldToCopy((int) (short) -1);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale27.getCountry();
        int int29 = property18.getMaximumTextLength(locale27);
        org.joda.time.TimeOfDay timeOfDay30 = property18.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property18.withMinimumValue();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale37.getDisplayCountry();
        java.lang.String str40 = locale36.getDisplayScript(locale37);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale36);
        java.lang.String str42 = locale32.getDisplayScript(locale36);
        int int43 = property18.getMaximumTextLength(locale36);
        org.joda.time.TimeOfDay timeOfDay45 = property18.addNoWrapToCopy(54380);
        java.lang.String str46 = property18.getAsText();
        org.joda.time.TimeOfDay timeOfDay48 = property18.addWrapFieldToCopy(960895);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "KR" + "'", str28, "KR");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale36.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c" + "'", str39, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645456238507,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=38,MILLISECOND=506,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(timeOfDay48);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds(14);
        boolean boolean19 = dateMidnight5.isBefore((org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str20 = dateMidnight5.toString();
        java.util.Date date22 = new java.util.Date((long) 1);
        date22.setHours(15);
        date22.setMinutes(59);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromDateFields(date22);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths(823);
        int int30 = localDateTime29.getSecondOfMinute();
        org.joda.time.Period period32 = org.joda.time.Period.millis(0);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period34 = period32.normalizedStandard(periodType33);
        org.joda.time.Period period36 = period34.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 54399444);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:00:00.000-00:00:00.001" + "'", str20, "2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 15:59:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime33.addYears((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime33.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType1.getField(chronology20);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology20);
        org.joda.time.DateTimeZone dateTimeZone26 = chronology20.getZone();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str30 = locale27.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(5414587059L, chronology20, locale27, (java.lang.Integer) 0, 228);
        org.joda.time.DateTimeField dateTimeField34 = chronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology20.minuteOfHour();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) '#');
        int int49 = dateTimeField46.getMinimumValue((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate localDate51 = localDate48.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField53 = localDate48.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate55 = localDate48.plusYears(8);
        java.util.Locale locale57 = java.util.Locale.UK;
        java.lang.String str58 = localDate48.toString("52", locale57);
        java.util.Locale locale60 = new java.util.Locale("PT36001.873S");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        int int67 = dateMidnight66.getYearOfEra();
        org.joda.time.Chronology chronology68 = dateMidnight66.getChronology();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.halfdayOfDay();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) '#');
        int int74 = dateTimeField71.getMinimumValue((org.joda.time.ReadablePartial) localDate73);
        org.joda.time.LocalDate localDate76 = localDate73.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField78 = localDate73.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate80 = localDate73.plusYears(8);
        java.util.Locale locale82 = java.util.Locale.UK;
        java.lang.String str83 = localDate73.toString("52", locale82);
        java.lang.String str84 = locale82.getLanguage();
        java.lang.String str85 = locale60.getDisplayLanguage(locale82);
        java.lang.String str86 = locale57.getDisplayLanguage(locale60);
        int int87 = dateTimeField35.getMaximumShortTextLength(locale57);
        java.lang.String str89 = dateTimeField35.getAsShortText(118054991870L);
        boolean boolean91 = dateTimeField35.isLeap(11661938424133970L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "52" + "'", str58, "52");
        org.junit.Assert.assertEquals(locale60.toString(), "pt36001.873s");
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "52" + "'", str83, "52");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "en" + "'", str84, "en");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "pt36001.873s" + "'", str85, "pt36001.873s");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English" + "'", str86, "English");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "3" + "'", str89, "3");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        mutablePeriod42.setHours(139);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusHours(19);
        org.joda.time.Chronology chronology6 = timeOfDay2.getChronology();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        long long14 = dateMidnight11.getMillis();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.Period period16 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight11, periodType15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight11.toMutableDateTimeISO();
        int int18 = mutableDateTime17.getDayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutableDateTime17.setChronology(chronology26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        long long41 = dateMidnight38.getMillis();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration42, readableInstant43);
        org.joda.time.PeriodType periodType45 = period44.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableInstant) dateMidnight38, periodType45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.withWeekyear(59);
        java.util.Locale locale51 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar52 = dateMidnight38.toCalendar(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology26, locale51, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField55 = chronology26.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay2.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeField dateTimeField57 = chronology26.weekyear();
        int int58 = dateTimeField57.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateMidnight13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645401600001L + "'", long14 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645488000001L + "'", long41 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertEquals(locale51.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-292275054) + "'", int58 == (-292275054));
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra(999);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfMonth(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withSecondOfMinute(30);
        org.joda.time.LocalDateTime.Property property25 = localDateTime20.yearOfCentury();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property7.getFieldType();
        org.joda.time.DateMidnight dateMidnight11 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight12 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight13 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight14 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, 36000L, periodType5);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(obj2, periodType5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds(4);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.LocalTime.Property property22 = localTime21.millisOfSecond();
        org.joda.time.LocalTime localTime24 = property22.addCopy(10);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1901760100L, (long) 46, periodType5, chronology25);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.toMutablePeriod();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(mutablePeriod29);
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutableDateTime10.setChronology(chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        long long34 = dateMidnight31.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight31, periodType38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight31.withWeekyear(59);
        java.util.Locale locale44 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar45 = dateMidnight31.toCalendar(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology19, locale44, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField48 = chronology19.clockhourOfDay();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((long) 10, chronology51);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = timeOfDay52.getFields();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay((long) 10, chronology55);
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = timeOfDay56.getFields();
        org.joda.time.Period period58 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay52, (org.joda.time.ReadablePartial) timeOfDay56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay((long) 10, chronology60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = timeOfDay61.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay61.plusSeconds((int) '4');
        int int65 = timeOfDay52.compareTo((org.joda.time.ReadablePartial) timeOfDay61);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay52.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property68 = timeOfDay52.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.lang.String str71 = property68.getAsText(locale70);
        java.lang.String str72 = locale70.getDisplayVariant();
        java.lang.String str73 = dateTimeField48.getAsShortText(446, locale70);
        boolean boolean74 = dateTimeField48.isLenient();
        java.lang.String str76 = dateTimeField48.getAsShortText(0L);
        long long79 = dateTimeField48.getDifferenceAsLong((long) 74, (-172800000L));
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645488000001L + "'", long34 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertEquals(locale44.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "446" + "'", str73, "446");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "23" + "'", str76, "23");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 48L + "'", long79 == 48L);
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.YearMonthDay yearMonthDay67 = property2.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = yearMonthDay67.getFieldTypes();
        org.joda.time.YearMonthDay.Property property69 = yearMonthDay67.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay71 = property69.addToCopy(70);
        java.util.Locale locale75 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        boolean boolean77 = locale76.hasExtensions();
        java.lang.String str78 = locale76.getDisplayCountry();
        java.lang.String str79 = locale75.getDisplayScript(locale76);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale75);
        java.lang.String str81 = property69.getAsText(locale75);
        org.joda.time.YearMonthDay yearMonthDay82 = property69.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = yearMonthDay82.getFieldTypes();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645401600001L + "'", long48 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertEquals(locale75.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u65e5\u672c" + "'", str78, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1645456238715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=38,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "February" + "'", str81, "February");
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Period period10 = period8.minusMinutes(0);
        org.joda.time.Period period12 = period10.minusHours((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        int int21 = mutablePeriod16.getValue(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.Duration duration26 = mutablePeriod16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        org.joda.time.Period period30 = new org.joda.time.Period(1645488000000L, periodType29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType34 = period33.getPeriodType();
        org.joda.time.Period period35 = period30.normalizedStandard(periodType34);
        org.joda.time.Period period36 = duration26.toPeriodTo(readableInstant27, periodType34);
        java.lang.String str37 = periodType34.getName();
        org.joda.time.PeriodType periodType38 = periodType34.withSecondsRemoved();
        org.joda.time.Period period39 = period12.normalizedStandard(periodType38);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Standard" + "'", str37, "Standard");
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours(10L);
        long long14 = duration13.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period16 = duration13.toPeriod();
        org.joda.time.Duration duration19 = duration13.withDurationAdded((long) (short) 0, (int) (byte) 0);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardHours(10L);
        long long22 = duration21.getStandardSeconds();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration26 = duration21.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration27 = duration25.toDuration();
        int int28 = duration13.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval7.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Interval interval31 = interval7.withStartMillis(14400004L);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = interval31.toPeriod(periodType32);
        org.joda.time.MutableInterval mutableInterval34 = interval31.toMutableInterval();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 36000L + "'", long14 == 36000L);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 36000L + "'", long22 == 36000L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutableInterval34);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(23);
        org.joda.time.Period period3 = period1.plusDays(46);
        org.joda.time.Period period5 = period1.minusHours(0);
        int int6 = period1.getHours();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 10, chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours(7);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((int) (byte) 0);
        int int22 = dateTime21.getMonthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology26);
        mutablePeriod27.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod27.add(0L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        int int40 = dateMidnight39.getYearOfEra();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology41);
        mutablePeriod27.add(0L, chronology41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (-1), chronology41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 10, chronology53);
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight44.toMutableDateTime(chronology53);
        mutableDateTime56.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime56.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime56.toMutableDateTime(dateTimeZone60);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = yearMonthDay62.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime56, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType70 = periodType69.withWeeksRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 1970, (long) 3, periodType69);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration66, periodType69);
        org.joda.time.DateTime dateTime73 = dateTime21.withEarlierOffsetAtOverlap();
        boolean boolean74 = period1.equals((java.lang.Object) dateTime73);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        int int7 = calendar1.getActualMinimum(1);
        calendar1.set(4, (-1), (int) '#');
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        long long13 = calendar1.getTimeInMillis();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-62261686161166,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=4,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=38,MILLISECOND=834,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62261686161166L) + "'", long13 == (-62261686161166L));
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withWeekOfWeekyear(85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(dateMidnight2);
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10, chronology12);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = timeOfDay13.getFields();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) 10, chronology16);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = timeOfDay17.getFields();
        org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay13, (org.joda.time.ReadablePartial) timeOfDay17);
        long long22 = chronology8.add((org.joda.time.ReadablePeriod) period19, (long) 53, 100);
        org.joda.time.Hours hours23 = period19.toStandardHours();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 53L + "'", long22 == 53L);
        org.junit.Assert.assertNotNull(hours23);
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addWrapFieldToCopy(10);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay7 = property6.getYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutableDateTime10.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.year();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology19.add(readablePeriod23, 68400007L, 32778);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(4320000000L, chronology19);
        org.joda.time.LocalTime localTime28 = localDateTime27.toLocalTime();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 68400007L + "'", long26 == 68400007L);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (short) 100, chronology13);
        org.joda.time.DurationField durationField17 = durationFieldType4.getField(chronology13);
        org.joda.time.DurationField durationField18 = chronology13.weekyears();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(666L, 63113904000L, chronology13);
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 361, chronology13);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1645455780819L, chronology13);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.secondOfDay();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale23.getDisplayVariant(locale25);
        int int27 = property22.getMaximumShortTextLength(locale23);
        org.joda.time.MutableDateTime mutableDateTime29 = property22.addWrapField(10);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.weekyear();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "KR" + "'", str24, "KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        int int7 = localDate1.getMonthOfYear();
        int int8 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy(100);
        int int12 = localDate11.getWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate11.monthOfYear();
        int int14 = localDate11.getEra();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11970 + "'", int12 == 11970);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration6 = duration1.plus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.withMillis((long) 19);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod13.add(0L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        mutablePeriod13.add(0L, chronology27);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (-1), chronology27);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) 10, chronology39);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight30.toMutableDateTime(chronology39);
        mutableDateTime42.setYear(2022);
        mutableDateTime42.setYear((-1));
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfYear();
        mutableDateTime42.setMinuteOfHour(4);
        mutableDateTime42.add(53L);
        mutableDateTime42.addMillis((int) (short) 100);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) (byte) -1, 36000L, periodType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(0L, periodType57, chronology59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) mutableDateTime42, periodType57);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime42.weekOfWeekyear();
        mutableDateTime42.addMillis(46);
        java.lang.String str65 = mutableDateTime42.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000L + "'", long2 == 36000L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(property62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-0001-12-31T00:04:00.199-00:00:00.001" + "'", str65, "-0001-12-31T00:04:00.199-00:00:00.001");
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.format.PeriodFormatter periodFormatter7 = null;
        java.lang.String str8 = mutablePeriod6.toString(periodFormatter7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getMillisOfSecond();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', periodType13, chronology14);
        org.joda.time.Period period17 = period15.withDays((int) ' ');
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) period17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        long long27 = dateMidnight24.getMillis();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.Period period29 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight24, periodType28);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime31 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = interval20.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval34 = interval18.overlap((org.joda.time.ReadableInterval) interval32);
        long long35 = interval18.getEndMillis();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Interval interval40 = interval37.gap((org.joda.time.ReadableInterval) interval39);
        boolean boolean41 = interval18.abuts((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        long long46 = dateMidnight43.getMillis();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.withMillis((long) 7);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        long long55 = dateMidnight52.getMillis();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.days();
        org.joda.time.Period period57 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight52, periodType56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight52.toMutableDateTimeISO();
        int int59 = dateMidnight48.compareTo((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight48.plusWeeks(10);
        org.joda.time.Interval interval62 = dateMidnight61.toInterval();
        boolean boolean63 = interval18.abuts((org.joda.time.ReadableInterval) interval62);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval18);
        boolean boolean65 = interval1.isAfter((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        long long72 = dateMidnight69.getMillis();
        org.joda.time.DateMidnight.Property property73 = dateMidnight69.weekyear();
        org.joda.time.DateMidnight dateMidnight74 = property73.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight75 = property73.getDateMidnight();
        int int76 = dateMidnight75.getEra();
        org.joda.time.DateMidnight.Property property77 = dateMidnight75.dayOfYear();
        org.joda.time.Chronology chronology78 = dateMidnight75.getChronology();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(chronology79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.minusDays((int) (short) -1);
        int int83 = dateMidnight82.getYearOfEra();
        org.joda.time.Chronology chronology84 = dateMidnight82.getChronology();
        long long85 = dateMidnight82.getMillis();
        org.joda.time.DateMidnight.Property property86 = dateMidnight82.weekyear();
        org.joda.time.DateMidnight dateMidnight88 = property86.addWrapFieldToCopy(1970);
        org.joda.time.DateMidnight dateMidnight89 = property86.getDateMidnight();
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight75, (org.joda.time.ReadableInstant) dateMidnight89, periodType90);
        int int92 = dateMidnight89.getMonthOfYear();
        boolean boolean93 = interval18.isBefore((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight89.plusWeeks(913);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645401600001L + "'", long27 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(interval34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1648166400036L + "'", long35 == 1648166400036L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645401600001L + "'", long46 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight54);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645401600001L + "'", long55 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645488000001L + "'", long72 == 1645488000001L);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertNotNull(chronology84);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645488000001L + "'", long85 == 1645488000001L);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateMidnight95);
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 12);
        boolean boolean5 = dateTimeFormatter4.isParser();
        boolean boolean6 = dateTimeFormatter4.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter4.getParser();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable8, (long) 55509);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(dateTimeParser7);
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withMillis((long) 24);
        long long6 = dateMidnight5.getMillis();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Period period8 = duration1.toPeriod();
        org.joda.time.Period period10 = period8.minusMillis((int) (short) 10);
        org.joda.time.Weeks weeks11 = period10.toStandardWeeks();
        org.joda.time.Period period13 = period10.plusHours(2019);
        org.joda.time.Period period15 = period10.minusWeeks(41);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000L + "'", long2 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.minutes();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.minuteOfHour();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime36.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setDateTime(55273612, 35, 52, 12, 58, 868, 54392920);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 868 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        long long9 = dateMidnight6.getMillis();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight6.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight6.withMonthOfYear(2);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology23);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight6.withChronology(chronology23);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-100), (long) 335, periodType2, chronology23);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645401600001L + "'", long9 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        java.util.TimeZone timeZone14 = calendar11.getTimeZone();
        int int15 = timeZone14.getRawOffset();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        java.lang.String str17 = calendar16.getCalendarType();
        calendar16.set(55269, 80, 54152181, 0, 228);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        long long34 = dateMidnight31.getMillis();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withMillis((long) 7);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateMidnight31, periodType37);
        int int39 = dateMidnight31.getDayOfMonth();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology44);
        mutablePeriod45.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod45.add(0L);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology59);
        mutablePeriod45.add(0L, chronology59);
        org.joda.time.Period period62 = new org.joda.time.Period((long) 0, (long) 6, chronology59);
        org.joda.time.DateTime dateTime63 = dateMidnight31.toDateTime(chronology59);
        java.util.Locale locale64 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(100L, chronology59, locale64, (java.lang.Integer) 6);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval68 = yearMonthDay67.toInterval();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay67.withChronologyRetainFields(chronology69);
        org.joda.time.DateTime dateTime71 = yearMonthDay67.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay67.plusMonths(0);
        org.joda.time.YearMonthDay.Property property74 = yearMonthDay67.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay75 = property74.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay77 = property74.addWrapFieldToCopy((int) (byte) -1);
        java.util.Locale locale78 = java.util.Locale.UK;
        int int79 = property74.getMaximumShortTextLength(locale78);
        java.util.Locale locale84 = new java.util.Locale("ISOChronology[Etc/UTC]", "24", "Days");
        org.joda.time.YearMonthDay yearMonthDay85 = property74.setCopy("22", locale84);
        java.util.Set<java.lang.String> strSet86 = locale84.getUnicodeLocaleKeys();
        java.lang.String str87 = locale64.getDisplayScript(locale84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap88 = calendar16.getDisplayNames(709, 2023, locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=55269,MONTH=80,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=54152181,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=228,SECOND=39,MILLISECOND=94,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertNotNull(dateMidnight33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645401600001L + "'", long34 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals(locale84.toString(), "isochronology[etc/utc]_24_Days");
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology19);
        mutablePeriod20.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod20.add(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        mutablePeriod20.add(0L, chronology34);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType15.getField(chronology34);
        java.lang.String str39 = dateTimeFieldType15.getName();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval41 = yearMonthDay40.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay40.withChronologyRetainFields(chronology42);
        org.joda.time.DateTime dateTime44 = yearMonthDay40.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.halfdayOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) '#');
        int int58 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDate57);
        org.joda.time.Period period59 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate60 = localDate57.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay40.minus((org.joda.time.ReadablePeriod) period59);
        java.lang.String str62 = yearMonthDay40.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology65);
        mutablePeriod66.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod66.add(0L);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusDays((int) (short) -1);
        int int79 = dateMidnight78.getYearOfEra();
        org.joda.time.Chronology chronology80 = dateMidnight78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology80);
        mutablePeriod66.add(0L, chronology80);
        mutablePeriod66.setHours(10);
        int int85 = mutablePeriod66.getYears();
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Period period89 = new org.joda.time.Period((long) '#', periodType87, chronology88);
        org.joda.time.Period period91 = period89.withDays((int) ' ');
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) period89);
        org.joda.time.YearMonthDay yearMonthDay93 = yearMonthDay40.plus((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Chronology chronology94 = yearMonthDay93.getChronology();
        org.joda.time.DateTimeField dateTimeField95 = dateTimeFieldType15.getField(chronology94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property96 = yearMonthDay12.property(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "centuryOfEra" + "'", str39, "centuryOfEra");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-21" + "'", str62, "2022-02-21");
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        int int7 = localDate1.getMonthOfYear();
        int int8 = localDate1.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate1.getValue((-2022));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -2022");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        int int6 = dateMidnight3.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.withEra(54180883);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54180883 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(54474, 25, 726, 197022, 363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.minuteOfHour();
        int int17 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusSeconds(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(0);
        int int22 = localDateTime21.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 86300004 + "'", int22 == 86300004);
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        int int3 = localDate1.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        int int12 = mutablePeriod7.getValue(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        org.joda.time.Duration duration17 = mutablePeriod7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.LocalDate localDate18 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate.Property property22 = localDate20.weekyear();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.LocalDate localDate24 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfEra();
        int int26 = localDate24.getMonthOfYear();
        int int27 = localDate24.getWeekyear();
        org.joda.time.LocalDate localDate29 = localDate24.withCenturyOfEra(23);
        int int30 = localDate24.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int32 = localDate24.get(dateTimeFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate1.withField(dateTimeFieldType31, 54202913);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54202913 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970" + "'", str23, "1970");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology9);
        mutablePeriod10.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod10.add(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        mutablePeriod10.add(0L, chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 0, (long) 6, chronology24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology24);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(chronology24);
        java.util.Date date30 = localDate29.toDate();
        date30.setMinutes(50);
        int int33 = date30.getTimezoneOffset();
        int int34 = date30.getMonth();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.fromDateFields(date30);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay38.withChronologyRetainFields(chronology40);
        org.joda.time.DateTime dateTime42 = yearMonthDay38.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.halfdayOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) '#');
        int int56 = dateTimeField53.getMinimumValue((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.Period period57 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate58 = localDate55.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay38.minus((org.joda.time.ReadablePeriod) period57);
        java.lang.String str60 = yearMonthDay38.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime63 = yearMonthDay38.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.Interval interval64 = localDate37.toInterval(dateTimeZone62);
        boolean boolean65 = localDate35.equals((java.lang.Object) dateTimeZone62);
        int[] intArray66 = localDate35.getValues();
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:50:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-21" + "'", str60, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 21]");
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.LocalTime localTime20 = localTime18.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime localTime22 = localTime18.minusMinutes(54297312);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = localTime22.toString("Tue Mar 15 15:25:25 GMT+d8:16 2022");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(54152181);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(19076);
        boolean boolean13 = dateTimeFormatter12.isOffsetParsed();
        java.lang.StringBuffer stringBuffer14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property20.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(stringBuffer14, (org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        mutablePeriod17.setHours(365);
        mutablePeriod17.addWeeks((int) ' ');
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645488000001L + "'", long12 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusYears(70);
        int int20 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minusHours((-10));
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes(667);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        int int25 = dateMidnight22.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property26 = dateMidnight22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight22.getZone();
        org.joda.time.DateTime dateTime28 = localTime18.toDateTimeToday(dateTimeZone27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        long long43 = dateMidnight40.getMillis();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration44, readableInstant45);
        org.joda.time.PeriodType periodType47 = period46.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableInstant) dateMidnight40, periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 3, (long) 32769, periodType47);
        org.joda.time.Period period51 = period49.plusYears(100);
        org.joda.time.Period period53 = period51.plusWeeks(6);
        org.joda.time.Period period55 = period51.plusWeeks(52);
        org.joda.time.LocalTime localTime56 = localTime18.minus((org.joda.time.ReadablePeriod) period51);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645488000001L + "'", long43 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(10L);
        long long6 = duration5.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        int int13 = dateMidnight11.getWeekyear();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, readableInstant14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology18);
        mutablePeriod19.setPeriod((long) (short) 10, (long) (short) -1);
        int int24 = mutablePeriod19.getValue(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        org.joda.time.Duration duration29 = mutablePeriod19.toDurationTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.days();
        org.joda.time.Period period33 = new org.joda.time.Period(1645488000000L, periodType32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        org.joda.time.Period period38 = period33.normalizedStandard(periodType37);
        org.joda.time.Period period39 = duration29.toPeriodTo(readableInstant30, periodType37);
        java.lang.String str40 = periodType37.getName();
        org.joda.time.Period period41 = duration5.toPeriodTo(readableInstant14, periodType37);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(periodType37);
        org.joda.time.PeriodType periodType43 = periodType37.withYearsRemoved();
        java.lang.String str44 = periodType43.getName();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000L + "'", long6 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Standard" + "'", str40, "Standard");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "StandardNoYears" + "'", str44, "StandardNoYears");
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTime dateTime18 = property15.addToCopy((long) 1);
        org.joda.time.DateTime dateTime19 = property15.roundCeilingCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.DateTime.Property property21 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime19.withCenturyOfEra(999);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardMinutes(3600001L);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration25, periodType26);
        org.joda.time.Duration duration28 = duration25.toDuration();
        org.joda.time.Period period29 = duration25.toPeriod();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-21T00:00:00.000-00:00:00.001/2022-02-21T00:00:01.873-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T00:00:00.000-00:00:00.001/2022-02-21T00:00:01.873-00:00:00.001\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.set(100, (int) (byte) -1, 6, 50, 22, 2022);
        int int11 = calendar1.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-59013695057559,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=99,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=8,DAY_OF_YEAR=342,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=55,SECOND=42,MILLISECOND=441,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 43);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfFloorCopy();
        int int10 = dateMidnight9.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDayOfWeek(4);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYearOfEra(53);
        int int15 = dateMidnight14.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withWeekyear(57);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        java.util.Date date5 = new java.util.Date(22, 5, 3, (int) 'a', 1);
        int int6 = date5.getDay();
        long long7 = date5.getTime();
        java.lang.String str8 = date5.toGMTString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jun 07 01:01:00 GMT 1922");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1501196340000L) + "'", long7 == (-1501196340000L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7 Jun 1922 01:01:00 GMT" + "'", str8, "7 Jun 1922 01:01:00 GMT");
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        boolean boolean26 = dateTimeFieldType5.isSupported(chronology23);
        org.joda.time.DurationField durationField27 = chronology23.hours();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology23);
        org.joda.time.DurationField durationField29 = chronology23.seconds();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology23.getZone();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(195970, 54568127, 54458358, 146444, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 195970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        java.util.Locale locale3 = new java.util.Locale("", "2022-01-03T00:00:00.000-00:00:00.001", "P7W1DT0.010S");
        org.junit.Assert.assertEquals(locale3.toString(), "_2022-01-03T00:00:00.000-00:00:00.001_P7W1DT0.010S");
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        int int19 = property18.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        java.lang.String str21 = property18.getAsString();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        int int24 = property18.getMaximumShortTextLength(locale22);
        org.joda.time.TimeOfDay timeOfDay26 = property18.addWrapFieldToCopy(54597968);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.joda.time.Period period1 = org.joda.time.Period.hours(68);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = dateMidnight13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100, chronology15);
        org.joda.time.DurationField durationField19 = durationFieldType6.getField(chronology15);
        int int20 = periodType3.indexOf(durationFieldType6);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (short) 100, chronology40);
        org.joda.time.DateTime dateTime44 = dateTime31.withChronology(chronology40);
        org.joda.time.DurationField durationField45 = durationFieldType6.getField(chronology40);
        org.joda.time.DurationField durationField46 = chronology40.centuries();
        org.joda.time.DurationFieldType durationFieldType47 = durationField46.getType();
        int int48 = period1.get(durationFieldType47);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        int int7 = localDate1.getMonthOfYear();
        int int8 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate localDate10 = localDate1.minusWeeks(31);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology14);
        mutablePeriod15.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod15.add(0L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        mutablePeriod15.add(0L, chronology29);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (-1), chronology29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        int int40 = dateMidnight39.getYearOfEra();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) 10, chronology41);
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight32.toMutableDateTime(chronology41);
        mutableDateTime44.setYear(2022);
        mutableDateTime44.setYear((-1));
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone53);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfWeek();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime50, (org.joda.time.ReadableInstant) dateMidnight56, periodType58);
        org.joda.time.LocalDate localDate60 = localDate1.minus((org.joda.time.ReadablePeriod) period59);
        int int61 = localDate60.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = localDate60.toString("54180883-01-23T15:10:14.512");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 48 + "'", int61 == 48);
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) 100, dateTimeZone2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
        long long18 = dateTimeZone2.getMillisKeepLocal(dateTimeZone15, (long) 667);
        java.lang.String str20 = dateTimeZone2.getShortName(2208986640000L);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeZone2.getShortName(0L, locale22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusSeconds(2);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        long long39 = dateMidnight36.getMillis();
        org.joda.time.DateMidnight.Property property40 = dateMidnight36.weekyear();
        org.joda.time.DateMidnight dateMidnight41 = property40.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight42 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.withField(dateTimeFieldType43, 32769);
        org.joda.time.LocalDateTime.Property property46 = localDateTime32.year();
        org.joda.time.LocalDateTime.Property property47 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime.Property property48 = localDateTime32.minuteOfHour();
        org.joda.time.Period period50 = org.joda.time.Period.years((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime32.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMillis(52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.withZoneRetainFields(dateTimeZone59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        int int65 = dateMidnight64.getYearOfEra();
        org.joda.time.Chronology chronology66 = dateMidnight64.getChronology();
        long long67 = dateMidnight64.getMillis();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period(readableDuration68, readableInstant69);
        org.joda.time.PeriodType periodType71 = period70.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight60, (org.joda.time.ReadableInstant) dateMidnight64, periodType71);
        org.joda.time.PeriodType periodType73 = periodType71.withHoursRemoved();
        org.joda.time.PeriodType periodType74 = periodType71.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) (byte) 100, periodType71);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime53.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod75, (int) (short) 1);
        boolean boolean78 = dateTimeZone2.isLocalDateTimeGap(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 667L + "'", long18 == 667L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-00:00:00.001" + "'", str20, "-00:00:00.001");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-00:00:00.001" + "'", str23, "-00:00:00.001");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645488000001L + "'", long39 == 1645488000001L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(chronology66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645488000001L + "'", long67 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        int int39 = mutableDateTime38.getSecondOfMinute();
        mutableDateTime38.setMillis(36000L);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMillisOfSecond(10);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours(10L);
        long long50 = duration49.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours(10L);
        long long59 = duration58.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        long long65 = dateMidnight62.getMillis();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight62.withMillis((long) 7);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusDays((int) (short) -1);
        long long74 = dateMidnight71.getMillis();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.days();
        org.joda.time.Period period76 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight71, periodType75);
        org.joda.time.MutableDateTime mutableDateTime77 = dateMidnight71.toMutableDateTimeISO();
        int int78 = dateMidnight67.compareTo((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight67.plusWeeks(10);
        org.joda.time.Period period81 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Duration duration84 = duration58.withDurationAdded((long) (short) 1, 100);
        boolean boolean85 = duration49.isEqual((org.joda.time.ReadableDuration) duration58);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration49);
        mutableDateTime38.setWeekyear(1439);
        mutableDateTime38.addMinutes(72494097);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 36000L + "'", long50 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 36000L + "'", long59 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645401600001L + "'", long65 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645401600001L + "'", long74 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (-1), chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight25.toMutableDateTime(chronology34);
        mutableDateTime37.setYear(2022);
        mutableDateTime37.setYear((-1));
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.dayOfYear();
        mutableDateTime37.setMinuteOfHour(4);
        mutableDateTime37.add(53L);
        mutableDateTime37.addMillis((int) (short) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime37.minuteOfHour();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology58);
        mutablePeriod59.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod59.add(0L);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusDays((int) (short) -1);
        int int72 = dateMidnight71.getYearOfEra();
        org.joda.time.Chronology chronology73 = dateMidnight71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology73);
        mutablePeriod59.add(0L, chronology73);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (-1), chronology73);
        org.joda.time.DurationField durationField77 = chronology73.weeks();
        org.joda.time.DateTime dateTime78 = dateMidnight53.toDateTime(chronology73);
        org.joda.time.DateTime dateTime80 = dateTime78.plusMinutes(0);
        org.joda.time.Chronology chronology81 = dateTime78.getChronology();
        mutableDateTime37.setChronology(chronology81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime(2032, 54551288, 908, 951, chronology81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2032 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        java.util.TimeZone timeZone14 = calendar11.getTimeZone();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromCalendarFields(calendar11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10, chronology17);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 10, chronology21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.Period period24 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay18, (org.joda.time.ReadablePartial) timeOfDay22);
        int[] intArray25 = timeOfDay22.getValues();
        org.joda.time.DateTime dateTime26 = timeOfDay22.toDateTimeToday();
        org.joda.time.DateMidnight dateMidnight27 = dateTime26.toDateMidnight();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTime dateTime36 = dateTime26.withDurationAdded((long) ' ', 6);
        org.joda.time.DateMidnight dateMidnight37 = dateTime36.toDateMidnight();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        long long44 = dateMidnight41.getMillis();
        org.joda.time.DateMidnight.Property property45 = dateMidnight41.weekyear();
        org.joda.time.DateMidnight dateMidnight46 = property45.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight47 = property45.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property45.getFieldType();
        org.joda.time.DateTime.Property property49 = dateTime36.property(dateTimeFieldType48);
        boolean boolean50 = timeOfDay15.isSupported(dateTimeFieldType48);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay15.plusMillis(598);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        int int61 = dateMidnight60.getYearOfEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay((long) 156, chronology62);
        org.joda.time.Period period67 = new org.joda.time.Period((-2240584440000L), chronology62);
        org.joda.time.DateTimeField dateTimeField68 = chronology62.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((java.lang.Object) timeOfDay15, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 9]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645488000001L + "'", long44 == 1645488000001L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        int int4 = calendar1.getWeeksInWeekYear();
        calendar1.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(54592577, 54389348, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456239684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=39,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        long long12 = dateMidnight9.getMillis();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.days();
        org.joda.time.Period period14 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight9, periodType13);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtMidnight();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateTime16);
        java.lang.String str18 = interval17.toString();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Interval interval23 = interval20.gap((org.joda.time.ReadableInterval) interval22);
        boolean boolean25 = interval20.isBefore(100L);
        java.lang.String str26 = interval20.toString();
        boolean boolean27 = interval17.isBefore((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period29 = org.joda.time.Period.days(4);
        org.joda.time.Period period31 = period29.plusMinutes(8);
        org.joda.time.Interval interval32 = interval17.withPeriodAfterStart((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period34 = period29.withDays(1969);
        org.joda.time.LocalDate localDate36 = localDate5.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 446);
        org.joda.time.LocalDate.Property property37 = localDate5.dayOfWeek();
        int int38 = localDate5.getDayOfMonth();
        int int39 = localDate5.getDayOfWeek();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateMidnight11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645401600001L + "'", long12 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-21T00:00:00.000-00:00:00.001/2022-02-21T00:00:00.000-00:00:00.001" + "'", str18, "2022-02-21T00:00:00.000-00:00:00.001/2022-02-21T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T00:00:00.000-00:00:00.001/2022-02-22T00:00:00.000-00:00:00.001" + "'", str26, "2022-02-21T00:00:00.000-00:00:00.001/2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        java.util.Date date9 = dateMidnight3.toDate();
        int int10 = date9.getMinutes();
        date9.setHours((int) '#');
        int int13 = date9.getDate();
        date9.setMinutes(921);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Feb 23 02:21:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime.Property property22 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.minuteOfHour();
        org.joda.time.Period period25 = org.joda.time.Period.years((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime7.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusSeconds(2);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        long long43 = dateMidnight40.getMillis();
        org.joda.time.DateMidnight.Property property44 = dateMidnight40.weekyear();
        org.joda.time.DateMidnight dateMidnight45 = property44.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight46 = property44.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property44.getFieldType();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime36.withField(dateTimeFieldType47, 32769);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime36.minusMinutes((int) 'a');
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours(10L);
        long long54 = duration53.getStandardSeconds();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration58 = duration53.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime36.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = duration57.toDuration();
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.parse("2022-02-21");
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays(86400000L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology67);
        mutablePeriod68.setPeriod((long) (short) 10, (long) (short) -1);
        int int73 = mutablePeriod68.getValue(0);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusDays((int) (short) -1);
        org.joda.time.Duration duration78 = mutablePeriod68.toDurationTo((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.ReadableDuration readableDuration79 = null;
        boolean boolean80 = duration78.isShorterThan(readableDuration79);
        boolean boolean81 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight62.plus((org.joda.time.ReadableDuration) duration64);
        int int83 = duration57.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime26.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration86 = duration64.plus(164096150400000L);
        java.lang.Class<?> wildcardClass87 = duration64.getClass();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645488000001L + "'", long43 == 1645488000001L);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 36000L + "'", long54 == 36000L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withMinuteOfHour(21);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.Period period7 = new org.joda.time.Period(1645488000000L, periodType6);
        int int8 = period7.getMinutes();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalTime localTime10 = timeOfDay9.toLocalTime();
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime13 = localTime10.plusMillis((-4046));
        int int14 = localTime13.getMillisOfDay();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86395963 + "'", int14 == 86395963);
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        java.util.Date date5 = new java.util.Date(22, 5, 3, (int) 'a', 1);
        int int6 = date5.getDay();
        date5.setHours((int) (byte) 100);
        date5.setYear(885);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Jun 11 04:01:00 GMT 2785");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (-1), chronology40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight43.toMutableDateTime(chronology52);
        org.joda.time.DurationField durationField56 = chronology52.minutes();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(0L, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(31795200000L, (long) 122, chronology52);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay2.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay2.plusMillis(54346);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withMillisOfSecond(992);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4320000000L);
        java.util.Date date8 = new java.util.Date((int) (short) 0, 11, (int) (short) 0, (int) (short) -1, (int) (byte) 10);
        int int9 = date8.getYear();
        java.util.Calendar.Builder builder10 = builder2.setInstant(date8);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar.Builder builder12 = builder2.setLocale(locale11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Builder builder15 = builder13.setLocale(locale14);
        java.util.Locale locale16 = builder15.build();
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale16);
        java.util.Calendar.Builder builder19 = builder12.setLenient(false);
        java.util.Calendar calendar20 = builder12.build();
        calendar20.set(100, (int) ' ', 68);
        java.lang.String str25 = calendar20.toString();
        org.junit.Assert.assertNotNull(builder2);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Nov 29 23:10:00 GMT 1900");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=32,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=68,DAY_OF_YEAR=333,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=32,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=68,DAY_OF_YEAR=333,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str25, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=32,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=68,DAY_OF_YEAR=333,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        mutableDateTime10.setYear(14);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        long long18 = dateMidnight15.getMillis();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withMillis((long) 7);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        long long27 = dateMidnight24.getMillis();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.Period period29 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight24, periodType28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight24.toMutableDateTimeISO();
        int int31 = dateMidnight20.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight20.dayOfYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight20.withDayOfMonth(4);
        boolean boolean35 = mutableDateTime10.equals((java.lang.Object) dateMidnight34);
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) 565, chronology36);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645401600001L + "'", long18 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645401600001L + "'", long27 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYear(2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4320000000L);
        java.util.Date date4 = new java.util.Date((long) 1);
        date4.setHours(15);
        date4.setMinutes(59);
        java.util.Calendar.Builder builder9 = builder2.setInstant(date4);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Builder builder12 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder13 = builder10.clear();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = builder14.build();
        java.util.Calendar.Builder builder16 = builder9.setLocale(locale15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        long long23 = dateMidnight20.getMillis();
        java.util.Locale locale27 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar28 = dateMidnight20.toCalendar(locale27);
        int int30 = calendar28.getLeastMaximum(3);
        java.util.TimeZone timeZone31 = calendar28.getTimeZone();
        timeZone31.setID("PT0S");
        java.lang.String str34 = timeZone31.getID();
        java.lang.String str35 = timeZone31.getID();
        java.lang.String str36 = timeZone31.getID();
        int int38 = timeZone31.getOffset((-33327363244041L));
        java.util.Calendar.Builder builder39 = builder9.setTimeZone(timeZone31);
        org.junit.Assert.assertNotNull(builder2);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 15:59:00 GMT 1970");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645488000001L + "'", long23 == 1645488000001L);
        org.junit.Assert.assertEquals(locale27.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0S" + "'", str35, "PT0S");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) -1);
        int int2 = localDate1.getWeekOfWeekyear();
        int int3 = localDate1.getDayOfWeek();
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate1.era();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withDayOfYear(22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFieldAdded(durationFieldType24, 54145870);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withWeekyear(54180883);
        int int30 = localDateTime29.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfCentury(26);
        java.lang.String str33 = localDateTime29.toString();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withMillisOfSecond(122);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "54180883-01-23T15:10:37.886" + "'", str33, "54180883-01-23T15:10:37.886");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime17 = dateTime12.plusWeeks(54152181);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str21 = localDate20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) '#');
        int int35 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate localDate37 = localDate34.withYearOfEra((int) '4');
        boolean boolean38 = localDate20.isBefore((org.joda.time.ReadablePartial) localDate37);
        int int39 = localDate20.getCenturyOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withZoneRetainFields(dateTimeZone44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 10, chronology54);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds(14);
        boolean boolean59 = dateMidnight45.isBefore((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = localDate20.equals((java.lang.Object) dateTime58);
        int int61 = localDate20.getDayOfYear();
        org.joda.time.LocalDate.Property property62 = localDate20.weekyear();
        org.joda.time.LocalDate localDate64 = localDate20.plusMonths(0);
        org.joda.time.DateTime dateTime65 = dateTime18.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime65.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        boolean boolean69 = periodType67.equals((java.lang.Object) instant68);
        org.joda.time.Duration duration72 = new org.joda.time.Duration(0L, 3024000001L);
        org.joda.time.Instant instant74 = instant68.withDurationAdded((org.joda.time.ReadableDuration) duration72, 0);
        org.joda.time.Instant instant75 = instant68.toInstant();
        mutableDateTime66.setMillis((org.joda.time.ReadableInstant) instant68);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant75);
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.setTimeInMillis((-1L));
        java.util.TimeZone timeZone6 = calendar1.getTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        long long15 = dateMidnight12.getMillis();
        java.util.Locale locale19 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar20 = dateMidnight12.toCalendar(locale19);
        int int22 = calendar20.getLeastMaximum(3);
        java.util.TimeZone timeZone23 = calendar20.getTimeZone();
        timeZone23.setID("PT0S");
        java.lang.String str26 = timeZone23.getID();
        timeZone23.setID("\ufffd\ufffd");
        java.util.TimeZone.setDefault(timeZone23);
        boolean boolean30 = timeZone7.hasSameRules(timeZone23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645488000001L + "'", long15 == 1645488000001L);
        org.junit.Assert.assertEquals(locale19.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "\ufffd\ufffd,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0S" + "'", str26, "PT0S");
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int7 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology11);
        mutablePeriod12.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod12.add(0L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        mutablePeriod12.add(0L, chronology26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (-1), chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 10, chronology38);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight29.toMutableDateTime(chronology38);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration44);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 10, chronology57);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMonths(10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        int int69 = dateMidnight68.getYearOfEra();
        org.joda.time.Chronology chronology70 = dateMidnight68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 10, chronology70);
        org.joda.time.DateTime dateTime73 = dateTime61.toDateTime(chronology70);
        org.joda.time.DurationField durationField74 = chronology70.days();
        mutablePeriod3.setPeriod((long) 31, 4320000000L, chronology70);
        org.joda.time.DurationField durationField76 = chronology70.centuries();
        boolean boolean77 = durationField76.isPrecise();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        long long6 = java.util.Date.UTC(32769, 54438922, 11, 913, 0, 54360599);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 144192476696999000L + "'", long6 == 144192476696999000L);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.secondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        int int2 = dateMidnight1.getMillisOfSecond();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#', periodType4, chronology5);
        org.joda.time.Period period8 = period6.withDays((int) ' ');
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight1, (org.joda.time.ReadablePeriod) period8);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval11 = yearMonthDay10.toInterval();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        long long18 = dateMidnight15.getMillis();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.Period period20 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight15, periodType19);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime22 = yearMonthDay21.toDateTimeAtMidnight();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean24 = interval11.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval25 = interval9.overlap((org.joda.time.ReadableInterval) interval23);
        long long26 = interval9.getEndMillis();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology30);
        mutablePeriod31.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod31.add(0L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        mutablePeriod31.add(0L, chronology45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (-1), chronology45);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 10, chronology57);
        org.joda.time.MutableDateTime mutableDateTime60 = dateMidnight48.toMutableDateTime(chronology57);
        mutableDateTime60.setYear(2022);
        int int63 = mutableDateTime60.getYearOfEra();
        mutableDateTime60.addMonths(11);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours(10L);
        long long68 = duration67.getStandardSeconds();
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration72 = duration67.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration73 = duration71.toDuration();
        mutableDateTime60.add((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.withZoneRetainFields(dateTimeZone79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(chronology81);
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight82.minusDays((int) (short) -1);
        int int85 = dateMidnight84.getYearOfEra();
        org.joda.time.Chronology chronology86 = dateMidnight84.getChronology();
        long long87 = dateMidnight84.getMillis();
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Period period90 = new org.joda.time.Period(readableDuration88, readableInstant89);
        org.joda.time.PeriodType periodType91 = period90.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight80, (org.joda.time.ReadableInstant) dateMidnight84, periodType91);
        int int93 = dateMidnight80.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight80.plusMonths(363);
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Period period97 = new org.joda.time.Period((java.lang.Object) duration71);
        org.joda.time.Interval interval98 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Days days99 = duration71.toStandardDays();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645401600001L + "'", long18 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(interval25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1648166400036L + "'", long26 == 1648166400036L);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 36000L + "'", long68 == 36000L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertNotNull(chronology86);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645488000001L + "'", long87 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 53 + "'", int93 == 53);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertNotNull(days99);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight9.withWeekyear(59);
        java.util.Locale locale22 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar23 = dateMidnight9.toCalendar(locale22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar23);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645488000001L + "'", long12 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertEquals(locale22.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        java.util.Date date3 = new java.util.Date((-1), (int) (short) 0, 0);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone43);
        mutableDateTime38.setZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = timeOfDay4.toDateTimeToday(dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay4.plusHours(1746000);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 31 00:00:00 GMT+00:00 1898");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay48);
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime.Property property22 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfEvenCopy();
        java.lang.String str27 = property23.getAsString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDate localDate6 = property3.addToCopy((int) (short) -1);
        int int7 = property3.getMaximumValueOverall();
        org.joda.time.LocalDate localDate9 = property3.setCopy((-3));
        org.joda.time.LocalDate localDate11 = localDate9.minusYears(20);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(192);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.LocalDate localDate16 = localDate13.plusYears(36);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970" + "'", str4, "1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        boolean boolean23 = dateTimeFieldType2.isSupported(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.millisOfDay();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((long) 2023, chronology20);
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, chronology20);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        long long2 = duration1.getMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        long long9 = dateMidnight6.getMillis();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight6, periodType10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight6.toMutableDateTimeISO();
        int int13 = mutableDateTime12.getDayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutableDateTime12.setChronology(chronology21);
        org.joda.time.Period period24 = duration1.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setMillisOfDay((int) (byte) 1);
        mutableDateTime12.addWeekyears(2022);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours(10L);
        long long31 = duration30.getStandardSeconds();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration35 = duration30.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.withMillis((long) 19);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours(10L);
        long long40 = duration39.getStandardSeconds();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration44 = duration39.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration45 = duration43.toDuration();
        org.joda.time.Duration duration47 = duration43.plus(0L);
        org.joda.time.Duration duration49 = duration43.plus((-2240611200000L));
        org.joda.time.Duration duration50 = duration34.plus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration43, 8);
        org.joda.time.Duration duration54 = duration43.minus(53L);
        org.joda.time.Duration duration55 = duration43.toDuration();
        java.lang.String str56 = duration55.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays((int) (short) -1);
        int int64 = dateMidnight63.getYearOfEra();
        org.joda.time.Chronology chronology65 = dateMidnight63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology65.getZone();
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(1648166400036L, dateTimeZone68);
        org.joda.time.Chronology chronology72 = localDate71.getChronology();
        org.joda.time.Period period73 = duration55.toPeriod(chronology72);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3024000000L + "'", long2 == 3024000000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645401600001L + "'", long9 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000L + "'", long31 == 36000L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 36000L + "'", long40 == 36000L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1.873S" + "'", str56, "PT1.873S");
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate.Property property11 = localDate9.weekyear();
        org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withYear(32769);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay15.withChronologyRetainFields(chronology17);
        org.joda.time.DateTime dateTime19 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.halfdayOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) '#');
        int int33 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.Period period34 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate35 = localDate32.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period34);
        java.lang.String str37 = yearMonthDay15.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime40 = yearMonthDay15.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.Interval interval41 = localDate12.toInterval(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime7.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight43 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-00:00:00.001" + "'", str5, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-21" + "'", str37, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        int int39 = mutableDateTime33.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime33, readableInstant40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Interval interval43 = interval41.withStart(readableInstant42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration49 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration47, 12);
        long long50 = duration45.getStandardMinutes();
        org.joda.time.Days days51 = duration45.toStandardDays();
        org.joda.time.Interval interval52 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.centuries();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 50400L + "'", long50 == 50400L);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        java.util.TimeZone timeZone14 = calendar11.getTimeZone();
        timeZone14.setID("PT0S");
        java.lang.String str17 = timeZone14.getID();
        java.lang.String str18 = timeZone14.getID();
        java.lang.String str19 = timeZone14.getID();
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str22 = locale20.getDisplayScript();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone14, locale20);
        calendar23.add((int) (byte) 1, 32778);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromCalendarFields(calendar23);
        // The following exception was thrown during execution in test generation
        try {
            calendar23.clear(54492211);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54492211");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0S" + "'", str19, "PT0S");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-CN" + "'", str21, "zh-CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1036019171440304,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=PT0S,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34800,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=40,MILLISECOND=303,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        int int8 = localDateTime5.size();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        int int11 = localDateTime10.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight23.toMutableDateTime(chronology32);
        mutableDateTime35.setYear(2022);
        int int38 = mutableDateTime35.getYearOfEra();
        mutableDateTime35.addMonths(11);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours(10L);
        long long43 = duration42.getStandardSeconds();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration47 = duration42.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration48 = duration46.toDuration();
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration46);
        mutableDateTime35.setMillis((long) 52);
        java.lang.Object obj52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology56);
        mutablePeriod57.setPeriod((long) (short) 10, (long) (short) -1);
        int int62 = mutablePeriod57.getValue(0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        org.joda.time.Duration duration67 = mutablePeriod57.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusDays((int) (short) -1);
        int int74 = dateMidnight73.getYearOfEra();
        org.joda.time.Chronology chronology75 = dateMidnight73.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.halfdayOfDay();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight64, chronology75);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(obj52, periodType53, chronology75);
        mutableDateTime35.setChronology(chronology75);
        mutableDateTime35.addYears(12);
        mutableDateTime35.addWeekyears((-24356254));
        org.joda.time.DateTime dateTime86 = mutableDateTime35.toDateTime();
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardHours((long) 903);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration88);
        boolean boolean90 = duration1.isEqual((org.joda.time.ReadableDuration) duration88);
        org.joda.time.PeriodType periodType91 = null;
        org.joda.time.Period period92 = new org.joda.time.Period((java.lang.Object) duration88, periodType91);
        org.joda.time.Seconds seconds93 = duration88.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 36000L + "'", long43 == 36000L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(seconds93);
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours(10L);
        long long10 = duration9.getStandardSeconds();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration14 = duration9.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.withMillis((long) 19);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight3.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        int int26 = mutablePeriod21.getValue(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        org.joda.time.Duration duration31 = mutablePeriod21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.days();
        org.joda.time.Period period35 = new org.joda.time.Period(1645488000000L, periodType34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        org.joda.time.Period period40 = period35.normalizedStandard(periodType39);
        org.joda.time.Period period41 = duration31.toPeriodTo(readableInstant32, periodType39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.days();
        org.joda.time.Period period43 = duration31.toPeriod(periodType42);
        org.joda.time.Minutes minutes44 = duration31.toStandardMinutes();
        boolean boolean45 = duration13.isEqual((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay((long) 31, chronology56);
        org.joda.time.Period period61 = duration47.toPeriod(chronology56);
        boolean boolean62 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((-45960L));
        org.joda.time.Duration duration66 = duration64.plus((long) 197022);
        int int67 = duration31.compareTo((org.joda.time.ReadableDuration) duration64);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000L + "'", long10 == 36000L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withMillis((long) 7);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight4, periodType10);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period21 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(dateTimeZone24);
        java.util.Date date29 = dateMidnight28.toDate();
        boolean boolean30 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.YearMonthDay yearMonthDay31 = dateMidnight28.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.minusMonths(54145870);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.plusMonths((-100));
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str38 = localDate37.toString();
        org.joda.time.LocalDate.Property property39 = localDate37.weekyear();
        int int40 = localDate37.getCenturyOfEra();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property42 = localDate37.year();
        int int43 = localDate37.getMonthOfYear();
        int int44 = localDate37.getYearOfCentury();
        org.joda.time.LocalDate.Property property45 = localDate37.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime48 = localDate37.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = yearMonthDay35.toDateTimeAtCurrentTime(dateTimeZone47);
        int[] intArray50 = yearMonthDay35.getValues();
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01" + "'", str38, "1970-01-01");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 70 + "'", int44 == 70);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-4510143, 12, 21]");
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.YearMonthDay yearMonthDay2 = dateMidnight1.toYearMonthDay();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration8 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration6, 12);
        org.joda.time.Duration duration9 = duration6.toDuration();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight1.minus((org.joda.time.ReadableDuration) duration9);
        boolean boolean12 = dateMidnight10.isBefore((-63113902859986L));
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType1.getField(chronology20);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.Period period27 = new org.joda.time.Period(1645488000000L, periodType26);
        org.joda.time.Period period28 = period27.normalizedStandard();
        int int29 = period28.getSeconds();
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePeriod) period28, (long) (short) 0);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 2, chronology20);
        org.joda.time.Period period34 = period32.minusMonths(59);
        org.joda.time.Period period36 = period34.minusDays((-292275054));
        org.joda.time.Period period38 = period34.minusHours(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime.Property property22 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minusMonths(10);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.minus((long) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight0.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withYearOfEra(14924914);
        int int9 = dateMidnight8.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 14924914 + "'", int9 == 14924914);
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        java.lang.String str4 = periodType2.getName();
        org.joda.time.Period period5 = new org.joda.time.Period(1645455814568L, (-667L), periodType2);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "YearDayTime" + "'", str4, "YearDayTime");
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        boolean boolean22 = dateTimeFieldType1.isSupported(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.hours();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localTime24.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime24.minus(readablePeriod26);
        org.joda.time.LocalTime localTime29 = localTime27.plusHours(32772);
        org.joda.time.LocalTime.Property property30 = localTime27.hourOfDay();
        org.joda.time.LocalTime localTime31 = property30.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.LocalTime localTime33 = property30.withMaximumValue();
        org.joda.time.LocalTime localTime34 = property30.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withDayOfYear(22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFieldAdded(durationFieldType24, 54145870);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withDayOfYear(12);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.withYear(709);
        org.joda.time.LocalDateTime.Property property32 = localDateTime23.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(2024, (-27423359), 86399, 960005);
        int int5 = mutablePeriod4.getMinutes();
        mutablePeriod4.setMillis(26);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = mutablePeriod4.getValue((-621494782));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -621494782");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-27423359) + "'", int5 == (-27423359));
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property18.addToCopy((int) (byte) 0);
        int int21 = property18.getMaximumValueOverall();
        int int22 = property18.get();
        org.joda.time.DurationField durationField23 = property18.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Tue Mar 11 01:10:00 GMT+00:00 1919");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Tue Mar 11 01:10:00 GMT+00:00 1919\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("de_DE");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        int int5 = timeZone1.getOffset((long) 99);
        boolean boolean6 = timeZone1.observesDaylightTime();
        int int8 = timeZone1.getOffset(0L);
        timeZone1.setRawOffset(2720);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = timeOfDay2.toLocalTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (-1), chronology40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight43.toMutableDateTime(chronology52);
        org.joda.time.DurationField durationField56 = chronology52.minutes();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(0L, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(31795200000L, (long) 122, chronology52);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay2.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        mutablePeriod59.setWeeks(902);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(timeOfDay60);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardHours(10L);
        long long24 = duration23.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight21, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration23);
        long long27 = duration23.getStandardDays();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology30);
        mutablePeriod31.setPeriod((long) (short) 10, (long) (short) -1);
        int int36 = mutablePeriod31.getValue(0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        org.joda.time.Duration duration41 = mutablePeriod31.toDurationTo((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.days();
        org.joda.time.Period period45 = new org.joda.time.Period(1645488000000L, periodType44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration46, readableInstant47);
        org.joda.time.PeriodType periodType49 = period48.getPeriodType();
        org.joda.time.Period period50 = period45.normalizedStandard(periodType49);
        org.joda.time.Period period51 = duration41.toPeriodTo(readableInstant42, periodType49);
        org.joda.time.Duration duration54 = duration41.withDurationAdded((long) 53, 5);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale55);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromCalendarFields(calendar56);
        org.joda.time.DateTime dateTime58 = localTime57.toDateTimeToday();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime62 = dateTime58.withDurationAdded(1645488000001L, 667);
        org.joda.time.DateTime dateTime64 = dateTime58.minusMonths(214);
        org.joda.time.Interval interval65 = duration23.toIntervalFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Seconds seconds66 = duration23.toStandardSeconds();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645488000001L + "'", long12 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000L + "'", long24 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "\ufffd\ufffd,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=40,MILLISECOND=605,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(seconds66);
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Period period6 = new org.joda.time.Period();
        boolean boolean7 = duration1.equals((java.lang.Object) period6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight9.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight9.minus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology26);
        mutablePeriod27.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod27.add(0L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        int int40 = dateMidnight39.getYearOfEra();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology41);
        mutablePeriod27.add(0L, chronology41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (-1), chronology41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 10, chronology53);
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight44.toMutableDateTime(chronology53);
        mutableDateTime56.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime56.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime56.toMutableDateTime(dateTimeZone60);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = yearMonthDay62.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay62.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime56, (org.joda.time.ReadableInstant) dateTime65);
        mutableDateTime56.addYears(9);
        mutableDateTime56.addYears(59);
        org.joda.time.Interval interval71 = duration1.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime56);
        mutableDateTime56.setMinuteOfHour(42);
        mutableDateTime56.setTime(868L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval71);
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime40, dateTimeZone42);
        boolean boolean45 = dateTimeZone42.isFixed();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(14400004L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds(4);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.LocalTime localTime17 = property16.withMaximumValue();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.Period period20 = new org.joda.time.Period(1645488000000L, periodType19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(periodType19);
        org.joda.time.PeriodType periodType22 = periodType19.withDaysRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime1, (org.joda.time.ReadablePartial) localTime17, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withSecondsRemoved();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.secondOfMinute();
        java.lang.String str37 = property36.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.roundFloor();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str44 = localDate43.toString();
        org.joda.time.LocalDate.Property property45 = localDate43.weekyear();
        int int46 = localDate43.getCenturyOfEra();
        org.joda.time.LocalDate.Property property47 = localDate43.weekOfWeekyear();
        org.joda.time.LocalDate.Property property48 = localDate43.year();
        int int49 = property48.get();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str52 = localDate51.toString();
        org.joda.time.LocalDate.Property property53 = localDate51.weekyear();
        int int54 = localDate51.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = localDate51.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property56 = localDate51.year();
        int int57 = localDate51.getMonthOfYear();
        org.joda.time.LocalDate localDate59 = localDate51.withYear(5);
        org.joda.time.LocalDate.Property property60 = localDate59.year();
        boolean boolean61 = property48.equals((java.lang.Object) property60);
        int int62 = property48.get();
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        boolean boolean64 = locale63.hasExtensions();
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale locale66 = builder65.build();
        java.lang.String str67 = locale66.getScript();
        java.lang.String str68 = locale63.getDisplayVariant(locale66);
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleAttributes();
        int int70 = property48.getMaximumTextLength(locale66);
        java.util.Calendar calendar71 = mutableDateTime39.toCalendar(locale66);
        calendar71.setLenient(false);
        long long74 = calendar71.getTimeInMillis();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 19 + "'", int54 == 19);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=-86399999,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-86399999L) + "'", long74 == (-86399999L));
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        int int39 = mutableDateTime33.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime33, readableInstant40);
        java.lang.String str42 = mutableDateTime33.toString();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.roundHalfCeiling();
        mutableDateTime44.setSecondOfMinute(36);
        mutableDateTime44.addWeeks(424);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-0001-12-31T00:00:00.000-00:00:00.001" + "'", str42, "-0001-12-31T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        int int10 = mutableDateTime9.getDayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutableDateTime9.setChronology(chronology18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds(14);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime33.withDurationAdded(readableDuration36, (int) (short) 100);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear(292269054);
        org.joda.time.DateTime dateTime42 = dateTime40.minusHours((int) (short) 1);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateTime42);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setTime(999, 17, 758, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMonths(10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 10, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(chronology23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 24, (long) '#', chronology23);
        mutablePeriod27.setHours((int) (short) 0);
        mutablePeriod27.setMillis((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) (byte) 100);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology39);
        mutablePeriod40.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod40.add(0L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology54);
        mutablePeriod40.add(0L, chronology54);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (-1), chronology54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        int int65 = dateMidnight64.getYearOfEra();
        org.joda.time.Chronology chronology66 = dateMidnight64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 10, chronology66);
        org.joda.time.MutableDateTime mutableDateTime69 = dateMidnight57.toMutableDateTime(chronology66);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusDays((int) (short) -1);
        int int76 = dateMidnight75.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateMidnight75.getChronology();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology77);
        org.joda.time.DateTimeField dateTimeField79 = chronology77.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.halfdayOfDay();
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) '#');
        int int83 = dateTimeField80.getMinimumValue((org.joda.time.ReadablePartial) localDate82);
        org.joda.time.Period period84 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate85 = localDate82.plus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Hours hours86 = period84.toStandardHours();
        int[] intArray88 = chronology66.get((org.joda.time.ReadablePeriod) period84, 2L);
        mutablePeriod34.add((long) 11, chronology66);
        org.joda.time.DateMidnight dateMidnight90 = org.joda.time.DateMidnight.now(chronology66);
        mutablePeriod27.add(4320000000L, chronology66);
        mutablePeriod27.addMinutes(54153800);
        mutablePeriod27.addDays(54399444);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(hours86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateMidnight90);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime17 = property14.roundFloorCopy();
        org.joda.time.LocalTime localTime18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime20 = property14.setCopy(11);
        org.joda.time.LocalTime localTime22 = property14.addCopy((long) (short) 1);
        org.joda.time.LocalTime localTime24 = property14.addCopy(600L);
        org.joda.time.LocalTime localTime26 = localTime24.minusSeconds(12);
        org.joda.time.LocalTime localTime28 = localTime26.withMinuteOfHour(6);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.days();
        org.joda.time.Period period33 = new org.joda.time.Period(1645488000000L, periodType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.clockhourOfDay();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (short) 100, chronology44);
        org.joda.time.DurationField durationField48 = durationFieldType35.getField(chronology44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfDay();
        org.joda.time.DurationField durationField56 = durationFieldType35.getField(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.clockhourOfHalfday();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology60);
        mutablePeriod61.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod61.addMonths((int) (byte) -1);
        mutablePeriod61.addWeeks(1969);
        mutablePeriod61.add((long) 'a');
        int[] intArray73 = chronology54.get((org.joda.time.ReadablePeriod) mutablePeriod61, (long) 21, (long) 59);
        org.joda.time.Period period74 = new org.joda.time.Period(1000L, 5907L, periodType32, chronology54);
        org.joda.time.Period period76 = period74.multipliedBy(361);
        org.joda.time.LocalTime localTime77 = localTime26.plus((org.joda.time.ReadablePeriod) period74);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, 38]");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(localTime77);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutableDateTime10.setChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.era();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(31556952000L, chronology19);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.withMonthOfYear(2);
        int int12 = dateMidnight11.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property13 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight14 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate5 = localDate1.plusWeeks((int) (byte) 1);
        java.util.Date date7 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date7);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.getYearMonthDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DateTime dateTime22 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone21);
        long long24 = dateTimeZone21.previousTransition((long) '#');
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime26 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate28 = localDate5.minusYears((-1));
        int int29 = localDate28.getMonthOfYear();
        org.joda.time.LocalDate localDate31 = localDate28.plusMonths(19);
        org.joda.time.LocalDate.Property property32 = localDate31.weekyear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.minusSeconds(321);
        org.joda.time.DateTime dateTime5 = localTime1.toDateTimeToday();
        org.joda.time.LocalTime localTime7 = localTime1.minusSeconds(579);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        java.lang.String str7 = localDateTime3.toString("1970-01-01");
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis(1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(53);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusDays(339);
        int int18 = localDateTime17.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2023 + "'", int18 == 2023);
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        int int6 = dateTimeFormatter5.getDefaultYear();
        boolean boolean7 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear(32772);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) '#');
        int int23 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate localDate25 = localDate22.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField27 = localDate22.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate22.plusYears(8);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = localDate22.toString("52", locale31);
        java.util.Locale locale34 = new java.util.Locale("PT36001.873S");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.halfdayOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) '#');
        int int48 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField52 = localDate47.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate54 = localDate47.plusYears(8);
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = localDate47.toString("52", locale56);
        java.lang.String str58 = locale56.getLanguage();
        java.lang.String str59 = locale34.getDisplayLanguage(locale56);
        java.lang.String str60 = locale31.getDisplayLanguage(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter9.withLocale(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter61.withZoneUTC();
        java.io.Writer writer63 = null;
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay((long) 10, chronology65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = timeOfDay66.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay66.plusSeconds((int) '4');
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay69.plusHours(50);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter61.printTo(writer63, (org.joda.time.ReadablePartial) timeOfDay71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertEquals(locale34.toString(), "pt36001.873s");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "en" + "'", str58, "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "pt36001.873s" + "'", str59, "pt36001.873s");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English" + "'", str60, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(timeOfDay71);
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.Interval interval4 = new org.joda.time.Interval(7L, 1645455854250L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusSeconds(2);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        long long19 = dateMidnight16.getMillis();
        org.joda.time.DateMidnight.Property property20 = dateMidnight16.weekyear();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property20.getFieldType();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.withField(dateTimeFieldType23, 32769);
        org.joda.time.LocalDateTime.Property property26 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property27 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusSeconds(2);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        long long43 = dateMidnight40.getMillis();
        org.joda.time.DateMidnight.Property property44 = dateMidnight40.weekyear();
        org.joda.time.DateMidnight dateMidnight45 = property44.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight46 = property44.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property44.getFieldType();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime36.withField(dateTimeFieldType47, 32769);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime36.minusMinutes((int) 'a');
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours(10L);
        long long54 = duration53.getStandardSeconds();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration58 = duration53.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime36.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = duration57.toDuration();
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.parse("2022-02-21");
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays(86400000L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology67);
        mutablePeriod68.setPeriod((long) (short) 10, (long) (short) -1);
        int int73 = mutablePeriod68.getValue(0);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusDays((int) (short) -1);
        org.joda.time.Duration duration78 = mutablePeriod68.toDurationTo((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.ReadableDuration readableDuration79 = null;
        boolean boolean80 = duration78.isShorterThan(readableDuration79);
        boolean boolean81 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight62.plus((org.joda.time.ReadableDuration) duration64);
        int int83 = duration57.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime28.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval85 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        long long86 = duration64.getStandardDays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645488000001L + "'", long19 == 1645488000001L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645488000001L + "'", long43 == 1645488000001L);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 36000L + "'", long54 == 36000L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 86400000L + "'", long86 == 86400000L);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4320000000L);
        java.util.Date date4 = new java.util.Date((long) 1);
        date4.setHours(15);
        date4.setMinutes(59);
        java.util.Calendar.Builder builder9 = builder2.setInstant(date4);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        calendar11.setFirstDayOfWeek(24);
        calendar11.setTimeInMillis((-1L));
        java.util.TimeZone timeZone16 = calendar11.getTimeZone();
        java.util.Date date20 = new java.util.Date((-1), (int) (short) 0, 0);
        date20.setMonth((int) (short) 10);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date20);
        int int24 = date20.getYear();
        java.util.Date date28 = new java.util.Date(363, (int) (byte) 1, 5);
        date28.setHours(0);
        boolean boolean31 = date20.before(date28);
        java.util.Date date33 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromDateFields(date33);
        boolean boolean35 = date20.after(date33);
        calendar11.setTime(date33);
        boolean boolean37 = date4.after(date33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 15:59:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "\ufffd\ufffd,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date20.toString(), "Thu Dec 01 00:00:00 GMT+00:00 1898");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-2) + "'", int24 == (-2));
        org.junit.Assert.assertEquals(date28.toString(), "Thu Feb 05 00:00:00 GMT+00:00 2263");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationField durationField13 = durationFieldType0.getField(chronology9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField21 = durationFieldType0.getField(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.hours();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfYear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((long) 10, chronology26);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) 10, chronology30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = timeOfDay31.getFields();
        org.joda.time.Period period33 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay27, (org.joda.time.ReadablePartial) timeOfDay31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean35 = timeOfDay31.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        boolean boolean46 = dateTimeFieldType34.isSupported(chronology43);
        org.joda.time.DateTime dateTime48 = dateTime24.withField(dateTimeFieldType34, 6);
        org.joda.time.DateTime dateTime50 = dateTime48.withCenturyOfEra(16);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(50401);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.Instant instant57 = instant54.minus(7L);
        long long58 = instant57.getMillis();
        org.joda.time.DateTime dateTime59 = instant57.toDateTime();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-7L) + "'", long58 == (-7L));
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.setTimeInMillis((-1L));
        java.util.TimeZone timeZone6 = calendar1.getTimeZone();
        java.lang.String str7 = timeZone6.getID();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('u', "70");
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology22);
        mutablePeriod23.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod23.add(0L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        mutablePeriod23.add(0L, chronology37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (-1), chronology37);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType18.getField(chronology37);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 21, chronology37);
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-23641), chronology37);
        org.joda.time.DateTimeField dateTimeField44 = chronology37.minuteOfDay();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) 70, (long) 667, chronology37);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromMillisOfDay((long) 366, chronology37);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(666L, chronology37, locale47);
        java.util.Locale.Builder builder50 = builder8.setLocale(locale47);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone6, locale47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = calendar51.isSet(54344332);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54344332");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "\ufffd\ufffd,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=998,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ufffd\ufffd" + "'", str7, "\ufffd\ufffd");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "jpn" + "'", str48, "jpn");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "\ufffd\ufffd,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=41,MILLISECOND=7,ZONE_OFFSET=-1,DST_OFFSET=0]");
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        calendar1.roll((int) (short) 0, true);
        calendar1.set(32772, 19, 1969, 31, 22);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds(9);
        boolean boolean25 = calendar1.before((java.lang.Object) dateTime22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology28);
        mutablePeriod29.setPeriod((long) (short) 10, (long) (short) -1);
        int int34 = mutablePeriod29.getValue(0);
        mutablePeriod29.addMinutes(0);
        mutablePeriod29.setMonths((int) (byte) 10);
        boolean boolean39 = calendar1.after((java.lang.Object) mutablePeriod29);
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withMillisOfSecond(292275055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292275055 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "\ufffd\ufffd,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32778,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=356,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=41,MILLISECOND=42,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(968, 54592005, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 968 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(598);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) '#');
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekOfWeekyear(44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(1746000, 59, (-2023));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        boolean boolean22 = dateTimeFieldType1.isSupported(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.hours();
        org.joda.time.DurationField durationField24 = chronology19.weeks();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours(10L);
        long long31 = duration30.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period33 = duration30.toPeriod();
        org.joda.time.Period period35 = period33.withMinutes(69);
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period33, 1645487040000L, (long) 53);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(31618151999L, chronology19);
        org.joda.time.DateTimeField dateTimeField40 = chronology19.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000L + "'", long31 == 36000L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-52, -1, -2, -6, -23, -43, -59, -947]");
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4320000000L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) (short) 100);
        java.util.Calendar.Builder builder6 = builder2.setLenient(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType2.getField(chronology21);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology21.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.millisOfDay();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((-49L), chronology21);
        org.joda.time.DurationField durationField30 = chronology21.months();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 16, chronology21);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear((int) (short) 1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withWeekOfWeekyear(12);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        long long60 = dateMidnight57.getMillis();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableDuration61, readableInstant62);
        org.joda.time.PeriodType periodType64 = period63.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableInstant) dateMidnight57, periodType64);
        int int66 = dateMidnight53.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight53.plusMonths(363);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean70 = dateMidnight68.equals((java.lang.Object) dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType69.getDurationType();
        boolean boolean72 = dateMidnight47.isSupported(dateTimeFieldType69);
        boolean boolean73 = localDateTime38.isSupported(dateTimeFieldType69);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = localTime31.get(dateTimeFieldType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645488000001L + "'", long60 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 53 + "'", int66 == 53);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology2);
        mutablePeriod3.setPeriod((long) (short) 10, (long) (short) -1);
        int int8 = mutablePeriod3.getValue(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration13 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        long long20 = dateMidnight17.getMillis();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.days();
        org.joda.time.Period period22 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight17, periodType21);
        java.util.Date date23 = dateMidnight17.toDate();
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromDateFields(date23);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight10.withFields((org.joda.time.ReadablePartial) timeOfDay24);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#', periodType27, chronology28);
        org.joda.time.Period period31 = period29.withDays((int) ' ');
        org.joda.time.Period period33 = period31.minusMonths((int) (byte) 0);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight25, (org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight25.withWeekyear(20);
        java.util.Date date37 = dateMidnight36.toDate();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.minusYears(32770);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.minusDays(2720);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusWeeks(292269054);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays(105);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateMidnight19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645401600001L + "'", long20 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 19 00:00:00 GMT+00:00 20");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        long long22 = dateMidnight19.getMillis();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = period25.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateMidnight19, periodType26);
        mutablePeriod27.add(0L);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.setMinutes(667);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology37);
        mutablePeriod38.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod38.add(0L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        mutablePeriod38.add(0L, chronology52);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (-1), chronology52);
        org.joda.time.DurationField durationField56 = chronology52.weeks();
        org.joda.time.DateTimeField dateTimeField57 = chronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.millisOfDay();
        mutablePeriod27.setPeriod((-27424800L), chronology52);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology52);
        mutableDateTime60.setMillisOfDay(31);
        mutableDateTime60.addHours(66);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645488000001L + "'", long22 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ISOChronology[Etc/UTC]");
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        boolean boolean6 = timeZone5.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        long long4 = dateMidnight1.getMillis();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withMillis((long) 7);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        long long13 = dateMidnight10.getMillis();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.days();
        org.joda.time.Period period15 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight10.toMutableDateTimeISO();
        int int17 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight6.dayOfYear();
        org.joda.time.DateMidnight dateMidnight19 = property18.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight21 = property18.addToCopy(5);
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((long) 10, chronology24);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = timeOfDay25.getFields();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((long) 10, chronology28);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = timeOfDay29.getFields();
        org.joda.time.Period period31 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay25, (org.joda.time.ReadablePartial) timeOfDay29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((long) 10, chronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay34.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay34.plusSeconds((int) '4');
        int int38 = timeOfDay25.compareTo((org.joda.time.ReadablePartial) timeOfDay34);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay25.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property41 = timeOfDay25.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = property41.getAsText(locale43);
        java.util.Locale.setDefault(category22, locale43);
        java.lang.String str46 = locale43.getISO3Language();
        int int47 = property18.getMaximumTextLength(locale43);
        java.util.Locale locale48 = null;
        java.lang.String str49 = property18.getAsText(locale48);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645401600001L + "'", long4 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateMidnight12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645401600001L + "'", long13 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property3.addToCopy(903);
        java.util.Date date8 = localDate7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) (short) -1);
        int int16 = dateMidnight15.getYearOfEra();
        org.joda.time.Chronology chronology17 = dateMidnight15.getChronology();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) '#');
        int int23 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.Period period24 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate25 = localDate22.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Hours hours26 = period24.toStandardHours();
        org.joda.time.Period period28 = org.joda.time.Period.hours(3);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.millisOfDay();
        org.joda.time.DateTime dateTime51 = dateTime40.withChronology(chronology48);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 22, chronology48);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.days();
        org.joda.time.Period period55 = new org.joda.time.Period(1645488000000L, periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.seconds();
        boolean boolean57 = periodType54.isSupported(durationFieldType56);
        org.joda.time.Period period59 = period52.withFieldAdded(durationFieldType56, (-292275054));
        boolean boolean60 = period28.isSupported(durationFieldType56);
        int int61 = hours26.get(durationFieldType56);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) hours26, 960052);
        int int64 = yearMonthDay63.getMonthOfYear();
        int int65 = yearMonthDay63.getDayOfMonth();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 05 00:00:00 GMT 2873");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        org.joda.time.DurationField durationField35 = chronology31.minutes();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(chronology31);
        org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.now(chronology31);
        org.joda.time.DateTimeField dateTimeField38 = chronology31.secondOfMinute();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(1130716800000L, chronology31);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        java.util.Date date1 = new java.util.Date((long) 10);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime10.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime10.minus(4320000000L);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfSecond(72494097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72494097 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra(999);
        int int21 = localDateTime20.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusDays(920);
        int int24 = localDateTime23.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99970 + "'", int24 == 99970);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        int int61 = mutableDateTime48.getMillisOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(chronology62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusDays((int) (short) -1);
        int int66 = dateMidnight65.getYearOfEra();
        org.joda.time.Chronology chronology67 = dateMidnight65.getChronology();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight65.toMutableDateTime();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime48, (org.joda.time.ReadableInstant) dateMidnight65, periodType69);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(dateTimeZone72);
        int int75 = dateTimeZone72.getOffsetFromLocal((long) 1970);
        mutableDateTime48.setZone(dateTimeZone72);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime78 = yearMonthDay77.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay77.withYear(9);
        org.joda.time.DateTime dateTime81 = yearMonthDay80.toDateTimeAtCurrentTime();
        boolean boolean82 = mutableDateTime48.isAfter((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime81, readableDuration83);
        org.joda.time.DateTime dateTime85 = dateTime81.toDateTime();
        org.joda.time.DateTime dateTime87 = dateTime81.withMillisOfSecond(586);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.joda.time.Period period1 = org.joda.time.Period.days(54475);
        org.joda.time.Period period3 = period1.minusYears(36);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField(chronology19);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.Period period26 = new org.joda.time.Period(1645488000000L, periodType25);
        org.joda.time.Period period27 = period26.normalizedStandard();
        int int28 = period27.getSeconds();
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) period27, (long) (short) 0);
        int int31 = period27.getHours();
        int int32 = period27.getMinutes();
        int int33 = period27.getSeconds();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "DateTimeField[clockhourOfDay]", "PT0S");
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = nameProvider5.getShortName(locale6, "DateTimeField[clockhourOfDay]", "PT0S");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours(7);
        int int24 = dateTime23.getCenturyOfEra();
        int int25 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTime.Property property26 = dateTime23.monthOfYear();
        java.util.Locale locale30 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String str33 = locale31.getDisplayCountry();
        java.lang.String str34 = locale30.getDisplayScript(locale31);
        java.lang.String str35 = locale31.getDisplayScript();
        int int36 = property26.getMaximumTextLength(locale31);
        java.lang.String str39 = nameProvider5.getName(locale31, "und-IT", "\u97d3\u56fd\u8a9e\u5927\u97d3\u6c11\u56fd)");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider5);
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str44 = locale41.getExtension('a');
        java.lang.String str47 = nameProvider5.getShortName(locale41, "1970-01-02T00:00:00.000+528:16", "91");
        java.lang.String str48 = locale1.getDisplayScript(locale41);
        java.lang.String str49 = locale41.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals(locale30.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u65e5\u672c" + "'", str33, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "de" + "'", str42, "de");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u30c9\u30a4\u30c4" + "'", str49, "\u30c9\u30a4\u30c4");
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        int int36 = mutableDateTime33.getYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 10, chronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.minusHours(7);
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears((int) (byte) 0);
        int int60 = dateTime59.getMonthOfYear();
        org.joda.time.Interval interval61 = duration43.toIntervalFrom((org.joda.time.ReadableInstant) dateTime59);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration43, (-23641));
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime33.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setMonthOfYear(15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1969 + "'", int36 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 12 + "'", int60 == 12);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292281016 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) 10, chronology2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = timeOfDay3.getFields();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        boolean boolean22 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        boolean boolean30 = dateTimeFieldType10.isSupported(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) 823, chronology28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateMidnight31, readableInstant32);
        org.joda.time.Duration duration35 = duration33.minus(7195305600000L);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) 32769, 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology9);
        mutablePeriod10.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod10.add(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        mutablePeriod10.add(0L, chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 0, (long) 6, chronology24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology24);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(chronology24);
        java.util.Date date30 = localDate29.toDate();
        date30.setMinutes(50);
        int int33 = date30.getTimezoneOffset();
        int int34 = date30.getMonth();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.fromDateFields(date30);
        int int36 = localDate35.size();
        org.joda.time.LocalDate.Property property37 = localDate35.dayOfMonth();
        org.joda.time.LocalDate localDate38 = property37.roundHalfEvenCopy();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 10, chronology47);
        org.joda.time.DateTime dateTime51 = dateTime49.minusHours(7);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime.Property property55 = dateTime51.property(dateTimeFieldType54);
        java.lang.String str56 = dateTimeFieldType54.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate58 = localDate38.withField(dateTimeFieldType54, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:50:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hourOfHalfday" + "'", str56, "hourOfHalfday");
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(2024);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears(59);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusHours(11970);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withCenturyOfEra(960005);
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        java.util.Date date3 = new java.util.Date((-1), (int) (short) 0, 0);
        date3.setMonth((int) (short) 10);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date3);
        int int7 = date3.getYear();
        java.util.Date date11 = new java.util.Date(363, (int) (byte) 1, 5);
        date11.setHours(0);
        boolean boolean14 = date3.before(date11);
        java.util.Date date16 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromDateFields(date16);
        boolean boolean18 = date3.after(date16);
        java.util.Date date22 = new java.util.Date(363, (int) (byte) 1, 5);
        date22.setHours(0);
        long long25 = date22.getTime();
        java.util.Date date29 = new java.util.Date((-1), (int) (short) 0, 0);
        int int30 = date29.getDate();
        int int31 = date29.getMonth();
        boolean boolean32 = date22.before(date29);
        boolean boolean33 = date3.before(date29);
        int int34 = date3.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Dec 01 00:00:00 GMT+00:00 1898");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Feb 05 00:00:00 GMT+00:00 2263");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Feb 05 00:00:00 GMT+00:00 2263");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 9249206399999L + "'", long25 == 9249206399999L);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Sat Dec 31 00:00:00 GMT+00:00 1898");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getHourOfDay();
        int int2 = localTime0.size();
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property3.setCopy("21");
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime9 = localTime7.plusHours(54272243);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 15 + "'", int1 == 15);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear(2022);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra(53);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMillis((-292275054));
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusDays((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withMinuteOfHour((-59));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -59 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) 24);
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        int int7 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYear((int) (short) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((-292275054));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfMonth(3);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMinutes(54191870);
        boolean boolean27 = localDateTime10.equals((java.lang.Object) localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime10.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime10.plusYears(59);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(361);
        boolean boolean29 = dateTime27.isBefore(1091870582400000L);
        org.joda.time.DateTime dateTime31 = dateTime27.withWeekyear(44152);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime27.withChronology(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.withMonthOfYear(2);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (short) 100, chronology20);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight3.withChronology(chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        int int34 = mutablePeriod33.getDays();
        mutablePeriod33.setValue(0, 10);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight24.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withWeekOfWeekyear(11);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        long long47 = dateMidnight44.getMillis();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.days();
        org.joda.time.Period period49 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight44, periodType48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight44.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight44.withMonthOfYear(2);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusDays((int) (short) -1);
        int int60 = dateMidnight59.getYearOfEra();
        org.joda.time.Chronology chronology61 = dateMidnight59.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfDay();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) (short) 100, chronology61);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight44.withChronology(chronology61);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusDays((int) (short) -1);
        int int72 = dateMidnight71.getYearOfEra();
        org.joda.time.Chronology chronology73 = dateMidnight71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology73);
        int int75 = mutablePeriod74.getDays();
        mutablePeriod74.setValue(0, 10);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight65.plus((org.joda.time.ReadablePeriod) mutablePeriod74);
        int int80 = dateMidnight65.getMinuteOfHour();
        boolean boolean81 = dateMidnight38.isAfter((org.joda.time.ReadableInstant) dateMidnight65);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645401600001L + "'", long47 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        long long14 = chronology8.add(122L, (long) '#', 365);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.clockhourOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DateTimeZone dateTimeZone17 = chronology8.getZone();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 12897L + "'", long14 == 12897L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime10);
        java.lang.String str12 = interval11.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval16 = yearMonthDay15.toInterval();
        org.joda.time.Interval interval17 = interval14.gap((org.joda.time.ReadableInterval) interval16);
        boolean boolean19 = interval14.isBefore(100L);
        java.lang.String str20 = interval14.toString();
        boolean boolean21 = interval11.isBefore((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Chronology chronology22 = interval11.getChronology();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.Period period25 = new org.joda.time.Period(1645488000000L, periodType24);
        org.joda.time.Period period26 = period25.normalizedStandard();
        int[] intArray27 = period25.getValues();
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period25);
        long long29 = interval28.toDurationMillis();
        org.joda.time.Period period31 = org.joda.time.Period.weeks(446);
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart((org.joda.time.ReadablePeriod) period31);
        org.joda.time.MutableInterval mutableInterval33 = interval28.toMutableInterval();
        boolean boolean34 = interval28.isBeforeNow();
        org.joda.time.Duration duration35 = interval28.toDuration();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T00:00:00.000-00:00:00.001/2022-02-21T00:00:00.000-00:00:00.001" + "'", str12, "2022-02-21T00:00:00.000-00:00:00.001/2022-02-21T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-21T00:00:00.000-00:00:00.001/2022-02-22T00:00:00.000-00:00:00.001" + "'", str20, "2022-02-21T00:00:00.000-00:00:00.001/2022-02-22T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[19045]");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645488000000L + "'", long29 == 1645488000000L);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale locale7 = java.util.Locale.PRC;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.getCountry();
        java.util.Locale.Builder builder10 = builder6.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder6.setLanguage("P4DT8M");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: P4DT8M [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CN" + "'", str9, "CN");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay19 = property18.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.plusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay19.minusMillis(55509);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        java.util.TimeZone timeZone12 = calendar11.getTimeZone();
        java.util.Date date18 = new java.util.Date(19, 0, 70, (int) (byte) 1, 10);
        calendar11.setTime(date18);
        java.lang.String str20 = date18.toGMTString();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1603493400001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1919,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=70,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=9,SECOND=59,MILLISECOND=998,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Mar 11 01:10:00 GMT+00:00 1919");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "11 Mar 1919 01:09:59 GMT" + "'", str20, "11 Mar 1919 01:09:59 GMT");
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        int int15 = dateTime14.getMonthOfYear();
        int int16 = dateTime14.getYearOfEra();
        int int17 = dateTime14.getMillisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfDay(44);
        org.joda.time.DateTime.Property property22 = dateTime19.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        long long1 = instant0.getMillis();
        org.joda.time.Instant instant3 = instant0.withMillis(8L);
        org.joda.time.Chronology chronology4 = instant0.getChronology();
        org.junit.Assert.assertNotNull(instant0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456241755L + "'", long1 == 1645456241755L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "DateTimeField[clockhourOfDay]", "PT0S");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.minusSeconds(4);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfMonth(2);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((java.lang.Object) chronology26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((long) 10, chronology30);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = timeOfDay31.getFields();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((long) 10, chronology34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay31, (org.joda.time.ReadablePartial) timeOfDay35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean39 = timeOfDay35.isSupported(dateTimeFieldType38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.clockhourOfDay();
        boolean boolean50 = dateTimeFieldType38.isSupported(chronology47);
        boolean boolean51 = localTime28.isSupported(dateTimeFieldType38);
        org.joda.time.LocalTime localTime53 = localTime28.plusHours(11);
        org.joda.time.LocalTime localTime55 = localTime28.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        boolean boolean57 = localTime55.isSupported(dateTimeFieldType56);
        org.joda.time.DateTime.Property property58 = dateTime20.property(dateTimeFieldType56);
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = nameProvider59.getShortName(locale60, "DateTimeField[clockhourOfDay]", "PT0S");
        java.lang.String str64 = locale60.getLanguage();
        int int65 = property58.getMaximumTextLength(locale60);
        java.lang.String str68 = nameProvider0.getName(locale60, "870", "jpn");
        java.util.Locale locale69 = null;
        java.lang.String str72 = nameProvider0.getName(locale69, "ko", "Property[centuryOfEra]");
        java.util.Locale locale75 = new java.util.Locale("DateTimeField[yearOfEra]", "ISOChronology[-00:00:00.001]");
        java.lang.String str78 = nameProvider0.getShortName(locale75, "15:09:28.021", "1969-12-31T17:00:00.009-00:00:00.001");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 910 + "'", int23 == 910);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zh" + "'", str64, "zh");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals(locale75.toString(), "datetimefield[yearofera]_ISOCHRONOLOGY[-00:00:00.001]");
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours(10L);
        long long8 = duration7.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration7, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3, dateTimeZone12);
        int int17 = localDateTime15.getValue((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusHours(14400000);
        int int20 = localDateTime19.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 36000L + "'", long8 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology13);
        mutablePeriod14.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod14.add(0L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        mutablePeriod14.add(0L, chronology28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) 0, (long) 6, chronology28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology28);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology28);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str36 = localDate35.toString();
        org.joda.time.LocalDate.Property property37 = localDate35.weekyear();
        int int38 = localDate35.getCenturyOfEra();
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property40 = localDate35.year();
        org.joda.time.LocalDate localDate42 = localDate35.withYearOfEra(22);
        int int43 = localDate35.getDayOfYear();
        org.joda.time.LocalDate localDate45 = localDate35.plusWeeks(414);
        long long47 = chronology28.set((org.joda.time.ReadablePartial) localDate45, 1645974155242L);
        org.joda.time.DateTimeField dateTimeField48 = chronology28.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(chronology28);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (-10), 2922789, 126, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -10 for minuteOfHour must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 19 + "'", int38 == 19);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 250441355242L + "'", long47 == 250441355242L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = yearMonthDay0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonthDay0.getFieldType((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay0.withYear(156);
        java.lang.String str9 = yearMonthDay0.toString("\u30d5\u30e9\u30f3\u30b9");
        org.joda.time.DateTime dateTime10 = yearMonthDay0.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str9, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond(10);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardHours(10L);
        long long11 = duration10.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration10, (int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours(10L);
        long long20 = duration19.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        long long26 = dateMidnight23.getMillis();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withMillis((long) 7);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        long long35 = dateMidnight32.getMillis();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.Period period37 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight32, periodType36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight32.toMutableDateTimeISO();
        int int39 = dateMidnight28.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight28.plusWeeks(10);
        org.joda.time.Period period42 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Duration duration45 = duration19.withDurationAdded((long) (short) 1, 100);
        boolean boolean46 = duration10.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Instant instant47 = instant1.minus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateTime dateTime48 = instant1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime49 = instant1.toMutableDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000L + "'", long11 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 36000L + "'", long20 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645401600001L + "'", long26 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645401600001L + "'", long35 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        java.util.Date date3 = new java.util.Date(363, (int) (byte) 1, 5);
        date3.setHours(0);
        long long6 = date3.getTime();
        date3.setSeconds(528);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Feb 05 00:08:48 GMT+00:00 2263");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9249206399999L + "'", long6 == 9249206399999L);
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property18.addNoWrapToCopy((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        org.joda.time.TimeOfDay timeOfDay24 = property18.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "70");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension('x', "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ??????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withWeekOfWeekyear(12);
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withYear((-23641));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        long long15 = dateMidnight12.getMillis();
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.weekyear();
        org.joda.time.DateMidnight dateMidnight17 = property16.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight18 = property16.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property16.getFieldType();
        org.joda.time.DateMidnight dateMidnight20 = property16.roundHalfFloorCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology24);
        mutablePeriod25.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod25.add(0L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusDays((int) (short) -1);
        int int38 = dateMidnight37.getYearOfEra();
        org.joda.time.Chronology chronology39 = dateMidnight37.getChronology();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology39);
        mutablePeriod25.add(0L, chronology39);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (-1), chronology39);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        int int50 = dateMidnight49.getYearOfEra();
        org.joda.time.Chronology chronology51 = dateMidnight49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) 10, chronology51);
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight42.toMutableDateTime(chronology51);
        org.joda.time.DateMidnight.Property property55 = dateMidnight42.dayOfMonth();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval59 = yearMonthDay58.toInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay58.withChronologyRetainFields(chronology60);
        org.joda.time.DateTime dateTime62 = yearMonthDay58.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        int int69 = dateMidnight68.getYearOfEra();
        org.joda.time.Chronology chronology70 = dateMidnight68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.halfdayOfDay();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) '#');
        int int76 = dateTimeField73.getMinimumValue((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.Period period77 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate78 = localDate75.plus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay58.minus((org.joda.time.ReadablePeriod) period77);
        java.lang.String str80 = yearMonthDay58.toString();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime83 = yearMonthDay58.toDateTimeAtMidnight(dateTimeZone82);
        org.joda.time.Interval interval84 = localDate57.toInterval(dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight42.withZoneRetainFields(dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight20.withZoneRetainFields(dateTimeZone82);
        boolean boolean87 = dateMidnight8.isBefore((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight.Property property88 = dateMidnight20.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645488000001L + "'", long15 == 1645488000001L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-21" + "'", str80, "2022-02-21");
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime18 = property14.addCopy((int) (short) 0);
        org.joda.time.LocalTime localTime19 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime21 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTime dateTime16 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset(1645455721906L);
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        timeZone19.setID("T23:59:59.999");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        long long28 = dateMidnight25.getMillis();
        java.util.Locale locale32 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar33 = dateMidnight25.toCalendar(locale32);
        int int35 = calendar33.getLeastMaximum(3);
        java.util.TimeZone timeZone36 = calendar33.getTimeZone();
        timeZone36.setID("PT0S");
        java.lang.String str39 = timeZone36.getID();
        java.util.TimeZone.setDefault(timeZone36);
        int int41 = timeZone36.getRawOffset();
        timeZone36.setID("P2720W5D");
        boolean boolean44 = timeZone19.hasSameRules(timeZone36);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale47.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = timeZone19.getDisplayName(true, 709, locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 709");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645488000001L + "'", long28 == 1645488000001L);
        org.junit.Assert.assertEquals(locale32.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=P2720W5D,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0S" + "'", str39, "PT0S");
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ITA" + "'", str48, "ITA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property14.setCopy(1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        java.lang.Object obj3 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, 36000L, periodType6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(obj3, periodType6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(4);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property23.addCopy(10);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1901760100L, (long) 46, periodType6, chronology26);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale locale33 = builder32.build();
        java.lang.String str34 = locale33.getScript();
        java.lang.String str35 = locale30.getDisplayVariant(locale33);
        java.lang.String str36 = locale30.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((-59657504087484L), chronology26, locale30);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology26);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str36, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('u', "70");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Days");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setRegion("millisOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: millisOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone8);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 31, locale12);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale14);
        java.lang.String str17 = locale12.getDisplayName(locale14);
        int int18 = property6.getMaximumShortTextLength(locale14);
        java.util.Set<java.lang.String> strSet19 = locale14.getUnicodeLocaleKeys();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = nameProvider20.getShortName(locale21, "DateTimeField[clockhourOfDay]", "PT0S");
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale locale26 = builder25.build();
        java.lang.String str29 = nameProvider20.getShortName(locale26, "Thu Dec 01 00:00:00 UTC 1898", "PT36001.873S");
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str34 = nameProvider20.getName(locale30, "ISOChronology[UTC]", "2039");
        java.util.Locale locale35 = locale30.stripExtensions();
        java.lang.String str36 = locale14.getDisplayCountry(locale30);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-00:00:00.001" + "'", str13, "-00:00:00.001");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)" + "'", str17, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        int int8 = localDateTime5.size();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateTime.Property property21 = dateTime19.centuryOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology26);
        mutablePeriod27.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod27.add(0L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        int int40 = dateMidnight39.getYearOfEra();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology41);
        mutablePeriod27.add(0L, chronology41);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (-1), chronology41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        int int52 = dateMidnight51.getYearOfEra();
        org.joda.time.Chronology chronology53 = dateMidnight51.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 10, chronology53);
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight44.toMutableDateTime(chronology53);
        mutableDateTime56.setYear(2022);
        mutableDateTime56.setYear((-1));
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime56.dayOfYear();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        long long68 = dateMidnight65.getMillis();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.days();
        org.joda.time.Period period70 = duration63.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight65, periodType69);
        org.joda.time.MutableDateTime mutableDateTime71 = dateMidnight65.toMutableDateTimeISO();
        int int72 = mutableDateTime71.getDayOfYear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusDays((int) (short) -1);
        int int79 = dateMidnight78.getYearOfEra();
        org.joda.time.Chronology chronology80 = dateMidnight78.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology80);
        mutableDateTime71.setChronology(chronology80);
        mutableDateTime56.setTime((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime56.era();
        org.joda.time.DateTimeZone dateTimeZone85 = mutableDateTime56.getZone();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) 6, dateTimeZone85);
        org.joda.time.DateTime dateTime87 = dateTime19.withZone(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = localDateTime5.toDateTime(dateTimeZone85);
        org.joda.time.DateTime dateTime90 = dateTime88.minusDays((int) (byte) 0);
        org.joda.time.DateTime.Property property91 = dateTime90.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645401600001L + "'", long68 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTime dateTime16 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone15);
        boolean boolean18 = dateTimeZone15.isStandardOffset(1645455721906L);
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        java.lang.String str20 = dateTimeZone15.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology29);
        org.joda.time.DateTime dateTime33 = dateTime31.minusHours(7);
        int int34 = dateTime33.getCenturyOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology37);
        mutablePeriod38.setPeriod((long) (short) 10, (long) (short) -1);
        int int43 = mutablePeriod38.getValue(0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        org.joda.time.Duration duration48 = mutablePeriod38.toDurationTo((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.halfdayOfDay();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight45, chronology56);
        org.joda.time.DateTime dateTime61 = dateTime33.withChronology(chronology56);
        org.joda.time.DateTimeZone dateTimeZone62 = chronology56.getZone();
        int int64 = dateTimeZone62.getOffset(11L);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(dateTimeZone62);
        long long68 = dateTimeZone62.adjustOffset(0L, false);
        long long70 = dateTimeZone15.getMillisKeepLocal(dateTimeZone62, 3110400000000528L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-00:00:00.001" + "'", str20, "-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3110400000000528L + "'", long70 == 3110400000000528L);
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours(10L);
        long long8 = duration7.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusDays((int) (short) -1);
        int int14 = dateMidnight13.getYearOfEra();
        int int15 = dateMidnight13.getWeekyear();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, readableInstant16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        int int26 = mutablePeriod21.getValue(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        org.joda.time.Duration duration31 = mutablePeriod21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.days();
        org.joda.time.Period period35 = new org.joda.time.Period(1645488000000L, periodType34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        org.joda.time.Period period40 = period35.normalizedStandard(periodType39);
        org.joda.time.Period period41 = duration31.toPeriodTo(readableInstant32, periodType39);
        java.lang.String str42 = periodType39.getName();
        org.joda.time.Period period43 = duration7.toPeriodTo(readableInstant16, periodType39);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(periodType39);
        java.lang.String str45 = periodType39.getName();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 414, (-79200000L), periodType39);
        int int47 = period46.getYears();
        org.joda.time.Period period49 = period46.minusDays(54153800);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 36000L + "'", long8 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Standard" + "'", str42, "Standard");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Standard" + "'", str45, "Standard");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        int int6 = localDateTime2.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours(10L);
        long long15 = duration14.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        long long21 = dateMidnight18.getMillis();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.withMillis((long) 7);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        long long30 = dateMidnight27.getMillis();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.Period period32 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight27, periodType31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight27.toMutableDateTimeISO();
        int int34 = dateMidnight23.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight23.plusWeeks(10);
        org.joda.time.Period period37 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight36);
        int int38 = period37.getWeeks();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 903);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime8.withWeekyear(0);
        int int43 = localDateTime8.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 36000L + "'", long15 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645401600001L + "'", long21 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateMidnight29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645401600001L + "'", long30 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 10, chronology35);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight26.toMutableDateTime(chronology35);
        mutableDateTime38.setYear(2022);
        mutableDateTime38.setYear((-1));
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime38.dayOfYear();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusDays((int) (short) -1);
        long long50 = dateMidnight47.getMillis();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.days();
        org.joda.time.Period period52 = duration45.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight47, periodType51);
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight47.toMutableDateTimeISO();
        int int54 = mutableDateTime53.getDayOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        int int61 = dateMidnight60.getYearOfEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology62);
        mutableDateTime53.setChronology(chronology62);
        mutableDateTime38.setTime((org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime38.addYears((int) (byte) -1);
        int int68 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime38.setSecondOfMinute(11);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime38.minuteOfDay();
        mutableDateTime38.setMillisOfDay((int) (byte) 1);
        int int74 = mutableDateTime38.getYearOfCentury();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(chronology78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.minusDays((int) (short) -1);
        int int82 = dateMidnight81.getYearOfEra();
        org.joda.time.Chronology chronology83 = dateMidnight81.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (short) 10, chronology83);
        mutableDateTime38.setChronology(chronology83);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 'x', chronology83);
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((long) (byte) 0, chronology83);
        long long92 = chronology83.add(11392059672000L, (long) 885, 66);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645401600001L + "'", long50 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 11392059730410L + "'", long92 == 11392059730410L);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(86400000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight23.toMutableDateTime(chronology32);
        mutableDateTime35.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime35.toMutableDateTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonthDay41.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableInstant) dateTime44);
        mutableDateTime35.setMinuteOfDay(14);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours(10L);
        long long50 = duration49.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withMillis((long) 24);
        long long54 = dateMidnight53.getMillis();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period56 = duration49.toPeriod();
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period56, (int) (short) -1);
        org.joda.time.Interval interval59 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime35);
        java.lang.Object obj60 = mutableDateTime35.clone();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime35.secondOfMinute();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 36000L + "'", long50 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "1969-12-30T14:14:50.000-00:00:00.001");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1969-12-30T14:14:50.000-00:00:00.001");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1969-12-30T14:14:50.000-00:00:00.001");
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMonths(31);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.lang.String str11 = property9.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2024 + "'", int6 == 2024);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((long) 10, chronology2);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = timeOfDay3.getFields();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        boolean boolean22 = dateTimeFieldType10.isSupported(chronology19);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(9L, chronology19, locale23, (java.lang.Integer) 365);
        java.util.Locale locale26 = dateTimeParserBucket25.getLocale();
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet27);
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(14);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plus((long) 1970);
        org.joda.time.DateMidnight.Property property20 = dateMidnight17.year();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        long long33 = dateMidnight30.getMillis();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableInstant) dateMidnight30, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.PeriodType periodType40 = periodType37.withWeeksRemoved();
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder43 = builder41.setInstant(4320000000L);
        java.util.Date date45 = new java.util.Date((long) 1);
        date45.setHours(15);
        date45.setMinutes(59);
        java.util.Calendar.Builder builder50 = builder43.setInstant(date45);
        boolean boolean51 = periodType40.equals((java.lang.Object) builder50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateMidnight17, periodType40);
        org.joda.time.Period period53 = period52.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) period52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645488000001L + "'", long33 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 15:59:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(133L, 1645455860067L);
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        int int19 = property18.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        int int21 = property18.getMaximumValueOverall();
        int int22 = property18.getMinimumValue();
        java.lang.String str23 = property18.getAsString();
        org.joda.time.TimeOfDay timeOfDay25 = property18.addNoWrapToCopy((int) (byte) 1);
        int int26 = property18.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay27 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property18.getField();
        org.joda.time.TimeOfDay timeOfDay29 = property18.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(timeOfDay29);
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException("PT0.010S", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException8 = new java.io.IOException();
        java.io.IOException iOException9 = new java.io.IOException("PT0.010S", (java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("1970-01-01", (java.lang.Throwable) iOException9);
        iOException5.addSuppressed((java.lang.Throwable) iOException9);
        java.lang.Throwable[] throwableArray12 = iOException9.getSuppressed();
        java.io.IOException iOException14 = new java.io.IOException();
        java.io.IOException iOException15 = new java.io.IOException("PT0.010S", (java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException14);
        iOException9.addSuppressed((java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException("2873/01/05 0:00:00", (java.lang.Throwable) iOException9);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645455743145L, (long) 54153800);
        long long3 = duration2.getStandardHours();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-457055L) + "'", long3 == (-457055L));
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        long long7 = dateMidnight4.getMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight4, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight4.toMutableDateTimeISO();
        int int11 = mutableDateTime10.getDayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutableDateTime10.setChronology(chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        long long34 = dateMidnight31.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateMidnight31, periodType38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight31.withWeekyear(59);
        java.util.Locale locale44 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar45 = dateMidnight31.toCalendar(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology19, locale44, (java.lang.Integer) 6);
        org.joda.time.DateTimeField dateTimeField48 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology19);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645401600001L + "'", long7 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645488000001L + "'", long34 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertEquals(locale44.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) (byte) 0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(18000758L);
        org.joda.time.Duration duration5 = duration3.plus((-3599999L));
        org.joda.time.Duration duration6 = duration1.plus((org.joda.time.ReadableDuration) duration5);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "24", "Japan", "Thu Jan 01 15:00:00 UTC 1970", "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z", "DateTimeField[clockhourOfDay]", "-00:00:00.001", "Thu Dec 01 00:00:00 UTC 1898", "2022-02-21T00:00:00.000Z/2022-02-21T00:00:00.000Z", "ja", "hourOfHalfday", "Sat Dec 31 00:00:00 UTC 1898", "hi!", "1970-01-01", "hourOfHalfday", "2022-02-21T00:00:00.000Z/2022-02-22T00:00:00.000Z", "-00:00:00.001" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        boolean boolean31 = strSet29.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList38);
        boolean boolean41 = strSet29.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        boolean boolean45 = strSet29.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream46 = languageRangeList43.stream();
        boolean boolean47 = strSet10.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43);
        java.lang.Object[] objArray48 = strSet10.toArray();
        int int49 = strSet10.size();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology54);
        mutablePeriod55.setPeriod((long) (short) 10, (long) (short) -1);
        int int60 = mutablePeriod55.getValue(0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        org.joda.time.Duration duration65 = mutablePeriod55.toDurationTo((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusDays((int) (short) -1);
        int int72 = dateMidnight71.getYearOfEra();
        org.joda.time.Chronology chronology73 = dateMidnight71.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.halfdayOfDay();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight62, chronology73);
        org.joda.time.LocalDate localDate79 = localDate77.withDayOfMonth(8);
        org.joda.time.LocalDate localDate81 = localDate79.plusMonths(7);
        org.joda.time.Chronology chronology82 = localDate79.getChronology();
        org.joda.time.Period period83 = new org.joda.time.Period((long) 667, periodType51, chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekOfWeekyear();
        boolean boolean85 = strSet10.remove((java.lang.Object) chronology82);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((-20L), (long) 33, chronology82);
        org.joda.time.Period period87 = duration6.toPeriod(chronology82);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(languageRangeStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period87);
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        int int7 = calendar1.getActualMinimum(1);
        calendar1.set(4, (-1), (int) '#');
        calendar1.setTimeInMillis((long) 23);
        int int14 = calendar1.getFirstDayOfWeek();
        int int15 = calendar1.getWeeksInWeekYear();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields(calendar17);
        java.lang.String str19 = calendar17.getCalendarType();
        int int21 = calendar17.getLeastMaximum(0);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology28);
        mutablePeriod29.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod29.add(0L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        mutablePeriod29.add(0L, chronology43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (-1), chronology43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 10, chronology55);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight46.toMutableDateTime(chronology55);
        org.joda.time.DurationField durationField59 = chronology55.minutes();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology55.getZone();
        boolean boolean61 = dateTimeZone60.isFixed();
        java.util.TimeZone timeZone62 = dateTimeZone60.toTimeZone();
        calendar23.setTimeZone(timeZone62);
        calendar17.setTimeZone(timeZone62);
        calendar1.setTimeZone(timeZone62);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId66 = timeZone62.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: -00:00:00.001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=23,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=22,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645456242480,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=42,MILLISECOND=479,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645456242480,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=42,MILLISECOND=479,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = new org.joda.time.Period(1645488000000L, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration4, readableInstant5);
        org.joda.time.PeriodType periodType7 = period6.getPeriodType();
        org.joda.time.Period period8 = period3.normalizedStandard(periodType7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 10, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime21.minusHours(7);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears((int) (byte) 0);
        int int26 = dateTime25.getMonthOfYear();
        int int27 = dateTime25.getYearOfEra();
        int int28 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths(7);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (short) 100, chronology42);
        org.joda.time.DurationField durationField46 = durationFieldType33.getField(chronology42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.hourOfDay();
        org.joda.time.DurationField durationField54 = durationFieldType33.getField(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime32.withChronology(chronology52);
        org.joda.time.Period period56 = new org.joda.time.Period(0L, 1645455780820L, chronology52);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 3, periodType7, chronology52);
        org.joda.time.format.PeriodFormatter periodFormatter58 = null;
        java.lang.String str59 = mutablePeriod57.toString(periodFormatter58);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT0.003S" + "'", str59, "PT0.003S");
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        int int3 = property2.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay4 = property2.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay5 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = yearMonthDay5.isBefore((org.joda.time.ReadablePartial) localDateTime7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1976-01-01");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology21);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology21);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusYears(17);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology31);
        mutablePeriod32.addSeconds(24);
        int int35 = mutablePeriod32.getWeeks();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str37 = durationFieldType36.getName();
        int int38 = mutablePeriod32.get(durationFieldType36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, 4);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyears" + "'", str37, "weekyears");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale6.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withLocale(locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter5.withPivotYear(903);
        java.lang.StringBuffer stringBuffer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(stringBuffer14, (long) 903);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456242559,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=P2720W5D,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=42,MILLISECOND=558,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter4.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withPivotYear(0);
        boolean boolean8 = dateTimeFormatter4.isPrinter();
        org.joda.time.Chronology chronology9 = dateTimeFormatter4.getChronolgy();
        boolean boolean10 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter4.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDayOfMonth((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.centuryOfEra();
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter4.withChronology(chronology22);
        org.joda.time.Period period24 = new org.joda.time.Period(17725L, (long) 1970, chronology22);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(mutablePeriod25);
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField17 = localDate12.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate12.plusDays((int) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate12.plusMonths((-2));
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology31);
        mutablePeriod32.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod32.add(0L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        mutablePeriod32.add(0L, chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 0, (long) 6, chronology46);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology46);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(chronology46);
        java.util.Date date52 = localDate51.toDate();
        date52.setMinutes(50);
        int int55 = date52.getTimezoneOffset();
        int int56 = date52.getMonth();
        org.joda.time.YearMonthDay yearMonthDay57 = org.joda.time.YearMonthDay.fromDateFields(date52);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays((int) (short) -1);
        int int64 = dateMidnight63.getYearOfEra();
        org.joda.time.Chronology chronology65 = dateMidnight63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.halfdayOfDay();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) '#');
        int int71 = dateTimeField68.getMinimumValue((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.Period period72 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate73 = localDate70.plus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Hours hours74 = period72.toStandardHours();
        org.joda.time.Period period76 = period72.plusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay57.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 0);
        org.joda.time.LocalDate localDate79 = localDate21.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.LocalDate.Property property80 = localDate79.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate82 = property80.setCopy("P11970MT0.035S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P11970MT0.035S\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Mon Feb 21 00:50:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(hours74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate.Property property6 = localDate4.weekyear();
        int int7 = localDate4.getCenturyOfEra();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtMidnight();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withMillis((long) 24);
        long long13 = dateMidnight12.getMillis();
        int int14 = dateMidnight12.getDayOfYear();
        org.joda.time.Period period16 = org.joda.time.Period.hours(3);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval18 = interval9.withPeriodAfterStart((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        long long25 = dateMidnight22.getMillis();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.Period period27 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight22, periodType26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight22.toMutableDateTimeISO();
        int int29 = mutableDateTime28.getDayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        mutableDateTime28.setChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.year();
        org.joda.time.Interval interval41 = interval9.withChronology(chronology37);
        org.joda.time.DateTime dateTime42 = interval9.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays((int) (short) -1);
        int int47 = dateMidnight46.getYearOfEra();
        org.joda.time.Chronology chronology48 = dateMidnight46.getChronology();
        long long49 = dateMidnight46.getMillis();
        org.joda.time.DateMidnight.Property property50 = dateMidnight46.weekyear();
        org.joda.time.DateMidnight dateMidnight51 = property50.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight52 = property50.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property50.getFieldType();
        org.joda.time.DateMidnight dateMidnight54 = property50.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight55 = property50.roundFloorCopy();
        int int56 = dateMidnight55.getYearOfEra();
        boolean boolean57 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime42.toYearMonthDay();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645401600001L + "'", long25 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645488000001L + "'", long49 == 1645488000001L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(yearMonthDay58);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        java.util.Date date1 = new java.util.Date((long) 1);
        date1.setSeconds(7);
        int int4 = date1.getMinutes();
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromDateFields(date1);
        java.util.Date date7 = new java.util.Date((long) (-100));
        boolean boolean8 = date1.after(date7);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:07 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 23:59:59 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        mutableDateTime15.addMonths(37);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 10, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight22.toMutableDateTime(chronology31);
        mutableDateTime34.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime34.toMutableDateTime(dateTimeZone38);
        mutableDateTime34.setDayOfYear(13);
        mutableDateTime34.addWeekyears((int) ' ');
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology48);
        mutablePeriod49.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod49.add(0L);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        mutablePeriod49.add(0L, chronology63);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (-1), chronology63);
        org.joda.time.DurationField durationField67 = chronology63.weeks();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(obj44, chronology63);
        org.joda.time.DateTimeField dateTimeField69 = chronology63.yearOfCentury();
        org.joda.time.DateTime dateTime70 = mutableDateTime34.toDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField71 = chronology63.monthOfYear();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 100, chronology63);
        org.joda.time.DateTimeField dateTimeField73 = chronology63.era();
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException("PT0.010S", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("806", (java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException2);
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.YearMonthDay yearMonthDay67 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime68 = yearMonthDay67.toDateTimeAtCurrentTime();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration74 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration72, 12);
        org.joda.time.Period period75 = new org.joda.time.Period();
        boolean boolean76 = duration70.equals((java.lang.Object) period75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(chronology77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.minusDays((int) (short) -1);
        int int81 = dateMidnight78.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.now(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.Duration duration88 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime85, (org.joda.time.ReadableDuration) duration88);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight78.minus((org.joda.time.ReadableDuration) duration88);
        boolean boolean91 = duration70.isLongerThan((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Seconds seconds92 = duration88.toStandardSeconds();
        org.joda.time.DateTime dateTime93 = dateTime68.plus((org.joda.time.ReadablePeriod) seconds92);
        org.joda.time.DateTime dateTime94 = dateTime93.withEarlierOffsetAtOverlap();
        int int95 = dateTime93.getMillisOfSecond();
        org.joda.time.DateTime.Property property96 = dateTime93.dayOfYear();
        org.joda.time.DateTime dateTime97 = property96.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645401600001L + "'", long48 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(seconds92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 712 + "'", int95 == 712);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration11 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration9, 12);
        boolean boolean12 = duration5.isEqual((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        int int21 = mutablePeriod16.getValue(0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        org.joda.time.Duration duration26 = mutablePeriod16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        org.joda.time.Period period30 = new org.joda.time.Period(1645488000000L, periodType29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType34 = period33.getPeriodType();
        org.joda.time.Period period35 = period30.normalizedStandard(periodType34);
        org.joda.time.Period period36 = duration26.toPeriodTo(readableInstant27, periodType34);
        long long37 = duration26.getMillis();
        org.joda.time.Duration duration38 = duration5.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        long long45 = dateMidnight42.getMillis();
        org.joda.time.DateMidnight.Property property46 = dateMidnight42.weekyear();
        org.joda.time.DateMidnight dateMidnight47 = property46.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight48 = property46.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight50 = property46.addToCopy((long) 24);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusYears(1);
        java.lang.String str53 = dateMidnight52.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardHours(10L);
        long long60 = duration59.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight57, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.Period period62 = duration59.toPeriod();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration68 = duration64.withDurationAdded((org.joda.time.ReadableDuration) duration66, 12);
        org.joda.time.Duration duration69 = duration66.toDuration();
        boolean boolean70 = duration59.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight52.withDurationAdded((org.joda.time.ReadableDuration) duration69, 139);
        org.joda.time.Interval interval73 = dateMidnight72.toInterval();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-11L) + "'", long37 == (-11L));
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645488000001L + "'", long45 == 1645488000001L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2045-02-20T00:00:00.000-00:00:00.001" + "'", str53, "2045-02-20T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 36000L + "'", long60 == 36000L);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DateTime dateTime23 = dateTime10.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime10.minus(4320000000L);
        org.joda.time.DateTime dateTime27 = dateTime10.minusMillis((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime10.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime28.setSecondOfMinute(464);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 464 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 10, chronology22);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(7);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears((int) (byte) 0);
        int int29 = dateTime28.getMonthOfYear();
        org.joda.time.Interval interval30 = duration12.toIntervalFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration1.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        long long38 = dateMidnight35.getMillis();
        org.joda.time.DateMidnight.Property property39 = dateMidnight35.weekyear();
        org.joda.time.DateMidnight dateMidnight40 = property39.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight41 = property39.withMinimumValue();
        org.joda.time.Interval interval42 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = dateMidnight41.get(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType43.getRangeDurationType();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645488000001L + "'", long38 == 1645488000001L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-292275054) + "'", int44 == (-292275054));
        org.junit.Assert.assertNull(durationFieldType45);
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime36.weekyear();
        org.joda.time.MutableDateTime mutableDateTime69 = property67.set(999);
        org.joda.time.MutableDateTime mutableDateTime70 = property67.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = property71.roundFloor();
        mutableDateTime72.addMonths(105);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645401600001L + "'", long48 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.joda.time.Period period1 = org.joda.time.Period.months(11970);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays(86400000L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology7);
        mutablePeriod8.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod8.add(0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        mutablePeriod8.add(0L, chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (-1), chronology22);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 10, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight25.toMutableDateTime(chronology34);
        mutableDateTime37.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime37.toMutableDateTime(dateTimeZone41);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonthDay43.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateTime46);
        mutableDateTime37.setMinuteOfDay(14);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours(10L);
        long long52 = duration51.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withMillis((long) 24);
        long long56 = dateMidnight55.getMillis();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Period period58 = duration51.toPeriod();
        mutableDateTime37.add((org.joda.time.ReadablePeriod) period58, (int) (short) -1);
        org.joda.time.Interval interval61 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology64);
        mutablePeriod65.setPeriod((long) (short) 10, (long) (short) -1);
        int int70 = mutablePeriod65.getValue(0);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(chronology71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusDays((int) (short) -1);
        org.joda.time.Duration duration75 = mutablePeriod65.toDurationTo((org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.days();
        org.joda.time.Period period79 = new org.joda.time.Period(1645488000000L, periodType78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period(readableDuration80, readableInstant81);
        org.joda.time.PeriodType periodType83 = period82.getPeriodType();
        org.joda.time.Period period84 = period79.normalizedStandard(periodType83);
        org.joda.time.Period period85 = duration75.toPeriodTo(readableInstant76, periodType83);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.days();
        org.joda.time.Period period87 = duration75.toPeriod(periodType86);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableDuration) duration75);
        boolean boolean89 = period1.equals((java.lang.Object) mutablePeriod88);
        mutablePeriod88.addDays(99);
        int int92 = mutablePeriod88.getDays();
        mutablePeriod88.addMonths((-292275054));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 36000L + "'", long52 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight55);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 99 + "'", int92 == 99);
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.setTimeInMillis((-1L));
        java.util.TimeZone timeZone6 = calendar1.getTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        int int10 = timeZone7.getRawOffset();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        int int24 = dateMidnight23.getYearOfEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 10, chronology25);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds(14);
        boolean boolean30 = dateMidnight16.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime29.withDayOfWeek(1);
        org.joda.time.DateTime dateTime35 = dateTime33.plus((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime35.withWeekyear((int) (byte) 10);
        int int38 = dateTime37.getHourOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 10, chronology47);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMonths(10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 10, chronology60);
        org.joda.time.DateTime dateTime63 = dateTime51.toDateTime(chronology60);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology73);
        mutablePeriod74.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod74.add(0L);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(chronology83);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight84.minusDays((int) (short) -1);
        int int87 = dateMidnight86.getYearOfEra();
        org.joda.time.Chronology chronology88 = dateMidnight86.getChronology();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology88);
        mutablePeriod74.add(0L, chronology88);
        org.joda.time.Period period91 = new org.joda.time.Period((long) 0, (long) 6, chronology88);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology88);
        org.joda.time.DateTime dateTime93 = dateTime51.withChronology(chronology88);
        int int94 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime51);
        int int95 = dateTime37.getSecondOfMinute();
        java.util.Date date96 = dateTime37.toDate();
        boolean boolean97 = timeZone7.inDaylightTime(date96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=P2720W5D,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=998,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2022 + "'", int87 == 2022);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 14 + "'", int95 == 14);
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Mon Jan 06 00:00:14 GMT+00:00 10");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) (short) 100);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration9 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, 12);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 10, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours(7);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) (byte) 0);
        int int33 = dateTime32.getMonthOfYear();
        org.joda.time.Interval interval34 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration5.minus((org.joda.time.ReadableDuration) duration16);
        boolean boolean36 = dateTime1.equals((java.lang.Object) duration16);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        long long44 = dateMidnight41.getMillis();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withMillis((long) 7);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateMidnight41, periodType47);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period58 = duration39.toPeriodTo((org.joda.time.ReadableInstant) dateTime56, periodType57);
        boolean boolean59 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) 15);
        int int62 = duration16.compareTo((org.joda.time.ReadableDuration) duration61);
        java.util.Date date64 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay65 = org.joda.time.YearMonthDay.fromDateFields(date64);
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay65.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay67 = property66.getYearMonthDay();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusDays((int) (short) -1);
        int int74 = dateMidnight73.getYearOfEra();
        org.joda.time.Chronology chronology75 = dateMidnight73.getChronology();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology75.getZone();
        org.joda.time.DateTime dateTime79 = yearMonthDay67.toDateTimeAtCurrentTime(dateTimeZone78);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(chronology83);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight84.minusDays((int) (short) -1);
        int int87 = dateMidnight86.getYearOfEra();
        org.joda.time.Chronology chronology88 = dateMidnight86.getChronology();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology88);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) (short) 10, chronology88);
        org.joda.time.DateTime dateTime92 = dateTime90.minusHours(7);
        int int93 = dateTime79.compareTo((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Period period94 = duration16.toPeriodTo((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Minutes minutes95 = period94.toStandardMinutes();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645401600001L + "'", long44 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2022 + "'", int87 == 2022);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(minutes95);
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        java.io.IOException iOException3 = new java.io.IOException();
        java.io.IOException iOException4 = new java.io.IOException("PT0.010S", (java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException("java.io.IOException: java.io.IOException", (java.lang.Throwable) iOException5);
        java.io.IOException iOException9 = new java.io.IOException("hourOfHalfday");
        iOException7.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("1970-01-23T00:00:00.000+528:16/1970-01-24T00:00:00.000+528:16", (java.lang.Throwable) iOException7);
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale0.getUnicodeLocaleType("2022-02-01T00:00:00.000-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-01T00:00:00.000-00:00:00.001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-CN" + "'", str1, "zh-CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-CN" + "'", str4, "zh-CN");
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(dateTimeZone2);
        long long8 = dateTimeZone2.convertLocalToUTC((long) 12, false, (long) 2022);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-2021), dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 13L + "'", long8 == 13L);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(86400000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight23.toMutableDateTime(chronology32);
        mutableDateTime35.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime35.toMutableDateTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonthDay41.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay41.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableInstant) dateTime44);
        mutableDateTime35.setMinuteOfDay(14);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardHours(10L);
        long long50 = duration49.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withMillis((long) 24);
        long long54 = dateMidnight53.getMillis();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period56 = duration49.toPeriod();
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period56, (int) (short) -1);
        org.joda.time.Interval interval59 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime35);
        boolean boolean61 = interval59.isBefore((long) 214);
        org.joda.time.Interval interval63 = interval59.withStartMillis(32L);
        org.joda.time.Interval interval65 = interval63.withStartMillis((-2206288800001L));
        org.joda.time.MutableInterval mutableInterval66 = interval65.toMutableInterval();
        org.joda.time.Interval interval67 = interval65.toInterval();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 36000L + "'", long50 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property18.addNoWrapToCopy((int) 'a');
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology28);
        mutablePeriod29.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod29.add(0L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        mutablePeriod29.add(0L, chronology43);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (-1), chronology43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 10, chronology55);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight46.toMutableDateTime(chronology55);
        mutableDateTime58.setYear(2022);
        mutableDateTime58.setYear((-1));
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime58.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime65 = property63.add((long) (short) 0);
        org.joda.time.DateTime dateTime66 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) mutableDateTime65);
        java.util.Locale locale71 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        boolean boolean73 = locale72.hasExtensions();
        java.lang.String str74 = locale72.getDisplayCountry();
        java.lang.String str75 = locale71.getDisplayScript(locale72);
        java.lang.String str76 = timeOfDay24.toString("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", locale71);
        java.lang.String str77 = property18.getAsShortText(locale71);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals(locale71.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u672c" + "'", str74, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str76, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0" + "'", str77, "0");
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        int int61 = mutableDateTime48.getMillisOfDay();
        int int62 = mutableDateTime48.getDayOfYear();
        mutableDateTime48.setWeekyear(278);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        java.util.Locale locale3 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.lang.String str7 = locale3.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale3);
        boolean boolean9 = calendar8.isWeekDateSupported();
        calendar8.setLenient(true);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        calendar8.setLenient(false);
        org.junit.Assert.assertEquals(locale3.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645456243208,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=P2720W5D,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=43,MILLISECOND=207,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        java.util.Date date3 = new java.util.Date((-1), (int) (short) 0, 0);
        date3.setMonth((int) (short) 10);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date3);
        int int7 = date3.getHours();
        date3.setDate(2922789);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Mar 29 00:00:00 GMT+00:00 9901");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        java.util.TimeZone timeZone12 = calendar11.getTimeZone();
        java.util.Date date18 = new java.util.Date(19, 0, 70, (int) (byte) 1, 10);
        calendar11.setTime(date18);
        java.util.Date date24 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay25 = org.joda.time.YearMonthDay.fromDateFields(date24);
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay25.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay27 = property26.getYearMonthDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology35.getZone();
        org.joda.time.DateTime dateTime39 = yearMonthDay27.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean41 = dateTimeZone38.isStandardOffset((long) 0);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((int) (byte) -1, 5, 1, dateTimeZone38);
        int int43 = dateMidnight42.getDayOfMonth();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.DateTime dateTime56 = dateTime54.minusHours(7);
        int int57 = dateTime56.getCenturyOfEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology60);
        mutablePeriod61.setPeriod((long) (short) 10, (long) (short) -1);
        int int66 = mutablePeriod61.getValue(0);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        org.joda.time.Duration duration71 = mutablePeriod61.toDurationTo((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusDays((int) (short) -1);
        int int78 = dateMidnight77.getYearOfEra();
        org.joda.time.Chronology chronology79 = dateMidnight77.getChronology();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.halfdayOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight68, chronology79);
        org.joda.time.DateTime dateTime84 = dateTime56.withChronology(chronology79);
        org.joda.time.DateTimeZone dateTimeZone85 = chronology79.getZone();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight42.withZoneRetainFields(dateTimeZone85);
        boolean boolean87 = calendar11.equals((java.lang.Object) dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1603493399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1919,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=70,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date18.toString(), "Tue Mar 11 01:10:00 GMT+00:00 1919");
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        int int46 = mutablePeriod42.getMonths();
        mutablePeriod42.addMinutes((int) (short) 0);
        mutableDateTime33.add((org.joda.time.ReadablePeriod) mutablePeriod42, 12);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime33.secondOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay((long) 10, chronology53);
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = timeOfDay54.getFields();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay((long) 10, chronology57);
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = timeOfDay58.getFields();
        org.joda.time.Period period60 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay54, (org.joda.time.ReadablePartial) timeOfDay58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay((long) 10, chronology62);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = timeOfDay63.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay63.plusSeconds((int) '4');
        int int67 = timeOfDay54.compareTo((org.joda.time.ReadablePartial) timeOfDay63);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay54.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property70 = timeOfDay54.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property70.getFieldType();
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.lang.String str73 = property70.getAsText(locale72);
        int int74 = property51.getMaximumTextLength(locale72);
        org.joda.time.MutableDateTime mutableDateTime76 = property51.set("22");
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime76.weekyear();
        mutableDateTime76.addMinutes(80);
        mutableDateTime76.addMinutes(1968);
        java.util.Date date82 = mutableDateTime76.toDate();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Thu Jan 01 10:08:22 GMT+00:00 1970");
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime.Property property22 = localDateTime7.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = property22.setCopy("Mon Feb 21 00:00:00 GMT 2022");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Mon Feb 21 00:00:00 GMT 2022\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        int int10 = mutableDateTime9.getDayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutableDateTime9.setChronology(chronology18);
        mutableDateTime9.addSeconds(870);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDayOfMonth((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10, chronology12);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = timeOfDay13.getFields();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) 10, chronology16);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = timeOfDay17.getFields();
        org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay13, (org.joda.time.ReadablePartial) timeOfDay17);
        long long22 = chronology8.add((org.joda.time.ReadablePeriod) period19, (long) 53, 100);
        int int23 = period19.getMillis();
        int int24 = period19.getMinutes();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 53L + "'", long22 == 53L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 10, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours(7);
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears((int) (byte) 0);
        int int23 = dateTime22.getMonthOfYear();
        org.joda.time.Interval interval24 = duration6.toIntervalFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(22);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str29 = localDate28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.halfdayOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) '#');
        int int43 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.LocalDate localDate45 = localDate42.withYearOfEra((int) '4');
        boolean boolean46 = localDate28.isBefore((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology50);
        mutablePeriod51.setPeriod((long) (short) 10, (long) (short) -1);
        int int56 = mutablePeriod51.getValue(0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusDays((int) (short) -1);
        org.joda.time.Duration duration61 = mutablePeriod51.toDurationTo((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.days();
        org.joda.time.Period period65 = new org.joda.time.Period(1645488000000L, periodType64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(readableDuration66, readableInstant67);
        org.joda.time.PeriodType periodType69 = period68.getPeriodType();
        org.joda.time.Period period70 = period65.normalizedStandard(periodType69);
        org.joda.time.Period period71 = duration61.toPeriodTo(readableInstant62, periodType69);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 0, periodType69);
        mutablePeriod72.addMonths(667);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.centuries();
        int int76 = mutablePeriod72.get(durationFieldType75);
        java.lang.String str77 = durationFieldType75.toString();
        boolean boolean78 = localDate45.isSupported(durationFieldType75);
        org.joda.time.DateTime dateTime80 = dateTime22.withFieldAdded(durationFieldType75, 921);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime80.withTime(98, 32769, 414, 197022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "centuries" + "'", str77, "centuries");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10, chronology17);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 10, chronology21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.Period period24 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay18, (org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 53);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay11.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = property27.addToCopy((int) ' ');
        org.joda.time.TimeOfDay timeOfDay31 = property27.addWrapFieldToCopy((-100));
        org.joda.time.TimeOfDay timeOfDay33 = property27.addToCopy(960010);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        int[] intArray14 = new int[] {};
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13, intArray14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = localDateTime13.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusYears(70);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays(54360599);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = yearMonthDay0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        int int12 = mutablePeriod7.getValue(0);
        mutablePeriod7.addMinutes(0);
        mutablePeriod7.setMonths((int) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.plusMonths((int) (short) 1);
        org.joda.time.LocalDate localDate20 = yearMonthDay17.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (-1), chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType21.getField(chronology40);
        java.lang.String str45 = dateTimeFieldType21.toString();
        int int46 = localDate20.indexOf(dateTimeFieldType21);
        java.util.Date date47 = localDate20.toDate();
        java.lang.String str48 = date47.toGMTString();
        date47.setTime(1991304L);
        java.lang.String str51 = date47.toLocaleString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "centuryOfEra" + "'", str45, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Thu Jan 01 00:33:11 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "21 Apr 2021 00:00:00 GMT" + "'", str48, "21 Apr 2021 00:00:00 GMT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970/01/01 0:33:11" + "'", str51, "1970/01/01 0:33:11");
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-24356254), 54297312);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 54297312");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.joda.time.Period period1 = org.joda.time.Period.millis(0);
        int int2 = period1.getSeconds();
        org.joda.time.Period period4 = period1.minusDays(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology9);
        mutablePeriod10.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod10.add(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        mutablePeriod10.add(0L, chronology24);
        boolean boolean27 = dateTimeFieldType6.isSupported(chronology24);
        org.joda.time.DurationField durationField28 = chronology24.hours();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localTime29.getFieldTypes();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay((long) 10, chronology32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay33.getFieldTypes();
        int int35 = timeOfDay33.getSecondOfMinute();
        org.joda.time.LocalTime localTime36 = localTime29.withFields((org.joda.time.ReadablePartial) timeOfDay33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusDays((int) (short) -1);
        int int44 = dateMidnight43.getYearOfEra();
        org.joda.time.Chronology chronology45 = dateMidnight43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfDay();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.millisOfDay();
        org.joda.time.DateTime dateTime59 = dateTime48.withChronology(chronology56);
        org.joda.time.Period period60 = new org.joda.time.Period((long) 22, chronology56);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.days();
        org.joda.time.Period period63 = new org.joda.time.Period(1645488000000L, periodType62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.seconds();
        boolean boolean65 = periodType62.isSupported(durationFieldType64);
        org.joda.time.Period period67 = period60.withFieldAdded(durationFieldType64, (-292275054));
        boolean boolean68 = localTime36.isSupported(durationFieldType64);
        boolean boolean69 = period1.isSupported(durationFieldType64);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(0L, (long) 4, chronology72);
        org.joda.time.Period period74 = period1.withFields((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Period period76 = period1.withHours(903);
        org.joda.time.Period period78 = period1.withSeconds(0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) 100, chronology10);
        org.joda.time.DurationField durationField14 = durationFieldType1.getField(chronology10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField22 = durationFieldType1.getField(chronology20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.centuryOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.clockhourOfDay();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.millisOfDay();
        org.joda.time.DateTime dateTime49 = dateTime38.withChronology(chronology46);
        org.joda.time.Period period50 = new org.joda.time.Period((long) 22, chronology46);
        org.joda.time.DurationField durationField51 = chronology46.months();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(749L, chronology46, locale52, (java.lang.Integer) 15, 446);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology20, locale52);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket57.getZone();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str53, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withWeekOfWeekyear(21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusMinutes(321);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (-1), chronology19);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField(chronology19);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.Period period26 = new org.joda.time.Period(1645488000000L, periodType25);
        org.joda.time.Period period27 = period26.normalizedStandard();
        int int28 = period27.getSeconds();
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) period27, (long) (short) 0);
        int int31 = period27.size();
        org.joda.time.Period period33 = period27.plusHours(10);
        org.joda.time.Period period35 = period33.plusWeeks(54382812);
        org.joda.time.Period period37 = period33.withHours(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        mutableDateTime39.addWeekyears(22);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod9.add(0L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        mutablePeriod9.add(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (-1), chronology23);
        org.joda.time.DurationField durationField27 = chronology23.weeks();
        org.joda.time.DateTime dateTime28 = dateMidnight3.toDateTime(chronology23);
        int int29 = dateTime28.getYear();
        org.joda.time.LocalDate localDate30 = dateTime28.toLocalDate();
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours(99968);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours(10L);
        long long35 = duration34.getStandardSeconds();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration39 = duration34.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration40 = duration38.toDuration();
        java.lang.String str41 = duration38.toString();
        org.joda.time.DateTime dateTime42 = dateTime32.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withDurationAdded(readableDuration43, 902);
        org.joda.time.LocalDate localDate46 = dateTime45.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 36000L + "'", long35 == 36000L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT1.873S" + "'", str41, "PT1.873S");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay19 = property18.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay20 = property18.withMaximumValue();
        int int21 = timeOfDay20.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-2180220593999L));
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        mutableDateTime40.setZone(dateTimeZone42);
        java.lang.String str45 = dateTimeZone42.getShortName(0L);
        java.lang.String str47 = dateTimeZone42.getShortName(1645456123098L);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-00:00:00.001" + "'", str45, "-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-00:00:00.001" + "'", str47, "-00:00:00.001");
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone38);
        mutableDateTime33.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(528, 16);
        long long45 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) 50);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime46.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1901759951L) + "'", long45 == (-1901759951L));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        int int5 = localDate1.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) (short) -1);
        java.lang.String str11 = dateTimeZone7.getID();
        long long13 = dateTimeZone7.previousTransition((long) (-23641));
        org.joda.time.DateTime dateTime14 = localDate1.toDateTimeAtCurrentTime(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-23641L) + "'", long13 == (-23641L));
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationField durationField13 = durationFieldType0.getField(chronology9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField21 = durationFieldType0.getField(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.hours();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology19);
        boolean boolean25 = mutableDateTime23.isBefore((long) 69);
        mutableDateTime23.setSecondOfMinute(30);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime23.setZone(dateTimeZone28);
        java.lang.String str31 = dateTimeZone28.getName(27L);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone28);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology10);
        mutablePeriod11.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod11.add(0L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        int int24 = dateMidnight23.getYearOfEra();
        org.joda.time.Chronology chronology25 = dateMidnight23.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology25);
        mutablePeriod11.add(0L, chronology25);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (-1), chronology25);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        int int36 = dateMidnight35.getYearOfEra();
        org.joda.time.Chronology chronology37 = dateMidnight35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) 10, chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight28.toMutableDateTime(chronology37);
        mutableDateTime40.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime40.toMutableDateTime(dateTimeZone44);
        int int46 = mutableDateTime45.getSecondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 10, chronology55);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMonths(10);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime45, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra(1970);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime69 = property68.roundHalfEvenCopy();
        boolean boolean70 = duration3.equals((java.lang.Object) property68);
        java.util.Locale locale74 = new java.util.Locale("Standard", "", "dayOfMonth");
        java.lang.String str75 = property68.getAsText(locale74);
        org.joda.time.LocalDateTime localDateTime77 = property68.addToCopy((long) 156);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusMonths(217);
        int int80 = localDateTime79.getDayOfWeek();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals(locale74.toString(), "standard__dayOfMonth");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "52" + "'", str75, "52");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) 'a', (long) 1970);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.hourOfDay();
        mutableDateTime33.setWeekyear((int) (short) 0);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withWeekOfWeekyear(12);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusDays((int) (short) -1);
        int int58 = dateMidnight57.getYearOfEra();
        org.joda.time.Chronology chronology59 = dateMidnight57.getChronology();
        long long60 = dateMidnight57.getMillis();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableDuration61, readableInstant62);
        org.joda.time.PeriodType periodType64 = period63.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight53, (org.joda.time.ReadableInstant) dateMidnight57, periodType64);
        int int66 = dateMidnight53.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight53.plusMonths(363);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean70 = dateMidnight68.equals((java.lang.Object) dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType69.getDurationType();
        boolean boolean72 = dateMidnight47.isSupported(dateTimeFieldType69);
        boolean boolean73 = mutableDateTime33.isSupported(dateTimeFieldType69);
        mutableDateTime33.add(1645455841014L);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(chronology59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645488000001L + "'", long60 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 53 + "'", int66 == 53);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone38);
        mutableDateTime33.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.TimeOfDay timeOfDay42 = dateTime41.toTimeOfDay();
        int[] intArray43 = timeOfDay42.getValues();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[15, 10, 43, 817]");
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight11 = property7.setCopy(598);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.withMillis(32769);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration16, readableInstant17);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.Period period20 = new org.joda.time.Period(1645488000L, periodType19);
        boolean boolean22 = periodType19.equals((java.lang.Object) "70");
        org.joda.time.Period period23 = period14.normalizedStandard(periodType19);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight11.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight11.plusDays((-100));
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = localTime27.toString("millisOfSecond");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        java.io.IOException iOException1 = new java.io.IOException("2039");
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("de_DE");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        int int5 = timeZone1.getOffset((long) 99);
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1645455738650L, 1645455930154L);
        org.joda.time.Period period3 = interval2.toPeriod();
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, chronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(7);
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears((int) (byte) 0);
        int int16 = dateTime15.getDayOfYear();
        java.lang.String str18 = dateTime15.toString("2022/02/21 15:02:53");
        java.util.Date date20 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay21 = org.joda.time.YearMonthDay.fromDateFields(date20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay21.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay23 = property22.getYearMonthDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight29.getYearOfEra();
        org.joda.time.Chronology chronology31 = dateMidnight29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology31.getZone();
        org.joda.time.DateTime dateTime35 = yearMonthDay23.toDateTimeAtCurrentTime(dateTimeZone34);
        long long37 = dateTimeZone34.previousTransition((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime15.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.plusDays(10);
        org.joda.time.DateTime dateTime41 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusDays((int) (short) -1);
        int int49 = dateMidnight48.getYearOfEra();
        org.joda.time.Chronology chronology50 = dateMidnight48.getChronology();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 10, chronology50);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMonths(10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) 10, chronology63);
        org.joda.time.DateTime dateTime66 = dateTime54.toDateTime(chronology63);
        org.joda.time.DurationField durationField67 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.millisOfDay();
        org.joda.time.DurationField durationField69 = chronology63.weeks();
        org.joda.time.DateTime dateTime70 = dateTime41.toDateTime(chronology63);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1591737177600000L, chronology63);
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(chronology63);
        org.joda.time.DateTimeField dateTimeField73 = chronology63.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology63.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 365 + "'", int16 == 365);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022/02/21 15:02:53" + "'", str18, "2022/02/21 15:02:53");
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property3.addToCopy(903);
        java.util.Date date8 = localDate7.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        java.lang.String str11 = yearMonthDay9.toString("1970-01-23");
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusYears(70);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate.Property property17 = localDate15.weekyear();
        int int18 = localDate15.getCenturyOfEra();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property20 = localDate15.year();
        org.joda.time.LocalDate localDate22 = localDate15.withYearOfEra(22);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology26);
        mutablePeriod27.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod27.add(0L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusDays((int) (short) -1);
        int int40 = dateMidnight39.getYearOfEra();
        org.joda.time.Chronology chronology41 = dateMidnight39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology41);
        mutablePeriod27.add(0L, chronology41);
        org.joda.time.DurationField durationField44 = durationFieldType23.getField(chronology41);
        boolean boolean45 = localDate22.isSupported(durationFieldType23);
        org.joda.time.DateTime dateTime46 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean48 = localDate22.isSupported(dateTimeFieldType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay9.withField(dateTimeFieldType47, 83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 05 00:00:00 GMT 2873");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-23" + "'", str11, "1970-01-23");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        mutableDateTime33.setRounding(dateTimeField46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.addWrapField(2022);
        org.joda.time.MutableDateTime mutableDateTime52 = property48.add(52);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.millisOfSecond();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology56);
        mutablePeriod57.setPeriod((long) (short) 10, (long) (short) -1);
        int int62 = mutablePeriod57.getValue(0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        org.joda.time.Duration duration67 = mutablePeriod57.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusDays((int) (short) -1);
        long long74 = dateMidnight71.getMillis();
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.days();
        org.joda.time.Period period76 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight71, periodType75);
        java.util.Date date77 = dateMidnight71.toDate();
        org.joda.time.TimeOfDay timeOfDay78 = org.joda.time.TimeOfDay.fromDateFields(date77);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight64.withFields((org.joda.time.ReadablePartial) timeOfDay78);
        org.joda.time.Chronology chronology80 = dateMidnight64.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = dateTimeField81.getType();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime52.property(dateTimeFieldType82);
        mutableDateTime52.addWeekyears(93);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateMidnight73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645401600001L + "'", long74 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        calendar1.roll((int) (short) 0, true);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456243947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=43,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        mutableDateTime33.setRounding(dateTimeField46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime33.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.Period period2 = new org.joda.time.Period(1645488000000L, periodType1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (short) 100, chronology13);
        org.joda.time.DurationField durationField17 = durationFieldType4.getField(chronology13);
        int int18 = periodType1.indexOf(durationFieldType4);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 10, chronology27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (short) 100, chronology38);
        org.joda.time.DateTime dateTime42 = dateTime29.withChronology(chronology38);
        org.joda.time.DurationField durationField43 = durationFieldType4.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.clockhourOfHalfday();
        org.joda.time.DurationField durationField45 = chronology38.months();
        java.lang.String str46 = durationField45.toString();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DurationField[months]" + "'", str46, "DurationField[months]");
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = yearMonthDay39.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime42);
        mutableDateTime33.setMinuteOfDay(14);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours(10L);
        long long48 = duration47.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withMillis((long) 24);
        long long52 = dateMidnight51.getMillis();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Period period54 = duration47.toPeriod();
        mutableDateTime33.add((org.joda.time.ReadablePeriod) period54, (int) (short) -1);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime33.weekyear();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfEven();
        mutableDateTime58.addWeeks(54322377);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 36000L + "'", long48 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.minusMinutes((int) 'a');
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours(10L);
        long long25 = duration24.getStandardSeconds();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Duration duration29 = duration24.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime7.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology41);
        mutablePeriod42.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod42.add(0L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        int int55 = dateMidnight54.getYearOfEra();
        org.joda.time.Chronology chronology56 = dateMidnight54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology56);
        mutablePeriod42.add(0L, chronology56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) 0, (long) 6, chronology56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology56);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.withZoneRetainFields(dateTimeZone67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusDays((int) (short) -1);
        int int73 = dateMidnight72.getYearOfEra();
        org.joda.time.Chronology chronology74 = dateMidnight72.getChronology();
        long long75 = dateMidnight72.getMillis();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period(readableDuration76, readableInstant77);
        org.joda.time.PeriodType periodType79 = period78.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadableInstant) dateMidnight72, periodType79);
        org.joda.time.Period period81 = new org.joda.time.Period((long) 3, (long) 32769, periodType79);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(periodType79);
        org.joda.time.PeriodType periodType83 = periodType79.withSecondsRemoved();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime60, periodType79);
        org.joda.time.PeriodType periodType85 = periodType79.withDaysRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withMinutesRemoved();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 36000L + "'", long25 == 36000L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(chronology74);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645488000001L + "'", long75 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = yearMonthDay39.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay39.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime42);
        mutableDateTime33.addYears(9);
        org.joda.time.Chronology chronology46 = null;
        mutableDateTime33.setChronology(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime51 = property48.addWrapField(54389348);
        mutableDateTime51.setYear(148962);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        org.joda.time.DateTime dateTime25 = dateTime12.withChronology(chronology21);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        long long32 = dateMidnight29.getMillis();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.Period period34 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight29, periodType33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight29.toMutableDateTimeISO();
        int int36 = mutableDateTime35.getDayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        mutableDateTime35.setChronology(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime12.withChronology(chronology44);
        org.joda.time.DurationField durationField48 = chronology44.halfdays();
        org.joda.time.Period period49 = new org.joda.time.Period(12L, chronology44);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay(4787085603496L, chronology44);
        org.joda.time.DurationField durationField51 = chronology44.hours();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645401600001L + "'", long32 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardHours(10L);
        long long6 = duration5.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.Period period8 = duration5.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration14 = duration10.withDurationAdded((org.joda.time.ReadableDuration) duration12, 12);
        org.joda.time.Duration duration15 = duration12.toDuration();
        boolean boolean16 = duration5.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration17 = duration5.toDuration();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        boolean boolean20 = periodType18.equals((java.lang.Object) instant19);
        org.joda.time.PeriodType periodType21 = periodType18.withYearsRemoved();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        int int27 = dateMidnight25.getWeekyear();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight25, readableInstant28);
        boolean boolean30 = periodType18.equals((java.lang.Object) dateMidnight25);
        org.joda.time.Period period31 = duration5.toPeriod(periodType18);
        org.joda.time.Period period32 = duration5.toPeriod();
        org.joda.time.Duration duration34 = duration5.plus((long) (-54000));
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000L + "'", long6 == 36000L);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) -1);
        org.joda.time.Period period3 = period1.multipliedBy(192);
        org.joda.time.Period period5 = period1.minusMinutes(583);
        int int6 = period1.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        int int7 = calendar1.getActualMinimum(1);
        calendar1.set(4, (-1), (int) '#');
        int int12 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.setTimeInMillis((long) (short) 10);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        long long7 = dateTimeZone1.convertLocalToUTC((long) 12, false, (long) 2022);
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 13L + "'", long7 == 13L);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        boolean boolean22 = dateTimeFieldType1.isSupported(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.hours();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localTime24.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((long) 10, chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        int int30 = timeOfDay28.getSecondOfMinute();
        org.joda.time.LocalTime localTime31 = localTime24.withFields((org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.LocalTime localTime33 = localTime24.plusSeconds(2022);
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis(904);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        long long43 = dateMidnight40.getMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.days();
        org.joda.time.Period period45 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight40.toMutableDateTimeISO();
        int int47 = mutableDateTime46.getDayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusDays((int) (short) -1);
        int int54 = dateMidnight53.getYearOfEra();
        org.joda.time.Chronology chronology55 = dateMidnight53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology55);
        mutableDateTime46.setChronology(chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.withZoneRetainFields(dateTimeZone62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        long long70 = dateMidnight67.getMillis();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType74 = period73.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableInstant) dateMidnight67, periodType74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight67.withWeekyear(59);
        java.util.Locale locale80 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar81 = dateMidnight67.toCalendar(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 122, chronology55, locale80, (java.lang.Integer) 6);
        org.joda.time.DateTimeZone dateTimeZone84 = dateTimeParserBucket83.getZone();
        dateTimeParserBucket83.setOffset((java.lang.Integer) 31);
        int int87 = dateTimeParserBucket83.getOffset();
        org.joda.time.DateTimeZone dateTimeZone88 = dateTimeParserBucket83.getZone();
        org.joda.time.DateTime dateTime89 = localTime33.toDateTimeToday(dateTimeZone88);
        org.joda.time.LocalTime localTime91 = localTime33.withMillisOfDay(54480104);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645401600001L + "'", long43 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645488000001L + "'", long70 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertEquals(locale80.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 31 + "'", int87 == 31);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(localTime91);
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        boolean boolean6 = dateTimeFormatter2.isParser();
        java.util.Locale locale9 = new java.util.Locale("PeriodType[Standard]", "");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 2022);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateTimeFormatter13.print(118054991870L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minusMonths(10);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.minus((long) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime16.toMutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.property(dateTimeFieldType22);
        mutableDateTime21.setHourOfDay(19);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) mutableDateTime21);
        int int27 = mutablePeriod26.getMinutes();
        mutablePeriod26.addDays(667);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-59) + "'", int27 == (-59));
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology4);
        mutablePeriod5.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod5.add(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        mutablePeriod5.add(0L, chronology19);
        boolean boolean22 = dateTimeFieldType1.isSupported(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.hours();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localTime24.getFieldTypes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((long) 10, chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        int int30 = timeOfDay28.getSecondOfMinute();
        org.joda.time.LocalTime localTime31 = localTime24.withFields((org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.LocalTime localTime33 = localTime24.plusSeconds(2022);
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis(904);
        org.joda.time.LocalTime localTime37 = localTime33.withMillisOfDay(11970);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.halfdayOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) '#');
        int int18 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.Period period19 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate20 = localDate17.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) period19);
        int int22 = yearMonthDay21.getYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        java.util.GregorianCalendar gregorianCalendar27 = dateMidnight24.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        int int30 = gregorianCalendar27.getGreatestMinimum(0);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar27);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfDay();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (short) 100, chronology42);
        org.joda.time.DurationField durationField46 = durationFieldType33.getField(chronology42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.hourOfDay();
        org.joda.time.DurationField durationField54 = durationFieldType33.getField(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.hours();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfYear();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology52);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay((long) 10, chronology59);
        org.joda.time.DateTimeField[] dateTimeFieldArray61 = timeOfDay60.getFields();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay((long) 10, chronology63);
        org.joda.time.DateTimeField[] dateTimeFieldArray65 = timeOfDay64.getFields();
        org.joda.time.Period period66 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay60, (org.joda.time.ReadablePartial) timeOfDay64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean68 = timeOfDay64.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(chronology71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusDays((int) (short) -1);
        int int75 = dateMidnight74.getYearOfEra();
        org.joda.time.Chronology chronology76 = dateMidnight74.getChronology();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.clockhourOfDay();
        boolean boolean79 = dateTimeFieldType67.isSupported(chronology76);
        org.joda.time.DateTime dateTime81 = dateTime57.withField(dateTimeFieldType67, 6);
        int int82 = localTime31.indexOf(dateTimeFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay21.withField(dateTimeFieldType67, 970);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldArray61);
        org.junit.Assert.assertNotNull(dateTimeFieldArray65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(14);
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(346);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology15);
        mutablePeriod16.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod16.add(0L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        mutablePeriod16.add(0L, chronology30);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (-1), chronology30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 10, chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight33.toMutableDateTime(chronology42);
        mutableDateTime45.setYear(2022);
        mutableDateTime45.setYear((-1));
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime45.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime52, dateTimeZone54);
        mutableDateTime52.setMillisOfDay(100);
        mutableDateTime52.addHours(133);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology63);
        mutablePeriod64.setPeriod((long) (short) 10, (long) (short) -1);
        int int69 = mutablePeriod64.getValue(0);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusDays((int) (short) -1);
        org.joda.time.Duration duration74 = mutablePeriod64.toDurationTo((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.days();
        org.joda.time.Period period78 = new org.joda.time.Period(1645488000000L, periodType77);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period(readableDuration79, readableInstant80);
        org.joda.time.PeriodType periodType82 = period81.getPeriodType();
        org.joda.time.Period period83 = period78.normalizedStandard(periodType82);
        org.joda.time.Period period84 = duration74.toPeriodTo(readableInstant75, periodType82);
        java.lang.String str85 = periodType82.getName();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime52, periodType82);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = mutablePeriod86.getValue(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Standard" + "'", str85, "Standard");
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime3 = dateTime1.minusMonths((int) (short) 100);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration9 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration7, 12);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((int) (short) -1);
        int int25 = dateMidnight24.getYearOfEra();
        org.joda.time.Chronology chronology26 = dateMidnight24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 10, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours(7);
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears((int) (byte) 0);
        int int33 = dateTime32.getMonthOfYear();
        org.joda.time.Interval interval34 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration35 = duration5.minus((org.joda.time.ReadableDuration) duration16);
        boolean boolean36 = dateTime1.equals((java.lang.Object) duration16);
        org.joda.time.Duration duration37 = duration16.toDuration();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = duration37.toPeriod(chronology38);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.joda.time.Period period1 = org.joda.time.Period.millis((-19041));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek((int) (short) 1);
        boolean boolean5 = calendar1.before((java.lang.Object) 18748801970L);
        int int7 = calendar1.getLeastMaximum(4);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar1.getLeastMaximum(54144726);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54144726");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456244288,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=44,MILLISECOND=288,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(3024000000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withWeekyear(54215);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths(2000);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        java.lang.String str3 = calendar1.getCalendarType();
        int int5 = calendar1.getLeastMaximum(0);
        int int7 = calendar1.getLeastMaximum(4);
        calendar1.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar1.getActualMinimum(93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 93");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456244302,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=44,MILLISECOND=302,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10, chronology17);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 10, chronology21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.Period period24 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay18, (org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 53);
        int int27 = timeOfDay11.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay11.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology34);
        mutablePeriod35.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod35.add(0L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        int int48 = dateMidnight47.getYearOfEra();
        org.joda.time.Chronology chronology49 = dateMidnight47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology49);
        mutablePeriod35.add(0L, chronology49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 0, (long) 6, chronology49);
        org.joda.time.Period period54 = period52.plusSeconds(12);
        org.joda.time.Period period55 = period54.normalizedStandard();
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay11.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.plusMinutes((-292275054));
        org.joda.time.TimeOfDay.Property property59 = timeOfDay58.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay60 = property59.getTimeOfDay();
        int int61 = property59.getMaximumValue();
        org.joda.time.DurationField durationField62 = property59.getRangeDurationField();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        int int69 = dateMidnight68.getYearOfEra();
        org.joda.time.Chronology chronology70 = dateMidnight68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.clockhourOfDay();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology70);
        org.joda.time.DateTime dateTime75 = dateTime73.minusSeconds(4);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime dateTime78 = dateTime75.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTime dateTime80 = dateTime75.plusMinutes(1);
        org.joda.time.DateTime.Property property81 = dateTime75.millisOfSecond();
        org.joda.time.DateTime dateTime82 = property81.getDateTime();
        org.joda.time.DateTime dateTime83 = property81.withMaximumValue();
        org.joda.time.DateTime dateTime85 = dateTime83.withMillis((long) 970);
        boolean boolean86 = property59.equals((java.lang.Object) 970);
        org.joda.time.ReadableInstant readableInstant87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int88 = property59.compareTo(readableInstant87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear(2022);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra(53);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMillis((-292275054));
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusDays((-1));
        org.joda.time.Chronology chronology21 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.minutes();
        boolean boolean23 = durationField22.isSupported();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.joda.time.Period period1 = org.joda.time.Period.millis(365);
        org.joda.time.Period period3 = period1.plusSeconds(26);
        org.joda.time.Duration duration4 = period3.toStandardDuration();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays((int) (short) -1);
        int int15 = dateMidnight14.getYearOfEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        long long17 = dateMidnight14.getMillis();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight14, periodType21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withWeekyear(59);
        java.util.Locale locale27 = new java.util.Locale("PeriodType[Standard]", "");
        java.util.Calendar calendar28 = dateMidnight14.toCalendar(locale27);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((-2240584440000L));
        org.joda.time.LocalTime localTime32 = localTime30.minusSeconds(9);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight14.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        java.lang.String str35 = mutableDateTime34.toString();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Period period37 = period3.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Weeks weeks38 = period37.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = period37.getValue((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645488000001L + "'", long17 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertEquals(locale27.toString(), "periodtype[standard]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T15:10:44.470-00:00:00.001" + "'", str35, "2022-02-21T15:10:44.470-00:00:00.001");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(weeks38);
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay3.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay3.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = property7.getYearMonthDay();
        org.joda.time.Interval interval9 = yearMonthDay8.toInterval();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval11 = yearMonthDay10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Interval interval14 = interval11.gap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.DateTime dateTime15 = interval11.getStart();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusDays((int) (short) -1);
        long long24 = dateMidnight21.getMillis();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.Period period26 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight21, periodType25);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime28 = yearMonthDay27.toDateTimeAtMidnight();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = interval17.abuts((org.joda.time.ReadableInterval) interval29);
        boolean boolean31 = interval11.isBefore((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Interval interval32 = interval9.overlap((org.joda.time.ReadableInterval) interval17);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645401600001L + "'", long24 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("295");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) (short) -1);
        int int8 = dateMidnight7.getYearOfEra();
        org.joda.time.Chronology chronology9 = dateMidnight7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.clockhourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 69, chronology9);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusMinutes(52);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((long) 10, chronology17);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 10, chronology21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.Period period24 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay18, (org.joda.time.ReadablePartial) timeOfDay22);
        int[] intArray25 = timeOfDay22.getValues();
        org.joda.time.DateTime dateTime26 = timeOfDay22.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay22.plusMinutes((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.withPeriodAdded(readablePeriod29, 54153800);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusMillis(86399999);
        java.lang.String str34 = timeOfDay31.toString();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 98898743301000L);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay31.minus((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getHours();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay13.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.plusMillis((-11));
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 9]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "T00:10:00.009" + "'", str34, "T00:10:00.009");
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusWeeks((-24356254));
        java.lang.String str7 = localDateTime0.toString();
        int int8 = localDateTime0.getDayOfMonth();
        int int9 = localDateTime0.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T15:10:44.543" + "'", str7, "2022-02-21T15:10:44.543");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT3024000S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt3024000s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate5 = localDate1.plusWeeks((int) (byte) 1);
        java.util.Date date7 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date7);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.getYearMonthDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DateTime dateTime22 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone21);
        long long24 = dateTimeZone21.previousTransition((long) '#');
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.Chronology chronology26 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withMillis((long) 24);
        long long6 = dateMidnight5.getMillis();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Period period9 = period7.withWeeks(4);
        org.joda.time.Period period11 = period7.plusYears((int) '#');
        org.joda.time.Hours hours12 = period7.toStandardHours();
        org.joda.time.Hours hours13 = period7.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36000L + "'", long2 == 36000L);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfSecond(53);
        org.joda.time.DateTime dateTime6 = dateTime3.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime6.withChronology(chronology14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(0);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        int int17 = localDate15.getDayOfMonth();
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalDate.Property property19 = localDate15.weekyear();
        org.joda.time.LocalDate localDate21 = localDate15.minusDays(54206680);
        java.util.Date date23 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromDateFields(date23);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay26 = property25.getYearMonthDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology34.getZone();
        org.joda.time.DateTime dateTime38 = yearMonthDay26.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate15.toDateTimeAtStartOfDay(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = localDate15.withDayOfMonth(335);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 335 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTime dateTime16 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone15);
        long long18 = dateTimeZone15.previousTransition((long) '#');
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMonths((-292275054));
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond(10);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardHours(10L);
        long long20 = duration19.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusSeconds(2);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusDays((int) (short) -1);
        int int37 = dateMidnight36.getYearOfEra();
        org.joda.time.Chronology chronology38 = dateMidnight36.getChronology();
        long long39 = dateMidnight36.getMillis();
        org.joda.time.DateMidnight.Property property40 = dateMidnight36.weekyear();
        org.joda.time.DateMidnight dateMidnight41 = property40.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight42 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property40.getFieldType();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.withField(dateTimeFieldType43, 32769);
        org.joda.time.LocalDateTime.Property property46 = localDateTime22.property(dateTimeFieldType43);
        int int47 = localDateTime11.get(dateTimeFieldType43);
        org.joda.time.LocalDateTime.Property property48 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime.Property property49 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime11.withCenturyOfEra(23);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        org.joda.time.LocalDateTime localDateTime57 = property56.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = property56.roundHalfFloorCopy();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) (short) -1);
        int int65 = dateMidnight64.getYearOfEra();
        org.joda.time.Chronology chronology66 = dateMidnight64.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusMillis(0);
        int[] intArray73 = new int[] {};
        int int74 = dateTimeField68.getMaximumValue((org.joda.time.ReadablePartial) localDateTime72, intArray73);
        int int76 = dateTimeField68.getMinimumValue((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField68.getType();
        boolean boolean78 = localDateTime58.isSupported(dateTimeFieldType77);
        boolean boolean79 = localDateTime11.isSupported(dateTimeFieldType77);
        org.joda.time.LocalDateTime.Property property80 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property81 = localDateTime11.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 36000L + "'", long20 == 36000L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(chronology38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645488000001L + "'", long39 == 1645488000001L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-24356254) + "'", int47 == (-24356254));
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 24 + "'", int74 == 24);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime48.setWeekOfWeekyear(31);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.days();
        org.joda.time.Period period65 = new org.joda.time.Period(1645488000000L, periodType64);
        mutableDateTime48.add((org.joda.time.ReadablePeriod) period65);
        mutableDateTime48.setMonthOfYear(1);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime48.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.hourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1970");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration7 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration5, 12);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 10, chronology24);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(7);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears((int) (byte) 0);
        int int31 = dateTime30.getMonthOfYear();
        org.joda.time.Interval interval32 = duration14.toIntervalFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant35 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration14, 122);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusDays((int) (short) -1);
        int int43 = dateMidnight42.getYearOfEra();
        org.joda.time.Chronology chronology44 = dateMidnight42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 10, chronology44);
        org.joda.time.DateTime dateTime48 = dateTime46.minusHours(7);
        org.joda.time.DateTime dateTime50 = dateTime48.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property51 = dateTime48.centuryOfEra();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMonths(70);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str56 = localDate55.toString();
        org.joda.time.LocalDate.Property property57 = localDate55.weekyear();
        org.joda.time.LocalDate localDate59 = property57.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = yearMonthDay60.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = yearMonthDay60.getFieldType((int) (byte) 1);
        boolean boolean66 = localDate59.isSupported(dateTimeFieldType65);
        int int67 = dateTime53.get(dateTimeFieldType65);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period70 = period68.multipliedBy((int) '4');
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 19044);
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        long long4 = dateMidnight1.getMillis();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withMillis((long) 7);
        org.joda.time.DateTime dateTime7 = dateMidnight1.toDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology10);
        mutablePeriod11.setPeriod((long) (short) 10, (long) (short) -1);
        int int16 = mutablePeriod11.getValue(0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        org.joda.time.Duration duration21 = mutablePeriod11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.Period period25 = new org.joda.time.Period(1645488000000L, periodType24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration26, readableInstant27);
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.Period period30 = period25.normalizedStandard(periodType29);
        org.joda.time.Period period31 = duration21.toPeriodTo(readableInstant22, periodType29);
        org.joda.time.Period period32 = period31.toPeriod();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight1.minus((org.joda.time.ReadablePeriod) period32);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645401600001L + "'", long4 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMonths(10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 10, chronology21);
        org.joda.time.DateTime dateTime24 = dateTime12.toDateTime(chronology21);
        org.joda.time.DurationField durationField25 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond(21);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        long long44 = dateMidnight41.getMillis();
        java.util.Locale locale48 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar49 = dateMidnight41.toCalendar(locale48);
        java.lang.String str50 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, 69, locale48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime34.yearOfCentury();
        java.lang.String str52 = localDateTime34.toString();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645488000001L + "'", long44 == 1645488000001L);
        org.junit.Assert.assertEquals(locale48.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "69" + "'", str50, "69");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-01-01T00:00:00.000" + "'", str52, "2022-01-01T00:00:00.000");
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        java.util.Locale locale10 = new java.util.Locale("Thu Dec 01 00:00:00 UTC 1898", "15:01:52.189", "15:01:52.189");
        java.util.Calendar calendar11 = dateMidnight3.toCalendar(locale10);
        int int13 = calendar11.getLeastMaximum(3);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar11);
        java.lang.String str15 = calendar11.getCalendarType();
        java.util.TimeZone timeZone16 = calendar11.getTimeZone();
        calendar11.setLenient(true);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertEquals(locale10.toString(), "thu dec 01 00:00:00 utc 1898_15:01:52.189_15:01:52.189");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645488000001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-00:00:00.001,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DurationField durationField11 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology17);
        mutablePeriod18.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod18.add(0L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        mutablePeriod18.add(0L, chronology32);
        boolean boolean35 = dateTimeFieldType14.isSupported(chronology32);
        org.joda.time.DurationField durationField36 = chronology32.hours();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localTime37.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime37.minus(readablePeriod39);
        org.joda.time.LocalTime localTime42 = localTime40.plusHours(32772);
        org.joda.time.LocalTime localTime44 = localTime42.plusMinutes(54152181);
        int[] intArray46 = chronology8.get((org.joda.time.ReadablePartial) localTime42, 1645456046184L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[15, 7, 26, 183]");
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) 10, 0L, chronology2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) chronology2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((long) 10, chronology6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = timeOfDay11.getFields();
        org.joda.time.Period period13 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay7, (org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean15 = timeOfDay11.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        boolean boolean26 = dateTimeFieldType14.isSupported(chronology23);
        boolean boolean27 = localTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localTime4.toDateTimeToday(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime35 = property34.getDateTime();
        boolean boolean36 = property34.isLeap();
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(4);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime12.withDayOfMonth((int) (short) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds(54145870);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(14);
        int int8 = dateTime7.getMillisOfSecond();
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekyear(870);
        long long13 = dateTime7.getMillis();
        int int14 = dateTime7.getSecondOfMinute();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 36633600001L + "'", long13 == 36633600001L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime41 = property38.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime43 = property38.addWrapField((-1));
        int int44 = mutableDateTime43.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = mutableDateTime43.getRoundingField();
        org.joda.time.DateTime dateTime46 = mutableDateTime43.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) 100, chronology10);
        org.joda.time.DurationField durationField14 = durationFieldType1.getField(chronology10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField22 = durationFieldType1.getField(chronology20);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(1645455743145L, chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology27);
        mutablePeriod28.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod28.add(0L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusDays((int) (short) -1);
        int int41 = dateMidnight40.getYearOfEra();
        org.joda.time.Chronology chronology42 = dateMidnight40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology42);
        mutablePeriod28.add(0L, chronology42);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (-1), chronology42);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        int int53 = dateMidnight52.getYearOfEra();
        org.joda.time.Chronology chronology54 = dateMidnight52.getChronology();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology54);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 10, chronology54);
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight45.toMutableDateTime(chronology54);
        org.joda.time.DurationField durationField58 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology54.getZone();
        boolean boolean60 = dateTimeZone59.isFixed();
        java.util.TimeZone timeZone61 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime62 = timeOfDay23.toDateTimeToday(dateTimeZone59);
        int int63 = dateTime62.getDayOfYear();
        org.joda.time.DateTime dateTime65 = dateTime62.minusMinutes(24);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay0.dayOfMonth();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setYear(2022);
        mutableDateTime36.setYear((-1));
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusDays((int) (short) -1);
        long long48 = dateMidnight45.getMillis();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.Period period50 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight45.toMutableDateTimeISO();
        int int52 = mutableDateTime51.getDayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        mutableDateTime51.setChronology(chronology60);
        mutableDateTime36.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime36.addYears((int) (byte) -1);
        int int66 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.setSecondOfMinute(11);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime36.minuteOfDay();
        mutableDateTime36.setMillisOfDay((int) (byte) 1);
        int int72 = mutableDateTime36.getYearOfCentury();
        int int73 = mutableDateTime36.getHourOfDay();
        org.joda.time.DateTimeField dateTimeField74 = mutableDateTime36.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setDateTime(1, 55415243, 19044, (int) 'u', 123, 197022, 58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645401600001L + "'", long48 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNull(dateTimeField74);
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(9);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.Instant instant11 = dateTime9.toInstant();
        int int12 = dateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((int) (short) -1);
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.Chronology chronology11 = dateMidnight9.getChronology();
        long long12 = dateMidnight9.getMillis();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight9, periodType16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minus((long) 19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (-1), chronology40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight43.toMutableDateTime(chronology52);
        mutableDateTime55.setYear(2022);
        mutableDateTime55.setMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        int int68 = localDateTime64.get(dateTimeFieldType67);
        int int69 = dateTime61.get(dateTimeFieldType67);
        mutableDateTime55.setMillis((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(chronology74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.minusDays((int) (short) -1);
        int int78 = dateMidnight77.getYearOfEra();
        org.joda.time.Chronology chronology79 = dateMidnight77.getChronology();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) (short) 10, chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusHours(7);
        org.joda.time.DateTime dateTime85 = dateTime83.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property86 = dateTime83.centuryOfEra();
        int int87 = dateTime83.getMillisOfSecond();
        org.joda.time.DateTime.Property property88 = dateTime83.yearOfEra();
        boolean boolean89 = dateTime61.isBefore((org.joda.time.ReadableInstant) dateTime83);
        int int90 = dateMidnight21.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645488000001L + "'", long12 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1970 + "'", int68 == 1970);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        long long4 = dateMidnight1.getMillis();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.withMillis((long) 7);
        org.joda.time.DateTime dateTime7 = dateMidnight1.toDateTimeISO();
        org.joda.time.Chronology chronology8 = dateMidnight1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology8.getDateTimeMillis(57, 55544163, 55269, (-23641), 54322377, 13, 54575778);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23641 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645401600001L + "'", long4 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        long long9 = dateMidnight6.getMillis();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withMillis((long) 7);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        long long18 = dateMidnight15.getMillis();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.Period period20 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight15, periodType19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight15.toMutableDateTimeISO();
        int int22 = dateMidnight11.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setMillis(600L);
        int int25 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusDays((int) (short) -1);
        int int30 = dateMidnight27.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight27.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withSecondsRemoved();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableDuration) duration37, periodType40);
        mutableDateTime21.setMinuteOfDay((int) 'x');
        mutableDateTime21.setDayOfYear(55);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645401600001L + "'", long9 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateMidnight17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645401600001L + "'", long18 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Thu Nov 29 23:10:00 GMT+00:00 1900", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=thunov2923:10:00gmt+00:001900");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        int int6 = dateMidnight3.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        java.util.Locale locale11 = new java.util.Locale("ISOChronology[Etc/UTC]", "24", "Days");
        int int12 = property7.getMaximumTextLength(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        int int15 = strSet14.size();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration21 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration19, 12);
        long long22 = duration17.getStandardMinutes();
        org.joda.time.Days days23 = duration17.toStandardDays();
        boolean boolean24 = strSet14.remove((java.lang.Object) duration17);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        int int26 = dateMidnight25.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.minusMonths(10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) (short) -1);
        int int35 = dateMidnight34.getYearOfEra();
        org.joda.time.Chronology chronology36 = dateMidnight34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis(0);
        int[] intArray43 = new int[] {};
        int int44 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42, intArray43);
        int int46 = dateTimeField38.getMinimumValue((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField38.getType();
        int int48 = dateMidnight25.get(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusDays((int) (short) -1);
        long long53 = dateMidnight50.getMillis();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight50.withMillis((long) 7);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        long long62 = dateMidnight59.getMillis();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.days();
        org.joda.time.Period period64 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight59, periodType63);
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight59.toMutableDateTimeISO();
        int int66 = dateMidnight55.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        boolean boolean67 = dateMidnight25.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        mutableDateTime65.setMillisOfSecond(70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(chronology73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minusDays((int) (short) -1);
        int int77 = dateMidnight76.getYearOfEra();
        org.joda.time.Chronology chronology78 = dateMidnight76.getChronology();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) 10, chronology78);
        org.joda.time.DateTime dateTime82 = dateTime80.minusHours(7);
        org.joda.time.DateTime dateTime84 = dateTime82.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property85 = dateTime82.centuryOfEra();
        org.joda.time.DateTime dateTime86 = property85.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime86.toMutableDateTime();
        mutableDateTime65.setMillis((org.joda.time.ReadableInstant) mutableDateTime87);
        mutableDateTime65.addYears(53);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime65.era();
        mutableDateTime65.addSeconds(122);
        org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) mutableDateTime65);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime65.setTime(54381673, 54180883, 2010, 446);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54381673 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals(locale11.toString(), "isochronology[etc/utc]_24_Days");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 50400L + "'", long22 == 50400L);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 24 + "'", int44 == 24);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 24 + "'", int48 == 24);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645401600001L + "'", long53 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645401600001L + "'", long62 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = dateTimeFormatter4.parseLocalDateTime("03:25:14.170");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        long long6 = java.util.Date.UTC(55415243, 55518718, 600, 378, 54568127, 105);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1894737408187725000L + "'", long6 == 1894737408187725000L);
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYear(68);
        org.joda.time.LocalDate.Property property16 = localDate12.dayOfMonth();
        org.joda.time.DateTime dateTime17 = localDate12.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        int int7 = yearMonthDay6.getYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay6.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.minusYears(31);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears((int) (short) 0);
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(926);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.roundHalfEven();
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        org.joda.time.MutableDateTime mutableDateTime42 = property38.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime44 = property38.set("1");
        mutableDateTime44.setWeekyear(999);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology56);
        mutablePeriod57.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod57.add(0L);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        int int70 = dateMidnight69.getYearOfEra();
        org.joda.time.Chronology chronology71 = dateMidnight69.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology71);
        mutablePeriod57.add(0L, chronology71);
        org.joda.time.Period period74 = new org.joda.time.Period((long) 0, (long) 6, chronology71);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology71);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now(chronology71);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str79 = localDate78.toString();
        org.joda.time.LocalDate.Property property80 = localDate78.weekyear();
        int int81 = localDate78.getCenturyOfEra();
        org.joda.time.DateTime dateTime82 = localDate78.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property83 = localDate78.year();
        org.joda.time.LocalDate localDate85 = localDate78.withYearOfEra(22);
        int int86 = localDate78.getDayOfYear();
        org.joda.time.LocalDate localDate88 = localDate78.plusWeeks(414);
        long long90 = chronology71.set((org.joda.time.ReadablePartial) localDate88, 1645974155242L);
        org.joda.time.DateTimeField dateTimeField91 = chronology71.millisOfDay();
        mutableDateTime44.setRounding(dateTimeField91);
        long long95 = dateTimeField91.add((-62482492799959L), 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970-01-01" + "'", str79, "1970-01-01");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 250441355242L + "'", long90 == 250441355242L);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-62482492799959L) + "'", long95 == (-62482492799959L));
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime16 = property14.getDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod21.add(0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        mutablePeriod21.add(0L, chronology35);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (-1), chronology35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 10, chronology47);
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight38.toMutableDateTime(chronology47);
        mutableDateTime50.setWeekOfWeekyear((int) (byte) 1);
        mutableDateTime50.addMonths((int) (short) 100);
        int int55 = property14.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime50.weekOfWeekyear();
        mutableDateTime50.addHours(71);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        int int15 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.secondOfMinute();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        int int12 = dateMidnight11.getYearOfEra();
        org.joda.time.Chronology chronology13 = dateMidnight11.getChronology();
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.weekyear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.withField(dateTimeFieldType18, 32769);
        org.joda.time.LocalDateTime.Property property21 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withDayOfYear(22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withFieldAdded(durationFieldType24, 54145870);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withDayOfYear(12);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645488000001L + "'", long14 == 1645488000001L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology12);
        mutablePeriod13.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod13.add(0L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        mutablePeriod13.add(0L, chronology27);
        boolean boolean30 = dateTimeFieldType9.isSupported(chronology27);
        org.joda.time.DurationField durationField31 = chronology27.hours();
        org.joda.time.DurationFieldType durationFieldType32 = durationField31.getType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime8.withFieldAdded(durationFieldType32, (int) (short) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime8.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy((-23641));
        int int38 = localDateTime37.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDate1.compareTo((org.joda.time.ReadablePartial) localDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        long long6 = dateMidnight3.getMillis();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.Period period8 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight3, periodType7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        long long17 = dateMidnight14.getMillis();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withMillis((long) 7);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateMidnight14, periodType20);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((int) (byte) 100, 8, 15, (int) (byte) 0, (int) (byte) 0, 5, (int) ' ');
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType30);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration12, (-3));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime9.dayOfMonth();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime9, chronology36);
        boolean boolean39 = mutableDateTime9.isEqual((long) 625);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology43);
        mutablePeriod44.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod44.add(0L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusDays((int) (short) -1);
        int int57 = dateMidnight56.getYearOfEra();
        org.joda.time.Chronology chronology58 = dateMidnight56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology58);
        mutablePeriod44.add(0L, chronology58);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (-1), chronology58);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        int int69 = dateMidnight68.getYearOfEra();
        org.joda.time.Chronology chronology70 = dateMidnight68.getChronology();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 10, chronology70);
        org.joda.time.MutableDateTime mutableDateTime73 = dateMidnight61.toMutableDateTime(chronology70);
        mutableDateTime73.setWeekOfWeekyear((int) (byte) 1);
        mutableDateTime73.setHourOfDay(14);
        boolean boolean78 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime73);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645401600001L + "'", long6 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645401600001L + "'", long17 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        int int7 = localDate1.getMonthOfYear();
        int int8 = localDate1.getYearOfCentury();
        org.joda.time.LocalDate.Property property9 = localDate1.era();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology13);
        mutablePeriod14.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod14.add(0L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        int int27 = dateMidnight26.getYearOfEra();
        org.joda.time.Chronology chronology28 = dateMidnight26.getChronology();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology28);
        mutablePeriod14.add(0L, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (-1), chronology28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 10, chronology40);
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight31.toMutableDateTime(chronology40);
        mutableDateTime43.setYear(2022);
        mutableDateTime43.setYear((-1));
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.monthOfYear();
        int int49 = mutableDateTime43.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime43, readableInstant50);
        java.lang.String str52 = mutableDateTime43.toString();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime54 = property53.roundHalfCeiling();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        long long61 = dateMidnight58.getMillis();
        org.joda.time.DateMidnight.Property property62 = dateMidnight58.weekyear();
        org.joda.time.DateMidnight dateMidnight63 = property62.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight64 = property62.roundHalfFloorCopy();
        int int65 = dateMidnight64.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withDayOfWeek(4);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight64.plus((long) 1);
        boolean boolean71 = dateMidnight69.isAfter(1645488000000000L);
        mutableDateTime54.setDate((org.joda.time.ReadableInstant) dateMidnight69);
        int int73 = property9.compareTo((org.joda.time.ReadableInstant) mutableDateTime54);
        mutableDateTime54.setMillisOfSecond(3);
        mutableDateTime54.setWeekyear(2019);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime54.secondOfMinute();
        int int79 = property78.get();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-0001-12-31T00:00:00.000-00:00:00.001" + "'", str52, "-0001-12-31T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645488000001L + "'", long61 == 1645488000001L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((long) 10, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        int[] intArray21 = new int[] { 2022, 'a', (short) 1, 11, 10, (short) 10 };
        int int22 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay13, intArray21);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay13.minusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime25 = timeOfDay13.toLocalTime();
        org.joda.time.TimeOfDay.Property property26 = timeOfDay13.hourOfDay();
        java.lang.String str27 = property26.getName();
        org.joda.time.TimeOfDay timeOfDay29 = property26.setCopy(23);
        org.joda.time.TimeOfDay timeOfDay30 = property26.withMaximumValue();
        int int31 = timeOfDay30.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay30.minusHours((int) (short) 10);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 97, 1, 11, 10, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hourOfDay" + "'", str27, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate1.year();
        org.joda.time.LocalDate localDate8 = localDate1.withYearOfEra(22);
        org.joda.time.LocalDate.Property property9 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate12 = property10.addToCopy(58);
        org.joda.time.LocalDate localDate13 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property10.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.LocalDate localDate16 = property10.withMinimumValue();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str19 = localDate18.toString();
        int int20 = localDate18.getYearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology23);
        mutablePeriod24.setPeriod((long) (short) 10, (long) (short) -1);
        int int29 = mutablePeriod24.getValue(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        org.joda.time.Duration duration34 = mutablePeriod24.toDurationTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.LocalDate localDate35 = localDate18.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.LocalDate.Property property36 = localDate35.weekOfWeekyear();
        org.joda.time.LocalDate localDate37 = property36.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate38 = property36.withMinimumValue();
        org.joda.time.LocalDate localDate40 = localDate38.minusYears(0);
        org.joda.time.Period period41 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate38);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 54402318, 991L);
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        int int5 = dateMidnight3.getWeekyear();
        org.joda.time.YearMonthDay yearMonthDay6 = dateMidnight3.toYearMonthDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str9 = localDate8.toString();
        org.joda.time.LocalDate.Property property10 = localDate8.weekyear();
        int int11 = localDate8.getCenturyOfEra();
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property13 = localDate8.year();
        int int14 = localDate8.getMonthOfYear();
        int int15 = localDate8.getYearOfCentury();
        int int16 = yearMonthDay6.compareTo((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay6.withDayOfMonth(10);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.plusYears(46);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay6.plusMonths((int) (byte) 10);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay6.year();
        int int24 = property23.get();
        java.lang.String str25 = property23.toString();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[year]" + "'", str25, "Property[year]");
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeField dateTimeField17 = localDate12.getField(0);
        org.joda.time.LocalDate localDate19 = localDate12.plusDays(11);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.joda.time.LocalDate localDate21 = property20.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.monthOfYear();
        int int39 = mutableDateTime33.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime33, readableInstant40);
        java.lang.String str42 = mutableDateTime33.toString();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime33.millisOfSecond();
        int int44 = mutableDateTime33.getMillisOfDay();
        mutableDateTime33.addHours(1971);
        mutableDateTime33.setTime(21889761L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setDate((-100), 658, 926);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 658 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-0001-12-31T00:00:00.000-00:00:00.001" + "'", str42, "-0001-12-31T00:00:00.000-00:00:00.001");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) (short) -1);
        int int7 = dateMidnight6.getYearOfEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 10, chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.minusHours(7);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears((int) (byte) 0);
        org.joda.time.DateTime.Property property15 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology5);
        mutablePeriod6.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod6.add(0L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        int int19 = dateMidnight18.getYearOfEra();
        org.joda.time.Chronology chronology20 = dateMidnight18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology20);
        mutablePeriod6.add(0L, chronology20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (-1), chronology20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusDays((int) (short) -1);
        int int31 = dateMidnight30.getYearOfEra();
        org.joda.time.Chronology chronology32 = dateMidnight30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 10, chronology32);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight23.toMutableDateTime(chronology32);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay1.withChronologyRetainFields(chronology32);
        int int37 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay1.minusSeconds(565);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(timeOfDay39);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        java.util.Date date1 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusDays((int) (short) -1);
        int int11 = dateMidnight10.getYearOfEra();
        org.joda.time.Chronology chronology12 = dateMidnight10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTime dateTime16 = yearMonthDay4.toDateTimeAtCurrentTime(dateTimeZone15);
        long long18 = dateTimeZone15.nextTransition(1375199L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1375199L + "'", long18 == 1375199L);
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusDays((int) (short) -1);
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.Chronology chronology10 = dateMidnight8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) 10, chronology10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((long) 10, chronology14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = timeOfDay15.getFields();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((long) 10, chronology18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.Period period21 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) timeOfDay19);
        long long24 = chronology10.add((org.joda.time.ReadablePeriod) period21, (long) 53, 100);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay1, chronology10);
        org.joda.time.DateTimeField dateTimeField26 = chronology10.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) 24);
        long long3 = dateMidnight2.getMillis();
        int int4 = dateMidnight2.getSecondOfDay();
        int int5 = dateMidnight2.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("ISOChronology[Etc/UTC]");
        java.util.TimeZone.setDefault(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(true, 55415243);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 55415243");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) 24);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getWeekOfWeekyear();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) 'a', (long) 1970);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusDays((int) (short) -1);
        long long12 = dateMidnight9.getMillis();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.withMillis((long) 7);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateMidnight9, periodType15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology20);
        mutablePeriod21.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod21.add(0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusDays((int) (short) -1);
        int int34 = dateMidnight33.getYearOfEra();
        org.joda.time.Chronology chronology35 = dateMidnight33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology35);
        mutablePeriod21.add(0L, chronology35);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (-1), chronology35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        int int46 = dateMidnight45.getYearOfEra();
        org.joda.time.Chronology chronology47 = dateMidnight45.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 10, chronology47);
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight38.toMutableDateTime(chronology47);
        mutableDateTime50.setYear(2022);
        mutableDateTime50.setYear((-1));
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.add((long) (short) 0);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.millisOfDay();
        mutableDateTime57.add((long) (-2));
        mutableDateTime57.addSeconds(0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.withZoneRetainFields(dateTimeZone69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(chronology71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusDays((int) (short) -1);
        int int75 = dateMidnight74.getYearOfEra();
        org.joda.time.Chronology chronology76 = dateMidnight74.getChronology();
        long long77 = dateMidnight74.getMillis();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableDuration78, readableInstant79);
        org.joda.time.PeriodType periodType81 = period80.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight70, (org.joda.time.ReadableInstant) dateMidnight74, periodType81);
        org.joda.time.Period period83 = new org.joda.time.Period((long) 3, (long) 32769, periodType81);
        org.joda.time.Period period85 = period83.plusYears(100);
        mutableDateTime57.add((org.joda.time.ReadablePeriod) period83, 70);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight9.plus((org.joda.time.ReadablePeriod) period83);
        org.joda.time.Period period89 = period83.normalizedStandard();
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight2.withPeriodAdded((org.joda.time.ReadablePeriod) period89, 54145870);
        org.joda.time.DateTime dateTime92 = dateMidnight91.toDateTimeISO();
        org.joda.time.DateTime dateTime94 = dateTime92.minusMillis(54360599);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645401600001L + "'", long12 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645488000001L + "'", long77 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setFirstDayOfWeek(24);
        calendar1.setTimeInMillis((-1L));
        java.util.TimeZone timeZone6 = calendar1.getTimeZone();
        int int7 = calendar1.getMinimalDaysInFirstWeek();
        boolean boolean8 = calendar1.isWeekDateSupported();
        java.util.Date date12 = new java.util.Date(50, 0, (int) '4');
        date12.setMonth(1970);
        int int15 = date12.getYear();
        java.util.Date date17 = new java.util.Date((long) 1);
        date17.setSeconds(7);
        boolean boolean20 = date12.before(date17);
        calendar1.setTime(date17);
        long long22 = date17.getTime();
        java.util.Locale locale26 = new java.util.Locale("ISOChronology[Etc/UTC]", "24", "Days");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale26);
        java.time.Instant instant29 = calendar28.toInstant();
        java.util.Date date30 = java.util.Date.from(instant29);
        date30.setMonth((-34));
        int int33 = date17.compareTo(date30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=7001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=7,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals(date12.toString(), "Wed Mar 21 00:00:00 GMT 2114");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 214 + "'", int15 == 214);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:00:07 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 7001L + "'", long22 == 7001L);
        org.junit.Assert.assertEquals(locale26.toString(), "isochronology[etc/utc]_24_Days");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645456245461,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=45,MILLISECOND=461,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Thu Mar 21 15:10:45 GMT 2019");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(4320000000L);
        java.util.Date date8 = new java.util.Date((int) (short) 0, 11, (int) (short) 0, (int) (short) -1, (int) (byte) 10);
        int int9 = date8.getYear();
        java.util.Calendar.Builder builder10 = builder2.setInstant(date8);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar.Builder builder12 = builder2.setLocale(locale11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Builder builder15 = builder13.setLocale(locale14);
        java.util.Locale locale16 = builder15.build();
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale16);
        java.util.Calendar.Builder builder19 = builder12.setLenient(false);
        java.util.Calendar calendar20 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar20.getActualMinimum(960895);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 960895");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Nov 29 23:10:00 GMT 1900");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-2180220600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=333,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        java.lang.Object obj4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology8);
        mutablePeriod9.setPeriod((long) (short) 10, (long) (short) -1);
        int int14 = mutablePeriod9.getValue(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusDays((int) (short) -1);
        org.joda.time.Duration duration19 = mutablePeriod9.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusDays((int) (short) -1);
        int int26 = dateMidnight25.getYearOfEra();
        org.joda.time.Chronology chronology27 = dateMidnight25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.halfdayOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight16, chronology27);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(obj4, periodType5, chronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology27);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime33.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter3.withZone(dateTimeZone34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 292278993);
        java.lang.StringBuffer stringBuffer38 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology42);
        mutablePeriod43.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod43.add(0L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutablePeriod43.add(0L, chronology57);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (-1), chronology57);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusDays((int) (short) -1);
        int int68 = dateMidnight67.getYearOfEra();
        org.joda.time.Chronology chronology69 = dateMidnight67.getChronology();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 10, chronology69);
        org.joda.time.MutableDateTime mutableDateTime72 = dateMidnight60.toMutableDateTime(chronology69);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight60.withDayOfYear(53);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter37.printTo(stringBuffer38, (org.joda.time.ReadableInstant) dateMidnight74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateMidnight74);
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        long long6 = dateMidnight3.getMillis();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight9 = property7.addWrapFieldToCopy(1970);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        org.joda.time.Period period12 = new org.joda.time.Period(1645488000000L, periodType11);
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (byte) 100);
        org.joda.time.Period period16 = mutablePeriod15.toPeriod();
        org.joda.time.Period period17 = period13.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period19 = period17.minusMonths(8);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusSeconds(2);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        long long35 = dateMidnight32.getMillis();
        org.joda.time.DateMidnight.Property property36 = dateMidnight32.weekyear();
        org.joda.time.DateMidnight dateMidnight37 = property36.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight38 = property36.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property36.getFieldType();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime28.withField(dateTimeFieldType39, 32769);
        org.joda.time.LocalDateTime.Property property42 = localDateTime28.year();
        org.joda.time.LocalDateTime.Property property43 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime.Property property44 = localDateTime28.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime46 = property44.roundHalfCeilingCopy();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.days();
        org.joda.time.Period period49 = new org.joda.time.Period(1645488000000L, periodType48);
        org.joda.time.Period period50 = period49.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) (byte) 100);
        org.joda.time.Period period53 = mutablePeriod52.toPeriod();
        org.joda.time.Period period54 = period50.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period56 = period50.withMonths(1970);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime46.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime46.minusHours(54369412);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight20.withFields((org.joda.time.ReadablePartial) localDateTime59);
        int int61 = localDateTime59.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645488000001L + "'", long6 == 1645488000001L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645488000001L + "'", long35 == 1645488000001L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.LocalDateTime localDateTime6 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property4.setCopy(1968);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(873);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.setYear(2022);
        mutableDateTime33.setYear((-1));
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = mutableDateTime48.getDayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusDays((int) (short) -1);
        int int56 = dateMidnight55.getYearOfEra();
        org.joda.time.Chronology chronology57 = dateMidnight55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology57);
        mutableDateTime48.setChronology(chronology57);
        mutableDateTime33.setTime((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime33.era();
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime33.getZone();
        org.joda.time.Instant instant63 = mutableDateTime33.toInstant();
        org.joda.time.Instant instant65 = instant63.plus(3024000000L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration71 = duration67.withDurationAdded((org.joda.time.ReadableDuration) duration69, 12);
        org.joda.time.Duration duration72 = duration69.toDuration();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration78 = duration74.withDurationAdded((org.joda.time.ReadableDuration) duration76, 12);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Period period80 = duration76.toPeriodFrom(readableInstant79);
        boolean boolean81 = duration72.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Instant instant83 = instant63.withDurationAdded((org.joda.time.ReadableDuration) duration76, (-59));
        org.joda.time.Chronology chronology84 = instant63.getChronology();
        org.joda.time.Chronology chronology85 = instant63.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology6);
        mutablePeriod7.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod7.add(0L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays((int) (short) -1);
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.Chronology chronology21 = dateMidnight19.getChronology();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology21);
        mutablePeriod7.add(0L, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (-1), chronology21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusDays((int) (short) -1);
        int int32 = dateMidnight31.getYearOfEra();
        org.joda.time.Chronology chronology33 = dateMidnight31.getChronology();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 10, chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight24.toMutableDateTime(chronology33);
        mutableDateTime36.setWeekOfWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone41);
        mutableDateTime36.setZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(528, 16);
        long long48 = dateTimeZone41.getMillisKeepLocal(dateTimeZone46, (long) 50);
        java.lang.String str49 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone41);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((-68993L), dateTimeZone41);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfDay();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime65 = dateTime63.minusSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        int int68 = dateTimeZone66.getStandardOffset((long) 19);
        long long70 = dateTimeZone41.getMillisKeepLocal(dateTimeZone66, (long) 8);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(71L, dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1901759951L) + "'", long48 == (-1901759951L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-00:00:00.001" + "'", str49, "-00:00:00.001");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 8L + "'", long70 == 8L);
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1645488000L);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(1746000);
        int int4 = localTime3.getSecondOfMinute();
        org.joda.time.LocalTime localTime6 = localTime3.plusMinutes((-292275054));
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 41 + "'", int4 == 41);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusDays(52);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond(10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusDays((int) (short) -1);
        int int22 = dateMidnight21.getYearOfEra();
        org.joda.time.Chronology chronology23 = dateMidnight21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 5, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusSeconds((int) '#');
        int int31 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withYear(292269054);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withZoneRetainFields(dateTimeZone39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        long long47 = dateMidnight44.getMillis();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableDuration48, readableInstant49);
        org.joda.time.PeriodType periodType51 = period50.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableInstant) dateMidnight44, periodType51);
        int int53 = dateMidnight40.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight40.plusMonths(363);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusDays((int) (short) -1);
        int int62 = dateMidnight61.getYearOfEra();
        org.joda.time.Chronology chronology63 = dateMidnight61.getChronology();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMillis(0);
        int[] intArray70 = new int[] {};
        int int71 = dateTimeField65.getMaximumValue((org.joda.time.ReadablePartial) localDateTime69, intArray70);
        int int73 = dateTimeField65.getMinimumValue((long) 1);
        java.lang.String str75 = dateTimeField65.getAsText((long) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField65.getType();
        org.joda.time.DateMidnight.Property property77 = dateMidnight40.property(dateTimeFieldType76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime34.property(dateTimeFieldType76);
        org.joda.time.LocalDateTime.Property property79 = localDateTime15.property(dateTimeFieldType76);
        int int80 = localDateTime6.get(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645488000001L + "'", long47 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 53 + "'", int53 == 53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 24 + "'", int71 == 24);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "23" + "'", str75, "23");
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 15 + "'", int80 == 15);
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) '#');
        org.joda.time.Duration duration5 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration3, 12);
        org.joda.time.Period period6 = new org.joda.time.Period();
        boolean boolean7 = duration1.equals((java.lang.Object) period6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        int int9 = dateMidnight8.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.minusMonths(10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusDays((int) (short) -1);
        int int18 = dateMidnight17.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateMidnight17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(0);
        int[] intArray26 = new int[] {};
        int int27 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime25, intArray26);
        int int29 = dateTimeField21.getMinimumValue((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField21.getType();
        int int31 = dateMidnight8.get(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) (short) -1);
        long long36 = dateMidnight33.getMillis();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withMillis((long) 7);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        long long45 = dateMidnight42.getMillis();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.days();
        org.joda.time.Period period47 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight42, periodType46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight42.toMutableDateTimeISO();
        int int49 = dateMidnight38.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = dateMidnight8.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology57);
        mutablePeriod58.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod58.add(0L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusDays((int) (short) -1);
        int int71 = dateMidnight70.getYearOfEra();
        org.joda.time.Chronology chronology72 = dateMidnight70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology72);
        mutablePeriod58.add(0L, chronology72);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (-1), chronology72);
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType53.getField(chronology72);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.days();
        org.joda.time.Period period79 = new org.joda.time.Period(1645488000000L, periodType78);
        org.joda.time.Period period80 = period79.normalizedStandard();
        int int81 = period80.getSeconds();
        int[] intArray83 = chronology72.get((org.joda.time.ReadablePeriod) period80, (long) (short) 0);
        org.joda.time.PeriodType periodType84 = period80.getPeriodType();
        org.joda.time.Period period85 = new org.joda.time.Period(36000L, 2L, periodType84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime48, periodType84);
        org.joda.time.Duration duration88 = duration1.minus(1645456055880L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645401600001L + "'", long36 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645401600001L + "'", long45 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology3);
        mutablePeriod4.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod4.add(0L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        mutablePeriod4.add(0L, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (-1), chronology18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusDays((int) (short) -1);
        int int29 = dateMidnight28.getYearOfEra();
        org.joda.time.Chronology chronology30 = dateMidnight28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 10, chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight21.toMutableDateTime(chronology30);
        mutableDateTime33.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime33.toMutableDateTime(dateTimeZone37);
        int int39 = mutableDateTime38.getSecondOfMinute();
        mutableDateTime38.setWeekyear(53);
        mutableDateTime38.addSeconds((-24356254));
        mutableDateTime38.addMillis(2000);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime38.year();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime50 = property46.addWrapField(54254711);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay0.withChronologyRetainFields(chronology2);
        org.joda.time.DateTime dateTime4 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay0.plusMonths(0);
        java.util.Date date11 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromDateFields(date11);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay14 = property13.getYearMonthDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusDays((int) (short) -1);
        int int21 = dateMidnight20.getYearOfEra();
        org.joda.time.Chronology chronology22 = dateMidnight20.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology22.getZone();
        org.joda.time.DateTime dateTime26 = yearMonthDay14.toDateTimeAtCurrentTime(dateTimeZone25);
        boolean boolean28 = dateTimeZone25.isStandardOffset((long) 0);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((int) (byte) -1, 5, 1, dateTimeZone25);
        org.joda.time.DateTime dateTime30 = yearMonthDay0.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfSecond(53);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusDays((int) (short) -1);
        int int45 = dateMidnight44.getYearOfEra();
        org.joda.time.Chronology chronology46 = dateMidnight44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime38.withChronology(chronology46);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(81L, chronology46);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str52 = localDate51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusDays((int) (short) -1);
        int int59 = dateMidnight58.getYearOfEra();
        org.joda.time.Chronology chronology60 = dateMidnight58.getChronology();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.halfdayOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) '#');
        int int66 = dateTimeField63.getMinimumValue((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.LocalDate localDate68 = localDate65.withYearOfEra((int) '4');
        boolean boolean69 = localDate51.isBefore((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        boolean boolean71 = localDate51.isSupported(dateTimeFieldType70);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = localDate51.getFieldTypes();
        int int73 = localDate51.getEra();
        long long75 = chronology46.set((org.joda.time.ReadablePartial) localDate51, (long) (short) 10);
        org.joda.time.DurationField durationField76 = chronology46.millis();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay0, chronology46);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.Period period4 = new org.joda.time.Period(1645488000000L, periodType3);
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period5.plusWeeks(50);
        org.joda.time.LocalDate localDate9 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period7, 24);
        org.joda.time.DateTime dateTime10 = localDate0.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) 0, 32769, (int) (byte) 10, (int) (short) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.Period period7 = new org.joda.time.Period(1645488000000L, periodType6);
        org.joda.time.Period period8 = period7.normalizedStandard();
        org.joda.time.Period period10 = period8.plusWeeks(50);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.Period period13 = new org.joda.time.Period(1645488000000L, periodType12);
        org.joda.time.Period period14 = period10.plus((org.joda.time.ReadablePeriod) period13);
        int int15 = period14.getSeconds();
        mutablePeriod4.add((org.joda.time.ReadablePeriod) period14);
        mutablePeriod4.add((int) '4', 902, 667, (int) (byte) 10, 54153800, 7, 14, 69);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology28);
        mutablePeriod29.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod29.add(0L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusDays((int) (short) -1);
        int int42 = dateMidnight41.getYearOfEra();
        org.joda.time.Chronology chronology43 = dateMidnight41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology43);
        mutablePeriod29.add(0L, chronology43);
        mutablePeriod29.setHours(10);
        int int48 = mutablePeriod29.getYears();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#', periodType50, chronology51);
        org.joda.time.Period period54 = period52.withDays((int) ' ');
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) period52);
        mutablePeriod29.setPeriod((long) 902);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod29.setPeriod((long) 1973);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.LocalDate localDate15 = localDate12.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        int int17 = localDate15.getDayOfMonth();
        int int18 = localDate15.getYearOfCentury();
        org.joda.time.LocalDate.Property property19 = localDate15.weekyear();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(2024);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears(59);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusHours(11970);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withCenturyOfEra(960005);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(68400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68400 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology9);
        mutablePeriod10.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod10.add(0L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) (short) -1);
        int int23 = dateMidnight22.getYearOfEra();
        org.joda.time.Chronology chronology24 = dateMidnight22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology24);
        mutablePeriod10.add(0L, chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 0, (long) 6, chronology24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(2, 12, (int) (short) 10, 3, (int) (byte) 1, chronology24);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(chronology24);
        java.util.Date date30 = localDate29.toDate();
        date30.setYear(31);
        java.lang.Object obj33 = date30.clone();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.days();
        org.joda.time.Period period36 = new org.joda.time.Period(1645488000000L, periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        boolean boolean38 = periodType35.isSupported(durationFieldType37);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.Period period41 = new org.joda.time.Period(1645488000000L, periodType40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(periodType40);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.clockhourOfDay();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (short) 100, chronology52);
        org.joda.time.DurationField durationField56 = durationFieldType43.getField(chronology52);
        int int57 = periodType40.indexOf(durationFieldType43);
        boolean boolean58 = periodType35.isSupported(durationFieldType43);
        org.joda.time.PeriodType periodType59 = periodType35.withYearsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period61 = new org.joda.time.Period((java.lang.Object) date30, periodType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.Date");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Feb 21 00:00:00 GMT 1931");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "Sat Feb 21 00:00:00 GMT 1931");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "Sat Feb 21 00:00:00 GMT 1931");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "Sat Feb 21 00:00:00 GMT 1931");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        calendar1.roll(0, true);
        calendar1.roll((int) (short) 0, true);
        calendar1.set((int) (byte) -1, 7, 9);
        int int14 = calendar1.getActualMaximum((int) (short) 1);
        calendar1.clear();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusDays((int) (short) -1);
        int int28 = dateMidnight27.getYearOfEra();
        org.joda.time.Chronology chronology29 = dateMidnight27.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) 10, chronology29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((long) 10, chronology33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = timeOfDay34.getFields();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((long) 10, chronology37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = timeOfDay38.getFields();
        org.joda.time.Period period40 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay34, (org.joda.time.ReadablePartial) timeOfDay38);
        long long43 = chronology29.add((org.joda.time.ReadablePeriod) period40, (long) 53, 100);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay20, chronology29);
        org.joda.time.LocalTime localTime45 = timeOfDay20.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology50);
        mutablePeriod51.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod51.add(0L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusDays((int) (short) -1);
        int int64 = dateMidnight63.getYearOfEra();
        org.joda.time.Chronology chronology65 = dateMidnight63.getChronology();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology65);
        mutablePeriod51.add(0L, chronology65);
        boolean boolean68 = dateTimeFieldType47.isSupported(chronology65);
        org.joda.time.DurationField durationField69 = chronology65.hours();
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.fromMillisOfDay((-1L), chronology65);
        org.joda.time.DurationField durationField71 = chronology65.seconds();
        boolean boolean72 = localTime45.equals((java.lang.Object) chronology65);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(chronology73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.minusDays((int) (short) -1);
        int int77 = dateMidnight76.getYearOfEra();
        org.joda.time.Chronology chronology78 = dateMidnight76.getChronology();
        int int79 = dateMidnight76.getSecondOfMinute();
        org.joda.time.DateMidnight.Property property80 = dateMidnight76.weekyear();
        java.util.Locale locale84 = new java.util.Locale("ISOChronology[Etc/UTC]", "24", "Days");
        int int85 = property80.getMaximumTextLength(locale84);
        java.util.Set<java.lang.String> strSet86 = locale84.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet87 = locale84.getUnicodeLocaleKeys();
        java.lang.String str88 = locale84.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) 55363985, chronology65, locale84, (java.lang.Integer) 38, 382);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = calendar1.getDisplayName(15, 192, locale84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292269054 + "'", int14 == 292269054);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53L + "'", long43 == 53L);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertEquals(locale84.toString(), "isochronology[etc/utc]_24_Days");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "24" + "'", str88, "24");
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 10, chronology1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay2.getFields();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((long) 10, chronology5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((long) 10, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusSeconds((int) '4');
        int int15 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.withMillisOfSecond(1);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay2.secondOfMinute();
        int int19 = property18.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        java.lang.String str21 = property18.getAsString();
        org.joda.time.TimeOfDay timeOfDay22 = property18.withMinimumValue();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.withZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        long long35 = dateMidnight32.getMillis();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateMidnight32, periodType39);
        int int41 = dateMidnight28.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight28.plusMonths(363);
        org.joda.time.DateMidnight.Property property44 = dateMidnight28.era();
        org.joda.time.Interval interval45 = dateMidnight28.toInterval();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight28.withMillis((long) (-292275054));
        org.joda.time.DateTime dateTime48 = dateMidnight47.toDateTime();
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale50.getCountry();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = locale50.getDisplayVariant(locale52);
        java.util.Locale locale56 = new java.util.Locale("1970", "15:02:00.475");
        java.lang.String str57 = locale52.getDisplayScript(locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale52);
        java.lang.String str59 = dateTime48.toString("828", locale52);
        java.lang.String str60 = property18.getAsText(locale52);
        int int61 = property18.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property18.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645488000001L + "'", long35 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 53 + "'", int41 == 53);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "KR" + "'", str51, "KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals(locale56.toString(), "1970_15:02:00.475");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645456245848,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=45,MILLISECOND=848,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "828" + "'", str59, "828");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(54680487, (-292275054), 1971, (-27423359), 8001, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27423359 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withChronology(chronology7);
        boolean boolean9 = dateTimeFormatter8.isPrinter();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval1 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval3 = yearMonthDay2.toInterval();
        org.joda.time.Interval interval4 = interval1.gap((org.joda.time.ReadableInterval) interval3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.format.PeriodFormatter periodFormatter7 = null;
        java.lang.String str8 = mutablePeriod6.toString(periodFormatter7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        int int11 = dateMidnight10.getMillisOfSecond();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#', periodType13, chronology14);
        org.joda.time.Period period17 = period15.withDays((int) ' ');
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) period17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval20 = yearMonthDay19.toInterval();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusDays((int) (short) -1);
        long long27 = dateMidnight24.getMillis();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.Period period29 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight24, periodType28);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime31 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = interval20.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Interval interval34 = interval18.overlap((org.joda.time.ReadableInterval) interval32);
        long long35 = interval18.getEndMillis();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay();
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Interval interval40 = interval37.gap((org.joda.time.ReadableInterval) interval39);
        boolean boolean41 = interval18.abuts((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusDays((int) (short) -1);
        long long46 = dateMidnight43.getMillis();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.withMillis((long) 7);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours(10L);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusDays((int) (short) -1);
        long long55 = dateMidnight52.getMillis();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.days();
        org.joda.time.Period period57 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight52, periodType56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight52.toMutableDateTimeISO();
        int int59 = dateMidnight48.compareTo((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight48.plusWeeks(10);
        org.joda.time.Interval interval62 = dateMidnight61.toInterval();
        boolean boolean63 = interval18.abuts((org.joda.time.ReadableInterval) interval62);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval18);
        boolean boolean65 = interval1.isAfter((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.withZoneRetainFields(dateTimeZone70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.minusDays((int) (short) -1);
        int int76 = dateMidnight75.getYearOfEra();
        org.joda.time.Chronology chronology77 = dateMidnight75.getChronology();
        long long78 = dateMidnight75.getMillis();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period(readableDuration79, readableInstant80);
        org.joda.time.PeriodType periodType82 = period81.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableInstant) dateMidnight75, periodType82);
        int int84 = dateMidnight71.getDayOfYear();
        org.joda.time.Instant instant85 = dateMidnight71.toInstant();
        org.joda.time.Interval interval86 = interval1.withEnd((org.joda.time.ReadableInstant) instant85);
        org.joda.time.Instant instant88 = instant85.withMillis(0L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645401600001L + "'", long27 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1648166400036L + "'", long35 == 1648166400036L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645401600001L + "'", long46 == 1645401600001L);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645401600001L + "'", long55 == 1645401600001L);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645488000001L + "'", long78 == 1645488000001L);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 53 + "'", int84 == 53);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(instant88);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        int int4 = dateMidnight3.getYearOfEra();
        org.joda.time.Chronology chronology5 = dateMidnight3.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.DurationField durationField7 = chronology5.months();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[-00:00:00.001]" + "'", str6, "ISOChronology[-00:00:00.001]");
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusDays((int) (short) -1);
        int int6 = dateMidnight5.getYearOfEra();
        org.joda.time.Chronology chronology7 = dateMidnight5.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) '#');
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) '4');
        org.joda.time.DateTimeField dateTimeField17 = localDate12.getField((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate12.plusYears(8);
        org.joda.time.LocalDate localDate21 = localDate12.withYearOfCentury(0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology25);
        mutablePeriod26.setPeriod((long) (short) 10, (long) (short) -1);
        mutablePeriod26.add(0L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusDays((int) (short) -1);
        int int39 = dateMidnight38.getYearOfEra();
        org.joda.time.Chronology chronology40 = dateMidnight38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology40);
        mutablePeriod26.add(0L, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (-1), chronology40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(chronology47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusDays((int) (short) -1);
        int int51 = dateMidnight50.getYearOfEra();
        org.joda.time.Chronology chronology52 = dateMidnight50.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) 10, chronology52);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight43.toMutableDateTime(chronology52);
        mutableDateTime55.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime55.toMutableDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) (byte) -1, (long) '#', chronology63);
        mutablePeriod64.setPeriod((long) (short) 10, (long) (short) -1);
        int int68 = mutablePeriod64.getMonths();
        mutablePeriod64.addMinutes((int) (short) 0);
        mutableDateTime55.add((org.joda.time.ReadablePeriod) mutablePeriod64, 12);
        org.joda.time.LocalDate localDate73 = localDate12.minus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.LocalDate localDate75 = localDate73.withYearOfEra(228);
        int int76 = localDate73.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) '#');
        java.lang.String str2 = localDate1.toString();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate5 = localDate1.plusWeeks((int) (byte) 1);
        java.util.Date date7 = new java.util.Date((long) 1);
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromDateFields(date7);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay10 = property9.getYearMonthDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays((int) (short) -1);
        int int17 = dateMidnight16.getYearOfEra();
        org.joda.time.Chronology chronology18 = dateMidnight16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DateTime dateTime22 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone21);
        long long24 = dateTimeZone21.previousTransition((long) '#');
        org.joda.time.DateTime dateTime25 = localDate5.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.Chronology chronology26 = localDate5.getChronology();
        int int27 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property28 = localDate5.weekOfWeekyear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear(903);
        boolean boolean11 = dateTimeFormatter5.isPrinter();
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable12, (-2102544959999L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) (short) -1);
        int int13 = dateMidnight12.getYearOfEra();
        org.joda.time.Chronology chronology14 = dateMidnight12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 10, chronology14);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds(14);
        boolean boolean19 = dateMidnight5.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime18.withDayOfWeek(1);
        org.joda.time.DateTime dateTime24 = dateTime22.plus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime22.minusWeeks(12);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusDays((int) (short) -1);
        int int33 = dateMidnight32.getYearOfEra();
        org.joda.time.Chronology chronology34 = dateMidnight32.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 6, (long) 2022, chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMillisOfSecond(10);
        java.lang.String str43 = localDateTime39.toString("1970-01-01");
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) (-1));
        org.joda.time.DateTimeField dateTimeField46 = chronology34.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime26.toMutableDateTime(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1969, 12, 31, 86399998]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }
}

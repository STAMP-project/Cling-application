import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType0.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.yearOfEra();
        boolean boolean30 = dateTimeField29.isLenient();
        long long33 = dateTimeField29.add(8380845299L, 840000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 26507848060845299L + "'", long33 == 26507848060845299L);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period7.get(durationFieldType9);
        int int11 = period7.getWeeks();
        org.joda.time.Duration duration12 = period7.toStandardDuration();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = period16.getFieldTypes();
        org.joda.time.Period period19 = period16.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Weeks weeks22 = weeks20.plus(0);
        boolean boolean23 = duration12.equals((java.lang.Object) weeks22);
        int int24 = weeks22.size();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(4180278993L);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.LocalDate localDate17 = dateTime5.toLocalDate();
        int int18 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime20 = dateTime5.withSecondOfMinute(0);
        long long21 = dateTime5.getMillis();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        int int25 = dateTime7.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime7.withWeekOfWeekyear(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 999 + "'", int25 == 999);
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        long long5 = instant1.getMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = instant1.toString(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str7, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        int int6 = property2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withParseType(periodType10);
        java.util.Locale locale12 = periodFormatter9.getLocale();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter9.withLocale(locale13);
        java.util.Locale locale16 = locale13.stripExtensions();
        int int17 = property2.getMaximumShortTextLength(locale13);
        org.joda.time.DateTime dateTime18 = property2.withMinimumValue();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.DateTime dateTime23 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, readableInstant27, periodType28);
        mutablePeriod29.setMonths((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime21.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTime dateTime34 = dateTime21.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.monthOfYear();
        org.joda.time.DateTime.Property property36 = dateTime34.weekyear();
        java.lang.Object obj37 = null;
        org.joda.time.Instant instant38 = new org.joda.time.Instant(obj37);
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str42 = dateTimeZone39.getName((long) 10);
        java.lang.String str44 = dateTimeZone39.getName((long) 8);
        int int46 = dateTimeZone39.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime47 = dateTime34.withZone(dateTimeZone39);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType49 = periodType48.withMonthsRemoved();
        java.lang.String str50 = periodType49.getName();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.Instant instant56 = dateTime53.toInstant();
        boolean boolean57 = periodType49.equals((java.lang.Object) dateTime53);
        org.joda.time.DateTime.Property property58 = dateTime53.millisOfSecond();
        boolean boolean59 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean60 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Millis" + "'", str50, "Millis");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime27 = dateTime14.minusWeeks((int) (byte) 1);
        int int28 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property29 = dateTime14.minuteOfHour();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = dateTime32.isEqual(10L);
        org.joda.time.DateTime dateTime36 = dateTime32.withCenturyOfEra((int) (byte) 1);
        boolean boolean37 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTime dateTime53 = dateTime40.minusWeeks((int) (byte) 1);
        long long54 = dateTime40.getMillis();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.withZoneRetainFields(dateTimeZone59);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69, periodType70);
        mutablePeriod71.setMonths((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime63.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTime dateTime76 = dateTime63.minusWeeks((int) (byte) 1);
        int int77 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime.Property property78 = dateTime63.minuteOfHour();
        org.joda.time.DateTime dateTime80 = dateTime63.withYear(1969);
        org.joda.time.Chronology chronology81 = dateTime80.getChronology();
        org.joda.time.DurationField durationField82 = durationFieldType55.getField(chronology81);
        org.joda.time.DateTime dateTime83 = dateTime40.toDateTime(chronology81);
        org.joda.time.Weeks weeks84 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime40);
        java.util.Locale locale85 = java.util.Locale.ITALY;
        java.util.Locale locale89 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str90 = locale85.getDisplayCountry(locale89);
        java.lang.String str91 = locale89.getDisplayVariant();
        java.util.Locale locale92 = java.util.Locale.ENGLISH;
        java.lang.String str93 = locale89.getDisplayVariant(locale92);
        java.lang.String str94 = locale89.toLanguageTag();
        java.util.Calendar calendar95 = dateTime32.toCalendar(locale89);
        org.joda.time.DateTime dateTime97 = dateTime32.minusMillis(59);
        int int98 = property5.compareTo((org.joda.time.ReadableInstant) dateTime32);
        int int99 = dateTime32.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(weeks84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale89.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Italy" + "'", str90, "Italy");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "und" + "'", str94, "und");
        org.junit.Assert.assertNotNull(calendar95);
// flaky:         org.junit.Assert.assertEquals(calendar95.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 86399 + "'", int99 == 86399);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds3 = seconds0.plus(seconds2);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T14:54:50.337Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:54:50.337z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.PeriodType periodType6 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType7 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 19, periodType7);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration13 = null;
        boolean boolean14 = duration11.isEqual(readableDuration13);
        org.joda.time.Duration duration16 = duration11.minus((long) 1);
        org.joda.time.Duration duration18 = duration16.minus((long) '4');
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.plus((long) (byte) 0);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        boolean boolean36 = dateTime34.isEqual(10L);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType39, chronology40);
        org.joda.time.PeriodType periodType42 = periodType39.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime34, periodType42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration25, periodType42);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime21, periodType45);
        org.joda.time.Duration duration48 = duration16.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int59 = mutablePeriod58.getDays();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        boolean boolean70 = interval65.contains((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        mutablePeriod58.setPeriod((long) 'u', (long) 1969, chronology71);
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) 100, chronology71);
        org.joda.time.Period period74 = duration48.toPeriod(chronology71);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds79 = duration78.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration80 = null;
        boolean boolean81 = duration78.isEqual(readableDuration80);
        org.joda.time.Duration duration83 = duration78.minus((long) 1);
        org.joda.time.Duration duration85 = duration83.minus((long) '4');
        boolean boolean86 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration85);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(seconds79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.PeriodType periodType6 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType7 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 19, periodType7);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setSeconds((-292276));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField15 = chronology9.minutes();
        long long18 = durationField15.getDifferenceAsLong((-43199999L), (long) 365);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27, periodType35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Instant instant42 = dateTime39.toInstant();
        org.joda.time.DateTime dateTime44 = dateTime39.withMillis((long) '4');
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime48 = instant47.toDateTime();
        org.joda.time.TimeOfDay timeOfDay49 = dateTime48.toTimeOfDay();
        org.joda.time.DateTime dateTime50 = dateTime39.withFields((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.DateTime.Property property51 = dateTime50.millisOfSecond();
        org.joda.time.DurationField durationField52 = property51.getDurationField();
        int int53 = durationField15.compareTo(durationField52);
        boolean boolean54 = durationField52.isSupported();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-720L) + "'", long18 == (-720L));
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("Italian", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        mutablePeriod8.setWeeks((int) '4');
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) days11);
        mutablePeriod8.setPeriod(128770560000000000L, 1640995200000L);
        mutablePeriod8.setYears(0);
        int int18 = mutablePeriod8.getYears();
        mutablePeriod8.addYears(7);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 100, (-2147483648), 1439, (-292275054), 1439, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Period period12 = period10.minusMinutes((int) 'u');
        org.joda.time.Weeks weeks13 = period12.toStandardWeeks();
        org.joda.time.Period period15 = period12.withSeconds((-1));
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.Period period17 = period16.negated();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days2 = days0.dividedBy((int) (byte) 1);
        org.joda.time.Days days3 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        int int5 = days3.get(durationFieldType4);
        boolean boolean6 = days0.isLessThan(days3);
        org.joda.time.PeriodType periodType7 = days3.getPeriodType();
        int int8 = days3.getDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        long long20 = dateTime15.getMillis();
        org.joda.time.Instant instant21 = dateTime15.toInstant();
        org.joda.time.DateTime dateTime23 = dateTime15.plus(1645455304L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.secondOfMinute();
        boolean boolean28 = dateTime15.equals((java.lang.Object) property27);
        org.joda.time.DurationField durationField29 = property27.getRangeDurationField();
        int int30 = property27.getMinimumValue();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.add(0L, 69);
        boolean boolean11 = dateTimeField2.isLenient();
        org.joda.time.DurationField durationField12 = dateTimeField2.getRangeDurationField();
        boolean boolean13 = durationField12.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2980800000L + "'", long10 == 2980800000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfMonth();
        org.joda.time.DurationField durationField25 = chronology21.millis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        boolean boolean34 = interval29.contains((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weeks();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.centuries();
        org.joda.time.DurationField durationField39 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfWeek();
        org.joda.time.DurationField durationField41 = chronology35.minutes();
        long long44 = durationField41.getDifferenceAsLong((-43199999L), (long) 365);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = duration47.plus((long) (byte) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        boolean boolean55 = dateTime53.isEqual(10L);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType58, chronology59);
        org.joda.time.PeriodType periodType61 = periodType58.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53, periodType61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime.Property property66 = dateTime65.era();
        org.joda.time.DateTime dateTime67 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Instant instant68 = dateTime65.toInstant();
        org.joda.time.DateTime dateTime70 = dateTime65.withMillis((long) '4');
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime74 = instant73.toDateTime();
        org.joda.time.TimeOfDay timeOfDay75 = dateTime74.toTimeOfDay();
        org.joda.time.DateTime dateTime76 = dateTime65.withFields((org.joda.time.ReadablePartial) timeOfDay75);
        org.joda.time.DateTime.Property property77 = dateTime76.millisOfSecond();
        org.joda.time.DurationField durationField78 = property77.getDurationField();
        int int79 = durationField41.compareTo(durationField78);
        int int82 = durationField78.getDifference(141022L, (long) (byte) 10);
        long long85 = durationField78.subtract(1645455304L, 19);
        int int86 = durationField25.compareTo(durationField78);
        java.lang.String str87 = durationField25.getName();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-720L) + "'", long44 == (-720L));
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 141012 + "'", int82 == 141012);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645455285L + "'", long85 == 1645455285L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "millis" + "'", str87, "millis");
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        org.joda.time.Days days0 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days2 = days0.minus((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours3 = days0.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 24");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType5.getRangeDurationType();
        int int10 = periodType4.indexOf(durationFieldType9);
        org.joda.time.PeriodType periodType11 = periodType4.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 69, (-104509440000000001L), periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -104509440000000070");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add(1L, (-1));
        long long11 = dateTimeField2.add(0L, 0L);
        boolean boolean12 = dateTimeField2.isSupported();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, readableInstant21, periodType22);
        mutablePeriod23.setMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.LocalDate localDate27 = dateTime15.toLocalDate();
        int int28 = localDate27.size();
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.Duration duration36 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant37, periodType38);
        mutablePeriod39.setMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime31.plus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.LocalDate localDate43 = dateTime31.toLocalDate();
        int int44 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate43);
        int int45 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate43);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-43199999L) + "'", long8 == (-43199999L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        org.joda.time.Hours hours6 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours8 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours10 = hours8.minus((int) (short) 10);
        boolean boolean11 = hours6.isGreaterThan(hours10);
        java.lang.Object obj12 = null;
        org.joda.time.Instant instant13 = new org.joda.time.Instant(obj12);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        boolean boolean15 = hours10.equals((java.lang.Object) dateTimeZone14);
        java.lang.String str16 = dateTimeZone14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((int) '4', 0, 0, 893, 141012, 2022, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 893 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        boolean boolean11 = periodType6.equals((java.lang.Object) builder10);
        int int12 = periodType6.size();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField15 = chronology9.minutes();
        long long18 = durationField15.getDifferenceAsLong((-43199999L), (long) 365);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27, periodType35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Instant instant42 = dateTime39.toInstant();
        org.joda.time.DateTime dateTime44 = dateTime39.withMillis((long) '4');
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime48 = instant47.toDateTime();
        org.joda.time.TimeOfDay timeOfDay49 = dateTime48.toTimeOfDay();
        org.joda.time.DateTime dateTime50 = dateTime39.withFields((org.joda.time.ReadablePartial) timeOfDay49);
        org.joda.time.DateTime.Property property51 = dateTime50.millisOfSecond();
        org.joda.time.DurationField durationField52 = property51.getDurationField();
        int int53 = durationField15.compareTo(durationField52);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = durationField52.getDifference((-1921997864959L), (-248399900L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1921749465059");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-720L) + "'", long18 == (-720L));
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (short) 1, 364, 69, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes21 = minutes19.minus((int) (short) -1);
        boolean boolean22 = minutes18.isGreaterThan(minutes19);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        boolean boolean24 = minutes18.isLessThan(minutes23);
        org.joda.time.DateTime dateTime25 = dateTime8.plus((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.DateTime dateTime26 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime8.minuteOfHour();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZone(dateTimeZone31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean39 = dateTime35.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime30.property(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime30.getZone();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime43 = dateTime8.toDateTime(dateTimeZone41);
        boolean boolean45 = dateTime43.isBefore((-1298798110310400001L));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime35.plusMillis((int) ' ');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1970, 98, (-23), (-2147483648), 53669837, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483648 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long9 = dateTimeField2.roundHalfFloor(2678400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2678400000L + "'", long9 == 2678400000L);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        int int19 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime21 = property20.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = property20.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399 + "'", int19 == 86399);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 101);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        boolean boolean6 = dateTime4.isEqual(10L);
        org.joda.time.DateTime dateTime8 = dateTime4.withCenturyOfEra((int) (byte) 1);
        int int9 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes13 = minutes11.minus((int) (short) -1);
        boolean boolean14 = minutes10.isGreaterThan(minutes11);
        org.joda.time.Minutes minutes15 = null;
        org.joda.time.Minutes minutes16 = minutes11.minus(minutes15);
        org.joda.time.Minutes minutes18 = minutes11.plus((int) (short) 1);
        org.joda.time.PeriodType periodType19 = minutes18.getPeriodType();
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.TWO;
        boolean boolean21 = minutes18.isLessThan(minutes20);
        org.joda.time.Minutes minutes23 = minutes20.minus(70);
        org.joda.time.DurationFieldType durationFieldType24 = minutes20.getFieldType();
        org.joda.time.DateTime dateTime26 = dateTime4.withFieldAdded(durationFieldType24, (-1));
        int int27 = dateTime4.getMinuteOfHour();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) 0, periodType31, chronology34);
        org.joda.time.PeriodType periodType36 = periodType31.withMonthsRemoved();
        org.joda.time.PeriodType periodType37 = periodType31.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime4, periodType37);
        org.joda.time.DateTime dateTime40 = dateTime4.minusHours(19);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("Italian (Italy)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Italian (Italy)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        long long36 = dateTimeField33.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial37 = null;
        int int38 = dateTimeField33.getMinimumValue(readablePartial37);
        long long41 = dateTimeField33.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField33.getType();
        java.lang.String str44 = dateTimeField33.getAsText((long) 1);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        int int48 = dateTimeField33.getMaximumShortTextLength(locale46);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = dateTimeField28.set((long) 12, "Chinesisch", locale46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Chinesisch\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 43200000L + "'", long36 == 43200000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AM" + "'", str44, "AM");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "China" + "'", str47, "China");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears(1969);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(1439);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35, periodType36);
        mutablePeriod37.setMonths((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime29.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.LocalDate localDate41 = dateTime29.toLocalDate();
        int int42 = localDate41.size();
        org.joda.time.DateTime dateTime43 = dateTime26.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration49 = duration46.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Period period51 = duration46.toPeriodTo(readableInstant50);
        org.joda.time.Duration duration53 = duration46.minus(43200000L);
        org.joda.time.DateTime dateTime54 = dateTime26.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Minutes minutes55 = duration53.toStandardMinutes();
        org.joda.time.Seconds seconds56 = minutes55.toStandardSeconds();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(seconds56);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration10 = duration2.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration10.toPeriod(periodType16, chronology17);
        org.joda.time.Minutes minutes19 = duration10.toStandardMinutes();
        org.joda.time.MutablePeriod mutablePeriod20 = minutes19.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int32 = mutablePeriod31.getDays();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.Interval interval42 = property41.toInterval();
        boolean boolean43 = interval38.contains((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Chronology chronology44 = interval42.getChronology();
        mutablePeriod31.setPeriod((long) 'u', (long) 1969, chronology44);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 100, chronology44);
        mutablePeriod20.add((long) (-27349920), chronology44);
        mutablePeriod20.clear();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology6);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10, periodType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.Duration duration15 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period20 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period22 = period20.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationTo(readableInstant23);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = duration27.toPeriodFrom(readableInstant28);
        org.joda.time.Duration duration30 = duration18.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = duration15.plus((org.joda.time.ReadableDuration) duration18);
        mutablePeriod7.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int45 = mutablePeriod44.getDays();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod44.setPeriod((long) 'u', (long) 1969, chronology57);
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, chronology57);
        mutablePeriod7.setPeriod((long) 1, (long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.year();
        org.joda.time.DurationField durationField62 = chronology57.seconds();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Hours hours66 = duration65.toStandardHours();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period70 = duration69.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = period70.getFieldTypes();
        org.joda.time.Period period73 = period70.minusYears((int) (byte) 1);
        org.joda.time.Period period75 = period70.plusMonths((int) (byte) 0);
        int int76 = period70.size();
        org.joda.time.Period period78 = period70.plusYears(100);
        org.joda.time.Period period80 = period70.minusSeconds(292278993);
        org.joda.time.Period period81 = period70.negated();
        org.joda.time.Hours hours82 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) period70);
        org.joda.time.PeriodType periodType83 = hours82.getPeriodType();
        org.joda.time.Hours hours84 = hours66.minus(hours82);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = chronology57.get((org.joda.time.ReadablePeriod) hours84, 26507848060845299L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 7363291128");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(hours66);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(hours82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(hours84);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        org.joda.time.Days days5 = days0.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration6 = days0.toStandardDuration();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant10 = instant8.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTimeISO();
        int int12 = mutableDateTime11.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) mutableDateTime11);
        mutablePeriod13.addWeeks((int) (byte) 1);
        mutablePeriod13.addMonths((int) 'x');
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int33 = dateTime30.get(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1969 + "'", int31 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 365 + "'", int33 == 365);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        int int3 = dateTime1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(53669837, (-2147483648), 2022, (int) (byte) 100, 893, 1970, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks4 = weeks0.dividedBy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds5 = weeks0.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 604800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) (byte) 1);
        boolean boolean30 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        long long47 = dateTime33.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.setMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTime dateTime69 = dateTime56.minusWeeks((int) (byte) 1);
        int int70 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property71 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime73 = dateTime56.withYear(1969);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DurationField durationField75 = durationFieldType48.getField(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime33.toDateTime(chronology74);
        org.joda.time.Weeks weeks77 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str83 = locale78.getDisplayCountry(locale82);
        java.lang.String str84 = locale82.getDisplayVariant();
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.lang.String str86 = locale82.getDisplayVariant(locale85);
        java.lang.String str87 = locale82.toLanguageTag();
        java.util.Calendar calendar88 = dateTime25.toCalendar(locale82);
        java.util.Locale locale89 = locale82.stripExtensions();
        java.util.Set<java.lang.Character> charSet90 = locale82.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Italy" + "'", str83, "Italy");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "und" + "'", str87, "und");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet90);
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField2.getType();
        long long13 = dateTimeField2.remainder(432000000L);
        int int14 = dateTimeField2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter15 = null;
        org.joda.time.format.PeriodParser periodParser16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = new org.joda.time.format.PeriodFormatter(periodPrinter15, periodParser16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter17.withParseType(periodType18);
        java.util.Locale locale20 = periodFormatter17.getLocale();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter17.withLocale(locale21);
        org.joda.time.format.PeriodPrinter periodPrinter24 = null;
        org.joda.time.format.PeriodParser periodParser25 = null;
        org.joda.time.format.PeriodFormatter periodFormatter26 = new org.joda.time.format.PeriodFormatter(periodPrinter24, periodParser25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withParseType(periodType27);
        java.util.Locale locale29 = periodFormatter26.getLocale();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter26.withLocale(locale30);
        java.util.Locale locale33 = locale30.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter23.withLocale(locale33);
        int int35 = dateTimeField2.getMaximumShortTextLength(locale33);
        java.util.Locale locale36 = locale33.stripExtensions();
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = locale33.getDisplayCountry(locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant17 = instant15.minus(100L);
        org.joda.time.Instant instant19 = instant17.plus((long) 100);
        org.joda.time.Instant instant21 = instant17.withMillis((long) (byte) 1);
        org.joda.time.Instant instant24 = instant17.withDurationAdded((long) '4', (int) 'a');
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        int int32 = dateMidnight31.getDayOfYear();
        boolean boolean33 = instant24.isEqual((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Seconds seconds34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTime dateTime36 = dateTime2.withWeekyear(78719999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime36.withMonthOfYear((-59));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 365 + "'", int32 == 365);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property14.setCopy(12);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime37 = dateTime24.minusWeeks((int) (byte) 1);
        int int38 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime39 = dateTime21.toDateTimeISO();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant43 = instant41.minus(100L);
        java.lang.String str44 = instant43.toString();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = duration47.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period52 = duration47.toPeriodTo(readableInstant51);
        org.joda.time.Duration duration54 = duration47.withMillis((long) (short) 0);
        org.joda.time.Instant instant55 = instant43.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Seconds seconds56 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTime dateTime58 = dateTime39.withWeekOfWeekyear(7);
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime58.withDurationAdded(120L, (int) '#');
        org.joda.time.DateTime dateTime64 = dateTime62.withMillis(454L);
        boolean boolean65 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str44, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((-104509444363200001L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -29030401212");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getEra();
        org.joda.time.Chronology chronology8 = dateTime2.getChronology();
        org.joda.time.DateTime.Property property9 = dateTime2.dayOfMonth();
        boolean boolean11 = dateTime2.isEqual(31536000000L);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.DateTime dateTime22 = interval21.getStart();
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Instant instant24 = dateTime22.toInstant();
        int int25 = property17.getDifference((org.joda.time.ReadableInstant) instant24);
        boolean boolean26 = dateTime2.isEqual((org.joda.time.ReadableInstant) instant24);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-27349920) + "'", int25 == (-27349920));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Period period9 = period7.withMinutes(1970);
        org.joda.time.Period period11 = period7.withSeconds(0);
        org.joda.time.format.PeriodPrinter periodPrinter12 = null;
        org.joda.time.format.PeriodParser periodParser13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = new org.joda.time.format.PeriodFormatter(periodPrinter12, periodParser13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter16 = periodFormatter14.withParseType(periodType15);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType20, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (short) 0, periodType20, chronology23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        int int26 = periodType20.indexOf(durationFieldType25);
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter14.withParseType(periodType20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = period11.toString(periodFormatter27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodFormatter16);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter27);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale[] localeArray6 = new java.util.Locale[] { locale4 };
        java.util.ArrayList<java.util.Locale> localeList7 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList7, localeArray6);
        java.util.Locale locale9 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList7);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getDisplayVariant();
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale10, locale14, locale18, locale20 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet29, filteringMode30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet39, filteringMode40);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet39, filteringMode43);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.parse("YearDay");
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale50 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale64 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale66.getDisplayVariant();
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale56, locale60, locale64, locale66 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Set<java.lang.String> strSet75 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strSet75, filteringMode76);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList77);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList46, (java.util.Collection<java.lang.String>) strList78, filteringMode79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strList44, filteringMode79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(localeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode30.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale64.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = periodFormatter2.parsePeriod("PT8H");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(periodParser6);
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getMonths();
        mutablePeriod8.setPeriod(8380845299L);
        org.joda.time.Seconds seconds12 = org.joda.time.Seconds.THREE;
        org.joda.time.PeriodType periodType13 = seconds12.getPeriodType();
        int int14 = seconds12.getSeconds();
        mutablePeriod8.add((org.joda.time.ReadablePeriod) seconds12);
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.seconds(7);
        boolean boolean18 = seconds12.isLessThan(seconds17);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withFields(readablePartial23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant34 = instant32.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime35 = instant32.toMutableDateTimeISO();
        org.joda.time.Period period36 = duration29.toPeriodTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Period period38 = period36.plusDays(23);
        int[] intArray40 = chronology26.get((org.joda.time.ReadablePeriod) period38, (long) 97);
        org.joda.time.Period period42 = period38.minusYears((int) (byte) 100);
        boolean boolean43 = seconds17.equals((java.lang.Object) period38);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 97]");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) (byte) 1);
        boolean boolean30 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = dateTime25.withWeekyear(19);
        java.lang.String str33 = dateTime32.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0019-01-02T23:59:59.999Z" + "'", str33, "0019-01-02T23:59:59.999Z");
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType12, chronology13);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 11, 0L, periodType12);
        java.lang.String str16 = periodType12.getName();
        org.joda.time.PeriodType periodType17 = periodType12.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(24, 97, 69, 1972, 8, (-292276), 141012, (-2147483648), periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "YearDay" + "'", str16, "YearDay");
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str11 = locale6.getDisplayCountry(locale10);
        java.lang.String str12 = locale10.getDisplayVariant();
        int int13 = property3.getMaximumShortTextLength(locale10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        java.lang.String str23 = dateTimeZone16.getNameKey((long) 1);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = dateTimeZone16.getName((long) (byte) 10, locale25);
        java.util.TimeZone timeZone27 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone16);
        boolean boolean30 = dateTime28.isAfter((long) 999);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime28.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italy" + "'", str11, "Italy");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant32);
        boolean boolean34 = instant15.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.toInstant();
        org.joda.time.Instant instant38 = instant32.withDurationAdded(3187339199999L, 69);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        boolean boolean51 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration57 = duration54.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Period period59 = duration54.toPeriodTo(readableInstant58);
        org.joda.time.Duration duration61 = duration54.minus(43200000L);
        org.joda.time.Duration duration63 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) ' ');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Duration duration66 = duration63.withDurationAdded(readableDuration64, 97);
        org.joda.time.Duration duration68 = duration63.withMillis(100L);
        org.joda.time.Duration duration70 = duration63.plus(43199999L);
        org.joda.time.Instant instant71 = instant38.minus((org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant71);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException2 = new java.io.IOException("PT0S", (java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        java.lang.String str38 = period37.toString();
        org.joda.time.Duration duration39 = period37.toStandardDuration();
        org.joda.time.Period period41 = period37.minusDays(9);
        org.joda.time.Period period43 = period37.plusHours((int) (byte) 1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.010S" + "'", str38, "PT0.010S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        mutablePeriod5.addWeeks((int) 'a');
        mutablePeriod5.setPeriod(0, (int) 'u', 1, 1, 86399, (int) '4', (int) 'a', (int) (short) -1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTime dateTime53 = dateTime40.minusWeeks((int) (byte) 1);
        int int54 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property55 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime40.withYear(1969);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfHalfday();
        mutablePeriod5.add(0L, chronology58);
        org.joda.time.DateTimeField dateTimeField62 = chronology58.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long67 = chronology58.getDateTimeMillis(0, 894, (-292276), 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 894 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = duration5.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = duration5.toPeriodTo(readableInstant9);
        org.joda.time.Duration duration13 = duration5.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType16, chronology17);
        org.joda.time.PeriodType periodType19 = periodType16.withWeeksRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = duration13.toPeriod(periodType19, chronology20);
        boolean boolean22 = languageRange1.equals((java.lang.Object) duration13);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfMonth();
        org.joda.time.DurationField durationField25 = chronology21.millis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        boolean boolean34 = interval29.contains((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weeks();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.centuries();
        org.joda.time.DurationField durationField39 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfWeek();
        org.joda.time.DurationField durationField41 = chronology35.minutes();
        long long44 = durationField41.getDifferenceAsLong((-43199999L), (long) 365);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = duration47.plus((long) (byte) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        boolean boolean55 = dateTime53.isEqual(10L);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType58, chronology59);
        org.joda.time.PeriodType periodType61 = periodType58.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53, periodType61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime.Property property66 = dateTime65.era();
        org.joda.time.DateTime dateTime67 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Instant instant68 = dateTime65.toInstant();
        org.joda.time.DateTime dateTime70 = dateTime65.withMillis((long) '4');
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime74 = instant73.toDateTime();
        org.joda.time.TimeOfDay timeOfDay75 = dateTime74.toTimeOfDay();
        org.joda.time.DateTime dateTime76 = dateTime65.withFields((org.joda.time.ReadablePartial) timeOfDay75);
        org.joda.time.DateTime.Property property77 = dateTime76.millisOfSecond();
        org.joda.time.DurationField durationField78 = property77.getDurationField();
        int int79 = durationField41.compareTo(durationField78);
        int int82 = durationField78.getDifference(141022L, (long) (byte) 10);
        long long85 = durationField78.subtract(1645455304L, 19);
        int int86 = durationField25.compareTo(durationField78);
        boolean boolean87 = durationField25.isSupported();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-720L) + "'", long44 == (-720L));
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 141012 + "'", int82 == 141012);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645455285L + "'", long85 == 1645455285L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        org.joda.time.ReadableInterval readableInterval14 = null;
        mutablePeriod5.add(readableInterval14);
        mutablePeriod5.setMonths(0);
        mutablePeriod5.setPeriod(259200000L);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("YearMonthDayTime");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearMonthDayTime\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        long long26 = dateTimeField24.roundHalfEven(35L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("11");
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.Interval interval11 = property10.toInterval();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale7.getDisplayCountry(locale12);
        java.util.Locale.setDefault(category0, locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale12.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc77c\ubcf8" + "'", str15, "\uc77c\ubcf8");
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.withFields(readablePartial4);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        boolean boolean8 = dateMidnight6.isAfter((long) 99);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.halfdayOfDay();
        long long36 = chronology27.add((long) 6, (long) (-2147483647), 12);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-25769803758L) + "'", long36 == (-25769803758L));
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType14, chronology15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) 11, 0L, periodType14);
        java.lang.String str18 = periodType14.getName();
        org.joda.time.PeriodType periodType19 = periodType14.withMonthsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 24, 123811200001L, periodType19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period22 = new org.joda.time.Period(45, (-10), 24, 1, (int) 'u', (int) (byte) 1, 53, (int) (short) 10, periodType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YearDay" + "'", str18, "YearDay");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        int int32 = dateTime27.getHourOfDay();
        org.joda.time.Days days33 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.centuryOfEra();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.yearOfEra();
        boolean boolean66 = dateTimeField64.isLeap(172800000L);
        int int67 = dateTime27.get(dateTimeField64);
        boolean boolean68 = dateTime27.isAfterNow();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1969 + "'", int67 == 1969);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period3.minusSeconds(292278993);
        org.joda.time.Period period14 = period3.negated();
        int int15 = period3.size();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.year();
        org.joda.time.DurationField durationField31 = dateTimeField30.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNull(durationField31);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.previousTransition((long) (short) 10);
        long long8 = dateTimeZone2.convertLocalToUTC((-1L), false, (long) 8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        java.util.Locale locale18 = locale15.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter8.withLocale(locale18);
        org.joda.time.PeriodType periodType20 = periodFormatter19.getParseType();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long26 = dateTimeField23.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField23.getMinimumValue(readablePartial27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        int int30 = dateTimeField23.getMaximumTextLength(locale29);
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter19.withLocale(locale29);
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.secondsIn(readableInterval32);
        org.joda.time.Seconds seconds35 = seconds33.plus((int) (byte) -1);
        org.joda.time.Seconds seconds36 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds37 = seconds35.plus(seconds36);
        org.joda.time.Seconds seconds38 = seconds35.negated();
        org.joda.time.Seconds seconds40 = seconds38.multipliedBy(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = periodFormatter19.print((org.joda.time.ReadablePeriod) seconds38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 43200000L + "'", long26 == 43200000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds40);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.standardHoursIn(readablePeriod0);
        org.junit.Assert.assertNotNull(hours1);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        int int4 = days0.getDays();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Days days13 = duration7.toStandardDays();
        org.joda.time.Days days15 = days13.multipliedBy((int) '#');
        org.joda.time.Days days16 = days0.minus(days15);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        int int19 = days17.get(durationFieldType18);
        org.joda.time.MutablePeriod mutablePeriod20 = days17.toMutablePeriod();
        org.joda.time.Days days22 = days17.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration23 = days17.toStandardDuration();
        org.joda.time.Days days24 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        int int26 = days24.get(durationFieldType25);
        org.joda.time.MutablePeriod mutablePeriod27 = days24.toMutablePeriod();
        org.joda.time.Days days29 = days24.multipliedBy((int) (byte) 1);
        org.joda.time.Days days30 = days17.minus(days24);
        int int31 = days0.compareTo((org.joda.time.base.BaseSingleFieldPeriod) days30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType33 = days0.getFieldType(364);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 364");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        boolean boolean5 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withParseType(periodType7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime.Property property12 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime.Property property13 = dateTime10.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-21T14:52:37.985Z");
        int int16 = property13.getMaximumShortTextLength(locale15);
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withLocale(locale15);
        java.lang.StringBuffer stringBuffer18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType23, chronology24);
        org.joda.time.PeriodType periodType26 = periodType23.withWeeksRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant19, readableInstant20, periodType26);
        org.joda.time.Period period29 = period27.plusYears(1972);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer18, (org.joda.time.ReadablePeriod) period27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        int int5 = dateTime4.getYear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTimeISO();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime.Property property14 = dateTime12.weekOfWeekyear();
        boolean boolean15 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime17 = dateTime12.withMillisOfDay(0);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Hours hours19 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours20 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours21 = hours19.plus(hours20);
        org.joda.time.Duration duration22 = hours19.toStandardDuration();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMillis((int) (short) 1);
        mutablePeriod28.setDays(100);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant36 = instant34.minus(100L);
        org.joda.time.Instant instant38 = instant36.plus((long) 100);
        boolean boolean39 = instant36.isBeforeNow();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        int int44 = dateTime42.getWeekOfWeekyear();
        int int45 = dateTime42.getMonthOfYear();
        int int46 = dateTime42.getDayOfWeek();
        org.joda.time.DateTime dateTime48 = dateTime42.plus(4190400000L);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property51 = dateTime50.centuryOfEra();
        mutablePeriod28.setPeriod((org.joda.time.ReadableInstant) instant36, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableDateTime mutableDateTime53 = instant36.toMutableDateTime();
        org.joda.time.Period period54 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime53);
        boolean boolean55 = dateTime4.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1969-12-31T00:00:00.000Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1969-12-31t00:00:00.000z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("YearDay");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getDisplayVariant();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale12, locale16, locale20, locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet31, filteringMode32);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getScript();
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale38 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale locale44 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.parse("YearDay");
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale50 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale64 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale66.getDisplayVariant();
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale56, locale60, locale64, locale66 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Set<java.lang.String> strSet75 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strSet75, filteringMode76);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList77);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList46, (java.util.Collection<java.lang.String>) strList78, filteringMode79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList41, filteringMode79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale64.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(localeList81);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.DateTime dateTime3 = instant2.toDateTimeISO();
        int int4 = dateTime3.getEra();
        org.joda.time.DateTime dateTime6 = dateTime3.minusYears(5);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) (byte) 1);
        boolean boolean30 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        long long47 = dateTime33.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.setMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTime dateTime69 = dateTime56.minusWeeks((int) (byte) 1);
        int int70 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property71 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime73 = dateTime56.withYear(1969);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DurationField durationField75 = durationFieldType48.getField(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime33.toDateTime(chronology74);
        org.joda.time.Weeks weeks77 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str83 = locale78.getDisplayCountry(locale82);
        java.lang.String str84 = locale82.getDisplayVariant();
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.lang.String str86 = locale82.getDisplayVariant(locale85);
        java.lang.String str87 = locale82.toLanguageTag();
        java.util.Calendar calendar88 = dateTime25.toCalendar(locale82);
        java.util.Locale locale89 = locale82.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = locale82.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Italy" + "'", str83, "Italy");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "und" + "'", str87, "und");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "_HI!_hi!");
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        int int7 = property5.getMaximumValue();
        org.joda.time.DateTime dateTime8 = property5.getDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = property11.getAsText(locale13);
        int int15 = property11.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter16 = null;
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatter periodFormatter18 = new org.joda.time.format.PeriodFormatter(periodPrinter16, periodParser17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter18.withParseType(periodType19);
        java.util.Locale locale21 = periodFormatter18.getLocale();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.lang.String str23 = locale22.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter18.withLocale(locale22);
        java.util.Locale locale25 = locale22.stripExtensions();
        int int26 = property11.getMaximumShortTextLength(locale22);
        java.lang.Object obj27 = null;
        org.joda.time.Instant instant28 = new org.joda.time.Instant(obj27);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone29);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = dateTimeZone29.getShortName(100L, locale33);
        java.lang.String str36 = locale33.getScript();
        java.lang.String str37 = locale33.getDisplayName();
        java.lang.String str38 = locale22.getDisplayScript(locale33);
        java.lang.String str39 = property5.getAsShortText(locale22);
        java.lang.String str40 = locale22.getLanguage();
        java.lang.String str41 = locale1.getDisplayCountry(locale22);
        java.lang.String str42 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "anglais" + "'", str2, "anglais");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japanisch" + "'", str37, "Japanisch");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Canada" + "'", str41, "Canada");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DurationField[halfdays]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=durationfield[halfdays]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) interval21);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        mutablePeriod5.setMonths(97);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = chronology62.millis();
        long long70 = durationField67.add((long) 11, 248399899L);
        long long73 = durationField67.add((-26136120000L), 45);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 248399910L + "'", long70 == 248399910L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-26136119955L) + "'", long73 == (-26136119955L));
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period1.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.minusWeeks(2);
        org.joda.time.Period period10 = period8.withHours(1969);
        org.joda.time.Period period11 = period10.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = period10.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Weeks weeks11 = period3.toStandardWeeks();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = weeks12.getFieldType(0);
        org.joda.time.Period period18 = period3.withField(durationFieldType16, 0);
        org.joda.time.Period period20 = period3.multipliedBy((int) '4');
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 1, (int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration21.minus(readableDuration25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = duration21.toPeriod(periodType29);
        org.joda.time.Duration duration32 = duration21.withMillis((-121645L));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.PeriodType periodType6 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType7 = periodType3.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 19, periodType7);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.addMonths(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setRegion("PT3S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: PT3S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        java.util.Locale locale18 = locale15.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter8.withLocale(locale18);
        java.util.Locale locale20 = periodFormatter8.getLocale();
        boolean boolean21 = periodFormatter8.isPrinter();
        java.lang.StringBuffer stringBuffer22 = null;
        org.joda.time.Hours hours24 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours26 = hours24.minus((int) (short) 10);
        org.joda.time.Hours hours27 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours29 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours31 = hours29.minus((int) (short) 10);
        boolean boolean32 = hours27.isGreaterThan(hours31);
        boolean boolean33 = hours24.isLessThan(hours31);
        org.joda.time.Hours hours35 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours37 = hours35.minus((int) (short) 10);
        org.joda.time.Hours hours38 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours40 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours42 = hours40.minus((int) (short) 10);
        boolean boolean43 = hours38.isGreaterThan(hours42);
        boolean boolean44 = hours35.isLessThan(hours42);
        boolean boolean45 = hours24.isGreaterThan(hours35);
        org.joda.time.Hours hours47 = hours24.minus(8);
        org.joda.time.Hours hours49 = hours47.multipliedBy((int) '#');
        org.joda.time.Hours hours51 = hours47.dividedBy((int) (short) 1);
        int int52 = hours51.getHours();
        org.joda.time.Hours hours54 = hours51.minus(7);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter8.printTo(stringBuffer22, (org.joda.time.ReadablePeriod) hours51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-8) + "'", int52 == (-8));
        org.junit.Assert.assertNotNull(hours54);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        int int11 = dateTime9.getDayOfYear();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.withZone(dateTimeZone15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime.Property property24 = dateTime14.property(dateTimeFieldType22);
        boolean boolean25 = dateTime9.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        boolean boolean34 = interval29.contains((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfHour();
        boolean boolean38 = dateTimeFieldType22.isSupported(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(893, (int) 'a', (-8), 1972, (int) (byte) 100, (-2147483647), 4, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 365 + "'", int11 == 365);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period12 = period3.normalizedStandard();
        org.joda.time.Period period13 = period3.normalizedStandard();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.Period period22 = mutablePeriod19.toPeriod();
        mutablePeriod19.setYears((int) (short) -1);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Period period32 = duration27.toPeriodTo(readableInstant31);
        org.joda.time.Days days33 = duration27.toStandardDays();
        boolean boolean34 = mutablePeriod19.equals((java.lang.Object) days33);
        mutablePeriod19.addMonths(3);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod19.copy();
        int int38 = mutablePeriod37.getHours();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        mutablePeriod44.setMonths((int) '4');
        org.joda.time.Period period47 = mutablePeriod44.toPeriod();
        org.joda.time.Period period49 = period47.minusMinutes(100);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.months();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.withZoneRetainFields(dateTimeZone55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = instant58.toDateTime();
        org.joda.time.DateTime.Property property60 = dateTime59.era();
        org.joda.time.DateTime dateTime61 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.Duration duration64 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, readableInstant65, periodType66);
        mutablePeriod67.setMonths((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime59.plus((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTime dateTime72 = dateTime59.minusWeeks((int) (byte) 1);
        int int73 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.format.PeriodPrinter periodPrinter74 = null;
        org.joda.time.format.PeriodParser periodParser75 = null;
        org.joda.time.format.PeriodFormatter periodFormatter76 = new org.joda.time.format.PeriodFormatter(periodPrinter74, periodParser75);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter76.withParseType(periodType77);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(readableInstant51, (org.joda.time.ReadableInstant) dateTime56, periodType77);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration82, readableInstant83, periodType84);
        org.joda.time.Days days86 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.minutes();
        int int88 = days86.get(durationFieldType87);
        mutablePeriod85.add(durationFieldType87, 8);
        mutablePeriod79.add(durationFieldType87, (int) (short) 100);
        boolean boolean93 = periodType50.isSupported(durationFieldType87);
        boolean boolean94 = period47.isSupported(durationFieldType87);
        int int95 = mutablePeriod37.indexOf(durationFieldType87);
        int int96 = period13.get(durationFieldType87);
        java.lang.String str97 = durationFieldType87.getName();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(days86);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 5 + "'", int95 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "minutes" + "'", str97, "minutes");
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.DateTime dateTime21 = dateTime15.minusSeconds((int) 'a');
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        mutablePeriod38.setMonths((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime30.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime43 = dateTime30.minusWeeks((int) (byte) 1);
        int int44 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property45 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime30.withYear(1969);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DurationField durationField49 = durationFieldType22.getField(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime21.withFieldAdded(durationFieldType22, 86399);
        org.joda.time.DateTime dateTime53 = dateTime21.withMillisOfDay(24);
        org.joda.time.DateTime dateTime54 = dateTime21.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime54.withCenturyOfEra((-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.DateTime.Property property18 = dateTime8.yearOfEra();
        java.util.GregorianCalendar gregorianCalendar19 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime21 = dateTime8.minusMillis((int) (short) -1);
        org.joda.time.Instant instant22 = dateTime8.toInstant();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        boolean boolean31 = duration25.isEqual((org.joda.time.ReadableDuration) duration29);
        java.lang.String str32 = duration29.toString();
        org.joda.time.Instant instant33 = instant22.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime34 = instant22.toDateTime();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant32);
        boolean boolean34 = instant15.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.toInstant();
        org.joda.time.Chronology chronology36 = instant32.getChronology();
        org.joda.time.Chronology chronology37 = chronology36.withUTC();
        org.joda.time.DurationField durationField38 = chronology37.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) chronology37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration10 = period9.toStandardDuration();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = period14.getFieldTypes();
        int int16 = period14.getMinutes();
        org.joda.time.Period period18 = period14.withDays((int) ' ');
        org.joda.time.Period period20 = period18.withYears(86399);
        org.joda.time.Period period25 = new org.joda.time.Period(0, (int) (byte) -1, (int) '#', 7);
        org.joda.time.Period period26 = period18.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = period9.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period29 = period27.minusMillis((int) (short) 100);
        int int30 = period29.getWeeks();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        mutablePeriod11.setMonths((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTime dateTime16 = dateTime3.minusWeeks((int) (byte) 1);
        long long17 = dateTime3.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant32, periodType33);
        mutablePeriod34.setMonths((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime26.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTime dateTime39 = dateTime26.minusWeeks((int) (byte) 1);
        int int40 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property41 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime43 = dateTime26.withYear(1969);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DurationField durationField45 = durationFieldType18.getField(chronology44);
        org.joda.time.DateTime dateTime46 = dateTime3.toDateTime(chronology44);
        org.joda.time.DurationField durationField47 = chronology44.days();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1969, chronology44);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.Seconds seconds50 = org.joda.time.Seconds.secondsIn(readableInterval49);
        org.joda.time.DurationFieldType durationFieldType51 = seconds50.getFieldType();
        long long54 = chronology44.add((org.joda.time.ReadablePeriod) seconds50, (long) 'a', (-292275054));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 97L + "'", long54 == 97L);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 12L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=12.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZone(dateTimeZone8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean16 = dateTime12.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime.Property property17 = dateTime7.property(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime7.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(86399999, (int) (byte) -1, 86399, (int) '4', 31, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.setRegion("it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("P2147483647W");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: P2147483647W [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.DurationFieldType durationFieldType21 = seconds20.getFieldType();
        org.joda.time.Weeks weeks22 = seconds20.toStandardWeeks();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(weeks22);
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getScript();
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale25 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = locale41.getDisplayVariant();
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale31, locale35, locale39, locale41 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale locale46 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Set<java.lang.String> strSet50 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet50, filteringMode51);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList52);
        java.lang.String str54 = java.util.Locale.lookupTag(languageRangeList21, (java.util.Collection<java.lang.String>) strList53);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList53);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.weekyearOfCentury();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayVariant();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = locale34.getDisplayVariant(locale37);
        java.lang.String str39 = locale37.getDisplayCountry();
        int int40 = dateTimeField29.getMaximumTextLength(locale37);
        long long43 = dateTimeField29.addWrapField((long) (-2147483648), 895);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Italy" + "'", str35, "Italy");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-159913883648L) + "'", long43 == (-159913883648L));
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime2.secondOfDay();
        org.joda.time.DateTime.Property property19 = dateTime2.era();
        int int20 = property19.getMinimumValue();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        int int22 = property19.getMaximumTextLength(locale21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.Object obj37 = null;
        org.joda.time.Instant instant38 = new org.joda.time.Instant(obj37);
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        int int42 = dateTimeZone39.getOffset(1L);
        boolean boolean44 = dateTimeZone39.isStandardOffset(0L);
        org.joda.time.DateTime dateTime45 = dateTime25.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears(1969);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.DateTime dateTime54 = dateTime50.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        boolean boolean59 = dateTime57.isEqual(10L);
        org.joda.time.DateTime dateTime61 = dateTime57.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        long long67 = dateTimeField64.add(0L, (long) (short) 1);
        long long70 = dateTimeField64.add(1L, (-1));
        int int71 = dateTime57.get(dateTimeField64);
        boolean boolean72 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period74 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period76 = period74.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Duration duration78 = period76.toDurationTo(readableInstant77);
        org.joda.time.Duration duration81 = duration78.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Period period83 = duration81.toPeriodFrom(readableInstant82);
        org.joda.time.DateTime dateTime84 = dateTime54.plus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Minutes minutes85 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime84);
        // The following exception was thrown during execution in test generation
        try {
            long long86 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 43200000L + "'", long67 == 43200000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-43199999L) + "'", long70 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(minutes85);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getDisplayVariant();
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale9, locale13, locale17, locale19 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getScript();
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale28 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getDisplayVariant();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale34, locale38, locale42, locale44 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap58);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = hours0.multipliedBy(0);
        org.joda.time.Hours hours4 = hours0.dividedBy(69);
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours8 = hours6.minus((int) (short) 10);
        org.joda.time.Hours hours9 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours11 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours13 = hours11.minus((int) (short) 10);
        boolean boolean14 = hours9.isGreaterThan(hours13);
        boolean boolean15 = hours6.isLessThan(hours13);
        org.joda.time.Hours hours16 = hours6.negated();
        org.joda.time.Hours hours18 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours20 = hours18.minus((int) (short) 10);
        org.joda.time.Hours hours21 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours23 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours25 = hours23.minus((int) (short) 10);
        boolean boolean26 = hours21.isGreaterThan(hours25);
        boolean boolean27 = hours18.isLessThan(hours25);
        org.joda.time.Hours hours28 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours30 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours32 = hours30.minus((int) (short) 10);
        boolean boolean33 = hours28.isGreaterThan(hours32);
        boolean boolean34 = hours18.isGreaterThan(hours32);
        int int35 = hours32.getHours();
        org.joda.time.Hours hours37 = hours32.plus(0);
        org.joda.time.Hours hours39 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours41 = hours39.minus((int) (short) 10);
        org.joda.time.Hours hours42 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours44 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours46 = hours44.minus((int) (short) 10);
        boolean boolean47 = hours42.isGreaterThan(hours46);
        boolean boolean48 = hours39.isLessThan(hours46);
        org.joda.time.Hours hours49 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours51 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours53 = hours51.minus((int) (short) 10);
        boolean boolean54 = hours49.isGreaterThan(hours53);
        boolean boolean55 = hours39.isGreaterThan(hours53);
        int int56 = hours53.getHours();
        org.joda.time.Hours hours58 = hours53.plus(0);
        org.joda.time.Hours hours59 = hours32.plus(hours53);
        org.joda.time.Hours hours60 = hours6.plus(hours32);
        org.joda.time.Hours hours61 = hours0.plus(hours6);
        java.lang.String str62 = hours61.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-10) + "'", int35 == (-10));
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours44);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-10) + "'", int56 == (-10));
        org.junit.Assert.assertNotNull(hours58);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(hours60);
        org.junit.Assert.assertNotNull(hours61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT8H" + "'", str62, "PT8H");
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration17.isEqual(readableDuration19);
        org.joda.time.Duration duration22 = duration17.minus((long) 1);
        org.joda.time.Duration duration24 = duration22.minus((long) '4');
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = duration34.plus((long) (byte) 0);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        boolean boolean42 = dateTime40.isEqual(10L);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType45, chronology46);
        org.joda.time.PeriodType periodType48 = periodType45.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime40, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31, periodType48);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        org.joda.time.TimeOfDay timeOfDay53 = dateTime27.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = timeOfDay53.toDateTime(readableInstant54);
        int int56 = timeOfDay53.size();
        int int58 = timeOfDay53.getValue(3);
        long long60 = chronology9.set((org.joda.time.ReadablePartial) timeOfDay53, (long) 1970);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69, periodType70);
        mutablePeriod71.setMonths((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime63.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTime dateTime76 = dateTime63.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property77 = dateTime76.monthOfYear();
        org.joda.time.DateTime.Property property78 = dateTime76.weekyear();
        org.joda.time.DateTime dateTime79 = dateTime76.toDateTime();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.withChronology(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str83 = dateTimeFieldType82.getName();
        int int84 = dateTime79.get(dateTimeFieldType82);
        boolean boolean85 = timeOfDay53.isSupported(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 999 + "'", int58 == 999);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 86399999L + "'", long60 == 86399999L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "yearOfCentury" + "'", str83, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 69 + "'", int84 == 69);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod17.addHours(281);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Days days8 = duration2.toStandardDays();
        long long9 = duration2.getStandardSeconds();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant11.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime14 = instant11.toMutableDateTimeISO();
        java.lang.Object obj15 = null;
        org.joda.time.Instant instant16 = new org.joda.time.Instant(obj15);
        boolean boolean17 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Instant instant18 = instant16.toInstant();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (short) 0, periodType22, chronology25);
        org.joda.time.Period period27 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) instant18, periodType22);
        org.joda.time.DateTime dateTime28 = instant18.toDateTimeISO();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withYear((-59));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property20.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime17.withField(dateTimeFieldType22, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Days days8 = duration2.toStandardDays();
        org.joda.time.Days days10 = days8.multipliedBy((int) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weeks();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        int int29 = property27.getMaximumValueOverall();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = locale30.getScript();
        java.lang.String str32 = locale30.getDisplayCountry();
        int int33 = property27.getMaximumShortTextLength(locale30);
        org.joda.time.DateTime dateTime34 = property27.withMaximumValue();
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        long long37 = chronology20.set((org.joda.time.ReadablePartial) localTime35, (long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object) days8, chronology20);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod38.addMillis(69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999L + "'", long37 == 86399999L);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(2922789, 45, (-2147483647), 7, 0, 1972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(8380845299L);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        mutablePeriod5.addWeeks((int) 'a');
        mutablePeriod5.setPeriod(0, (int) 'u', 1, 1, 86399, (int) '4', (int) 'a', (int) (short) -1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTime dateTime53 = dateTime40.minusWeeks((int) (byte) 1);
        int int54 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property55 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime40.withYear(1969);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfHalfday();
        mutablePeriod5.add(0L, chronology58);
        mutablePeriod5.setHours(141012);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long14 = dateTimeField9.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant22 = instant20.minus(100L);
        org.joda.time.Instant instant24 = instant22.plus((long) 100);
        org.joda.time.Instant instant26 = instant22.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.LocalTime localTime28 = dateTime17.toLocalTime();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.Period period38 = mutablePeriod35.toPeriod();
        int[] intArray39 = period38.getValues();
        int[] intArray41 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime28, 0, intArray39, 3);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        long long48 = dateTimeField45.add(0L, (long) (short) 1);
        long long50 = dateTimeField45.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant58 = instant56.minus(100L);
        org.joda.time.Instant instant60 = instant58.plus((long) 100);
        org.joda.time.Instant instant62 = instant58.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) instant58);
        org.joda.time.LocalTime localTime64 = dateTime53.toLocalTime();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69, periodType70);
        mutablePeriod71.setMonths((int) '4');
        org.joda.time.Period period74 = mutablePeriod71.toPeriod();
        int[] intArray75 = period74.getValues();
        int[] intArray77 = dateTimeField45.addWrapField((org.joda.time.ReadablePartial) localTime64, 0, intArray75, 3);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime64);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime.Property property81 = dateTime80.yearOfEra();
        org.joda.time.Interval interval82 = property81.toInterval();
        org.joda.time.DateTime dateTime83 = property81.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = localTime64.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime.Property property85 = dateTime84.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 43200000L + "'", long48 == 43200000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.PeriodType periodType11 = weeks10.getPeriodType();
        org.joda.time.Weeks weeks13 = weeks10.minus(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds14 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) weeks13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -52254687945600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(weeks13);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.monthOfYear();
        org.joda.time.DurationField durationField68 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology62.era();
        org.joda.time.Instant instant72 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime73 = instant72.toDateTime();
        boolean boolean75 = dateTime73.isEqual(10L);
        org.joda.time.DateTime dateTime77 = dateTime73.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime79 = dateTime73.plusDays(100);
        org.joda.time.LocalTime localTime80 = dateTime73.toLocalTime();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        org.joda.time.DateTime.Property property84 = dateTime83.yearOfEra();
        org.joda.time.Interval interval85 = property84.toInterval();
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.lang.String str87 = property84.getAsText(locale86);
        java.util.Locale locale91 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str92 = property84.getAsText(locale91);
        java.util.Locale.Category category93 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale94 = java.util.Locale.getDefault(category93);
        java.util.Locale locale95 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category93, locale95);
        java.lang.String str97 = locale91.getDisplayCountry(locale95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = dateTimeField70.getAsText((org.joda.time.ReadablePartial) localTime80, 98, locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022" + "'", str87, "2022");
        org.junit.Assert.assertEquals(locale91.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022" + "'", str92, "2022");
        org.junit.Assert.assertTrue("'" + category93 + "' != '" + java.util.Locale.Category.FORMAT + "'", category93.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale94);
// flaky:         org.junit.Assert.assertEquals(locale94.toString(), "de");
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "it");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "P0W" + "'", str97, "P0W");
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes21 = minutes19.minus((int) (short) -1);
        boolean boolean22 = minutes18.isGreaterThan(minutes19);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        boolean boolean24 = minutes18.isLessThan(minutes23);
        org.joda.time.DateTime dateTime25 = dateTime8.plus((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        java.lang.Object obj27 = null;
        org.joda.time.Instant instant28 = new org.joda.time.Instant(obj27);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone29);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = dateTimeZone29.getShortName(100L, locale33);
        java.lang.String str36 = locale33.getScript();
        boolean boolean37 = locale33.hasExtensions();
        java.lang.String str38 = locale33.getCountry();
        java.lang.String str39 = property26.getAsShortText(locale33);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-2114" + "'", str39, "-2114");
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Hours hours1 = minutes0.toStandardHours();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(hours1);
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(2);
        org.joda.time.Period period6 = new org.joda.time.Period(0, (int) (byte) -1, (int) '#', 7);
        org.joda.time.Hours hours7 = org.joda.time.Hours.TWO;
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        boolean boolean10 = hours7.isSupported(durationFieldType9);
        int int11 = period6.get(durationFieldType9);
        java.lang.String str12 = durationFieldType9.toString();
        org.joda.time.Period period14 = period1.withField(durationFieldType9, (int) (byte) 10);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "seconds" + "'", str12, "seconds");
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Instant instant10 = instant3.withDurationAdded((long) '4', (int) 'a');
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Instant instant16 = dateTime13.toInstant();
        org.joda.time.DateMidnight dateMidnight17 = dateTime13.toDateMidnight();
        int int18 = dateMidnight17.getDayOfYear();
        boolean boolean19 = instant10.isEqual((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        boolean boolean28 = interval23.contains((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.Chronology chronology30 = chronology29.withUTC();
        org.joda.time.DateTime dateTime31 = instant10.toDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant10.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 365 + "'", int18 == 365);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        boolean boolean9 = interval4.contains((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.era();
        org.joda.time.DurationField durationField15 = chronology10.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = new org.joda.time.Period((java.lang.Object) 43080000L, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        int int16 = dateTime14.getWeekOfWeekyear();
        int int17 = dateTime14.getMonthOfYear();
        boolean boolean18 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfMonth((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfSecond((-2147483647));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483647 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withParseType(periodType10);
        java.util.Locale locale12 = periodFormatter9.getLocale();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter9.withLocale(locale13);
        java.util.Locale locale16 = locale13.stripExtensions();
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = dateTimeField5.getAsShortText(31, locale16);
        boolean boolean20 = dateTimeField5.isSupported();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italienisch (Italien)" + "'", str17, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ita" + "'", str18, "ita");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "31" + "'", str19, "31");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("1971");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1971\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getEra();
        org.joda.time.DateTime dateTime9 = dateTime2.withWeekyear(0);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant14 = instant12.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTimeISO();
        java.lang.Object obj16 = null;
        org.joda.time.Instant instant17 = new org.joda.time.Instant(obj16);
        boolean boolean18 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = duration23.plus((long) (byte) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        boolean boolean31 = dateTime29.isEqual(10L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType34, chronology35);
        org.joda.time.PeriodType periodType37 = periodType34.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime29, periodType37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Instant instant44 = dateTime41.toInstant();
        org.joda.time.DateTime dateTime46 = dateTime41.withMillis((long) '4');
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime41);
        int int48 = dateTime41.getYear();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = duration51.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Period period56 = duration51.toPeriodTo(readableInstant55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant60 = instant58.minus(100L);
        java.lang.String str61 = instant60.toString();
        org.joda.time.Duration duration64 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period65 = duration64.toPeriod();
        org.joda.time.Duration duration67 = duration64.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Period period69 = duration64.toPeriodTo(readableInstant68);
        org.joda.time.Duration duration72 = duration64.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType75, chronology76);
        org.joda.time.PeriodType periodType78 = periodType75.withWeeksRemoved();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration72.toPeriod(periodType78, chronology79);
        org.joda.time.Period period81 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) instant60, periodType78);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime41, periodType78);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableDuration) duration20);
        boolean boolean84 = dateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        int int85 = dateTime10.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1969 + "'", int48 == 1969);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str61, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 86399 + "'", int85 == 86399);
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"yearOfCentury\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException(throwable2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("days", (java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException("DurationField[minutes]", (java.lang.Throwable) iOException5);
        java.io.IOException iOException9 = new java.io.IOException();
        java.io.IOException iOException10 = new java.io.IOException("PT0S", (java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("hourOfHalfday", (java.lang.Throwable) iOException9);
        iOException5.addSuppressed((java.lang.Throwable) iOException11);
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException11.addSuppressed(throwable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("2022");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("Property[era]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[era] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        mutablePeriod5.add(durationFieldType8, 8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (short) 1, (long) 8, chronology13);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime37 = dateTime24.minusWeeks((int) (byte) 1);
        int int38 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property39 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime24.withYear(1969);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekOfWeekyear();
        mutablePeriod14.setPeriod(43199999L, (-1855204655L), chronology42);
        org.joda.time.DurationField durationField46 = durationFieldType8.getField(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = chronology42.getDateTimeMillis(23, (int) (byte) 1, 86399, 53731271, 53, (int) (short) 100, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53731271 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getEra();
        org.joda.time.DateTime dateTime9 = dateTime2.withWeekyear(0);
        org.joda.time.DateTime dateTime10 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant14 = instant12.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTimeISO();
        java.lang.Object obj16 = null;
        org.joda.time.Instant instant17 = new org.joda.time.Instant(obj16);
        boolean boolean18 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = duration23.plus((long) (byte) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        boolean boolean31 = dateTime29.isEqual(10L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType34, chronology35);
        org.joda.time.PeriodType periodType37 = periodType34.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime29, periodType37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Instant instant44 = dateTime41.toInstant();
        org.joda.time.DateTime dateTime46 = dateTime41.withMillis((long) '4');
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime41);
        int int48 = dateTime41.getYear();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = duration51.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Period period56 = duration51.toPeriodTo(readableInstant55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant60 = instant58.minus(100L);
        java.lang.String str61 = instant60.toString();
        org.joda.time.Duration duration64 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period65 = duration64.toPeriod();
        org.joda.time.Duration duration67 = duration64.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Period period69 = duration64.toPeriodTo(readableInstant68);
        org.joda.time.Duration duration72 = duration64.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType75, chronology76);
        org.joda.time.PeriodType periodType78 = periodType75.withWeeksRemoved();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = duration72.toPeriod(periodType78, chronology79);
        org.joda.time.Period period81 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) instant60, periodType78);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime41, periodType78);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableDuration) duration20);
        boolean boolean84 = dateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime.Property property85 = dateTime10.millisOfSecond();
        java.lang.String str86 = property85.getAsText();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1969 + "'", int48 == 1969);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str61, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "999" + "'", str86, "999");
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("DurationField[weekyears]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DurationField[weekyears]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        java.lang.String str8 = instant7.toString();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = duration11.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = duration11.toPeriodTo(readableInstant15);
        org.joda.time.Duration duration18 = duration11.withMillis((long) (short) 0);
        org.joda.time.Instant instant19 = instant7.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant36 = instant35.toInstant();
        boolean boolean37 = dateTime22.isEqual((org.joda.time.ReadableInstant) instant36);
        boolean boolean38 = instant19.isAfter((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant39 = instant36.toInstant();
        org.joda.time.Chronology chronology40 = instant36.getChronology();
        org.joda.time.Chronology chronology41 = chronology40.withUTC();
        mutablePeriod2.add((-625L), chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType44 = mutablePeriod2.getFieldType(53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str8, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds((-27349920));
        // The following exception was thrown during execution in test generation
        try {
            int int3 = seconds1.getValue(53669837);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 53669837");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(432000000L);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod13);
        java.lang.Object obj17 = null;
        org.joda.time.Instant instant18 = new org.joda.time.Instant(obj17);
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        int int22 = dateTimeZone19.getOffset(1L);
        boolean boolean24 = dateTimeZone19.isStandardOffset(0L);
        org.joda.time.DateTime dateTime25 = dateTime5.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears(1969);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType32, chronology35);
        org.joda.time.PeriodType periodType37 = periodType32.withDaysRemoved();
        org.joda.time.Period period38 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime27, periodType32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType40 = period38.getFieldType((-23));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT432000S" + "'", str2, "PT432000S");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = org.joda.time.Period.parse("1969-12-31T00:00:00.000Z", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(periodParser6);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getName((long) 10);
        java.lang.String str13 = dateTimeZone8.getName((long) 8);
        int int15 = dateTimeZone8.getOffsetFromLocal((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(141012, 19363, (int) (short) 10, 99, (-292275054), 2022, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) interval21);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZoneRetainFields(dateTimeZone29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        int int47 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property48 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime33.withYear(1969);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DurationField durationField52 = durationFieldType25.getField(chronology51);
        mutablePeriod5.add((-43199999L), chronology51);
        org.joda.time.DurationField durationField54 = chronology51.millis();
        long long56 = durationField54.getMillis((long) 59);
        long long58 = durationField54.getMillis(525600L);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 59L + "'", long56 == 59L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 525600L + "'", long58 == 525600L);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod5.setPeriod(readableInterval9);
        int int11 = mutablePeriod5.getMillis();
        mutablePeriod5.setDays((-100));
        mutablePeriod5.setMillis(97);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        int int1 = hours0.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant47 = instant42.toInstant();
        org.joda.time.Period period49 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period51 = period49.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Duration duration53 = period51.toDurationTo(readableInstant52);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) '#', 0);
        long long57 = duration56.getStandardSeconds();
        org.joda.time.Instant instant58 = instant47.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType63, chronology64);
        org.joda.time.Period period66 = new org.joda.time.Period((long) 11, 0L, periodType63);
        java.lang.String str67 = periodType63.getName();
        org.joda.time.PeriodType periodType68 = periodType63.withMonthsRemoved();
        org.joda.time.Period period69 = duration56.toPeriod(periodType63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period71 = period69.plusHours((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-26179201L) + "'", long57 == (-26179201L));
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "YearDay" + "'", str67, "YearDay");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = chronology4.getDateTimeMillis(1512000000L, 97, (-155), (-1398041029), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException" + "'", str2, "java.io.IOException");
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.weekOfWeekyear();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        org.joda.time.DateTime dateTime23 = dateTime15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime25 = dateTime15.withYearOfEra(9);
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) 'u');
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(893);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withDayOfWeek((-27349920));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27349920 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant25 = instant7.toInstant();
        long long26 = instant7.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        boolean boolean24 = interval19.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weeks();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfHour();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.TimeOfDay timeOfDay31 = dateTime30.toTimeOfDay();
        int int32 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay31);
        java.lang.String str33 = dateTimeField27.toString();
        int int34 = instant3.get(dateTimeField27);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.TimeOfDay timeOfDay38 = dateTime37.toTimeOfDay();
        int int39 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfEra();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        boolean boolean48 = interval43.contains((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Chronology chronology49 = interval47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfHour();
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        org.joda.time.TimeOfDay timeOfDay55 = dateTime54.toTimeOfDay();
        int int56 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = instant58.toDateTime();
        boolean boolean61 = dateTime59.isEqual(10L);
        org.joda.time.DateTime dateTime63 = dateTime59.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime65 = dateTime59.plusDays(100);
        org.joda.time.LocalTime localTime66 = dateTime59.toLocalTime();
        org.joda.time.Seconds seconds67 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadablePartial) timeOfDay55, (org.joda.time.ReadablePartial) localTime66);
        org.joda.time.Period period68 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay38, (org.joda.time.ReadablePartial) localTime66);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str33, "DateTimeField[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay30);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = timeOfDay30.getValue(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        java.util.Locale locale6 = periodFormatter3.getLocale();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = org.joda.time.Period.parse("yearOfCentury", periodFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(periodFormatter9);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType8, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) 0, periodType8, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        int int14 = periodType8.indexOf(durationFieldType13);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter2.withParseType(periodType8);
        boolean boolean16 = periodFormatter15.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = periodFormatter15.parsePeriod("P32DT-1M35.007S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        int int18 = property16.getMaximumValueOverall();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale19.getDisplayCountry();
        int int22 = property16.getMaximumShortTextLength(locale19);
        org.joda.time.DateTime dateTime23 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        long long26 = chronology9.set((org.joda.time.ReadablePartial) localTime24, (long) (byte) 10);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86399999L + "'", long26 == 86399999L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime22 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime4.dayOfMonth();
        java.lang.String str24 = property23.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "31" + "'", str24, "31");
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod5.setPeriod(readableInterval9);
        mutablePeriod5.setWeeks(69);
        mutablePeriod5.addDays((int) 'x');
        mutablePeriod5.setYears((int) (short) 100);
        int int17 = mutablePeriod5.getDays();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        boolean boolean22 = dateTime20.isEqual(10L);
        org.joda.time.DateTime dateTime24 = dateTime20.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.DateTime dateTime31 = dateTime27.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        long long37 = dateTimeField34.add(0L, (long) (short) 1);
        long long40 = dateTimeField34.add(1L, (-1));
        int int41 = dateTime27.get(dateTimeField34);
        boolean boolean42 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period44 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period46 = period44.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = period46.toDurationTo(readableInstant47);
        org.joda.time.Duration duration51 = duration48.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = duration51.toPeriodFrom(readableInstant52);
        org.joda.time.DateTime dateTime54 = dateTime24.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime56 = dateTime24.plus((long) (-2147483648));
        int int57 = dateTime56.getYearOfEra();
        org.joda.time.LocalDate localDate58 = dateTime56.toLocalDate();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = duration61.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Period period66 = duration61.toPeriodTo(readableInstant65);
        org.joda.time.Duration duration68 = duration61.withMillis((long) (short) 0);
        org.joda.time.Duration duration71 = duration61.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime74 = instant73.toDateTime();
        boolean boolean76 = dateTime74.isEqual(10L);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime74, periodType77);
        org.joda.time.DateTime dateTime80 = dateTime74.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime82 = dateTime80.plusMillis(31);
        org.joda.time.ReadablePartial readablePartial83 = null;
        org.joda.time.DateTime dateTime84 = dateTime82.withFields(readablePartial83);
        org.joda.time.DateTime.Property property85 = dateTime82.minuteOfDay();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime82);
        mutablePeriod5.clear();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120 + "'", int17 == 120);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 43200000L + "'", long37 == 43200000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-43199999L) + "'", long40 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 169 + "'", int57 == 169);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeField dateTimeField48 = timeOfDay38.getField(2);
        java.lang.String str49 = timeOfDay38.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField51 = timeOfDay38.getField(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 86399");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "T23:59:59.999" + "'", str49, "T23:59:59.999");
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant11 = instant9.minus(100L);
        java.lang.String str12 = instant11.toString();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = duration15.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration15.toPeriodTo(readableInstant19);
        org.joda.time.Duration duration23 = duration15.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType26, chronology27);
        org.joda.time.PeriodType periodType29 = periodType26.withWeeksRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = duration23.toPeriod(periodType29, chronology30);
        org.joda.time.Period period32 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) instant11, periodType29);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        boolean boolean43 = dateTime41.isEqual(10L);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType46, chronology47);
        org.joda.time.PeriodType periodType49 = periodType46.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime41, periodType49);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes52 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes54 = minutes52.minus((int) (short) -1);
        boolean boolean55 = minutes51.isGreaterThan(minutes52);
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.TWO;
        boolean boolean57 = minutes51.isLessThan(minutes56);
        org.joda.time.DateTime dateTime58 = dateTime41.plus((org.joda.time.ReadablePeriod) minutes51);
        org.joda.time.DateTime.Property property59 = dateTime58.year();
        org.joda.time.DateTime.Property property60 = dateTime58.secondOfMinute();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime58);
        int int62 = dateTime58.getSecondOfMinute();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant66 = instant64.withMillis((-27349920L));
        boolean boolean67 = dateTime58.isBefore((org.joda.time.ReadableInstant) instant66);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str12, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        java.lang.String str13 = dateTimeZone11.getName((long) 'a');
        int int15 = dateTimeZone11.getOffsetFromLocal(0L);
        boolean boolean17 = dateTimeZone11.equals((java.lang.Object) 2515345L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(52);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(281, 52, 100, 59);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.Instant instant9 = instant7.plus((long) 100);
        org.joda.time.Instant instant11 = instant7.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.LocalTime localTime13 = dateTime2.toLocalTime();
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str19 = dateTimeZone16.getName((long) 10);
        long long22 = dateTimeZone16.convertLocalToUTC((long) (byte) -1, true);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime2.toMutableDateTime(dateTimeZone16);
        int int25 = dateTimeZone16.getOffsetFromLocal(43200009L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours4 = hours2.minus((int) (short) 10);
        boolean boolean5 = hours0.isGreaterThan(hours4);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType11, chronology12);
        org.joda.time.PeriodType periodType14 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime37 = dateTime24.minusWeeks((int) (byte) 1);
        int int38 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property39 = dateTime24.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime24.withYear(1969);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.year();
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 100, (long) 'a', periodType16, chronology42);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '#', chronology42);
        org.joda.time.Hours hours48 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours49 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours51 = hours49.multipliedBy(0);
        org.joda.time.Hours hours53 = hours49.dividedBy(69);
        org.joda.time.Hours hours54 = org.joda.time.Hours.MIN_VALUE;
        boolean boolean55 = hours53.isGreaterThan(hours54);
        org.joda.time.Hours hours56 = hours48.plus(hours54);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) hours56);
        boolean boolean58 = hours4.isGreaterThan(hours56);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        mutablePeriod2.setMinutes(6);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMillis((int) (short) 1);
        int int13 = mutablePeriod10.getSeconds();
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = weeks14.getFieldType();
        mutablePeriod10.add(durationFieldType15, (int) (byte) 0);
        mutablePeriod10.addMonths(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        int int22 = mutablePeriod10.get(durationFieldType21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        mutablePeriod38.setMonths((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime30.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime43 = dateTime30.minusWeeks((int) (byte) 1);
        int int44 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property45 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime30.withYear(1969);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.era();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.hourOfHalfday();
        org.joda.time.DurationField durationField52 = durationFieldType21.getField(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.add(durationFieldType21, 53731271);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration13 = null;
        boolean boolean14 = duration11.isEqual(readableDuration13);
        org.joda.time.Duration duration16 = duration11.minus((long) 1);
        org.joda.time.Duration duration18 = duration16.minus((long) '4');
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.plus((long) (byte) 0);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        boolean boolean36 = dateTime34.isEqual(10L);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType39, chronology40);
        org.joda.time.PeriodType periodType42 = periodType39.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime34, periodType42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration25, periodType42);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime21, periodType45);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime21.toTimeOfDay();
        int int49 = timeOfDay47.getValue(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        long long56 = dateTimeField53.add(0L, (long) (short) 1);
        long long58 = dateTimeField53.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant66 = instant64.minus(100L);
        org.joda.time.Instant instant68 = instant66.plus((long) 100);
        org.joda.time.Instant instant70 = instant66.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes71 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) instant66);
        org.joda.time.LocalTime localTime72 = dateTime61.toLocalTime();
        org.joda.time.Duration duration76 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration76, readableInstant77, periodType78);
        mutablePeriod79.setMonths((int) '4');
        org.joda.time.Period period82 = mutablePeriod79.toPeriod();
        int[] intArray83 = period82.getValues();
        int[] intArray85 = dateTimeField53.addWrapField((org.joda.time.ReadablePartial) localTime72, 0, intArray83, 3);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField2.set((org.joda.time.ReadablePartial) timeOfDay47, (-120), intArray83, (-9859));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -9859 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 43200000L + "'", long56 == 43200000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 52, 0, 0, 0, 0, 0, 11]");
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        java.util.Locale locale2 = new java.util.Locale("secondOfMinute", "1970-01-01T00:02:00.000+00:02");
        org.junit.Assert.assertEquals(locale2.toString(), "secondofminute_1970-01-01T00:02:00.000+00:02");
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-1));
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) weeks1);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(minutes2);
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.get((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        long long10 = dateTimeField7.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial11 = null;
        int int12 = dateTimeField7.getMinimumValue(readablePartial11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withFields(readablePartial17);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond((int) ' ');
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.format.PeriodPrinter periodPrinter22 = null;
        org.joda.time.format.PeriodParser periodParser23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = new org.joda.time.format.PeriodFormatter(periodPrinter22, periodParser23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter24.withParseType(periodType25);
        java.util.Locale locale27 = periodFormatter24.getLocale();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter30 = periodFormatter24.withLocale(locale28);
        java.lang.String str31 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime21, locale28);
        java.lang.Object obj33 = null;
        org.joda.time.Instant instant34 = new org.joda.time.Instant(obj33);
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone35);
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str41 = dateTimeZone35.getShortName(100L, locale39);
        java.lang.String str42 = locale39.getScript();
        boolean boolean43 = locale39.hasExtensions();
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime21, 86399999, locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 43200000L + "'", long10 == 43200000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PM" + "'", str31, "PM");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = interval5.contains((org.joda.time.ReadableInterval) interval9);
        java.lang.String str11 = interval5.toString();
        long long12 = interval5.getEndMillis();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime dateTime33 = dateTime20.minusWeeks((int) (byte) 1);
        int int34 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property35 = dateTime20.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime20.withYear(1969);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        boolean boolean39 = interval5.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = duration42.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = duration42.toPeriodTo(readableInstant46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant51 = instant49.minus(100L);
        java.lang.String str52 = instant51.toString();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration58 = duration55.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Period period60 = duration55.toPeriodTo(readableInstant59);
        org.joda.time.Duration duration63 = duration55.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType66, chronology67);
        org.joda.time.PeriodType periodType69 = periodType66.withWeeksRemoved();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = duration63.toPeriod(periodType69, chronology70);
        org.joda.time.Period period72 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) instant51, periodType69);
        org.joda.time.Period period73 = interval5.toPeriod(periodType69);
        org.joda.time.Period period74 = new org.joda.time.Period((long) 281, (long) (-120), periodType69);
        int[] intArray75 = period74.getValues();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str11, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1672531200000L + "'", long12 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str52, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0]");
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        java.lang.String str16 = duration7.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27, periodType35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Instant instant42 = dateTime39.toInstant();
        org.joda.time.DateTime dateTime44 = dateTime39.withMillis((long) '4');
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime39);
        int int46 = dateTime39.getYear();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = duration49.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = duration49.toPeriodTo(readableInstant53);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant58 = instant56.minus(100L);
        java.lang.String str59 = instant58.toString();
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = duration62.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Period period67 = duration62.toPeriodTo(readableInstant66);
        org.joda.time.Duration duration70 = duration62.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType73, chronology74);
        org.joda.time.PeriodType periodType76 = periodType73.withWeeksRemoved();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = duration70.toPeriod(periodType76, chronology77);
        org.joda.time.Period period79 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) instant58, periodType76);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime39, periodType76);
        org.joda.time.Period period81 = duration7.toPeriod(periodType76);
        int int82 = period81.getYears();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1969 + "'", int46 == 1969);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str59, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.PeriodType periodType9 = minutes8.getPeriodType();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        boolean boolean11 = minutes8.isLessThan(minutes10);
        org.joda.time.Minutes minutes13 = minutes10.minus(70);
        org.joda.time.Hours hours15 = org.joda.time.Hours.hours(97);
        org.joda.time.Weeks weeks16 = hours15.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = minutes10.compareTo((org.joda.time.base.BaseSingleFieldPeriod) hours15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Minutes cannot be compared to class org.joda.time.Hours");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(weeks16);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.getHours();
        org.joda.time.Period period11 = period3.withWeeks(4);
        int int12 = period3.getSeconds();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime8.toTimeOfDay();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Instant instant18 = dateTime15.toInstant();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        org.joda.time.DateTime dateTime22 = dateTime15.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime8.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime8.era();
        int int26 = property25.getMinimumValue();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        int int28 = property25.getMaximumTextLength(locale27);
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter5.withLocale(locale27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod31 = periodFormatter5.parseMutablePeriod("halfdays");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(periodFormatter29);
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int8 = dateTimeField2.getMinimumValue();
        long long10 = dateTimeField2.roundHalfEven((long) (byte) 1);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        int int14 = dateTimeField2.getMaximumTextLength(locale11);
        java.lang.String str15 = locale11.getDisplayVariant();
        java.lang.String str16 = locale11.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de" + "'", str16, "de");
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("1439");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1439\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.plus(4190400000L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant12 = instant10.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTimeISO();
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        boolean boolean16 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        int int22 = instant15.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant25 = instant15.withDurationAdded((long) (byte) 10, (-1));
        boolean boolean26 = dateTime2.equals((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime2.withTime(0, 19, (-120), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -120 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        long long9 = duration8.getStandardDays();
        org.joda.time.Duration duration10 = duration5.plus((org.joda.time.ReadableDuration) duration8);
        java.lang.Object obj12 = null;
        org.joda.time.Instant instant13 = new org.joda.time.Instant(obj12);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        int int17 = dateTimeZone14.getOffset(1L);
        boolean boolean19 = dateTimeZone14.isStandardOffset(0L);
        java.lang.String str21 = dateTimeZone14.getNameKey((long) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-1L), dateTimeZone14);
        org.joda.time.Period period25 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period27 = period25.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = period27.toDurationTo(readableInstant28);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant36 = instant34.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime37 = instant34.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period39 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime37, periodType38);
        org.joda.time.Minutes minutes40 = duration32.toStandardMinutes();
        org.joda.time.DateTime dateTime41 = dateTime23.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) dateTime23, dateTimeZone42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType46, chronology47);
        org.joda.time.Period period49 = duration5.toPeriodTo((org.joda.time.ReadableInstant) dateTime43, periodType46);
        long long50 = duration5.getStandardHours();
        org.joda.time.Period period51 = duration5.toPeriod();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) ' ');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Weeks weeks3 = period2.toStandardWeeks();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = period7.getFieldTypes();
        org.joda.time.Period period10 = period7.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Weeks weeks13 = weeks11.plus(0);
        boolean boolean14 = weeks3.isGreaterThan(weeks13);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.add(0L, 69);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant18 = instant16.minus(100L);
        org.joda.time.Instant instant20 = instant18.plus((long) 100);
        org.joda.time.Instant instant22 = instant18.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) instant18);
        org.joda.time.LocalTime localTime24 = dateTime13.toLocalTime();
        int int25 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Instant instant31 = dateTime28.toInstant();
        org.joda.time.DateMidnight dateMidnight32 = dateTime28.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime28.toYearMonthDay();
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = duration36.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = duration36.toPeriodTo(readableInstant40);
        org.joda.time.Weeks weeks42 = period41.toStandardWeeks();
        org.joda.time.Period period44 = period41.plusMonths((int) (short) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = period41.getFieldTypes();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.forFields(durationFieldTypeArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime24, (org.joda.time.ReadablePartial) yearMonthDay33, periodType46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2980800000L + "'", long10 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(periodType46);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Duration duration1 = weeks0.toStandardDuration();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant5, periodType6);
        mutablePeriod7.addDays((int) (short) 100);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.Weeks weeks11 = org.joda.time.Weeks.weeksIn(readableInterval10);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) weeks11);
        org.joda.time.Weeks weeks14 = weeks11.multipliedBy(292278993);
        org.joda.time.Weeks weeks15 = weeks0.plus(weeks11);
        org.joda.time.Period period16 = weeks15.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = period16.getFieldType(19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        mutablePeriod5.setDays(100);
        mutablePeriod5.add(8, 100, (int) (short) 1, (int) (short) 0, (-1), (int) (short) 100, (int) '4', (int) (short) 10);
        int int19 = mutablePeriod5.size();
        mutablePeriod5.setMonths(292278993);
        mutablePeriod5.setMinutes(97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus((long) (byte) 0);
        org.joda.time.Duration duration14 = duration10.toDuration();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTime dateTime35 = dateTime22.minusWeeks((int) (byte) 1);
        int int36 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property37 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime22.withYear(1969);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.centuryOfEra();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration10, chronology40);
        mutablePeriod5.setMinutes((int) (short) 10);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds50 = duration49.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration51 = null;
        boolean boolean52 = duration49.isEqual(readableDuration51);
        org.joda.time.Duration duration54 = duration49.minus((long) 1);
        org.joda.time.Duration duration56 = duration54.minus((long) '4');
        org.joda.time.Duration duration59 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = duration59.toPeriod(chronology60);
        boolean boolean62 = duration54.isEqual((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration63 = duration54.toDuration();
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime66 = instant65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime66.withZoneRetainFields(dateTimeZone67);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime71 = instant70.toDateTime();
        org.joda.time.DateTime.Property property72 = dateTime71.era();
        org.joda.time.DateTime dateTime73 = dateTime71.withTimeAtStartOfDay();
        org.joda.time.Duration duration76 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration76, readableInstant77, periodType78);
        mutablePeriod79.setMonths((int) '4');
        org.joda.time.DateTime dateTime82 = dateTime71.plus((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.DateTime dateTime84 = dateTime71.minusWeeks((int) (byte) 1);
        int int85 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime.Property property86 = dateTime71.minuteOfHour();
        org.joda.time.DateTime dateTime88 = dateTime71.withYear(1969);
        org.joda.time.Chronology chronology89 = dateTime88.getChronology();
        org.joda.time.DateTimeField dateTimeField90 = chronology89.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField91 = chronology89.era();
        org.joda.time.DateTimeField dateTimeField92 = chronology89.secondOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.millisOfSecond();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration63, chronology89);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        java.lang.String str8 = dateTimeField2.toString();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = locale13.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale13.getDisplayVariant(locale16);
        int int18 = dateTimeField2.getMaximumTextLength(locale13);
        org.joda.time.format.PeriodPrinter periodPrinter19 = null;
        org.joda.time.format.PeriodParser periodParser20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = new org.joda.time.format.PeriodFormatter(periodPrinter19, periodParser20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter21.withParseType(periodType22);
        java.util.Locale locale24 = periodFormatter21.getLocale();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter21.withLocale(locale25);
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale13.getDisplayLanguage(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = locale13.getUnicodeLocaleType("seconds");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: seconds");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str8, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italy" + "'", str14, "Italy");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        int int11 = dateTimeZone8.getOffset(1L);
        boolean boolean13 = dateTimeZone8.isStandardOffset(0L);
        java.lang.String str15 = dateTimeZone8.getNameKey((long) 1);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = dateTimeZone8.getName((long) (byte) 10, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone8.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(0, 53731271, 53669837, (int) (short) -1, (-100), 6, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        org.joda.time.Period period3 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period5 = period3.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationTo(readableInstant6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration10.isEqual(readableDuration12);
        org.joda.time.Duration duration15 = duration10.minus((long) 1);
        org.joda.time.Duration duration17 = duration15.minus((long) '4');
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime20, periodType44);
        boolean boolean46 = duration7.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration48 = new org.joda.time.Duration(432000000L);
        org.joda.time.Duration duration49 = duration7.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int59 = mutablePeriod58.getDays();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        boolean boolean70 = interval65.contains((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Chronology chronology71 = interval69.getChronology();
        mutablePeriod58.setPeriod((long) 'u', (long) 1969, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.dayOfMonth();
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration49, chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.hourOfDay();
        long long78 = dateTimeField76.roundFloor(259200000L);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 259200000L + "'", long78 == 259200000L);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        org.joda.time.Instant instant17 = instant15.plus((long) 100);
        org.joda.time.Instant instant19 = instant15.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) instant15);
        org.joda.time.LocalTime localTime21 = dateTime10.toLocalTime();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.Period period31 = mutablePeriod28.toPeriod();
        int[] intArray32 = period31.getValues();
        int[] intArray34 = dateTimeField2.addWrapField((org.joda.time.ReadablePartial) localTime21, 0, intArray32, 3);
        long long36 = dateTimeField2.roundFloor((long) 12);
        int int38 = dateTimeField2.getMinimumValue((-3676492804060799977L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType4, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType4, chronology7);
        int[] intArray9 = mutablePeriod8.getValues();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setMinutes((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0]");
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 69, 259200000L);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.hourOfHalfday();
        long long70 = dateTimeField68.roundHalfCeiling(2980800000L);
        long long73 = dateTimeField68.getDifferenceAsLong((long) 675, 4320000000L);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2980800000L + "'", long70 == 2980800000L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1199L) + "'", long73 == (-1199L));
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.joda.time.Period period4 = new org.joda.time.Period(1969, 23, (-11), (int) (short) -1);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.clockhourOfHalfday();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.LocalDate localDate47 = dateTime35.toLocalDate();
        int int48 = localDate47.size();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTime.Property property52 = dateTime51.era();
        org.joda.time.DateTime dateTime53 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, readableInstant57, periodType58);
        mutablePeriod59.setMonths((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime51.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.LocalDate localDate63 = dateTime51.toLocalDate();
        int int64 = localDate47.compareTo((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.format.PeriodPrinter periodPrinter66 = null;
        org.joda.time.format.PeriodParser periodParser67 = null;
        org.joda.time.format.PeriodFormatter periodFormatter68 = new org.joda.time.format.PeriodFormatter(periodPrinter66, periodParser67);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter70 = periodFormatter68.withParseType(periodType69);
        java.util.Locale locale71 = periodFormatter68.getLocale();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.lang.String str73 = locale72.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter74 = periodFormatter68.withLocale(locale72);
        java.util.Locale locale75 = locale72.stripExtensions();
        java.lang.String str76 = locale75.getDisplayName();
        java.lang.String str77 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDate47, (int) (short) -1, locale75);
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale78.getDisplayName(locale79);
        java.lang.String str81 = locale75.getDisplayVariant(locale78);
        java.lang.String str82 = locale78.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodFormatter70);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(periodFormatter74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Italienisch (Italien)" + "'", str76, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1" + "'", str77, "-1");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "anglais" + "'", str80, "anglais");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Englisch" + "'", str82, "Englisch");
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 141012);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.addMonths((int) (short) 1);
        mutablePeriod5.addWeeks((int) 'u');
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Instant instant10 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillis((long) '4');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.DateTime dateTime19 = dateTime15.withWeekOfWeekyear(8);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = org.joda.time.Period.seconds((int) (short) 0);
        org.joda.time.Period period23 = period22.normalizedStandard();
        org.joda.time.Period period24 = period22.normalizedStandard();
        org.joda.time.DateTime dateTime26 = dateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period24, (int) 'u');
        boolean boolean27 = languageRange1.equals((java.lang.Object) dateTime19);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "days" + "'", str3, "days");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "days" + "'", str4, "days");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfSecond();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant37 = instant35.minus(100L);
        org.joda.time.Instant instant39 = instant37.plus((long) 100);
        org.joda.time.Instant instant41 = instant37.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.LocalTime localTime43 = dateTime32.toLocalTime();
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.Instant instant52 = dateTime49.toInstant();
        org.joda.time.DateMidnight dateMidnight53 = dateTime49.toDateMidnight();
        int int54 = dateTime49.getEra();
        org.joda.time.Chronology chronology55 = dateTime49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-115706879999998030L), chronology55);
        org.joda.time.Period period58 = org.joda.time.Period.hours(1969);
        org.joda.time.Weeks weeks59 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period58);
        int[] intArray62 = chronology55.get((org.joda.time.ReadablePeriod) period58, (long) 0, (long) 70);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray64 = dateTimeField29.set((org.joda.time.ReadablePartial) localTime43, 365, intArray62, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 365");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(weeks59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, 70]");
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = seconds1.getValue(1972);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1972");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        int int10 = property8.getMaximumValueOverall();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayCountry();
        int int14 = property8.getMaximumShortTextLength(locale11);
        java.util.Locale locale18 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = property8.getAsText(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder4.setLocale(locale18);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1969-12-31t23:59:59.899z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals(locale18.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AD" + "'", str20, "AD");
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        org.joda.time.Period period13 = mutablePeriod5.toPeriod();
        int int14 = mutablePeriod5.getHours();
        mutablePeriod5.setSeconds((int) 'x');
        org.joda.time.Duration duration18 = org.joda.time.Duration.parse("PT432000S");
        org.joda.time.Duration duration20 = duration18.plus(8380845299L);
        org.joda.time.Duration duration21 = duration20.toDuration();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration21);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = weeks9.getFieldType();
        mutablePeriod5.add(durationFieldType10, (int) (byte) 0);
        mutablePeriod5.setSeconds(1439);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withMonthsRemoved();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period24.get(durationFieldType26);
        int int28 = period24.getWeeks();
        org.joda.time.Duration duration29 = period24.toStandardDuration();
        boolean boolean30 = periodType16.equals((java.lang.Object) duration29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withFields(readablePartial35);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType39, chronology40);
        org.joda.time.PeriodType periodType42 = periodType39.withWeeksRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withSecondsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime36, periodType44);
        org.joda.time.Duration duration46 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property47 = dateTime36.era();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        org.joda.time.Instant instant17 = instant15.plus((long) 100);
        org.joda.time.Instant instant19 = instant15.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) instant15);
        org.joda.time.LocalTime localTime21 = dateTime10.toLocalTime();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.Period period31 = mutablePeriod28.toPeriod();
        int[] intArray32 = period31.getValues();
        int[] intArray34 = dateTimeField2.addWrapField((org.joda.time.ReadablePartial) localTime21, 0, intArray32, 3);
        long long36 = dateTimeField2.remainder(720070L);
        java.lang.String str38 = dateTimeField2.getAsText((long) 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 720070L + "'", long36 == 720070L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AM" + "'", str38, "AM");
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        mutablePeriod5.addMonths(3);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod5.copy();
        int int24 = mutablePeriod23.getHours();
        mutablePeriod23.addSeconds((int) (short) 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType0.getField(chronology26);
        long long30 = durationField27.getMillis((-292276), 4438800000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-17536560000L) + "'", long30 == (-17536560000L));
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.joda.time.Period period8 = new org.joda.time.Period((-120), 9, 0, (-120), (-52), 101, (int) 'u', (int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes9 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) period8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P-120Y9M-120DT-52H101M117.117S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.PeriodType periodType11 = weeks10.getPeriodType();
        org.joda.time.Weeks weeks13 = weeks10.plus(0);
        org.joda.time.Duration duration14 = weeks10.toStandardDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType16 = weeks10.getFieldType(1972);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1972");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(duration14);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add(1L, (-1));
        long long11 = dateTimeField2.add(0L, 0L);
        boolean boolean12 = dateTimeField2.isSupported();
        long long14 = dateTimeField2.roundCeiling((-26179201000L));
        long long17 = dateTimeField2.add(141022L, 292278993);
        org.joda.time.DurationField durationField18 = dateTimeField2.getRangeDurationField();
        long long21 = durationField18.getValueAsLong(43200000L, (long) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-43199999L) + "'", long8 == (-43199999L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-26179200000L) + "'", long14 == (-26179200000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 12626452497741022L + "'", long17 == 12626452497741022L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        java.lang.Object obj12 = null;
        org.joda.time.Instant instant13 = new org.joda.time.Instant(obj12);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getName((long) 10);
        java.lang.String str19 = dateTimeZone14.getName((long) 8);
        long long21 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, 10L);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35, periodType36);
        mutablePeriod37.setMonths((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime29.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTime dateTime42 = dateTime29.minusWeeks((int) (byte) 1);
        int int43 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime44 = dateTime26.toDateTimeISO();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.DateTime dateTime49 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, readableInstant53, periodType54);
        mutablePeriod55.setMonths((int) '4');
        org.joda.time.DateTime dateTime58 = dateTime47.plus((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DateTime dateTime60 = dateTime47.minusWeeks((int) (byte) 1);
        long long61 = dateTime47.getMillis();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.withZoneRetainFields(dateTimeZone66);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime70 = instant69.toDateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.era();
        org.joda.time.DateTime dateTime72 = dateTime70.withTimeAtStartOfDay();
        org.joda.time.Duration duration75 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration75, readableInstant76, periodType77);
        mutablePeriod78.setMonths((int) '4');
        org.joda.time.DateTime dateTime81 = dateTime70.plus((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.DateTime dateTime83 = dateTime70.minusWeeks((int) (byte) 1);
        int int84 = dateTime67.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime.Property property85 = dateTime70.minuteOfHour();
        org.joda.time.DateTime dateTime87 = dateTime70.withYear(1969);
        org.joda.time.Chronology chronology88 = dateTime87.getChronology();
        org.joda.time.DurationField durationField89 = durationFieldType62.getField(chronology88);
        org.joda.time.DateTime dateTime90 = dateTime47.toDateTime(chronology88);
        int int91 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime90);
        int int92 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime44);
        int int94 = dateTimeZone14.getOffset((long) 'a');
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) "2022-02-21T14:54:10.495Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:54:10.495Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateMidnight6.getDayOfYear();
        boolean boolean8 = dateMidnight6.isAfterNow();
        org.joda.time.Instant instant9 = dateMidnight6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.DateTime dateTime11 = instant9.toDateTime();
        org.joda.time.Duration duration13 = new org.joda.time.Duration(432000000L);
        org.joda.time.DateTime dateTime14 = dateTime11.plus((org.joda.time.ReadableDuration) duration13);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 365 + "'", int7 == 365);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration9 = null;
        boolean boolean10 = duration7.isEqual(readableDuration9);
        org.joda.time.Duration duration12 = duration7.minus((long) 1);
        org.joda.time.Duration duration14 = duration12.minus((long) '4');
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration27 = duration24.plus((long) (byte) 0);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        boolean boolean32 = dateTime30.isEqual(10L);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType35, chronology36);
        org.joda.time.PeriodType periodType38 = periodType35.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration21, periodType38);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime17, periodType41);
        org.joda.time.Duration duration44 = duration12.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int55 = mutablePeriod54.getDays();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        boolean boolean66 = interval61.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        mutablePeriod54.setPeriod((long) 'u', (long) 1969, chronology67);
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 100, chronology67);
        org.joda.time.Period period70 = duration44.toPeriod(chronology67);
        org.joda.time.DateTimeField dateTimeField71 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology67.monthOfYear();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((long) (short) 10, periodType74);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant78 = instant77.toInstant();
        org.joda.time.DateTime dateTime79 = instant78.toDateTimeISO();
        org.joda.time.Duration duration80 = period75.toDurationFrom((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Period period82 = period75.plusMonths(1969);
        org.joda.time.Period period84 = period82.withMinutes(2);
        org.joda.time.Period period86 = period82.minusMonths((-1));
        int[] intArray88 = chronology67.get((org.joda.time.ReadablePeriod) period82, 100L);
        long long92 = chronology67.add((long) (-10), 31536000000L, (int) ' ');
        org.joda.time.DateTimeField dateTimeField93 = chronology67.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField94 = chronology67.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = new org.joda.time.DateTime(1439, 365, (-2147483647), 0, (-2147483647), chronology67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483647 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1009151999990L + "'", long92 == 1009151999990L);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        int int23 = mutablePeriod5.getMillis();
        mutablePeriod5.setPeriod((long) (byte) 10);
        mutablePeriod5.addSeconds(100);
        mutablePeriod5.add(86399999L);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.joda.time.Period period3 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period5 = period3.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationTo(readableInstant6);
        org.joda.time.Duration duration10 = duration7.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration10.toPeriodFrom(readableInstant11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = duration22.plus((long) (byte) 0);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        boolean boolean30 = dateTime28.isEqual(10L);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType33, chronology34);
        org.joda.time.PeriodType periodType36 = periodType33.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = duration10.toPeriod(periodType36, chronology39);
        org.joda.time.PeriodType periodType41 = periodType36.withHoursRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((int) (short) 1, (int) (short) -1, (-1), (int) ' ', (int) (short) 100, (-1), (int) ' ', 100);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant59 = instant57.minus(100L);
        java.lang.String str60 = instant59.toString();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration66 = duration63.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Period period68 = duration63.toPeriodTo(readableInstant67);
        org.joda.time.Duration duration70 = duration63.withMillis((long) (short) 0);
        org.joda.time.Instant instant71 = instant59.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime74 = instant73.toDateTime();
        org.joda.time.DateTime.Property property75 = dateTime74.era();
        org.joda.time.DateTime dateTime76 = dateTime74.withTimeAtStartOfDay();
        org.joda.time.Duration duration79 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration79, readableInstant80, periodType81);
        mutablePeriod82.setMonths((int) '4');
        org.joda.time.DateTime dateTime85 = dateTime74.plus((org.joda.time.ReadablePeriod) mutablePeriod82);
        org.joda.time.Instant instant87 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant88 = instant87.toInstant();
        boolean boolean89 = dateTime74.isEqual((org.joda.time.ReadableInstant) instant88);
        boolean boolean90 = instant71.isAfter((org.joda.time.ReadableInstant) instant88);
        org.joda.time.Instant instant91 = instant88.toInstant();
        org.joda.time.Chronology chronology92 = instant88.getChronology();
        org.joda.time.Chronology chronology93 = chronology92.withUTC();
        mutablePeriod54.add((-625L), chronology92);
        boolean boolean95 = mutablePeriod51.equals((java.lang.Object) chronology92);
        org.joda.time.DateTimeField dateTimeField96 = chronology92.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((long) (-100), 248399899L, periodType41, chronology92);
        mutablePeriod97.addDays(281);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str60, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, (int) (byte) 1, 70, (-11), 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -11 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        java.lang.String str11 = dateTimeZone8.getName((long) 10);
        long long14 = dateTimeZone8.convertLocalToUTC((long) (byte) 100, false);
        java.lang.String str16 = dateTimeZone8.getNameKey(0L);
        long long20 = dateTimeZone8.convertLocalToUTC((long) 1972, false, 1672963800000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(1, (-120), 4, (-11), 2, (int) (byte) 0, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -11 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1972L + "'", long20 == 1972L);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"January\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        java.io.IOException iOException1 = new java.io.IOException("PT-26179201S");
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime2.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime2.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime2.withWeekOfWeekyear(364);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 364 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.LocalTime localTime19 = dateTime15.toLocalTime();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime24.weekOfWeekyear();
        java.lang.String str26 = property25.getAsText();
        org.joda.time.DateTime dateTime27 = property25.withMaximumValue();
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = dateTime32.isEqual(10L);
        org.joda.time.DateTime dateTime36 = dateTime32.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime38 = dateTime32.plusDays(100);
        org.joda.time.LocalTime localTime39 = dateTime32.toLocalTime();
        org.joda.time.Weeks weeks40 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        mutablePeriod51.setMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime43.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTime dateTime56 = dateTime43.minusWeeks((int) (byte) 1);
        long long57 = dateTime43.getMillis();
        long long58 = dateTime43.getMillis();
        org.joda.time.LocalDate localDate59 = dateTime43.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str61 = dateTimeFieldType60.getName();
        int int62 = localDate59.get(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime39, (org.joda.time.ReadablePartial) localDate59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "yearOfCentury" + "'", str61, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 69 + "'", int62 == 69);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) '4');
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime8.toMutableDateTime(dateTimeZone23);
        java.lang.String str25 = dateTimeZone23.toString();
        long long27 = dateTimeZone2.getMillisKeepLocal(dateTimeZone23, 1L);
        java.util.TimeZone timeZone28 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("\u7fa9\u5927\u5229\u6587");
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = dateTimeZone29.getName(604800003L, locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = locale32.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded(0L, (int) 'a');
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.Period period16 = period13.minusYears((int) (byte) 1);
        org.joda.time.Period period18 = period13.plusMonths((int) (byte) 0);
        int int19 = period13.size();
        org.joda.time.Period period21 = period13.plusYears(100);
        org.joda.time.Period period23 = period13.minusSeconds(292278993);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, readableInstant27, periodType28);
        mutablePeriod29.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        mutablePeriod29.add(durationFieldType32, 8);
        boolean boolean35 = period13.isSupported(durationFieldType32);
        org.joda.time.DateTime dateTime37 = dateTime2.withFieldAdded(durationFieldType32, (-2147483648));
        org.joda.time.Days days38 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days40 = days38.dividedBy((int) (byte) 1);
        org.joda.time.Days days41 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        int int43 = days41.get(durationFieldType42);
        boolean boolean44 = days38.isLessThan(days41);
        org.joda.time.DateTime dateTime45 = dateTime2.plus((org.joda.time.ReadablePeriod) days41);
        org.joda.time.Days days47 = days41.minus(28);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(days47);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.plusHours((int) 'u');
        org.joda.time.DateTime dateTime22 = dateTime20.plusYears(3);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.LocalDateTime localDateTime24 = dateTime22.toLocalDateTime();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = property28.withMinimumValue();
        int int30 = property28.getMaximumValueOverall();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale31.getDisplayCountry();
        int int34 = property28.getMaximumShortTextLength(locale31);
        org.joda.time.DateTime dateTime35 = property28.withMaximumValue();
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant40 = instant38.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime41 = instant38.toMutableDateTimeISO();
        java.lang.Object obj42 = null;
        org.joda.time.Instant instant43 = new org.joda.time.Instant(obj42);
        boolean boolean44 = mutableDateTime41.isAfter((org.joda.time.ReadableInstant) instant43);
        boolean boolean45 = localTime36.equals((java.lang.Object) mutableDateTime41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime24, (org.joda.time.ReadablePartial) localTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Days days9 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Hours hours10 = days9.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = days9.getValue(53669837);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 53669837");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(hours10);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours4 = hours2.minus((int) (short) 10);
        boolean boolean5 = hours0.isGreaterThan(hours4);
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        boolean boolean9 = hours4.equals((java.lang.Object) dateTimeZone8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone8);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period6 = period1.withFieldAdded(durationFieldType4, (int) (short) 100);
        int int7 = period6.getMonths();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("DateTimeField[clockhourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[clockhourOfHalfday]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusSeconds(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime4.withDate(169, 893, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 893 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period2.plusMonths(1969);
        org.joda.time.Period period11 = period9.withMinutes(2);
        org.joda.time.Period period12 = period9.normalizedStandard();
        int int13 = period12.getHours();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType9, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType9, chronology12);
        org.joda.time.PeriodType periodType14 = periodType9.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter4.withParseType(periodType14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("1");
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter4.withLocale(locale17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMillis((int) (short) 1);
        int int27 = mutablePeriod24.getSeconds();
        mutablePeriod24.addYears(2);
        mutablePeriod24.addMonths(23);
        mutablePeriod24.addMillis(0);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod24.toMutablePeriod();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray39 = period38.getFieldTypes();
        org.joda.time.Period period41 = period38.minusYears((int) (byte) 1);
        org.joda.time.Period period43 = period38.plusMonths((int) (byte) 0);
        int int44 = period38.size();
        org.joda.time.Period period46 = period38.plusYears(100);
        org.joda.time.Period period48 = period38.minusSeconds(292278993);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, readableInstant52, periodType53);
        mutablePeriod54.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.days();
        mutablePeriod54.add(durationFieldType57, 8);
        boolean boolean60 = period38.isSupported(durationFieldType57);
        mutablePeriod34.set(durationFieldType57, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = periodFormatter18.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod34, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02", 70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldTypeArray39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.withZoneRetainFields(dateTimeZone7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.minusWeeks((int) (byte) 1);
        int int25 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property26 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime11.withYear(1969);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTime dateTime32 = dateTime3.toDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.hourOfHalfday();
        org.joda.time.Period period34 = new org.joda.time.Period(1L, periodType1, chronology29);
        long long38 = chronology29.add((long) (byte) 100, (long) 6, 59);
        org.joda.time.DateTimeField dateTimeField39 = chronology29.clockhourOfHalfday();
        java.lang.String str40 = dateTimeField39.getName();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 454L + "'", long38 == 454L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "clockhourOfHalfday" + "'", str40, "clockhourOfHalfday");
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime22.withCenturyOfEra((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTimeISO();
        int int27 = dateTime25.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        long long8 = dateTimeZone4.adjustOffset((-360621543182400001L), true);
        long long10 = dateTimeZone4.nextTransition((long) 'x');
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-360621543182400001L) + "'", long8 == (-360621543182400001L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 120L + "'", long10 == 120L);
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Minutes minutes2 = duration1.toStandardMinutes();
        org.joda.time.Days days3 = minutes2.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.setHours(0);
        mutablePeriod5.setPeriod(3599999L, 2980800000L);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Duration duration3 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = duration3.toPeriodTo(readableInstant7);
        org.joda.time.Duration duration11 = duration3.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.time();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableDuration) duration11, periodType13);
        org.joda.time.Period period15 = period14.negated();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration13.isEqual(readableDuration15);
        org.joda.time.Duration duration18 = duration13.minus((long) 1);
        org.joda.time.Duration duration20 = duration18.minus((long) '4');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        boolean boolean38 = dateTime36.isEqual(10L);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType41, chronology42);
        org.joda.time.PeriodType periodType44 = periodType41.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27, periodType44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime23, periodType47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) instant9, periodType47);
        org.joda.time.DateTime dateTime51 = dateTime6.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.DateTime dateTime56 = interval55.getStart();
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime56.minusMonths(59);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = duration62.plus((long) (byte) 0);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime68 = instant67.toDateTime();
        boolean boolean70 = dateTime68.isEqual(10L);
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType73, chronology74);
        org.joda.time.PeriodType periodType76 = periodType73.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime68, periodType76);
        org.joda.time.Minutes minutes78 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes79 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes81 = minutes79.minus((int) (short) -1);
        boolean boolean82 = minutes78.isGreaterThan(minutes79);
        org.joda.time.Minutes minutes83 = org.joda.time.Minutes.TWO;
        boolean boolean84 = minutes78.isLessThan(minutes83);
        org.joda.time.DateTime dateTime85 = dateTime68.plus((org.joda.time.ReadablePeriod) minutes78);
        java.util.Date date86 = dateTime85.toDate();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds88 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -66744958080");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(minutes78);
        org.junit.Assert.assertNotNull(minutes79);
        org.junit.Assert.assertNotNull(minutes81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(minutes83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Wed Dec 26 21:51:59 UTC 2115");
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        mutablePeriod5.setDays(100);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant11.minus(100L);
        org.joda.time.Instant instant15 = instant13.plus((long) 100);
        boolean boolean16 = instant13.isBeforeNow();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        int int21 = dateTime19.getWeekOfWeekyear();
        int int22 = dateTime19.getMonthOfYear();
        int int23 = dateTime19.getDayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime19.plus(4190400000L);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (short) 1, (long) (byte) 0);
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.Instant instant35 = instant13.withDurationAdded((org.joda.time.ReadableDuration) duration33, 97);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds39 = duration38.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration40 = null;
        boolean boolean41 = duration38.isEqual(readableDuration40);
        org.joda.time.Duration duration43 = duration38.minus((long) 1);
        org.joda.time.Duration duration45 = duration43.minus((long) '4');
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = duration48.toPeriod(chronology49);
        boolean boolean51 = duration43.isEqual((org.joda.time.ReadableDuration) duration48);
        boolean boolean52 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = durationFieldType0.getField(chronology26);
        long long30 = durationField27.getValueAsLong((long) 59, (long) 12);
        org.joda.time.DurationFieldType durationFieldType31 = durationField27.getType();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        org.joda.time.Days days39 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.minutes();
        int int41 = days39.get(durationFieldType40);
        mutablePeriod38.add(durationFieldType40, 8);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutablePeriod38.add(readablePeriod44);
        int int46 = mutablePeriod38.getMonths();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfEra();
        org.joda.time.Interval interval54 = property53.toInterval();
        boolean boolean55 = interval50.contains((org.joda.time.ReadableInterval) interval54);
        mutablePeriod38.setPeriod((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.withZoneRetainFields(dateTimeZone62);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime66 = instant65.toDateTime();
        org.joda.time.DateTime.Property property67 = dateTime66.era();
        org.joda.time.DateTime dateTime68 = dateTime66.withTimeAtStartOfDay();
        org.joda.time.Duration duration71 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, readableInstant72, periodType73);
        mutablePeriod74.setMonths((int) '4');
        org.joda.time.DateTime dateTime77 = dateTime66.plus((org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.DateTime dateTime79 = dateTime66.minusWeeks((int) (byte) 1);
        int int80 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime.Property property81 = dateTime66.minuteOfHour();
        org.joda.time.DateTime dateTime83 = dateTime66.withYear(1969);
        org.joda.time.Chronology chronology84 = dateTime83.getChronology();
        org.joda.time.DurationField durationField85 = durationFieldType58.getField(chronology84);
        mutablePeriod38.add((-43199999L), chronology84);
        org.joda.time.DurationField durationField87 = chronology84.millis();
        org.joda.time.DurationField durationField88 = chronology84.months();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 69, chronology84);
        org.joda.time.DateTimeField dateTimeField90 = chronology84.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology84.clockhourOfDay();
        org.joda.time.DurationField durationField92 = dateTimeField91.getDurationField();
        int int93 = durationField27.compareTo(durationField92);
        long long96 = durationField92.getDifferenceAsLong((-248399900L), (long) 9);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-68L) + "'", long96 == (-68L));
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(11, 1970, 1, 1970);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:59.154Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.weekOfWeekyear();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        org.joda.time.DateTime dateTime23 = dateTime15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime25 = dateTime15.withYearOfEra(9);
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = period30.getFieldTypes();
        int int32 = period30.getMinutes();
        org.joda.time.Weeks weeks33 = period30.toStandardWeeks();
        boolean boolean34 = weeks26.isGreaterThan(weeks33);
        java.lang.String str35 = weeks33.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(weeks26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P0W" + "'", str35, "P0W");
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add(1L, (-1));
        long long10 = dateTimeField2.remainder(720000L);
        long long13 = dateTimeField2.getDifferenceAsLong(29227899301L, (long) (-1));
        org.joda.time.DurationField durationField14 = dateTimeField2.getRangeDurationField();
        boolean boolean15 = dateTimeField2.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-43199999L) + "'", long8 == (-43199999L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 720000L + "'", long10 == 720000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 676L + "'", long13 == 676L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("en");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"en\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.DateTime dateTime32 = dateTime1.plusMillis(6);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTime dateTime53 = dateTime40.minusWeeks((int) (byte) 1);
        int int54 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property55 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime40.withYear(1969);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.year();
        org.joda.time.DateTimeZone dateTimeZone62 = chronology58.getZone();
        org.joda.time.DateTime dateTime63 = dateTime32.withChronology(chronology58);
        org.joda.time.DurationField durationField64 = chronology58.days();
        java.lang.String str65 = durationField64.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "DurationField[days]" + "'", str65, "DurationField[days]");
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval20 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology21 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean35 = dateTime31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime.Property property36 = dateTime26.property(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime26.getZone();
        org.joda.time.LocalDateTime localDateTime38 = dateTime26.toLocalDateTime();
        java.lang.Object obj39 = null;
        org.joda.time.Instant instant40 = new org.joda.time.Instant(obj39);
        org.joda.time.DateTimeZone dateTimeZone41 = instant40.getZone();
        java.lang.String str42 = dateTimeZone41.toString();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone41);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getDisplayScript();
        java.lang.String str47 = dateTimeZone41.getShortName(100L, locale45);
        java.lang.String str48 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, locale45);
        java.lang.Object obj51 = null;
        org.joda.time.Instant instant52 = new org.joda.time.Instant(obj51);
        org.joda.time.DateTimeZone dateTimeZone53 = instant52.getZone();
        java.lang.String str54 = dateTimeZone53.toString();
        int int56 = dateTimeZone53.getOffset(1L);
        boolean boolean58 = dateTimeZone53.isStandardOffset(0L);
        java.lang.String str60 = dateTimeZone53.getNameKey((long) 1);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeZone53.getName((long) (byte) 10, locale62);
        java.lang.String str64 = locale62.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = dateTimeField23.set(346022409602000L, "Franz\366sisch", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Franzo?sisch\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "86399" + "'", str48, "86399");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(365);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = weeks1.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        int int10 = dateTimeField2.get((long) 6);
        long long13 = dateTimeField2.getDifferenceAsLong((long) 'x', (long) 2);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.lang.String str18 = locale15.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTimeField2.getAsText((-365), locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -365");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        long long5 = dateTimeZone2.nextTransition((long) (short) 100);
        java.lang.String str6 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZone(dateTimeZone11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean19 = dateTime15.isSupported(dateTimeFieldType18);
        org.joda.time.DateTime.Property property20 = dateTime10.property(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime10.getZone();
        org.joda.time.LocalDateTime localDateTime22 = dateTime10.toLocalDateTime();
        int int23 = localDateTime22.size();
        boolean boolean24 = dateTimeZone2.isLocalDateTimeGap(localDateTime22);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.Instant instant48 = dateTime45.toInstant();
        org.joda.time.DateTime dateTime50 = dateTime45.withMillis((long) '4');
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime53 = dateTime45.minusMillis((-1));
        org.joda.time.DateTime dateTime55 = dateTime53.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime57 = dateTime53.withMillis(3732479956800000L);
        org.joda.time.DateTime dateTime58 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        int int59 = dateTime58.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 23 + "'", int59 == 23);
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.Period period9 = period3.plusWeeks(10);
        org.joda.time.PeriodType periodType10 = period3.getPeriodType();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.Period period13 = period3.withPeriodType(periodType11);
        org.joda.time.PeriodType periodType14 = periodType11.withWeeksRemoved();
        java.lang.String str15 = periodType14.getName();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Minutes" + "'", str15, "Minutes");
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.monthOfYear();
        java.util.Locale locale69 = java.util.Locale.US;
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale69.getDisplayScript(locale70);
        java.lang.String str72 = dateTimeField67.getAsShortText(432000000L, locale70);
        long long74 = dateTimeField67.roundCeiling(1970L);
        java.util.Locale locale78 = new java.util.Locale("hourOfHalfday", "YearMonthDayTime");
        java.lang.String str79 = dateTimeField67.getAsText(86400467L, locale78);
        org.joda.time.DurationField durationField80 = dateTimeField67.getRangeDurationField();
        long long82 = dateTimeField67.remainder(70L);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Jan" + "'", str72, "Jan");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2678400000L + "'", long74 == 2678400000L);
        org.junit.Assert.assertEquals(locale78.toString(), "hourofhalfday_YEARMONTHDAYTIME");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "January" + "'", str79, "January");
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 70L + "'", long82 == 70L);
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        boolean boolean18 = interval7.contains((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        boolean boolean27 = interval22.contains((org.joda.time.ReadableInterval) interval26);
        java.lang.String str28 = interval26.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        boolean boolean37 = interval32.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean38 = interval26.isBefore((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval12.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Hours hours40 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Days days41 = hours40.toStandardDays();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str28, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(days41);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField30 = chronology26.seconds();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 0, chronology26);
        org.joda.time.DurationField durationField32 = chronology26.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = durationField32.getMillis((-1921997864959L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Duration duration11 = duration9.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.Period period23 = mutablePeriod20.toPeriod();
        org.joda.time.ReadableInterval readableInterval24 = null;
        mutablePeriod20.setPeriod(readableInterval24);
        mutablePeriod20.setWeeks(69);
        mutablePeriod20.setWeeks((int) ' ');
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Instant instant35 = dateTime32.toInstant();
        org.joda.time.TimeOfDay timeOfDay36 = dateTime32.toTimeOfDay();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Instant instant42 = dateTime39.toInstant();
        org.joda.time.DateMidnight dateMidnight43 = dateTime39.toDateMidnight();
        org.joda.time.DateTime dateTime46 = dateTime39.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds47 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime46.getDayOfYear();
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, readableInstant58, periodType59);
        mutablePeriod60.setMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime52.plus((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateTime dateTime65 = dateTime52.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property66 = dateTime65.monthOfYear();
        org.joda.time.DateTime.Property property67 = dateTime65.weekyear();
        org.joda.time.DateTime dateTime68 = dateTime65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime71 = dateTime68.withZone(dateTimeZone70);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime74 = instant73.toDateTime();
        org.joda.time.DateTime.Property property75 = dateTime74.era();
        org.joda.time.DateTime dateTime76 = dateTime74.withTimeAtStartOfDay();
        org.joda.time.Instant instant77 = dateTime74.toInstant();
        org.joda.time.DateMidnight dateMidnight78 = dateTime74.toDateMidnight();
        int int79 = dateMidnight78.getDayOfYear();
        boolean boolean80 = dateMidnight78.isAfterNow();
        org.joda.time.Instant instant81 = dateMidnight78.toInstant();
        boolean boolean82 = dateTime71.isEqual((org.joda.time.ReadableInstant) dateMidnight78);
        int int83 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Duration duration84 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Interval interval85 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateMidnight78);
        int int86 = dateMidnight78.getDayOfWeek();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 365 + "'", int48 == 365);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 365 + "'", int79 == 365);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationTo(readableInstant4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        org.joda.time.DateTime dateTime18 = dateTime10.plus((org.joda.time.ReadableDuration) duration14);
        boolean boolean19 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, readableInstant23, periodType24);
        long long26 = duration22.getStandardSeconds();
        org.joda.time.Duration duration28 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration22, 10);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = duration31.plus((long) (byte) 0);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        boolean boolean39 = dateTime37.isEqual(10L);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType42, chronology43);
        org.joda.time.PeriodType periodType45 = periodType42.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37, periodType45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.Instant instant52 = dateTime49.toInstant();
        org.joda.time.DateTime dateTime54 = dateTime49.withMillis((long) '4');
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property56 = dateTime37.minuteOfDay();
        org.joda.time.Interval interval57 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = dateTime37.withDate(86399, 1969, 675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int9 = dateTimeField2.get((-1L));
        long long11 = dateTimeField2.remainder((long) (byte) 0);
        java.lang.String str12 = dateTimeField2.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "halfdayOfDay" + "'", str12, "halfdayOfDay");
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 1970);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Days days3 = seconds2.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(days3);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.withZoneRetainFields(dateTimeZone22);
        java.util.Locale locale25 = new java.util.Locale("+00:00");
        boolean boolean26 = dateTime21.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35, periodType36);
        mutablePeriod37.setMonths((int) '4');
        org.joda.time.DateTime dateTime40 = dateTime29.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTime dateTime42 = dateTime29.withMillisOfDay(4);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType47, chronology48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType47);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime29, periodType47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.Interval interval59 = property58.toInterval();
        boolean boolean60 = interval55.contains((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime29.toMutableDateTime(chronology61);
        boolean boolean63 = dateTimeFieldType18.isSupported(chronology61);
        org.joda.time.DateTime dateTime65 = dateTime16.withField(dateTimeFieldType18, 11);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals(locale25.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = new org.joda.time.Period(100, (-365), 86399999, (-10), (int) (short) -1, 1969, (int) (short) -1, (int) '4', periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime19.getZone();
        int int27 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime.Property property28 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime29 = property28.withMaximumValue();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime29, periodType30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        int int36 = dateTime34.getWeekOfWeekyear();
        int int37 = dateTime34.getMonthOfYear();
        int int38 = dateTime34.getDayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime34.plus(4190400000L);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property43 = dateTime42.centuryOfEra();
        org.joda.time.DateTime dateTime45 = property43.addToCopy((long) (short) 1);
        int int46 = dateTime45.getEra();
        org.joda.time.DateTime dateTime48 = dateTime45.minusDays((int) (short) 10);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds52 = duration51.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration53 = null;
        boolean boolean54 = duration51.isEqual(readableDuration53);
        org.joda.time.Duration duration56 = duration51.minus((long) 1);
        org.joda.time.Duration duration58 = duration56.minus((long) '4');
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = duration61.toPeriod(chronology62);
        boolean boolean64 = duration56.isEqual((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime dateTime65 = dateTime45.plus((org.joda.time.ReadableDuration) duration56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days66 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -106751967514");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.withYear(97);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0097-01-01T00:00:00.000Z" + "'", str10, "0097-01-01T00:00:00.000Z");
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        boolean boolean5 = periodFormatter2.isParser();
        org.joda.time.ReadWritablePeriod readWritablePeriod6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = periodFormatter2.parseInto(readWritablePeriod6, "-292276", 53731271);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.addUnicodeLocaleAttribute("ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours3 = hours1.minus((int) (short) 10);
        org.joda.time.Hours hours4 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours8 = hours6.minus((int) (short) 10);
        boolean boolean9 = hours4.isGreaterThan(hours8);
        boolean boolean10 = hours1.isLessThan(hours8);
        org.joda.time.Hours hours12 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours14 = hours12.minus((int) (short) 10);
        org.joda.time.Hours hours15 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours17 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours19 = hours17.minus((int) (short) 10);
        boolean boolean20 = hours15.isGreaterThan(hours19);
        boolean boolean21 = hours12.isLessThan(hours19);
        boolean boolean22 = hours1.isGreaterThan(hours12);
        org.joda.time.Hours hours24 = hours1.plus(365);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hours24);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period11.minusHours(7);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = period11.withField(durationFieldType14, 53786950);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) 'a');
        org.joda.time.Period period3 = period1.plusYears((-292275054));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DurationField durationField3 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology52.months();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int[] intArray65 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay63, (long) 86399);
        long long69 = chronology52.add(0L, 86400467L, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period70 = new org.joda.time.Period((java.lang.Object) long69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 26, 399]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8380845299L + "'", long69 == 8380845299L);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        org.joda.time.Period period13 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (byte) 10);
        mutablePeriod5.setPeriod((long) 23, (long) 23);
        mutablePeriod5.addMonths((int) '#');
        mutablePeriod5.addSeconds((int) (short) -1);
        mutablePeriod5.addHours(28);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withDaysRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType1.withSecondsRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((-3382L), periodType4);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getOffset(1L);
        boolean boolean15 = dateTimeZone10.isStandardOffset(0L);
        org.joda.time.DateTime dateTime16 = dateTime2.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Duration duration26 = duration19.minus(43200000L);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration26);
        int int28 = dateTime16.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        java.io.IOException iOException1 = new java.io.IOException("ko");
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long68 = dateTimeField65.set((long) 11, "PT0.011S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.011S\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period1.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.minusWeeks(2);
        org.joda.time.Period period10 = period8.withHours(1969);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime33 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property34 = dateTime15.dayOfMonth();
        boolean boolean35 = period8.equals((java.lang.Object) property34);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setHours((int) (byte) 100);
        org.joda.time.Days days44 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        int int46 = days44.get(durationFieldType45);
        mutablePeriod41.set(durationFieldType45, (int) 'x');
        mutablePeriod41.setYears(100);
        org.joda.time.Period period51 = period8.withFields((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Period period53 = period8.withMillis(19363);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime4.getZone();
        int int12 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int19 = dateTimeField17.get((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        long long25 = dateTimeField22.add(0L, (long) (short) 1);
        long long27 = dateTimeField22.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant35 = instant33.minus(100L);
        org.joda.time.Instant instant37 = instant35.plus((long) 100);
        org.joda.time.Instant instant39 = instant35.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.LocalTime localTime41 = dateTime30.toLocalTime();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.Period period51 = mutablePeriod48.toPeriod();
        int[] intArray52 = period51.getValues();
        int[] intArray54 = dateTimeField22.addWrapField((org.joda.time.ReadablePartial) localTime41, 0, intArray52, 3);
        int int55 = localTime41.size();
        int int56 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime41);
        java.lang.String str57 = localTime41.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = property13.compareTo((org.joda.time.ReadablePartial) localTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 43200000L + "'", long25 == 43200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "23:59:59.999" + "'", str57, "23:59:59.999");
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(2);
        org.joda.time.DateTime dateTime34 = dateTime30.plusWeeks(78719999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = new org.joda.time.Period((java.lang.Object) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        org.joda.time.Period period11 = period8.minusYears((int) (byte) 1);
        org.joda.time.Period period13 = period8.plusMonths((int) (byte) 0);
        int int14 = period8.size();
        org.joda.time.Period period16 = period8.plusYears(100);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes20 = minutes18.minus((int) (short) -1);
        boolean boolean21 = minutes17.isGreaterThan(minutes18);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.TWO;
        boolean boolean23 = minutes17.isLessThan(minutes22);
        boolean boolean24 = period8.equals((java.lang.Object) minutes17);
        int int25 = period8.getSeconds();
        org.joda.time.Period period27 = period8.minusSeconds(86399);
        org.joda.time.Period period29 = period27.minusMinutes((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        boolean boolean31 = period29.isSupported(durationFieldType30);
        int int32 = periodType2.indexOf(durationFieldType30);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(895);
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Period period11 = period9.plusDays(23);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = period11.getValue(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.DateTime dateTime3 = instant2.toDateTimeISO();
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(10);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType9, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) 0, periodType9, chronology12);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (short) 10, periodType15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.Duration duration21 = period16.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period26 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period28 = period26.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationTo(readableInstant29);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration33.toPeriodFrom(readableInstant34);
        org.joda.time.Duration duration36 = duration24.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration37 = duration21.plus((org.joda.time.ReadableDuration) duration24);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int51 = mutablePeriod50.getDays();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        boolean boolean62 = interval57.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        mutablePeriod50.setPeriod((long) 'u', (long) 1969, chronology63);
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 100, chronology63);
        mutablePeriod13.setPeriod((long) 1, (long) 69, chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.year();
        org.joda.time.DurationField durationField68 = chronology63.seconds();
        org.joda.time.DateTimeField dateTimeField69 = chronology63.dayOfYear();
        org.joda.time.DateTime dateTime70 = dateTime5.toDateTime(chronology63);
        org.joda.time.DurationField durationField71 = chronology63.years();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMillis();
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod5.copy();
        mutablePeriod5.setDays(5);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setPeriod((long) 1, (-1L));
        mutablePeriod22.setMillis((int) (short) 0);
        int int28 = mutablePeriod22.getDays();
        mutablePeriod22.addMinutes(1969);
        org.joda.time.Chronology chronology32 = null;
        mutablePeriod22.setPeriod((long) 'a', chronology32);
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod22.add((long) 'u', chronology35);
        mutablePeriod22.addMinutes((int) (short) -1);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        mutablePeriod44.setMillis((int) (short) 1);
        int int47 = mutablePeriod44.getSeconds();
        mutablePeriod44.addYears(2);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfEra();
        org.joda.time.Interval interval58 = property57.toInterval();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfEra();
        org.joda.time.Interval interval62 = property61.toInterval();
        boolean boolean63 = interval58.contains((org.joda.time.ReadableInterval) interval62);
        java.lang.String str64 = interval62.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime.Property property67 = dateTime66.yearOfEra();
        org.joda.time.Interval interval68 = property67.toInterval();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.joda.time.Interval interval72 = property71.toInterval();
        boolean boolean73 = interval68.contains((org.joda.time.ReadableInterval) interval72);
        boolean boolean74 = interval62.isBefore((org.joda.time.ReadableInterval) interval72);
        mutablePeriod54.setPeriod((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.days();
        mutablePeriod54.set(durationFieldType76, 19);
        int int79 = mutablePeriod44.get(durationFieldType76);
        mutablePeriod22.add(durationFieldType76, 10);
        mutablePeriod5.set(durationFieldType76, (int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration84 = null;
        mutablePeriod5.add(readableDuration84);
        java.lang.Class<?> wildcardClass86 = mutablePeriod5.getClass();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str64, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        int int26 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property27 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime12.withYear(1969);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology30.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((int) (short) 1, (int) '#', 59, 19, 24, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.Period period9 = period3.plusWeeks(10);
        org.joda.time.Period period11 = period3.withMonths((int) (short) 10);
        org.joda.time.Period period13 = period11.plusMillis(1);
        org.joda.time.Period period15 = period13.minusDays(97);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        org.joda.time.Days days22 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.minutes();
        int int24 = days22.get(durationFieldType23);
        mutablePeriod21.add(durationFieldType23, 8);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutablePeriod21.add(readablePeriod27);
        int int29 = mutablePeriod21.getMonths();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        boolean boolean38 = interval33.contains((org.joda.time.ReadableInterval) interval37);
        mutablePeriod21.setPeriod((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.withZoneRetainFields(dateTimeZone45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, readableInstant55, periodType56);
        mutablePeriod57.setMonths((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime49.plus((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.DateTime dateTime62 = dateTime49.minusWeeks((int) (byte) 1);
        int int63 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property64 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime66 = dateTime49.withYear(1969);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DurationField durationField68 = durationFieldType41.getField(chronology67);
        mutablePeriod21.add((-43199999L), chronology67);
        org.joda.time.DurationField durationField70 = chronology67.millis();
        org.joda.time.DurationField durationField71 = chronology67.months();
        int int74 = durationField71.getDifference((-3676492804060799977L), 0L);
        org.joda.time.DurationFieldType durationFieldType75 = durationField71.getType();
        int int76 = period15.get(durationFieldType75);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1398041029) + "'", int74 == (-1398041029));
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.setHours(0);
        mutablePeriod5.setDays(6);
        mutablePeriod5.setWeeks(292278993);
        mutablePeriod5.addHours(2);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = mutablePeriod5.getValue(45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 45");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DurationField durationField27 = chronology25.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(0);
        org.joda.time.Hours hours2 = seconds1.toStandardHours();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        int int4 = period1.getWeeks();
        org.joda.time.Period period6 = period1.plusMonths(70);
        org.joda.time.Period period8 = period6.withSeconds(69);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType4.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType4.getRangeDurationType();
        int int9 = periodType3.indexOf(durationFieldType8);
        org.joda.time.PeriodType periodType10 = periodType3.withMillisRemoved();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(37868342400000L, periodType3, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 37868342400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfHalfday();
        long long33 = chronology25.add((long) 86399999, (long) 9, (int) '4');
        org.joda.time.DateTimeField dateTimeField34 = chronology25.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400467L + "'", long33 == 86400467L);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = duration40.toPeriodTo(readableInstant44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant49 = instant47.minus(100L);
        java.lang.String str50 = instant49.toString();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = duration53.toPeriodTo(readableInstant57);
        org.joda.time.Duration duration61 = duration53.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withWeeksRemoved();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration61.toPeriod(periodType67, chronology68);
        org.joda.time.Period period70 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) instant49, periodType67);
        org.joda.time.Period period71 = interval3.toPeriod(periodType67);
        int int72 = period71.getDays();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str50, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime22 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant26 = instant24.minus(100L);
        java.lang.String str27 = instant26.toString();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration30.toPeriodTo(readableInstant34);
        org.joda.time.Duration duration37 = duration30.withMillis((long) (short) 0);
        org.joda.time.Instant instant38 = instant26.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Seconds seconds39 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) instant26);
        org.joda.time.Period period41 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period43 = period41.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = period43.toDurationTo(readableInstant44);
        org.joda.time.Duration duration48 = duration45.withDurationAdded((long) '#', 0);
        long long49 = duration48.getStandardSeconds();
        org.joda.time.Instant instant50 = instant26.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (short) 100);
        org.joda.time.Instant instant53 = instant50.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Chronology chronology54 = instant50.getChronology();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str27, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-26179201L) + "'", long49 == (-26179201L));
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        mutablePeriod11.setMonths((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalDate localDate15 = dateTime3.toLocalDate();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Instant instant21 = dateTime18.toInstant();
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) instant21);
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.ONE;
        boolean boolean24 = seconds22.isLessThan(seconds23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Seconds seconds26 = org.joda.time.Seconds.secondsIn(readableInterval25);
        org.joda.time.Seconds seconds28 = seconds26.plus((int) (byte) -1);
        org.joda.time.Seconds seconds29 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds30 = seconds28.plus(seconds29);
        org.joda.time.Seconds seconds31 = seconds28.negated();
        org.joda.time.Seconds seconds32 = seconds31.negated();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Seconds seconds34 = org.joda.time.Seconds.secondsIn(readableInterval33);
        org.joda.time.Seconds seconds36 = seconds34.plus((int) (byte) -1);
        org.joda.time.Seconds seconds37 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds38 = seconds36.plus(seconds37);
        org.joda.time.Seconds seconds39 = seconds36.negated();
        org.joda.time.Seconds seconds40 = seconds39.negated();
        org.joda.time.Seconds seconds41 = seconds32.plus(seconds40);
        org.joda.time.Seconds seconds42 = seconds23.plus(seconds40);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.Seconds seconds44 = org.joda.time.Seconds.secondsIn(readableInterval43);
        org.joda.time.Seconds seconds46 = seconds44.plus((int) (byte) -1);
        org.joda.time.Seconds seconds47 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds48 = seconds46.plus(seconds47);
        org.joda.time.Seconds seconds49 = seconds46.negated();
        org.joda.time.Seconds seconds50 = seconds49.negated();
        boolean boolean51 = seconds23.isLessThan(seconds50);
        org.joda.time.PeriodType periodType52 = seconds23.getPeriodType();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.weeks();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.minuteOfDay();
        org.joda.time.DurationField durationField65 = chronology62.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.era();
        org.joda.time.DurationField durationField67 = chronology62.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(62135596799999L, periodType52, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 62135596799");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Instant instant47 = instant42.toInstant();
        org.joda.time.Period period49 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period51 = period49.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Duration duration53 = period51.toDurationTo(readableInstant52);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) '#', 0);
        long long57 = duration56.getStandardSeconds();
        org.joda.time.Instant instant58 = instant47.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Instant instant61 = instant47.withDurationAdded((-1L), 53731271);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-26179201L) + "'", long57 == (-26179201L));
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant61);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 7, (-3676492805054399977L));
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.Period period9 = period6.minusYears((int) (byte) 1);
        org.joda.time.Period period11 = period6.plusMonths((int) (byte) 0);
        int int12 = period6.size();
        org.joda.time.Period period14 = period6.plusYears(100);
        org.joda.time.Period period16 = period6.minusSeconds(292278993);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.days();
        mutablePeriod22.add(durationFieldType25, 8);
        boolean boolean28 = period6.isSupported(durationFieldType25);
        org.joda.time.Period period30 = period6.withSeconds(169);
        org.joda.time.Period period32 = period30.plusSeconds(59);
        org.joda.time.Period period34 = period30.minusYears(31);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period30);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.hourOfHalfday();
        long long70 = dateTimeField68.roundHalfCeiling(2980800000L);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = dateTimeField68.set((long) 1972, (-27349920));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27349920 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2980800000L + "'", long70 == 2980800000L);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        org.joda.time.Duration duration2 = seconds0.toStandardDuration();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Instant instant8 = dateTime5.toInstant();
        org.joda.time.DateMidnight dateMidnight9 = dateTime5.toDateMidnight();
        int int10 = dateMidnight9.getDayOfYear();
        boolean boolean11 = dateMidnight9.isAfterNow();
        org.joda.time.Instant instant12 = dateMidnight9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        org.joda.time.Interval interval14 = duration2.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Duration duration16 = duration2.withMillis((long) 2022);
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        int int10 = property8.getMaximumValueOverall();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayCountry();
        int int14 = property8.getMaximumShortTextLength(locale11);
        org.joda.time.DateTime dateTime15 = property8.withMaximumValue();
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(10, 292278993, 7, (int) (byte) -1, 97, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("_HI!_hi!", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(432000000L);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod13);
        java.lang.Object obj17 = null;
        org.joda.time.Instant instant18 = new org.joda.time.Instant(obj17);
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        int int22 = dateTimeZone19.getOffset(1L);
        boolean boolean24 = dateTimeZone19.isStandardOffset(0L);
        org.joda.time.DateTime dateTime25 = dateTime5.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears(1969);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType32, chronology35);
        org.joda.time.PeriodType periodType37 = periodType32.withDaysRemoved();
        org.joda.time.Period period38 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime27, periodType32);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Instant instant44 = dateTime41.toInstant();
        org.joda.time.DateTime dateTime46 = dateTime41.withMillis((long) '4');
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period48 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime41, periodType47);
        org.joda.time.Period period50 = period48.withMinutes(19);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT432000S" + "'", str2, "PT432000S");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getLeapDurationField();
        long long10 = dateTimeField2.roundHalfFloor((-1L));
        org.joda.time.DurationField durationField11 = dateTimeField2.getDurationField();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        boolean boolean21 = dateTimeField16.isLeap(10L);
        int int22 = dateTimeField16.getMinimumValue();
        long long24 = dateTimeField16.roundHalfEven((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.Period period35 = mutablePeriod32.toPeriod();
        int[] intArray36 = period35.getValues();
        int[] intArray38 = dateTimeField16.addWrapPartial(readablePartial25, 10, intArray36, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = dateTimeField2.addWrapPartial(readablePartial12, 53669837, intArray36, (-27349920));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53669837");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 0, 0, 0, 0, 0, 11]");
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.joda.time.Hours hours0 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours2 = hours0.minus((int) (short) 100);
        int int3 = hours2.size();
        org.joda.time.Hours hours4 = hours2.negated();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType10, chronology11);
        org.joda.time.PeriodType periodType13 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, readableInstant29, periodType30);
        mutablePeriod31.setMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime23.plus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTime dateTime36 = dateTime23.minusWeeks((int) (byte) 1);
        int int37 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property38 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime23.withYear(1969);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.year();
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 100, (long) 'a', periodType15, chronology41);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) '#', chronology41);
        org.joda.time.Hours hours47 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours48 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours50 = hours48.multipliedBy(0);
        org.joda.time.Hours hours52 = hours48.dividedBy(69);
        org.joda.time.Hours hours53 = org.joda.time.Hours.MIN_VALUE;
        boolean boolean54 = hours52.isGreaterThan(hours53);
        org.joda.time.Hours hours55 = hours47.plus(hours53);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) hours55);
        org.joda.time.Hours hours57 = hours55.negated();
        org.joda.time.Hours hours58 = hours4.minus(hours57);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertNotNull(hours58);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology27.days();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 1972);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period9 = duration8.toPeriod();
        boolean boolean10 = duration4.isEqual((org.joda.time.ReadableDuration) duration8);
        java.lang.String str11 = duration8.toString();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = duration14.plus((long) (byte) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        boolean boolean22 = dateTime20.isEqual(10L);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType25, chronology26);
        org.joda.time.PeriodType periodType28 = periodType25.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime20, periodType28);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Instant instant35 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime32.withMillis((long) '4');
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime32);
        int int39 = dateTime32.getYear();
        org.joda.time.Period period40 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period41 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period43 = period41.plusYears((int) (byte) 1);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1969 + "'", int39 == 1969);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) dateTime2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withHourOfDay((-23));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Weeks weeks11 = period3.toStandardWeeks();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = weeks12.getFieldType(0);
        org.joda.time.Period period18 = period3.withField(durationFieldType16, 0);
        org.joda.time.Period period20 = period3.multipliedBy((int) '4');
        org.joda.time.Period period22 = period3.minusDays(999);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology6);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10, periodType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.Duration duration15 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period20 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period22 = period20.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationTo(readableInstant23);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = duration27.toPeriodFrom(readableInstant28);
        org.joda.time.Duration duration30 = duration18.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = duration15.plus((org.joda.time.ReadableDuration) duration18);
        mutablePeriod7.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int45 = mutablePeriod44.getDays();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod44.setPeriod((long) 'u', (long) 1969, chronology57);
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, chronology57);
        mutablePeriod7.setPeriod((long) 1, (long) 69, chronology57);
        int int61 = mutablePeriod7.size();
        int int62 = mutablePeriod7.getHours();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.setWeeks(365);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime6 = dateTime2.plusHours((int) 'x');
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) dateTime2);
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Instant instant14 = dateTime11.toInstant();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime11.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long21 = dateTimeField18.add(0L, (long) (short) 1);
        long long23 = dateTimeField18.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        org.joda.time.Instant instant33 = instant31.plus((long) 100);
        org.joda.time.Instant instant35 = instant31.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.LocalTime localTime37 = dateTime26.toLocalTime();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        mutablePeriod44.setMonths((int) '4');
        org.joda.time.Period period47 = mutablePeriod44.toPeriod();
        int[] intArray48 = period47.getValues();
        int[] intArray50 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localTime37, 0, intArray48, 3);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        long long57 = dateTimeField54.add(0L, (long) (short) 1);
        long long59 = dateTimeField54.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTime.Property property63 = dateTime62.era();
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant67 = instant65.minus(100L);
        org.joda.time.Instant instant69 = instant67.plus((long) 100);
        org.joda.time.Instant instant71 = instant67.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) instant67);
        org.joda.time.LocalTime localTime73 = dateTime62.toLocalTime();
        org.joda.time.Duration duration77 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration77, readableInstant78, periodType79);
        mutablePeriod80.setMonths((int) '4');
        org.joda.time.Period period83 = mutablePeriod80.toPeriod();
        int[] intArray84 = period83.getValues();
        int[] intArray86 = dateTimeField54.addWrapField((org.joda.time.ReadablePartial) localTime73, 0, intArray84, 3);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) localTime73);
        org.joda.time.Instant instant89 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime90 = instant89.toDateTime();
        org.joda.time.DateTime.Property property91 = dateTime90.era();
        org.joda.time.DateTime dateTime92 = dateTime90.withTimeAtStartOfDay();
        org.joda.time.Instant instant93 = dateTime90.toInstant();
        org.joda.time.TimeOfDay timeOfDay94 = dateTime90.toTimeOfDay();
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.days();
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) timeOfDay94, periodType95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days97 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) yearMonthDay8, (org.joda.time.ReadablePartial) timeOfDay94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 43200000L + "'", long21 == 43200000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 43200000L + "'", long57 == 43200000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(timeOfDay94);
        org.junit.Assert.assertNotNull(periodType95);
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("PT0S");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder12.setScript("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: dayOfMonth [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateMidnight dateMidnight18 = dateTime15.toDateMidnight();
        java.lang.Object obj19 = null;
        org.joda.time.Instant instant20 = new org.joda.time.Instant(obj19);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        boolean boolean24 = dateTimeZone21.isStandardOffset((long) '4');
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime27.plus((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTime dateTime40 = dateTime27.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime27.toMutableDateTime(dateTimeZone42);
        java.lang.String str44 = dateTimeZone42.toString();
        long long46 = dateTimeZone21.getMillisKeepLocal(dateTimeZone42, 1L);
        org.joda.time.DateTime dateTime47 = dateTime15.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime.Property property48 = dateTime15.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        java.lang.String str6 = duration2.toString();
        org.joda.time.Seconds seconds7 = duration2.toStandardSeconds();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = duration10.toPeriodTo(readableInstant14);
        org.joda.time.Duration duration17 = duration10.withMillis((long) (short) 0);
        org.joda.time.Duration duration20 = duration10.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        boolean boolean25 = dateTime23.isEqual(10L);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23, periodType26);
        long long28 = dateTime23.getMillis();
        org.joda.time.Instant instant29 = dateTime23.toInstant();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType33, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (short) 0, periodType33, chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        int int39 = periodType33.indexOf(durationFieldType38);
        org.joda.time.PeriodType periodType40 = periodType33.withYearsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime23, periodType40);
        boolean boolean42 = dateTime23.isEqualNow();
        int int43 = dateTime23.getMillisOfSecond();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.011S" + "'", str6, "PT0.011S");
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime2.secondOfDay();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((int) '4');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        boolean boolean25 = dateTime23.isEqual(10L);
        org.joda.time.DateTime dateTime27 = dateTime23.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime29 = dateTime23.plusDays(100);
        org.joda.time.LocalTime localTime30 = dateTime23.toLocalTime();
        int int31 = property18.compareTo((org.joda.time.ReadablePartial) localTime30);
        int int32 = property18.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 86399 + "'", int32 == 86399);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.year();
        long long69 = dateTimeField66.set((long) (-23), 52);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-60494601600023L) + "'", long69 == (-60494601600023L));
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval20 = interval3.toMutableInterval();
        org.joda.time.Chronology chronology21 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        java.lang.String str25 = dateTimeField23.getAsShortText(5443200000000011L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.LocalDate localDate17 = dateTime5.toLocalDate();
        int int18 = instant1.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime20 = dateTime5.withSecondOfMinute(0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.DateTime dateTime25 = interval24.getStart();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime25.minusMonths(59);
        java.lang.Object obj29 = null;
        org.joda.time.Instant instant30 = new org.joda.time.Instant(obj29);
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = dateTime25.withZoneRetainFields(dateTimeZone31);
        long long35 = dateTimeZone31.nextTransition(248399899L);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone31);
        java.lang.Object obj38 = null;
        org.joda.time.Instant instant39 = new org.joda.time.Instant(obj38);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        java.lang.String str41 = dateTimeZone40.toString();
        java.lang.String str43 = dateTimeZone40.getName((long) 10);
        java.lang.String str45 = dateTimeZone40.getName((long) 8);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = dateTimeZone40.getName((long) 1969, locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        long long54 = dateTimeField51.add(0L, (long) (short) 1);
        boolean boolean56 = dateTimeField51.isLeap(10L);
        int int57 = dateTimeField51.getMinimumValue();
        long long59 = dateTimeField51.roundHalfEven((long) (byte) 1);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale60);
        java.util.Set<java.lang.String> strSet62 = locale60.getUnicodeLocaleKeys();
        int int63 = dateTimeField51.getMaximumTextLength(locale60);
        java.lang.String str64 = locale47.getDisplayScript(locale60);
        java.lang.String str65 = dateTimeZone31.getShortName((-3676492804060799977L), locale60);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 248399899L + "'", long35 == 248399899L);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 43200000L + "'", long54 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addMinutes(1969);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.setPeriod((long) 'a', chronology15);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod5.add((long) 'u', chronology18);
        mutablePeriod5.addMinutes((int) (short) -1);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMillis((int) (short) 1);
        int int30 = mutablePeriod27.getSeconds();
        mutablePeriod27.addYears(2);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        boolean boolean46 = interval41.contains((org.joda.time.ReadableInterval) interval45);
        java.lang.String str47 = interval45.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        boolean boolean57 = interval45.isBefore((org.joda.time.ReadableInterval) interval55);
        mutablePeriod37.setPeriod((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.days();
        mutablePeriod37.set(durationFieldType59, 19);
        int int62 = mutablePeriod27.get(durationFieldType59);
        mutablePeriod5.add(durationFieldType59, 10);
        mutablePeriod5.setSeconds(8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str47, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("PeriodType[YearDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[YearDay]\" is malformed at \"eriodType[YearDay]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Duration duration5 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration7 = null;
        boolean boolean8 = duration5.isEqual(readableDuration7);
        org.joda.time.Duration duration10 = duration5.minus((long) 1);
        org.joda.time.Duration duration12 = duration10.minus((long) '4');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = duration22.plus((long) (byte) 0);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        boolean boolean30 = dateTime28.isEqual(10L);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType33, chronology34);
        org.joda.time.PeriodType periodType36 = periodType33.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime15, periodType39);
        org.joda.time.TimeOfDay timeOfDay41 = dateTime15.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = timeOfDay41.toDateTime(readableInstant42);
        int int44 = timeOfDay41.size();
        org.joda.time.Chronology chronology45 = timeOfDay41.getChronology();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant49 = instant47.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime50 = instant47.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int52 = mutableDateTime50.get(dateTimeFieldType51);
        int int53 = mutableDateTime50.getYearOfEra();
        int int54 = mutableDateTime50.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime55 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) mutableDateTime50);
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getScript();
        java.lang.String str59 = locale56.getExtension('u');
        java.lang.String str60 = locale56.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) timeOfDay41, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 69 + "'", int52 == 69);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1969 + "'", int53 == 1969);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period6 = period1.withFieldAdded(durationFieldType4, (int) (short) 100);
        org.joda.time.Period period8 = period1.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        org.joda.time.Period period22 = period1.withField(durationFieldType20, 19);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType26, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) 0, periodType26, chronology29);
        org.joda.time.PeriodType periodType31 = periodType26.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        mutablePeriod48.setMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTime dateTime53 = dateTime40.minusWeeks((int) (byte) 1);
        int int54 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property55 = dateTime40.minuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime40.withYear(1969);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DurationField durationField59 = durationFieldType32.getField(chronology58);
        int int60 = periodType31.indexOf(durationFieldType32);
        int int61 = period1.get(durationFieldType32);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        java.lang.String str8 = dateTimeField2.toString();
        long long11 = dateTimeField2.addWrapField((long) 292278993, 1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField2.getType();
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = dateTimeZone16.getShortName(100L, locale20);
        java.lang.String str23 = locale20.getDisplayLanguage();
        java.lang.String str24 = locale20.getDisplayName();
        java.lang.String str25 = locale20.getLanguage();
        java.util.Set<java.lang.String> strSet26 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale20.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTimeField2.getAsText(12, locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str8, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 292278993L + "'", long11 == 292278993L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanisch" + "'", str23, "Japanisch");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanisch" + "'", str24, "Japanisch");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja" + "'", str25, "ja");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration1 = minutes0.toStandardDuration();
        org.joda.time.Seconds seconds2 = minutes0.toStandardSeconds();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology6);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10, periodType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.Duration duration15 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period20 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period22 = period20.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationTo(readableInstant23);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = duration27.toPeriodFrom(readableInstant28);
        org.joda.time.Duration duration30 = duration18.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = duration15.plus((org.joda.time.ReadableDuration) duration18);
        mutablePeriod7.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int45 = mutablePeriod44.getDays();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod44.setPeriod((long) 'u', (long) 1969, chronology57);
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, chronology57);
        mutablePeriod7.setPeriod((long) 1, (long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.year();
        org.joda.time.DurationField durationField62 = chronology57.seconds();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.minuteOfDay();
        long long66 = dateTimeField63.addWrapField((long) (-11), (-27349920));
        java.lang.Object obj67 = null;
        org.joda.time.Instant instant68 = new org.joda.time.Instant(obj67);
        org.joda.time.DateTimeZone dateTimeZone69 = instant68.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone69);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getDisplayScript();
        java.lang.String str75 = dateTimeZone69.getShortName(100L, locale73);
        java.lang.String str76 = locale73.getScript();
        boolean boolean77 = locale73.hasExtensions();
        java.util.Set<java.lang.String> strSet78 = locale73.getUnicodeLocaleKeys();
        int int79 = dateTimeField63.getMaximumShortTextLength(locale73);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-11L) + "'", long66 == (-11L));
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        boolean boolean18 = interval7.contains((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(0L);
        java.lang.Object obj21 = null;
        org.joda.time.Instant instant22 = new org.joda.time.Instant(obj21);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = duration26.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = duration26.toPeriodTo(readableInstant30);
        org.joda.time.Duration duration33 = duration26.withMillis((long) (short) 0);
        org.joda.time.Duration duration36 = duration26.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        boolean boolean41 = dateTime39.isEqual(10L);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime39, periodType42);
        org.joda.time.DateTime dateTime45 = dateTime39.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime47 = dateTime39.withMinuteOfHour(0);
        int int48 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime39);
        int int49 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean50 = interval7.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.setHours(0);
        mutablePeriod5.setDays(6);
        mutablePeriod5.setValue(0, 11);
        mutablePeriod5.addMillis((int) (short) 0);
        mutablePeriod5.addYears(1970);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        boolean boolean13 = property3.equals((java.lang.Object) charSet12);
        org.joda.time.DateTimeField dateTimeField14 = property3.getField();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("\u7fa9\u5927\u5229\u6587");
        java.util.Locale locale18 = locale17.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property3.setCopy("", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) (short) -1);
        long long8 = dateTimeZone2.convertLocalToUTC((long) 12, false);
        long long11 = dateTimeZone2.adjustOffset((long) (byte) 0, true);
        java.lang.String str13 = dateTimeZone2.getNameKey(1645455285L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 12L + "'", long8 == 12L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        mutablePeriod11.setMonths((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalDate localDate15 = dateTime3.toLocalDate();
        int int16 = localDate15.size();
        java.lang.String str17 = localDate15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes18 = org.joda.time.Minutes.minutesBetween(readablePartial0, (org.joda.time.ReadablePartial) localDate15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-31" + "'", str17, "1969-12-31");
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        java.util.Locale locale18 = locale15.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter8.withLocale(locale18);
        org.joda.time.PeriodType periodType20 = periodFormatter19.getParseType();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long26 = dateTimeField23.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int int28 = dateTimeField23.getMinimumValue(readablePartial27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        int int30 = dateTimeField23.getMaximumTextLength(locale29);
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter19.withLocale(locale29);
        java.io.Writer writer32 = null;
        org.joda.time.Hours hours33 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours35 = hours33.multipliedBy(0);
        org.joda.time.Hours hours37 = hours33.dividedBy(69);
        org.joda.time.Hours hours38 = hours33.negated();
        org.joda.time.Hours hours40 = hours38.multipliedBy(0);
        org.joda.time.Hours hours41 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours42 = hours40.plus(hours41);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter19.printTo(writer32, (org.joda.time.ReadablePeriod) hours40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 43200000L + "'", long26 == 43200000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours41);
        org.junit.Assert.assertNotNull(hours42);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        int int7 = minutes1.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod8 = minutes1.toMutablePeriod();
        org.joda.time.Minutes minutes10 = minutes1.dividedBy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds11 = minutes1.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -2147483648 * 60");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2147483648) + "'", int7 == (-2147483648));
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(minutes10);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getEra();
        org.joda.time.Chronology chronology8 = dateTime2.getChronology();
        org.joda.time.DateTime.Property property9 = dateTime2.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = property14.getAsText(locale16);
        java.util.Locale locale21 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str22 = property14.getAsText(locale21);
        java.lang.String str23 = dateTime10.toString("zh", locale21);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertEquals(locale21.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:0011" + "'", str23, "+00:0011");
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = duration3.toPeriodTo(readableInstant7);
        org.joda.time.Duration duration10 = duration3.withMillis((long) (short) 0);
        org.joda.time.Duration duration13 = duration3.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        boolean boolean18 = dateTime16.isEqual(10L);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime16, periodType19);
        long long21 = dateTime16.getMillis();
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds23 = org.joda.time.Seconds.secondsBetween(readableInstant0, (org.joda.time.ReadableInstant) dateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadableInstant objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone8.previousTransition((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((-1), 19363, 28, 98, (-292276), (-100), dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        int int18 = days16.get(durationFieldType17);
        mutablePeriod15.add(durationFieldType17, 8);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutablePeriod15.add(readablePeriod21);
        int int23 = mutablePeriod15.getMonths();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        boolean boolean32 = interval27.contains((org.joda.time.ReadableInterval) interval31);
        mutablePeriod15.setPeriod((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.withZoneRetainFields(dateTimeZone39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        mutablePeriod51.setMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime43.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTime dateTime56 = dateTime43.minusWeeks((int) (byte) 1);
        int int57 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property58 = dateTime43.minuteOfHour();
        org.joda.time.DateTime dateTime60 = dateTime43.withYear(1969);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DurationField durationField62 = durationFieldType35.getField(chronology61);
        mutablePeriod15.add((-43199999L), chronology61);
        org.joda.time.DurationField durationField64 = chronology61.millis();
        org.joda.time.DurationField durationField65 = chronology61.months();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 69, chronology61);
        org.joda.time.DateTimeField dateTimeField67 = chronology61.minuteOfDay();
        org.joda.time.DurationField durationField68 = chronology61.months();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType8.getField(chronology61);
        org.joda.time.DurationField durationField71 = chronology61.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period72 = new org.joda.time.Period((java.lang.Object) periodType5, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withDayOfMonth(895);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 895 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.withFields(readablePartial4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.DateTime dateTime13 = interval12.getStart();
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        int int17 = dateTime14.get(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime7.withField(dateTimeFieldType15, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        java.lang.String str27 = minutes26.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = minutes26.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0M" + "'", str27, "PT0M");
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        boolean boolean7 = dateTimeField2.isLeap(10L);
        int int9 = dateTimeField2.get((-1L));
        long long11 = dateTimeField2.remainder((long) (byte) 0);
        java.lang.String str13 = dateTimeField2.getAsText((long) '4');
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        boolean boolean18 = dateTime16.isEqual(10L);
        org.joda.time.DateTime dateTime20 = dateTime16.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long26 = dateTimeField23.add(0L, (long) (short) 1);
        long long29 = dateTimeField23.add(1L, (-1));
        int int30 = dateTime16.get(dateTimeField23);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        long long47 = dateTime33.getMillis();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.withZoneRetainFields(dateTimeZone52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        mutablePeriod64.setMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime56.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.DateTime dateTime69 = dateTime56.minusWeeks((int) (byte) 1);
        int int70 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property71 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime73 = dateTime56.withYear(1969);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DurationField durationField75 = durationFieldType48.getField(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime33.toDateTime(chronology74);
        org.joda.time.DateTime dateTime77 = dateTime16.toDateTime(chronology74);
        org.joda.time.DateTimeField dateTimeField78 = chronology74.millisOfDay();
        org.joda.time.Chronology chronology79 = chronology74.withUTC();
        org.joda.time.Instant instant81 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime82 = instant81.toDateTime();
        org.joda.time.DateTime.Property property83 = dateTime82.era();
        org.joda.time.DateTime dateTime84 = dateTime82.withTimeAtStartOfDay();
        org.joda.time.Instant instant85 = dateTime82.toInstant();
        org.joda.time.DateMidnight dateMidnight86 = dateTime82.toDateMidnight();
        org.joda.time.DateTime dateTime89 = dateTime82.withDurationAdded(0L, (int) 'a');
        org.joda.time.DateTime dateTime91 = dateTime82.plusMinutes(365);
        org.joda.time.TimeOfDay timeOfDay92 = dateTime91.toTimeOfDay();
        long long94 = chronology79.set((org.joda.time.ReadablePartial) timeOfDay92, 420007L);
        java.util.Locale locale96 = java.util.Locale.CANADA;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) timeOfDay92, (-100), locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 120000L + "'", long11 == 120000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AM" + "'", str13, "AM");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 43200000L + "'", long26 == 43200000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-43199999L) + "'", long29 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(timeOfDay92);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 22019999L + "'", long94 == 22019999L);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "en_CA");
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        mutablePeriod5.addMillis(10);
        mutablePeriod5.setSeconds((int) (short) -1);
        int int16 = mutablePeriod5.getMinutes();
        mutablePeriod5.setPeriod(37868342400000L);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        int int27 = days25.get(durationFieldType26);
        mutablePeriod24.add(durationFieldType26, 8);
        int int30 = mutablePeriod24.getHours();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        boolean boolean39 = interval34.contains((org.joda.time.ReadableInterval) interval38);
        java.lang.String str40 = interval34.toString();
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval34);
        java.lang.String str42 = interval34.toString();
        long long43 = interval34.getEndMillis();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Period period45 = interval34.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks46 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P1Y");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str40, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str42, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1672531080000L + "'", long43 == 1672531080000L);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.DateTime dateTime21 = dateTime15.minusSeconds((int) 'a');
        int int22 = dateTime21.getMonthOfYear();
        int int23 = dateTime21.getCenturyOfEra();
        org.joda.time.DateTime dateTime25 = dateTime21.minusYears((-59));
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        boolean boolean30 = dateTime28.isEqual(10L);
        org.joda.time.DateTime dateTime32 = dateTime28.withWeekOfWeekyear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int34 = dateTime28.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime28.minusMonths((int) ' ');
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime39 = dateTime21.plusMonths(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int41 = dateTime39.get(dateTimeFieldType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra((-2147483648));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2147483648 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.PeriodType periodType6 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((-115706879999998030L), periodType7);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withMonthsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType13.getRangeDurationType();
        int int18 = periodType12.indexOf(durationFieldType17);
        int int19 = periodType7.indexOf(durationFieldType17);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder12.setExtension('a', "fr");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder12.setUnicodeLocaleKeyword("minutes", "DateTimeField[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: minutes [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("1969-12-31T23:59:59.999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T23:59:59.999\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        java.lang.String str13 = duration10.toString();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.DateTime.Property property31 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime29.plusHours((int) 'u');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withFields(readablePartial39);
        org.joda.time.DateTime dateTime42 = dateTime37.withYearOfEra(292278993);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        int int44 = dateTime34.getMonthOfYear();
        org.joda.time.DateTime dateTime45 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period47 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime34, periodType46);
        org.joda.time.PeriodType periodType48 = periodType46.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(2, (-8), 675, (-1398041029), 1969, 7, (-9859), 214, periodType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0.011S" + "'", str13, "PT0.011S");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-01-01t00:00:00.000z/2023-01-01t00:00:00.000z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        int int10 = dateTimeField2.get((long) 6);
        long long12 = dateTimeField2.roundCeiling((long) 8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = property15.getAsText(locale17);
        int int19 = property15.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter20 = null;
        org.joda.time.format.PeriodParser periodParser21 = null;
        org.joda.time.format.PeriodFormatter periodFormatter22 = new org.joda.time.format.PeriodFormatter(periodPrinter20, periodParser21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter22.withParseType(periodType23);
        java.util.Locale locale25 = periodFormatter22.getLocale();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter22.withLocale(locale26);
        java.util.Locale locale29 = locale26.stripExtensions();
        int int30 = property15.getMaximumShortTextLength(locale26);
        java.lang.String str31 = locale26.getVariant();
        java.lang.String str32 = locale26.getLanguage();
        int int33 = dateTimeField2.getMaximumShortTextLength(locale26);
        java.lang.String str34 = locale26.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43080000L + "'", long12 == 43080000L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "it" + "'", str32, "it");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it_IT" + "'", str34, "it_IT");
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long74 = chronology60.getDateTimeMillis((-11), 364, 97, (int) (short) -1, (int) (short) 0, 6, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getScript();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getDisplayVariant();
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale22, locale26, locale30, locale32 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Set<java.lang.String> strSet41 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strSet41, filteringMode42);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Set<java.lang.String> strSet51 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet51, filteringMode52);
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet51, filteringMode55);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strList56, filteringMode57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap59);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode42.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode52.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode55.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder3.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.removeUnicodeLocaleAttribute("HI!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: HI! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        boolean boolean12 = dateTime10.isEqual(10L);
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekOfWeekyear(8);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 0);
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period19 = period17.normalizedStandard();
        org.joda.time.DateTime dateTime21 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period19, (int) 'u');
        org.joda.time.DurationFieldType[] durationFieldTypeArray22 = period19.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = period19.getFieldType(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldTypeArray22);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology60);
        java.lang.String str65 = chronology60.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField67 = chronology60.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long72 = chronology60.getDateTimeMillis(893, 0, 59, 53669837);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[+00:02]" + "'", str65, "ISOChronology[+00:02]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((-59));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("IT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"IT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period8.plusMinutes(101);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period3.minusSeconds(292278993);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        mutablePeriod19.add(durationFieldType22, 8);
        boolean boolean25 = period3.isSupported(durationFieldType22);
        org.joda.time.Period period27 = period3.withSeconds(169);
        org.joda.time.Days days28 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.minutes();
        int int30 = days28.get(durationFieldType29);
        org.joda.time.MutablePeriod mutablePeriod31 = days28.toMutablePeriod();
        org.joda.time.Days days33 = days28.multipliedBy((int) (byte) 1);
        int int34 = days33.size();
        org.joda.time.Days days36 = days33.minus(0);
        org.joda.time.Days days38 = org.joda.time.Days.days(0);
        org.joda.time.Days days40 = days38.dividedBy((int) (short) 10);
        org.joda.time.Days days41 = days33.minus(days38);
        org.joda.time.Period period42 = period3.withFields((org.joda.time.ReadablePeriod) days41);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(69, (int) (byte) 0, 8, (-155), 893, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -155 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks2 = weeks0.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks4 = weeks0.dividedBy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks6 = weeks0.multipliedBy((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * -10");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int10 = mutablePeriod9.getDays();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        boolean boolean21 = interval16.contains((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Chronology chronology22 = interval20.getChronology();
        mutablePeriod9.setPeriod((long) 'u', (long) 1969, chronology22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 100, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.months();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("weekyear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset((long) 365);
        java.lang.String str11 = dateTimeZone7.getName((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(24, (int) (byte) 0, 3, 0, 28, 97, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120000 + "'", int9 == 120000);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:02" + "'", str11, "+00:02");
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.weekOfWeekyear();
        boolean boolean9 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime11 = dateTime6.withMillisOfDay(0);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 6, (-3676492805054399977L), periodType14);
        org.joda.time.DateTime dateTime16 = dateTime6.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime.Property property17 = dateTime6.era();
        org.joda.time.TimeOfDay timeOfDay18 = dateTime6.toTimeOfDay();
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay18, readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.joda.time.Days days1 = org.joda.time.Days.days(1969);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setVariant("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: minuteOfHour [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        mutablePeriod8.setWeeks((int) '4');
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) days11);
        mutablePeriod8.setPeriod(128770560000000000L, 1640995200000L);
        mutablePeriod8.setYears(0);
        int int18 = mutablePeriod8.getYears();
        mutablePeriod8.addYears((-11));
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.millisOfDay();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime67 = instant66.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.withZoneRetainFields(dateTimeZone68);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime72 = instant71.toDateTime();
        org.joda.time.DateTime.Property property73 = dateTime72.era();
        org.joda.time.DateTime dateTime74 = dateTime72.withTimeAtStartOfDay();
        org.joda.time.Duration duration77 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration77, readableInstant78, periodType79);
        mutablePeriod80.setMonths((int) '4');
        org.joda.time.DateTime dateTime83 = dateTime72.plus((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTime dateTime85 = dateTime72.minusWeeks((int) (byte) 1);
        int int86 = dateTime69.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime.Property property87 = dateTime72.minuteOfHour();
        org.joda.time.DateTime dateTime89 = dateTime72.withYear(1969);
        boolean boolean91 = dateTime89.isAfter((long) (short) -1);
        int int92 = dateTime89.getWeekyear();
        org.joda.time.DateTime dateTime93 = dateTime89.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone94 = dateTime93.getZone();
        org.joda.time.Chronology chronology95 = chronology60.withZone(dateTimeZone94);
        org.joda.time.DateTimeField dateTimeField96 = chronology95.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) chronology95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1969 + "'", int92 == 1969);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.Seconds seconds16 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType17 = seconds16.getFieldType();
        org.joda.time.PeriodType periodType18 = seconds16.getPeriodType();
        org.joda.time.Seconds seconds19 = seconds14.plus(seconds16);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (short) 10, periodType21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.DateTime dateTime26 = instant25.toDateTimeISO();
        org.joda.time.Duration duration27 = period22.toDurationFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = period22.plusMonths(1969);
        org.joda.time.Period period31 = period29.withMinutes(2);
        boolean boolean32 = seconds19.equals((java.lang.Object) period31);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = period31.getValue((-1398041029));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1398041029");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period11.minusHours(7);
        org.joda.time.Period period15 = period13.withMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes16 = period15.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        java.util.Locale locale1 = new java.util.Locale("+00:00");
        java.lang.String str2 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P6D");
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        int int6 = property2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter7 = null;
        org.joda.time.format.PeriodParser periodParser8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter9.withParseType(periodType10);
        java.util.Locale locale12 = periodFormatter9.getLocale();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter9.withLocale(locale13);
        java.util.Locale locale16 = locale13.stripExtensions();
        int int17 = property2.getMaximumShortTextLength(locale13);
        org.joda.time.DateTime dateTime18 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis((int) (byte) 10);
        int int21 = dateTime18.getYearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        int int6 = dateTimeZone2.getOffsetFromLocal((long) '4');
        java.lang.Object obj7 = null;
        org.joda.time.Instant instant8 = new org.joda.time.Instant(obj7);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        java.lang.String str10 = dateTimeZone9.toString();
        java.lang.String str12 = dateTimeZone9.getName((long) 10);
        long long15 = dateTimeZone9.convertLocalToUTC((long) (byte) -1, true);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone9, (long) 1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1970L + "'", long17 == 1970L);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1970);
        org.joda.time.Period period3 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period5 = period3.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationTo(readableInstant6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration10.isEqual(readableDuration12);
        org.joda.time.Duration duration15 = duration10.minus((long) 1);
        org.joda.time.Duration duration17 = duration15.minus((long) '4');
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime20, periodType44);
        boolean boolean46 = duration7.isEqual((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTime dateTime47 = dateTime1.minus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime50 = dateTime47.withDurationAdded((long) 23, 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = property54.withMinimumValue();
        int int56 = property54.getMaximumValueOverall();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale57.getDisplayCountry();
        int int60 = property54.getMaximumShortTextLength(locale57);
        org.joda.time.DateTime dateTime61 = property54.withMaximumValue();
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime61.getZone();
        int int65 = dateTimeZone63.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime47.toDateTime(dateTimeZone63);
        java.util.Locale locale72 = new java.util.Locale("Years", "japonais", "Chinese (China)");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dateTime67.toString("java.io.IOException: Chinese (China)", locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 120000 + "'", int65 == 120000);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals(locale72.toString(), "years_JAPONAIS_Chinese (China)");
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.Period period10 = period7.plusMonths((int) (short) 100);
        int int11 = period7.getHours();
        int int12 = period7.getMillis();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        int int9 = dateTime7.getWeekyear();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTime7.toString("P169Y69M1W10DT3H19M11.013S", locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        int int2 = period1.getYears();
        org.joda.time.Period period4 = period1.withMinutes(23);
        org.joda.time.Period period6 = period4.withWeeks((-23));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration7 = new org.joda.time.Duration((java.lang.Object) period4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long74 = chronology62.getDateTimeMillis((int) (short) 100, (int) (short) 10, 895, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 895 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.addMonths((int) (byte) 0);
        mutablePeriod5.addYears((-100));
        mutablePeriod5.addYears(1439);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField27.getAsText(70, locale29);
        long long33 = dateTimeField27.getDifferenceAsLong(248399899L, 0L);
        org.joda.time.DurationField durationField34 = dateTimeField27.getLeapDurationField();
        java.lang.Object obj35 = null;
        org.joda.time.Instant instant36 = new org.joda.time.Instant(obj35);
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        java.lang.String str38 = dateTimeZone37.toString();
        int int40 = dateTimeZone37.getOffset(1L);
        boolean boolean42 = dateTimeZone37.isStandardOffset(0L);
        java.lang.String str44 = dateTimeZone37.getNameKey((long) 1);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone37);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset((long) 365);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.withZone(dateTimeZone53);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        org.joda.time.DateTime.Property property58 = dateTime57.era();
        org.joda.time.DateTime dateTime59 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean61 = dateTime57.isSupported(dateTimeFieldType60);
        org.joda.time.DateTime.Property property62 = dateTime52.property(dateTimeFieldType60);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime52.getZone();
        org.joda.time.LocalDateTime localDateTime64 = dateTime52.toLocalDateTime();
        boolean boolean65 = dateTimeZone47.isLocalDateTimeGap(localDateTime64);
        boolean boolean66 = dateTimeZone37.isLocalDateTimeGap(localDateTime64);
        int int67 = localDateTime64.size();
        java.lang.String str68 = localDateTime64.toString();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType74, chronology75);
        org.joda.time.PeriodType periodType77 = periodType74.withWeeksRemoved();
        org.joda.time.Period period78 = new org.joda.time.Period(readableInstant70, readableInstant71, periodType77);
        int[] intArray79 = period78.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = dateTimeField27.addWrapField((org.joda.time.ReadablePartial) localDateTime64, 1439, intArray79, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1439");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 248399899L + "'", long33 == 248399899L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120000 + "'", int49 == 120000);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:01:59.999" + "'", str68, "1970-01-01T00:01:59.999");
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0]");
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long14 = dateTimeField9.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant22 = instant20.minus(100L);
        org.joda.time.Instant instant24 = instant22.plus((long) 100);
        org.joda.time.Instant instant26 = instant22.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.LocalTime localTime28 = dateTime17.toLocalTime();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.Period period38 = mutablePeriod35.toPeriod();
        int[] intArray39 = period38.getValues();
        int[] intArray41 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime28, 0, intArray39, 3);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        long long48 = dateTimeField45.add(0L, (long) (short) 1);
        long long50 = dateTimeField45.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant58 = instant56.minus(100L);
        org.joda.time.Instant instant60 = instant58.plus((long) 100);
        org.joda.time.Instant instant62 = instant58.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes63 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) instant58);
        org.joda.time.LocalTime localTime64 = dateTime53.toLocalTime();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69, periodType70);
        mutablePeriod71.setMonths((int) '4');
        org.joda.time.Period period74 = mutablePeriod71.toPeriod();
        int[] intArray75 = period74.getValues();
        int[] intArray77 = dateTimeField45.addWrapField((org.joda.time.ReadablePartial) localTime64, 0, intArray75, 3);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) localTime64);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime81 = instant80.toDateTime();
        org.joda.time.DateTime.Property property82 = dateTime81.era();
        org.joda.time.DateTime dateTime83 = dateTime81.withTimeAtStartOfDay();
        org.joda.time.Instant instant84 = dateTime81.toInstant();
        org.joda.time.TimeOfDay timeOfDay85 = dateTime81.toTimeOfDay();
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.days();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay6, (org.joda.time.ReadablePartial) timeOfDay85, periodType86);
        int int88 = timeOfDay6.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = timeOfDay6.getFieldType(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField92 = timeOfDay6.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-120000L) + "'", long14 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 43200000L + "'", long48 == 43200000L);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-120000L) + "'", long50 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.joda.time.Period period1 = org.joda.time.Period.months(9);
        org.joda.time.Period period3 = period1.minusMinutes(86399);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("Standard");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Standard\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsIn(readableInterval16);
        org.joda.time.Seconds seconds19 = seconds17.plus((int) (byte) -1);
        org.joda.time.Seconds seconds20 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds21 = seconds19.plus(seconds20);
        org.joda.time.Duration duration22 = seconds19.toStandardDuration();
        boolean boolean23 = seconds14.isGreaterThan(seconds19);
        org.joda.time.PeriodType periodType24 = seconds19.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType25 = seconds19.getFieldType();
        org.joda.time.Period period26 = seconds19.toPeriod();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField2.getType();
        long long13 = dateTimeField2.remainder(432000000L);
        int int14 = dateTimeField2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter15 = null;
        org.joda.time.format.PeriodParser periodParser16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = new org.joda.time.format.PeriodFormatter(periodPrinter15, periodParser16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter17.withParseType(periodType18);
        java.util.Locale locale20 = periodFormatter17.getLocale();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter17.withLocale(locale21);
        org.joda.time.format.PeriodPrinter periodPrinter24 = null;
        org.joda.time.format.PeriodParser periodParser25 = null;
        org.joda.time.format.PeriodFormatter periodFormatter26 = new org.joda.time.format.PeriodFormatter(periodPrinter24, periodParser25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withParseType(periodType27);
        java.util.Locale locale29 = periodFormatter26.getLocale();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter26.withLocale(locale30);
        java.util.Locale locale33 = locale30.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter23.withLocale(locale33);
        int int35 = dateTimeField2.getMaximumShortTextLength(locale33);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.lang.String str40 = dateTimeField2.getAsShortText((long) 11, locale37);
        org.joda.time.ReadablePartial readablePartial41 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        long long47 = dateTimeField44.add(0L, (long) (short) 1);
        boolean boolean49 = dateTimeField44.isLeap(10L);
        int int50 = dateTimeField44.getMinimumValue();
        long long52 = dateTimeField44.roundHalfEven((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Duration duration57 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, readableInstant58, periodType59);
        mutablePeriod60.setMonths((int) '4');
        org.joda.time.Period period63 = mutablePeriod60.toPeriod();
        int[] intArray64 = period63.getValues();
        int[] intArray66 = dateTimeField44.addWrapPartial(readablePartial53, 10, intArray64, 0);
        int int67 = dateTimeField2.getMaximumValue(readablePartial41, intArray66);
        long long69 = dateTimeField2.roundHalfCeiling(540086400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 120000L + "'", long13 == 120000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "China" + "'", str39, "China");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e0a\u5348" + "'", str40, "\u4e0a\u5348");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 43200000L + "'", long47 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-120000L) + "'", long52 == (-120000L));
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 540086280000L + "'", long69 == 540086280000L);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.get((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        long long10 = dateTimeField7.add(0L, (long) (short) 1);
        long long12 = dateTimeField7.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.Instant instant22 = instant20.plus((long) 100);
        org.joda.time.Instant instant24 = instant20.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.LocalTime localTime26 = dateTime15.toLocalTime();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.Period period36 = mutablePeriod33.toPeriod();
        int[] intArray37 = period36.getValues();
        int[] intArray39 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localTime26, 0, intArray37, 3);
        int int40 = localTime26.size();
        int int41 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, readableInstant50, periodType51);
        mutablePeriod52.setMonths((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime44.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.LocalDate localDate56 = dateTime44.toLocalDate();
        int int57 = localDate56.size();
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.era();
        org.joda.time.DateTime dateTime62 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration65, readableInstant66, periodType67);
        mutablePeriod68.setMonths((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime60.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.LocalDate localDate72 = dateTime60.toLocalDate();
        int int73 = localDate56.compareTo((org.joda.time.ReadablePartial) localDate72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks74 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) localDate72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 43200000L + "'", long10 == 43200000L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-120000L) + "'", long12 == (-120000L));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone2.getShortName(100L, locale6);
        java.lang.String str9 = locale6.getScript();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.String str12 = locale6.getDisplayVariant(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale6.getUnicodeLocaleType("anglais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: anglais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(120, (-1398041029));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1398041029");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("weekyearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyearOfCentury\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder12.setExtension('a', "fr");
        java.util.Locale.Builder builder19 = builder12.setExtension('a', "year");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder12.setLanguage("millisOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: millisOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Dezember", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) 10);
        java.lang.String str7 = dateTimeZone2.getName((long) 8);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 59, true, 141022L);
        int int13 = dateTimeZone2.getOffset(475286399L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 59L + "'", long11 == 59L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("ja-JP");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ja-JP\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZone(dateTimeZone9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean17 = dateTime13.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime.Property property18 = dateTime8.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime8.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.lang.String str22 = dateTimeZone19.getNameKey(3L);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 45, dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((-23), 53669837, 675, 98, (int) (short) 0, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:02");
// flaky:         org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 7, (-3676492805054399977L));
        mutablePeriod2.addYears(292278993);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.Period period9 = period3.plusWeeks(10);
        org.joda.time.Period period11 = period3.withMonths((int) (short) 10);
        org.joda.time.Period period13 = period11.plusMillis(1);
        org.joda.time.Period period15 = period13.minusDays(97);
        int int16 = period15.getHours();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime.Property property16 = dateTime15.weekOfWeekyear();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        org.joda.time.DateTime dateTime23 = dateTime15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime25 = dateTime15.withYearOfEra(9);
        org.joda.time.Weeks weeks26 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = weeks26.getValue(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(weeks26);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("2022-02-21T14:54:50.337Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:54:50.337Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType4, chronology5);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int16 = mutablePeriod15.getDays();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        boolean boolean27 = interval22.contains((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Chronology chronology28 = interval26.getChronology();
        mutablePeriod15.setPeriod((long) 'u', (long) 1969, chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.yearOfCentury();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration36 = null;
        boolean boolean37 = duration34.isEqual(readableDuration36);
        org.joda.time.Duration duration39 = duration34.minus((long) 1);
        org.joda.time.Duration duration41 = duration39.minus((long) '4');
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = duration51.plus((long) (byte) 0);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        boolean boolean59 = dateTime57.isEqual(10L);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType62, chronology63);
        org.joda.time.PeriodType periodType65 = periodType62.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime57, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration48, periodType65);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime44, periodType68);
        org.joda.time.TimeOfDay timeOfDay70 = dateTime44.toTimeOfDay();
        int[] intArray72 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay70, (long) (-1));
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, (long) 59, periodType4, chronology28);
        org.joda.time.DateTimeField dateTimeField74 = chronology28.era();
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeField74.set(27882730L, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        int int6 = property2.getMaximumValue();
        java.lang.String str7 = property2.getAsString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        mutablePeriod8.setWeeks((int) '4');
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) days11);
        mutablePeriod8.setPeriod(128770560000000000L, 1640995200000L);
        mutablePeriod8.setYears(0);
        int int18 = mutablePeriod8.getYears();
        mutablePeriod8.setSeconds((int) (short) 10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        org.joda.time.Seconds seconds3 = org.joda.time.Seconds.standardSecondsIn((org.joda.time.ReadablePeriod) mutablePeriod2);
        java.lang.Class<?> wildcardClass4 = seconds3.getClass();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.joda.time.Days days0 = org.joda.time.Days.TWO;
        org.joda.time.Period period1 = days0.toPeriod();
        org.joda.time.Hours hours2 = days0.toStandardHours();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Duration duration11 = interval3.toDuration();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Days days13 = weeks12.toStandardDays();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str9, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531080000L + "'", long10 == 1672531080000L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(days13);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet7 = locale4.getExtensionKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        int int12 = dateTimeField10.get((long) 'a');
        org.joda.time.DurationField durationField13 = dateTimeField10.getRangeDurationField();
        long long16 = durationField13.getMillis(2, 454L);
        long long18 = durationField13.getValueAsLong(38716L);
        boolean boolean19 = durationField13.isSupported();
        boolean boolean20 = locale4.equals((java.lang.Object) boolean19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 172800000L + "'", long16 == 172800000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        int int10 = dateTimeField2.get((long) 6);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        org.joda.time.Instant instant17 = instant15.plus((long) 100);
        org.joda.time.Instant instant19 = instant15.withMillis((long) (byte) 1);
        org.joda.time.Period period21 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period23 = period21.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = period23.toDurationTo(readableInstant24);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant30.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime33 = instant30.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period35 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime33, periodType34);
        org.joda.time.Instant instant36 = instant19.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Instant instant42 = dateTime39.toInstant();
        org.joda.time.DateMidnight dateMidnight43 = dateTime39.toDateMidnight();
        int int44 = dateTime39.getHourOfDay();
        org.joda.time.Days days45 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property46 = dateTime39.centuryOfEra();
        java.util.Locale locale47 = java.util.Locale.US;
        java.util.Locale locale48 = java.util.Locale.US;
        java.lang.String str49 = locale47.getDisplayScript(locale48);
        int int50 = property46.getMaximumTextLength(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeField2.getAsText((-365), locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -365");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateMidnight43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) (-26136120000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-2.613612E10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        java.lang.String str24 = dateTimeField23.toString();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str24, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("China");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"China\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        mutablePeriod5.setYears((int) (short) -1);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = duration13.toPeriodTo(readableInstant17);
        org.joda.time.Days days19 = duration13.toStandardDays();
        boolean boolean20 = mutablePeriod5.equals((java.lang.Object) days19);
        org.joda.time.Days days21 = org.joda.time.Days.FIVE;
        boolean boolean22 = days19.isLessThan(days21);
        org.joda.time.PeriodType periodType23 = days19.getPeriodType();
        org.joda.time.Days days25 = org.joda.time.Days.days(0);
        org.joda.time.Days days27 = days25.dividedBy((int) (short) 10);
        org.joda.time.Days days28 = days19.plus(days25);
        org.joda.time.MutablePeriod mutablePeriod29 = days25.toMutablePeriod();
        org.joda.time.Days days31 = days25.dividedBy((-292275054));
        int int32 = days25.getDays();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GB" + "'", str2, "GB");
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType9, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) 0, periodType9, chronology12);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (short) 10, periodType15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.Duration duration21 = period16.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period26 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period28 = period26.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationTo(readableInstant29);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration33.toPeriodFrom(readableInstant34);
        org.joda.time.Duration duration36 = duration24.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration37 = duration21.plus((org.joda.time.ReadableDuration) duration24);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int51 = mutablePeriod50.getDays();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        boolean boolean62 = interval57.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        mutablePeriod50.setPeriod((long) 'u', (long) 1969, chronology63);
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 100, chronology63);
        mutablePeriod13.setPeriod((long) 1, (long) 69, chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.year();
        org.joda.time.DurationField durationField68 = chronology63.seconds();
        java.lang.Object obj69 = null;
        org.joda.time.Instant instant70 = new org.joda.time.Instant(obj69);
        org.joda.time.DateTimeZone dateTimeZone71 = instant70.getZone();
        java.lang.String str72 = dateTimeZone71.toString();
        int int74 = dateTimeZone71.getOffset(1L);
        boolean boolean76 = dateTimeZone71.isStandardOffset(0L);
        java.lang.String str78 = dateTimeZone71.getNameKey((long) 1);
        long long82 = dateTimeZone71.convertLocalToUTC(1512000000L, true, (long) (byte) 10);
        java.lang.String str84 = dateTimeZone71.getName((long) (-2147483648));
        org.joda.time.Chronology chronology85 = chronology63.withZone(dateTimeZone71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(5, (-8), 13, (-23), 1, (-1), dateTimeZone71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1512000000L + "'", long82 == 1512000000L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) 10);
        java.lang.String str7 = dateTimeZone2.getName((long) 8);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        org.joda.time.format.PeriodPrinter periodPrinter18 = null;
        org.joda.time.format.PeriodParser periodParser19 = null;
        org.joda.time.format.PeriodFormatter periodFormatter20 = new org.joda.time.format.PeriodFormatter(periodPrinter18, periodParser19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter20.withParseType(periodType21);
        java.util.Locale locale23 = periodFormatter20.getLocale();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter26 = periodFormatter20.withLocale(locale24);
        java.util.Locale locale27 = locale24.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter17.withLocale(locale27);
        java.util.Locale locale29 = locale27.stripExtensions();
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        java.lang.String str31 = dateTimeZone2.getName((-625L), locale27);
        java.lang.Object obj32 = locale27.clone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "it_IT");
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        mutablePeriod21.setMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime26 = dateTime13.minusWeeks((int) (byte) 1);
        int int27 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property28 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime13.withYear(1969);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-1), 58, (-155), (int) (short) 0, 1, 9, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        boolean boolean9 = interval4.contains((org.joda.time.ReadableInterval) interval8);
        java.lang.Object obj10 = null;
        org.joda.time.Instant instant11 = new org.joda.time.Instant(obj10);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone12);
        boolean boolean15 = interval4.contains((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        boolean boolean20 = interval4.contains((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval21 = interval4.toMutableInterval();
        org.joda.time.Chronology chronology22 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-21T14:52:58.825Z", chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:52:58.825Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale0.getDisplayCountry(locale4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = property9.getAsText(locale11);
        int int13 = property9.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter14 = null;
        org.joda.time.format.PeriodParser periodParser15 = null;
        org.joda.time.format.PeriodFormatter periodFormatter16 = new org.joda.time.format.PeriodFormatter(periodPrinter14, periodParser15);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter16.withParseType(periodType17);
        java.util.Locale locale19 = periodFormatter16.getLocale();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = locale20.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter16.withLocale(locale20);
        java.util.Locale locale23 = locale20.stripExtensions();
        int int24 = property9.getMaximumShortTextLength(locale20);
        java.lang.String str25 = locale0.getDisplayScript(locale20);
        java.lang.Object obj26 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "China" + "'", str6, "China");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "zh_CN");
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap11);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("YearDay");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getScript();
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale18 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getDisplayVariant();
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale24, locale28, locale32, locale34 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Set<java.lang.String> strSet43 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet43, filteringMode44);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getScript();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale50 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale56 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.parse("YearDay");
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getScript();
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale62 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale76 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet77 = locale76.getExtensionKeys();
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.lang.String str79 = locale78.getDisplayVariant();
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale68, locale72, locale76, locale78 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale locale83 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.Set<java.lang.String> strSet87 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, (java.util.Collection<java.lang.String>) strSet87, filteringMode88);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strList89);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList58, (java.util.Collection<java.lang.String>) strList90, filteringMode91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList53, filteringMode91);
        java.util.Locale locale94 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale76.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNull(locale94);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration10 = duration2.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = duration10.toPeriod(periodType16, chronology17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        boolean boolean29 = dateTime27.isEqual(10L);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType32, chronology33);
        org.joda.time.PeriodType periodType35 = periodType32.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27, periodType35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Instant instant42 = dateTime39.toInstant();
        org.joda.time.DateTime dateTime44 = dateTime39.withMillis((long) '4');
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime39);
        int int46 = dateTime39.getYear();
        org.joda.time.DateTime.Property property47 = dateTime39.dayOfWeek();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime39, periodType48);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType53, chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) (short) 0, periodType53, chronology56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.minutes();
        int int59 = periodType53.indexOf(durationFieldType58);
        mutablePeriod49.set(durationFieldType58, (-10));
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod49.addWeeks(78719999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(minutes45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = property2.getAsText(locale4);
        java.lang.String str6 = locale4.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale4.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((-120));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        mutablePeriod5.addYears(2);
        mutablePeriod5.setPeriod(720070L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setHours((int) (byte) 100);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.minutes();
        int int10 = days8.get(durationFieldType9);
        mutablePeriod5.set(durationFieldType9, (int) 'x');
        mutablePeriod5.setMillis(2);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) 1969);
        org.joda.time.Chronology chronology17 = null;
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration16, chronology17);
        int int19 = mutablePeriod5.getMillis();
        mutablePeriod5.setYears(8);
        mutablePeriod5.setYears((int) 'a');
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale20, locale24, locale28, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet39, filteringMode40);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList41);
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList10, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Set<java.lang.String> strSet50 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet50, filteringMode51);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap54);
        java.lang.Object obj56 = null;
        org.joda.time.Instant instant57 = new org.joda.time.Instant(obj56);
        org.joda.time.DateTimeZone dateTimeZone58 = instant57.getZone();
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone58);
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getDisplayScript();
        java.lang.String str64 = dateTimeZone58.getShortName(100L, locale62);
        java.lang.String str65 = locale62.getDisplayLanguage();
        java.lang.String str66 = locale62.getDisplayScript();
        java.util.Set<java.lang.String> strSet67 = locale62.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags(languageRangeList55, (java.util.Collection<java.lang.String>) strSet67);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strList68);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "giapponese" + "'", str65, "giapponese");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.Period period20 = mutablePeriod17.toPeriod();
        mutablePeriod17.setYears((int) (short) -1);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = duration25.toPeriodTo(readableInstant29);
        org.joda.time.Days days31 = duration25.toStandardDays();
        boolean boolean32 = mutablePeriod17.equals((java.lang.Object) days31);
        org.joda.time.Days days33 = org.joda.time.Days.FIVE;
        boolean boolean34 = days31.isLessThan(days33);
        org.joda.time.PeriodType periodType35 = days31.getPeriodType();
        org.joda.time.Days days37 = org.joda.time.Days.days(0);
        org.joda.time.Days days39 = days37.dividedBy((int) (short) 10);
        org.joda.time.Days days40 = days31.plus(days37);
        int[] intArray43 = chronology9.get((org.joda.time.ReadablePeriod) days31, (long) (-2147483648), 43199999L);
        org.joda.time.DurationField durationField44 = chronology9.millis();
        long long46 = durationField44.getMillis((long) 'u');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[25]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 117L + "'", long46 == 117L);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Duration duration11 = interval3.toDuration();
        org.joda.time.DateTime dateTime12 = interval3.getStart();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str9, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531080000L + "'", long10 == 1672531080000L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-21T14:52:37.985Z");
        int int7 = property4.getMaximumShortTextLength(locale6);
        int int8 = property4.getLeapAmount();
        org.joda.time.DateTime dateTime9 = property4.withMaximumValue();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration12.isEqual(readableDuration14);
        org.joda.time.Duration duration17 = duration12.minus((long) 1);
        org.joda.time.Duration duration19 = duration17.minus((long) '4');
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.plus((long) (byte) 0);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        boolean boolean37 = dateTime35.isEqual(10L);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType40, chronology41);
        org.joda.time.PeriodType periodType43 = periodType40.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35, periodType43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration26, periodType43);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime22, periodType46);
        org.joda.time.TimeOfDay timeOfDay48 = dateTime22.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = timeOfDay48.toDateTime(readableInstant49);
        int int51 = timeOfDay48.size();
        org.joda.time.Chronology chronology52 = timeOfDay48.getChronology();
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant56 = instant54.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime57 = instant54.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int59 = mutableDateTime57.get(dateTimeFieldType58);
        int int60 = mutableDateTime57.getYearOfEra();
        int int61 = mutableDateTime57.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime62 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int int64 = property4.compareTo((org.joda.time.ReadablePartial) timeOfDay63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = property4.setCopy(53669837);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53669837 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 70 + "'", int59 == 70);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        long long10 = instant5.getMillis();
        org.joda.time.DateTime dateTime11 = instant5.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int13 = instant5.get(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) '#');
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        mutablePeriod2.addDays(214);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("japonais");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"japonais\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        int int11 = dateTimeZone8.getOffset(1L);
        boolean boolean13 = dateTimeZone8.isStandardOffset(0L);
        java.lang.String str15 = dateTimeZone8.getNameKey((long) 1);
        java.lang.String str17 = dateTimeZone8.getNameKey((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(45, 4, 292278993, 0, 3, 10, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(53, (int) (byte) 10, 45, 0, (int) (short) 1, 2022, 2922789, 11);
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("HI! (hi!)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: HI! (hi!) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        java.lang.Object obj5 = null;
        org.joda.time.Instant instant6 = new org.joda.time.Instant(obj5);
        boolean boolean7 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.plus((long) (byte) 0);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        boolean boolean20 = dateTime18.isEqual(10L);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType23, chronology24);
        org.joda.time.PeriodType periodType26 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18, periodType26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Instant instant33 = dateTime30.toInstant();
        org.joda.time.DateTime dateTime35 = dateTime30.withMillis((long) '4');
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime30);
        int int37 = dateTime30.getYear();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = duration40.toPeriodTo(readableInstant44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant49 = instant47.minus(100L);
        java.lang.String str50 = instant49.toString();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = duration53.toPeriodTo(readableInstant57);
        org.joda.time.Duration duration61 = duration53.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType64, chronology65);
        org.joda.time.PeriodType periodType67 = periodType64.withWeeksRemoved();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = duration61.toPeriod(periodType67, chronology68);
        org.joda.time.Period period70 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) instant49, periodType67);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime30, periodType67);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType74 = period72.getFieldType(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1969 + "'", int37 == 1969);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str50, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException("days", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.lang.String str6 = iOException5.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.io.IOException: java.io.IOException: days" + "'", str6, "java.io.IOException: java.io.IOException: days");
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period1.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.minusWeeks(2);
        org.joda.time.Period period10 = period8.withHours(1969);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = period16.getFieldTypes();
        org.joda.time.Period period19 = period16.minusYears((int) (byte) 1);
        org.joda.time.Period period21 = period16.plusMonths((int) (byte) 0);
        org.joda.time.Period period23 = period16.withMillis((int) '#');
        org.joda.time.Period period25 = period23.minusMinutes((int) 'u');
        org.joda.time.Period period27 = period25.withMillis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period30 = period27.withFieldAdded(durationFieldType28, (int) (short) 10);
        int int31 = periodType12.indexOf(durationFieldType28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = period10.withPeriodType(periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration27.isEqual(readableDuration29);
        org.joda.time.Duration duration32 = duration27.minus((long) 1);
        org.joda.time.Duration duration34 = duration32.minus((long) '4');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime37, periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime37.toTimeOfDay();
        int[] intArray65 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay63, (long) (-1));
        org.joda.time.DateTimeField dateTimeField66 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology21.millisOfDay();
        org.joda.time.Duration duration70 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, readableInstant71, periodType72);
        mutablePeriod73.setMonths((int) '4');
        org.joda.time.Period period77 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period79 = period77.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period82 = period77.withFieldAdded(durationFieldType80, (int) (short) 100);
        mutablePeriod73.set(durationFieldType80, (int) '4');
        int[] intArray86 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod73, (long) 1970);
        org.joda.time.DateTimeField dateTimeField87 = chronology21.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 1, 970]");
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        int int18 = property16.getMaximumValueOverall();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale19.getDisplayCountry();
        int int22 = property16.getMaximumShortTextLength(locale19);
        org.joda.time.DateTime dateTime23 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        long long26 = chronology9.set((org.joda.time.ReadablePartial) localTime24, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField28 = localTime24.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = localTime24.getFieldType((-292276));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -292276");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86399999L + "'", long26 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(24, 59, 120000, 30, 53786950, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = hours0.multipliedBy(0);
        org.joda.time.Hours hours4 = hours0.dividedBy(69);
        org.joda.time.Hours hours5 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours7 = hours5.multipliedBy(0);
        org.joda.time.Hours hours9 = hours5.dividedBy(69);
        org.joda.time.Hours hours10 = hours0.plus(hours9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        boolean boolean15 = dateTime13.isEqual(10L);
        org.joda.time.DateTime dateTime17 = dateTime13.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        long long23 = dateTimeField20.add(0L, (long) (short) 1);
        long long26 = dateTimeField20.add(1L, (-1));
        int int27 = dateTime13.get(dateTimeField20);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        mutablePeriod38.setMonths((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime30.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime43 = dateTime30.minusWeeks((int) (byte) 1);
        long long44 = dateTime30.getMillis();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime48 = instant47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.withZoneRetainFields(dateTimeZone49);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, readableInstant59, periodType60);
        mutablePeriod61.setMonths((int) '4');
        org.joda.time.DateTime dateTime64 = dateTime53.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTime dateTime66 = dateTime53.minusWeeks((int) (byte) 1);
        int int67 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property68 = dateTime53.minuteOfHour();
        org.joda.time.DateTime dateTime70 = dateTime53.withYear(1969);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DurationField durationField72 = durationFieldType45.getField(chronology71);
        org.joda.time.DateTime dateTime73 = dateTime30.toDateTime(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime13.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField75 = chronology71.yearOfCentury();
        java.lang.Class<?> wildcardClass76 = chronology71.getClass();
        boolean boolean77 = hours10.equals((java.lang.Object) wildcardClass76);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 43200000L + "'", long23 == 43200000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-43199999L) + "'", long26 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType4, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType4, chronology7);
        mutablePeriod8.setPeriod(2678400000L);
        mutablePeriod8.setDays((-9859));
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-2147483648));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        int int24 = dateTimeField23.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 99 + "'", int24 == 99);
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(894);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) dateTime2);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.withZoneRetainFields(dateTimeZone8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        int int26 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property27 = dateTime12.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        boolean boolean37 = interval32.contains((org.joda.time.ReadableInterval) interval36);
        mutablePeriod28.setPeriod((org.joda.time.ReadableInterval) interval32);
        mutablePeriod28.addWeeks(30);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeField dateTimeField48 = timeOfDay38.getField(2);
        org.joda.time.ReadablePartial readablePartial49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes50 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay38, readablePartial49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration15 = null;
        boolean boolean16 = duration13.isEqual(readableDuration15);
        org.joda.time.Duration duration18 = duration13.minus((long) 1);
        org.joda.time.Duration duration20 = duration18.minus((long) '4');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        boolean boolean38 = dateTime36.isEqual(10L);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType41, chronology42);
        org.joda.time.PeriodType periodType44 = periodType41.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27, periodType44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime23, periodType47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) instant9, periodType47);
        org.joda.time.Instant instant50 = instant9.toInstant();
        org.joda.time.Instant instant53 = instant9.withDurationAdded(1672531200000L, 45);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant53);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        boolean boolean30 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = interval14.toPeriod();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        mutablePeriod38.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.days();
        mutablePeriod38.add(durationFieldType41, 8);
        mutablePeriod5.set(durationFieldType41, 0);
        java.lang.String str46 = durationFieldType41.toString();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "days" + "'", str46, "days");
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        java.lang.String str13 = property12.getAsText();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.DateTime dateTime15 = property12.getDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11" + "'", str13, "11");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod1 = seconds0.toMutablePeriod();
        org.joda.time.Duration duration2 = seconds0.toStandardDuration();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Instant instant8 = dateTime5.toInstant();
        org.joda.time.DateMidnight dateMidnight9 = dateTime5.toDateMidnight();
        int int10 = dateMidnight9.getDayOfYear();
        boolean boolean11 = dateMidnight9.isAfterNow();
        org.joda.time.Instant instant12 = dateMidnight9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        org.joda.time.Interval interval14 = duration2.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = duration2.toIntervalFrom(readableInstant15);
        long long17 = duration2.getStandardSeconds();
        org.joda.time.Period period18 = duration2.toPeriod();
        int int19 = period18.size();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant9 = instant7.minus(100L);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        java.lang.String str20 = interval18.toString();
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Minutes minutes23 = minutes21.plus(7);
        boolean boolean24 = minutes10.isGreaterThan(minutes23);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str20, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(364);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 1, (int) (short) -1, (-1), (int) ' ', (int) (short) 100, (-1), (int) ' ', 100);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) (short) 10, (long) (byte) 0);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant16 = instant14.minus(100L);
        java.lang.String str17 = instant16.toString();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = duration20.toPeriodTo(readableInstant24);
        org.joda.time.Duration duration27 = duration20.withMillis((long) (short) 0);
        org.joda.time.Instant instant28 = instant16.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.Duration duration36 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant37, periodType38);
        mutablePeriod39.setMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime31.plus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant45 = instant44.toInstant();
        boolean boolean46 = dateTime31.isEqual((org.joda.time.ReadableInstant) instant45);
        boolean boolean47 = instant28.isAfter((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Instant instant48 = instant45.toInstant();
        org.joda.time.Chronology chronology49 = instant45.getChronology();
        org.joda.time.Chronology chronology50 = chronology49.withUTC();
        mutablePeriod11.add((-625L), chronology49);
        boolean boolean52 = mutablePeriod8.equals((java.lang.Object) chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.dayOfWeek();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = period57.getFieldTypes();
        org.joda.time.Period period60 = period57.minusYears((int) (byte) 1);
        org.joda.time.Period period62 = period57.plusMonths((int) (byte) 0);
        org.joda.time.Period period64 = period57.withMillis((int) '#');
        int int65 = period64.getHours();
        org.joda.time.Period period67 = period64.minusDays(1972);
        long long70 = chronology49.add((org.joda.time.ReadablePeriod) period67, (long) 11, 5);
        int int71 = period67.getHours();
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str17, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-851903999814L) + "'", long70 == (-851903999814L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        int int4 = days0.getDays();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Days days13 = duration7.toStandardDays();
        org.joda.time.Days days15 = days13.multipliedBy((int) '#');
        org.joda.time.Days days16 = days0.minus(days15);
        org.joda.time.Days days18 = days15.minus((int) (byte) 100);
        int int19 = days15.size();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant11.minus(100L);
        org.joda.time.Instant instant15 = instant13.plus((long) 100);
        org.joda.time.Instant instant17 = instant13.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.LocalTime localTime19 = dateTime8.toLocalTime();
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getName((long) 10);
        long long28 = dateTimeZone22.convertLocalToUTC((long) (byte) -1, true);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime8.toMutableDateTime(dateTimeZone22);
        java.io.IOException iOException31 = new java.io.IOException("weekyearOfCentury");
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException31);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException31);
        java.lang.Throwable[] throwableArray34 = iOException31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = iOException31.getSuppressed();
        boolean boolean36 = dateTimeZone22.equals((java.lang.Object) throwableArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((-9859), (int) (byte) 100, 78719999, 4, 3, (int) (short) 0, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        long long13 = durationField10.getDifferenceAsLong(0L, 993600000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period2.plusMonths(1969);
        org.joda.time.Period period11 = period2.plusMinutes((-59));
        org.joda.time.Period period13 = period11.minusHours(0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.Period period9 = period7.withYears(86399);
        org.joda.time.Period period14 = new org.joda.time.Period(0, (int) (byte) -1, (int) '#', 7);
        org.joda.time.Period period15 = period7.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = duration18.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = duration18.toPeriodTo(readableInstant22);
        org.joda.time.Weeks weeks24 = period23.toStandardWeeks();
        org.joda.time.Period period26 = period23.plusMonths((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        int int28 = period26.get(durationFieldType27);
        int int29 = period14.indexOf(durationFieldType27);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet7, filteringMode8);
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap11);
        java.lang.Object obj13 = null;
        org.joda.time.Instant instant14 = new org.joda.time.Instant(obj13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = dateTimeZone15.getShortName(100L, locale19);
        java.lang.String str22 = locale19.getDisplayLanguage();
        java.lang.String str23 = locale19.getDisplayScript();
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strSet24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str22, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Weeks weeks11 = period3.toStandardWeeks();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = weeks12.getFieldType(0);
        org.joda.time.Period period18 = period3.withField(durationFieldType16, 0);
        org.joda.time.Period period20 = period3.multipliedBy((int) '4');
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.Duration duration22 = duration21.toDuration();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder5.setLanguage("");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffset(1L);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 1);
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = dateTimeZone2.getName((long) (byte) 10, locale11);
        java.lang.String str13 = locale11.getLanguage();
        java.lang.String str14 = locale11.getDisplayLanguage();
        java.lang.Class<?> wildcardClass15 = locale11.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str14, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        boolean boolean30 = interval14.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval31 = interval14.toMutableInterval();
        org.joda.time.Chronology chronology32 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZone(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean46 = dateTime42.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property47 = dateTime37.property(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime37.getZone();
        org.joda.time.LocalDateTime localDateTime49 = dateTime37.toLocalDateTime();
        java.lang.Object obj50 = null;
        org.joda.time.Instant instant51 = new org.joda.time.Instant(obj50);
        org.joda.time.DateTimeZone dateTimeZone52 = instant51.getZone();
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone52);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.lang.String str57 = locale56.getDisplayScript();
        java.lang.String str58 = dateTimeZone52.getShortName(100L, locale56);
        java.lang.String str59 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, locale56);
        java.lang.Object obj61 = null;
        org.joda.time.Instant instant62 = new org.joda.time.Instant(obj61);
        org.joda.time.DateTimeZone dateTimeZone63 = instant62.getZone();
        java.lang.String str64 = dateTimeZone63.toString();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone63);
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = locale67.getDisplayScript();
        java.lang.String str69 = dateTimeZone63.getShortName(100L, locale67);
        java.lang.String str70 = locale67.getDisplayLanguage();
        java.lang.String str71 = locale67.getISO3Language();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.util.Locale locale76 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str77 = locale72.getDisplayCountry(locale76);
        java.lang.String str78 = locale76.getDisplayVariant();
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = locale76.getDisplayVariant(locale79);
        org.joda.time.Instant instant82 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime83 = instant82.toDateTime();
        org.joda.time.DateTime.Property property84 = dateTime83.era();
        org.joda.time.DateTime dateTime85 = property84.withMinimumValue();
        int int86 = property84.getMaximumValueOverall();
        java.util.Locale locale87 = java.util.Locale.ENGLISH;
        java.lang.String str88 = locale87.getScript();
        java.lang.String str89 = locale87.getDisplayCountry();
        int int90 = property84.getMaximumShortTextLength(locale87);
        java.util.Locale locale91 = java.util.Locale.TAIWAN;
        java.lang.String str92 = locale87.getDisplayName(locale91);
        java.lang.String str93 = locale79.getDisplayName(locale91);
        java.lang.String str94 = locale79.getDisplayLanguage();
        java.lang.String str95 = locale67.getDisplayLanguage(locale79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, (int) 'x', locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "86399" + "'", str59, "86399");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str70, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "jpn" + "'", str71, "jpn");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale76.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Italy" + "'", str77, "Italy");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u82f1\u6587" + "'", str92, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u82f1\u6587" + "'", str93, "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u82f1\u8a9e" + "'", str94, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Japanese" + "'", str95, "Japanese");
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getOffset(1L);
        boolean boolean15 = dateTimeZone10.isStandardOffset(0L);
        org.joda.time.DateTime dateTime16 = dateTime2.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime18 = dateTime2.plusSeconds((-120));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.Period period20 = mutablePeriod17.toPeriod();
        mutablePeriod17.setYears((int) (short) -1);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = duration25.toPeriodTo(readableInstant29);
        org.joda.time.Days days31 = duration25.toStandardDays();
        boolean boolean32 = mutablePeriod17.equals((java.lang.Object) days31);
        org.joda.time.Days days33 = org.joda.time.Days.FIVE;
        boolean boolean34 = days31.isLessThan(days33);
        org.joda.time.PeriodType periodType35 = days31.getPeriodType();
        org.joda.time.Days days37 = org.joda.time.Days.days(0);
        org.joda.time.Days days39 = days37.dividedBy((int) (short) 10);
        org.joda.time.Days days40 = days31.plus(days37);
        int[] intArray43 = chronology9.get((org.joda.time.ReadablePeriod) days31, (long) (-2147483648), 43199999L);
        org.joda.time.DurationFieldType durationFieldType44 = days31.getFieldType();
        org.joda.time.Days days46 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, readableInstant50, periodType51);
        mutablePeriod52.setMonths((int) '4');
        org.joda.time.Period period55 = mutablePeriod52.toPeriod();
        mutablePeriod52.setYears((int) (short) -1);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration63 = duration60.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = duration60.toPeriodTo(readableInstant64);
        org.joda.time.Days days66 = duration60.toStandardDays();
        boolean boolean67 = mutablePeriod52.equals((java.lang.Object) days66);
        org.joda.time.Days days68 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.minutes();
        int int70 = days68.get(durationFieldType69);
        boolean boolean71 = days66.isGreaterThan(days68);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration74, readableInstant75, periodType76);
        mutablePeriod77.setHours((int) (byte) 100);
        org.joda.time.Days days80 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.minutes();
        int int82 = days80.get(durationFieldType81);
        mutablePeriod77.set(durationFieldType81, (int) 'x');
        int int85 = days68.get(durationFieldType81);
        boolean boolean86 = days46.isGreaterThan(days68);
        org.joda.time.Days days87 = days31.minus(days46);
        org.joda.time.Days days89 = days46.dividedBy(2);
        org.joda.time.DurationFieldType durationFieldType90 = days89.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[25]");
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(days87);
        org.junit.Assert.assertNotNull(days89);
        org.junit.Assert.assertNotNull(durationFieldType90);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.add((long) (-1), (long) 292278993);
        org.joda.time.DurationField durationField9 = dateTimeField2.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 12626452497599999L + "'", long8 == 12626452497599999L);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Period period7 = period3.withDays((int) ' ');
        org.joda.time.PeriodType periodType8 = period7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period2.plusMonths(1969);
        org.joda.time.Period period11 = period9.withMinutes(2);
        org.joda.time.Period period13 = period9.multipliedBy(23);
        org.joda.time.Period period14 = period9.negated();
        org.joda.time.Period period16 = period14.plusMillis(23);
        org.joda.time.Period period17 = period14.normalizedStandard();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime6 = property3.addToCopy((-3382L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        java.lang.Object obj18 = null;
        org.joda.time.Instant instant19 = new org.joda.time.Instant(obj18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str23 = dateTimeZone20.getName((long) 10);
        java.lang.String str25 = dateTimeZone20.getName((long) 8);
        int int27 = dateTimeZone20.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.DateTime.Property property29 = dateTime28.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTimeISO();
        org.joda.time.Duration duration33 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, readableInstant34, periodType35);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        boolean boolean43 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration49 = duration46.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Period period51 = duration46.toPeriodTo(readableInstant50);
        org.joda.time.Duration duration53 = duration46.minus(43200000L);
        org.joda.time.Duration duration55 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) ' ');
        org.joda.time.Duration duration56 = duration46.toDuration();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = dateTime28.withMinuteOfHour((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.DateMidnight dateMidnight21 = dateTime17.toDateMidnight();
        int int22 = dateTime17.getEra();
        org.joda.time.Chronology chronology23 = dateTime17.getChronology();
        org.joda.time.LocalTime localTime24 = dateTime17.toLocalTime();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration27.isEqual(readableDuration29);
        org.joda.time.Duration duration32 = duration27.minus((long) 1);
        org.joda.time.Duration duration34 = duration32.minus((long) '4');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime37, periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime37.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = timeOfDay63.toDateTime(readableInstant64);
        int int66 = timeOfDay63.size();
        org.joda.time.Chronology chronology67 = timeOfDay63.getChronology();
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant71 = instant69.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime72 = instant69.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int74 = mutableDateTime72.get(dateTimeFieldType73);
        int int75 = mutableDateTime72.getYearOfEra();
        int int76 = mutableDateTime72.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime77 = timeOfDay63.toDateTime((org.joda.time.ReadableInstant) mutableDateTime72);
        int int78 = localTime24.compareTo((org.joda.time.ReadablePartial) timeOfDay63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes79 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) timeOfDay63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 69 + "'", int74 == 69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1969 + "'", int75 == 1969);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.joda.time.DurationField durationField13 = chronology9.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology9.getDateTimeMillis((int) (byte) 1, 11, 364, 70, (-2147483648), (int) (short) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        int int19 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime15.weekyear();
        int int21 = property20.getMinimumValueOverall();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.DateTime dateTime23 = property20.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        int int25 = dateTime23.getDayOfWeek();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.Interval interval30 = property29.toInterval();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = property29.getAsText(locale31);
        java.util.Locale locale36 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str37 = property29.getAsText(locale36);
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category38, locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale40);
        java.lang.String str43 = locale40.getDisplayScript();
        java.lang.String str44 = locale40.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = dateTime23.toString("Englisch", locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399 + "'", int19 == 86399);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-292275054) + "'", int21 == (-292275054));
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertEquals(locale36.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "P0W" + "'", str42, "P0W");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ita" + "'", str44, "ita");
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffset(1L);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 1);
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = dateTimeZone2.getName((long) (byte) 10, locale11);
        java.lang.String str13 = locale11.getLanguage();
        java.util.Locale.setDefault(locale11);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfMinute();
        java.util.Locale locale22 = new java.util.Locale("");
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        int int25 = property20.getMaximumShortTextLength(locale22);
        java.lang.String str26 = locale22.toLanguageTag();
        java.lang.String str27 = locale11.getDisplayLanguage(locale22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French" + "'", str27, "French");
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Duration duration6 = duration2.toDuration();
        long long7 = duration2.getStandardMinutes();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval19.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        boolean boolean30 = interval25.contains((org.joda.time.ReadableInterval) interval29);
        boolean boolean31 = interval19.isBefore((org.joda.time.ReadableInterval) interval29);
        boolean boolean32 = interval3.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        java.lang.Object obj42 = null;
        org.joda.time.Instant instant43 = new org.joda.time.Instant(obj42);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone44);
        boolean boolean47 = interval36.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        boolean boolean52 = interval36.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        boolean boolean70 = interval65.contains((org.joda.time.ReadableInterval) interval69);
        boolean boolean71 = interval60.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        boolean boolean80 = interval75.contains((org.joda.time.ReadableInterval) interval79);
        java.lang.String str81 = interval79.toString();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        org.joda.time.DateTime.Property property84 = dateTime83.yearOfEra();
        org.joda.time.Interval interval85 = property84.toInterval();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(chronology86);
        org.joda.time.DateTime.Property property88 = dateTime87.yearOfEra();
        org.joda.time.Interval interval89 = property88.toInterval();
        boolean boolean90 = interval85.contains((org.joda.time.ReadableInterval) interval89);
        boolean boolean91 = interval79.isBefore((org.joda.time.ReadableInterval) interval89);
        boolean boolean92 = interval65.overlaps((org.joda.time.ReadableInterval) interval89);
        boolean boolean93 = interval36.isAfter((org.joda.time.ReadableInterval) interval89);
        boolean boolean94 = interval19.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime95 = interval19.getStart();
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime95.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period97 = new org.joda.time.Period((java.lang.Object) mutableDateTime96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str81, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(mutableDateTime96);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Duration duration24 = duration20.toDuration();
        org.joda.time.Duration duration25 = duration5.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, readableInstant29, periodType30);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant35, periodType36);
        boolean boolean38 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period39 = duration34.toPeriod();
        boolean boolean40 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, readableInstant44, periodType45);
        java.lang.String str47 = duration43.toString();
        org.joda.time.Seconds seconds48 = duration43.toStandardSeconds();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = duration51.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Period period56 = duration51.toPeriodTo(readableInstant55);
        org.joda.time.Duration duration58 = duration51.withMillis((long) (short) 0);
        org.joda.time.Duration duration61 = duration51.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        boolean boolean66 = dateTime64.isEqual(10L);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime64, periodType67);
        long long69 = dateTime64.getMillis();
        org.joda.time.Instant instant70 = dateTime64.toInstant();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType74, chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (short) 0, periodType74, chronology77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.minutes();
        int int80 = periodType74.indexOf(durationFieldType79);
        org.joda.time.PeriodType periodType81 = periodType74.withYearsRemoved();
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime64, periodType81);
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime64.getZone();
        org.joda.time.DateTime dateTime85 = dateTime64.plusDays((-292275054));
        org.joda.time.Interval interval86 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = dateTime64.withDate(1439, 86399, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.011S" + "'", str47, "PT0.011S");
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval86);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime2.secondOfDay();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime20.withDurationAdded((long) (-292276), 100);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        java.lang.Object obj18 = null;
        org.joda.time.Instant instant19 = new org.joda.time.Instant(obj18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone20);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = dateTimeZone20.getShortName(100L, locale24);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.String str30 = dateTimeZone20.getShortName((long) (short) -1, locale28);
        java.lang.String str31 = dateTimeField9.getAsText((long) (-1), locale28);
        java.lang.String str32 = locale28.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PM" + "'", str31, "PM");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.withMillisOfDay(4);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra((int) (short) 100);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = property21.withMinimumValue();
        int int23 = property21.getMaximumValueOverall();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getScript();
        java.lang.String str26 = locale24.getDisplayCountry();
        int int27 = property21.getMaximumShortTextLength(locale24);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale24.getDisplayName(locale28);
        java.util.Calendar calendar30 = dateTime17.toCalendar(locale24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime17.withEra((-1398041029));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1398041029 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u82f1\u6587" + "'", str29, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(calendar30);
        org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=-58980009599996,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=101,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=4,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfHalfday();
        org.joda.time.Duration duration33 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration35 = null;
        boolean boolean36 = duration33.isEqual(readableDuration35);
        org.joda.time.Duration duration38 = duration33.minus((long) 1);
        org.joda.time.Duration duration40 = duration38.minus((long) '4');
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = duration50.plus((long) (byte) 0);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        boolean boolean58 = dateTime56.isEqual(10L);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType61, chronology62);
        org.joda.time.PeriodType periodType64 = periodType61.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime56, periodType64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration47, periodType64);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime43, periodType67);
        org.joda.time.TimeOfDay timeOfDay69 = dateTime43.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = timeOfDay69.toDateTime(readableInstant70);
        org.joda.time.DateTime dateTime72 = dateTime71.toDateTime();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.lang.String str75 = locale73.getDisplayScript(locale74);
        java.util.Calendar calendar76 = dateTime72.toCalendar(locale73);
        java.lang.String str77 = dateTimeField29.getAsShortText((-292276), locale73);
        long long79 = dateTimeField29.roundHalfEven((-480000L));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1645487999999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-292276" + "'", str77, "-292276");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone2.getShortName(100L, locale6);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.String str12 = dateTimeZone2.getShortName((long) (short) -1, locale10);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str18 = locale13.getDisplayCountry(locale17);
        java.lang.String str19 = locale17.getDisplayVariant();
        java.lang.String str20 = locale10.getDisplayVariant(locale17);
        java.lang.String str21 = locale10.getScript();
        java.lang.String str22 = locale10.getScript();
        java.util.Locale locale26 = new java.util.Locale("Years", "japonais", "Chinese (China)");
        java.lang.String str27 = locale10.getDisplayScript(locale26);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italy" + "'", str18, "Italy");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "years_JAPONAIS_Chinese (China)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        boolean boolean37 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Days days38 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Period period39 = new org.joda.time.Period((java.lang.Object) days38);
        java.lang.String str40 = days38.toString();
        org.joda.time.Seconds seconds41 = days38.toStandardSeconds();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P365D" + "'", str40, "P365D");
        org.junit.Assert.assertNotNull(seconds41);
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        int int10 = period8.getMinutes();
        org.joda.time.Period period12 = period8.withDays((int) ' ');
        org.joda.time.Period period14 = period8.plusWeeks(10);
        org.joda.time.Period period16 = period8.minusMillis((int) (short) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        java.lang.String str18 = dateTime2.toString();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration23 = null;
        boolean boolean24 = duration21.isEqual(readableDuration23);
        org.joda.time.Duration duration26 = duration21.minus((long) 1);
        org.joda.time.Duration duration28 = duration26.minus((long) '4');
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.plus((long) (byte) 0);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        boolean boolean46 = dateTime44.isEqual(10L);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType49, chronology50);
        org.joda.time.PeriodType periodType52 = periodType49.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime44, periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration35, periodType52);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime31, periodType55);
        org.joda.time.Duration duration58 = duration26.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int69 = mutablePeriod68.getDays();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        boolean boolean80 = interval75.contains((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Chronology chronology81 = interval79.getChronology();
        mutablePeriod68.setPeriod((long) 'u', (long) 1969, chronology81);
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 100, chronology81);
        org.joda.time.Period period84 = duration58.toPeriod(chronology81);
        org.joda.time.DateTimeField dateTimeField85 = chronology81.weekyearOfCentury();
        org.joda.time.DurationField durationField86 = chronology81.millis();
        org.joda.time.DateTimeField dateTimeField87 = chronology81.yearOfEra();
        org.joda.time.DateTimeField dateTimeField88 = chronology81.millisOfSecond();
        org.joda.time.DateTime dateTime89 = dateTime2.withChronology(chronology81);
        org.joda.time.DateTime.Property property90 = dateTime2.hourOfDay();
        int int91 = dateTime2.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str18, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 86399999 + "'", int91 == 86399999);
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days1 = org.joda.time.Days.parseDays("Italienisch (Italien)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Italienisch (Italien)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.DateTime.Property property18 = dateTime8.yearOfEra();
        int int19 = dateTime8.getDayOfMonth();
        org.joda.time.Instant instant20 = dateTime8.toInstant();
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.ONE;
        boolean boolean23 = seconds21.isLessThan(seconds22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.secondsIn(readableInterval24);
        org.joda.time.Seconds seconds27 = seconds25.plus((int) (byte) -1);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds29 = seconds27.plus(seconds28);
        org.joda.time.Seconds seconds30 = seconds27.negated();
        org.joda.time.Seconds seconds31 = seconds30.negated();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.secondsIn(readableInterval32);
        org.joda.time.Seconds seconds35 = seconds33.plus((int) (byte) -1);
        org.joda.time.Seconds seconds36 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds37 = seconds35.plus(seconds36);
        org.joda.time.Seconds seconds38 = seconds35.negated();
        org.joda.time.Seconds seconds39 = seconds38.negated();
        org.joda.time.Seconds seconds40 = seconds31.plus(seconds39);
        org.joda.time.Seconds seconds41 = seconds22.plus(seconds39);
        java.lang.String str42 = seconds22.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1S" + "'", str42, "PT1S");
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(169);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = minutes1.getValue((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 117");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        org.joda.time.Days days5 = days0.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration6 = days0.toStandardDuration();
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        org.joda.time.MutablePeriod mutablePeriod10 = days7.toMutablePeriod();
        org.joda.time.Days days12 = days7.multipliedBy((int) (byte) 1);
        org.joda.time.Days days13 = days0.minus(days7);
        int int14 = days0.getDays();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = property3.addToCopy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        boolean boolean11 = dateTimeZone8.isStandardOffset((long) '4');
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime27 = dateTime14.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime14.toMutableDateTime(dateTimeZone29);
        java.lang.String str31 = dateTimeZone29.toString();
        long long33 = dateTimeZone8.getMillisKeepLocal(dateTimeZone29, 1L);
        java.util.TimeZone timeZone34 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-1398041029), 120000, (int) 'u', 281, (-9859), 35, dateTimeZone35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 281 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Instant instant11 = dateTime8.toInstant();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime8.toTimeOfDay();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Instant instant18 = dateTime15.toInstant();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        org.joda.time.DateTime dateTime22 = dateTime15.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime8.secondOfDay();
        org.joda.time.DateTime.Property property25 = dateTime8.era();
        int int26 = property25.getMinimumValue();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        int int28 = property25.getMaximumTextLength(locale27);
        org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter5.withLocale(locale27);
        java.lang.String str30 = locale27.getLanguage();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(periodFormatter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfHalfday();
        int int30 = dateTimeField29.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        java.lang.Object obj5 = null;
        org.joda.time.Instant instant6 = new org.joda.time.Instant(obj5);
        boolean boolean7 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant8 = instant6.toInstant();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration13 = null;
        boolean boolean14 = duration11.isEqual(readableDuration13);
        org.joda.time.Duration duration16 = duration11.minus((long) 1);
        org.joda.time.Duration duration18 = duration16.minus((long) '4');
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = duration21.toPeriod(chronology22);
        boolean boolean24 = duration16.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant25 = instant8.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 11, periodType27);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = duration31.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = duration31.toPeriodTo(readableInstant35);
        org.joda.time.Duration duration38 = duration31.withMillis((long) (short) 0);
        org.joda.time.Duration duration41 = duration31.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Chronology chronology42 = null;
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration31, chronology42);
        org.joda.time.Instant instant44 = instant8.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime45 = instant44.toMutableDateTimeISO();
        java.util.Date date46 = mutableDateTime45.toDate();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType49, chronology50);
        org.joda.time.PeriodType periodType52 = periodType49.withWeeksRemoved();
        org.joda.time.PeriodType periodType53 = periodType49.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((java.lang.Object) date46, periodType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.Date");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Mon Feb 21 14:56:50 UTC 2022");
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property27 = dateTime8.minuteOfDay();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        java.lang.String str32 = instant31.toString();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration35.toPeriodTo(readableInstant39);
        org.joda.time.Duration duration42 = duration35.withMillis((long) (short) 0);
        org.joda.time.Instant instant43 = instant31.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = instant31.isSupported(dateTimeFieldType44);
        boolean boolean46 = dateTime8.isSupported(dateTimeFieldType44);
        boolean boolean48 = dateTime8.isBefore(27882719L);
        org.joda.time.DateTime.Property property49 = dateTime8.era();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        java.lang.String str57 = locale55.getDisplayVariant();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = locale55.getDisplayVariant(locale58);
        java.lang.String str60 = locale55.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTime8.toString("en", locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str32, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italy" + "'", str56, "Italy");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "und" + "'", str60, "und");
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        java.util.Locale locale1 = new java.util.Locale("1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(locale1.toString(), "1970-01-01t00:00:00.001z");
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Seconds seconds24 = org.joda.time.Seconds.secondsIn(readableInterval23);
        org.joda.time.Seconds seconds26 = seconds24.plus((int) (byte) -1);
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds28 = seconds26.plus(seconds27);
        org.joda.time.Seconds seconds29 = seconds26.negated();
        org.joda.time.Seconds seconds30 = seconds29.negated();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.Seconds seconds32 = org.joda.time.Seconds.secondsIn(readableInterval31);
        org.joda.time.Seconds seconds34 = seconds32.plus((int) (byte) -1);
        org.joda.time.Seconds seconds35 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds36 = seconds34.plus(seconds35);
        org.joda.time.Seconds seconds37 = seconds34.negated();
        org.joda.time.Seconds seconds38 = seconds37.negated();
        org.joda.time.Seconds seconds39 = seconds30.plus(seconds38);
        boolean boolean40 = dateTimeZone16.equals((java.lang.Object) seconds38);
        long long42 = dateTimeZone16.previousTransition((long) (short) 100);
        boolean boolean43 = dateTimeZone16.isFixed();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.Minutes minutes25 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime19.getZone();
        int int27 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime.Property property28 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime29 = property28.withMaximumValue();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime29, periodType30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = dateTime29.isBefore(readableInstant32);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1672531200000L);
        org.junit.Assert.assertNotNull(duration1);
    }
}

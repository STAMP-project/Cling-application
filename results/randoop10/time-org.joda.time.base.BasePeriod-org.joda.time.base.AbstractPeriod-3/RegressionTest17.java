import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test08501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08501");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType31, chronology34);
        org.joda.time.PeriodType periodType36 = periodType31.withDaysRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime25, periodType31);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant40 = instant39.toInstant();
        org.joda.time.DateTime dateTime41 = instant40.toDateTimeISO();
        org.joda.time.Period period42 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration43 = duration2.toDuration();
        long long44 = duration43.getMillis();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.lang.Object obj46 = null;
        org.joda.time.Instant instant47 = new org.joda.time.Instant(obj46);
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        java.lang.String str49 = dateTimeZone48.toString();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone48);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = dateTimeZone48.getShortName(100L, locale52);
        java.lang.String str55 = locale52.getScript();
        boolean boolean56 = locale52.hasExtensions();
        java.util.Locale.Builder builder57 = builder45.setLocale(locale52);
        boolean boolean58 = duration43.equals((java.lang.Object) locale52);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08502");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale20, locale24, locale28, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet39, filteringMode40);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getScript();
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale46 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale locale52 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList49, filteringMode53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Set<java.lang.String> strSet58 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet58, filteringMode59);
        java.util.Collection<java.util.Locale> localeCollection61 = null;
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, localeCollection61, filteringMode62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = locale67.getScript();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale67 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, strMap73);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.util.Set<java.lang.String> strSet81 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strSet81, filteringMode82);
        java.lang.String str84 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.lang.String>) strSet81);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList74, (java.util.Collection<java.lang.String>) strSet81);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList86);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode62.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test08503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08503");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        int int15 = localDateTime14.size();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.withZone(dateTimeZone19);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean27 = dateTime23.isSupported(dateTimeFieldType26);
        org.joda.time.DateTime.Property property28 = dateTime18.property(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime18.getZone();
        org.joda.time.LocalDateTime localDateTime30 = dateTime18.toLocalDateTime();
        int int31 = localDateTime30.size();
        org.joda.time.Days days32 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDateTime14, (org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.Period period34 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period36 = period34.minusMonths((int) (short) 10);
        int int37 = period34.getWeeks();
        org.joda.time.Days days38 = period34.toStandardDays();
        boolean boolean39 = days32.isGreaterThan(days38);
        org.joda.time.Days days40 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days42 = days40.minus((int) '4');
        org.joda.time.DurationFieldType durationFieldType43 = days40.getFieldType();
        org.joda.time.Days days44 = days38.plus(days40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days46 = days40.multipliedBy((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * -2");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(days44);
    }

    @Test
    public void test08504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08504");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Days days8 = duration2.toStandardDays();
        org.joda.time.Days days10 = days8.multipliedBy((int) '#');
        org.joda.time.Days days12 = days8.multipliedBy(70);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = days12.getValue((-27349920));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -27349920");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days12);
    }

    @Test
    public void test08505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08505");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = dateTime2.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime2.minusMonths((int) ' ');
        org.joda.time.Period period15 = new org.joda.time.Period(0, (int) (byte) -1, (int) '#', 7);
        org.joda.time.DateTime dateTime16 = dateTime10.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = org.joda.time.Period.months(69);
        org.joda.time.Period period20 = period18.minusMinutes(1972);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Period period23 = minutes22.toPeriod();
        org.joda.time.DurationFieldType durationFieldType24 = minutes22.getFieldType();
        int int25 = period18.get(durationFieldType24);
        org.joda.time.Period period27 = period15.withFieldAdded(durationFieldType24, 53786950);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test08506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08506");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-23));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08507");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) '4');
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long8 = dateTimeZone6.previousTransition(2980800000L);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getName((long) 10);
        long long17 = dateTimeZone11.convertLocalToUTC((long) (byte) -1, true);
        long long19 = dateTimeZone6.getMillisKeepLocal(dateTimeZone11, (-720L));
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(720070L, dateTimeZone11);
        org.joda.time.DateTime dateTime21 = instant2.toDateTime(dateTimeZone11);
        java.lang.String str23 = dateTimeZone11.getShortName((long) 'a');
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2980800000L + "'", long8 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-720L) + "'", long19 == (-720L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test08508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08508");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime35.weekOfWeekyear();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant40 = instant38.minus(100L);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) instant38);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime43 = dateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime1.toMutableDateTime(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test08509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08509");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ZERO;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod2 = seconds1.toMutablePeriod();
        boolean boolean3 = seconds0.isGreaterThan(seconds1);
        org.joda.time.DurationFieldType durationFieldType4 = seconds1.getFieldType();
        java.lang.String str5 = durationFieldType4.toString();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "seconds" + "'", str5, "seconds");
    }

    @Test
    public void test08510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08510");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy((-10));
        int int25 = property22.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        java.lang.String str27 = property22.getName();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfHour" + "'", str27, "minuteOfHour");
    }

    @Test
    public void test08511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08511");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(53814441);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08512");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("P-31D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P-31D\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08513");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        boolean boolean6 = instant3.isBeforeNow();
        org.joda.time.DateTime dateTime7 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1970);
        org.joda.time.Period period11 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period13 = period11.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationTo(readableInstant14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration18.isEqual(readableDuration20);
        org.joda.time.Duration duration23 = duration18.minus((long) 1);
        org.joda.time.Duration duration25 = duration23.minus((long) '4');
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        boolean boolean43 = dateTime41.isEqual(10L);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType46, chronology47);
        org.joda.time.PeriodType periodType49 = periodType46.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime41, periodType49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType49);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime28, periodType52);
        boolean boolean54 = duration15.isEqual((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime55 = dateTime9.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime.Property property57 = dateTime9.property(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getDurationType();
        boolean boolean59 = dateTime7.isSupported(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test08514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08514");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        int int10 = period7.get(durationFieldType9);
        int int11 = period7.getWeeks();
        org.joda.time.Duration duration12 = period7.toStandardDuration();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = period16.getFieldTypes();
        org.joda.time.Period period19 = period16.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks20 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Weeks weeks22 = weeks20.plus(0);
        boolean boolean23 = duration12.equals((java.lang.Object) weeks22);
        org.joda.time.Period period27 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period29 = period27.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationTo(readableInstant30);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = duration34.toPeriodFrom(readableInstant35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration49 = duration46.plus((long) (byte) 0);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        boolean boolean54 = dateTime52.isEqual(10L);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType57, chronology58);
        org.joda.time.PeriodType periodType60 = periodType57.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime52, periodType60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43, periodType60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = duration34.toPeriod(periodType60, chronology63);
        org.joda.time.PeriodType periodType65 = periodType60.withHoursRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period(43200009L, (long) 19, periodType65);
        org.joda.time.Period period67 = duration12.toPeriod(periodType65);
        java.lang.String str68 = periodType65.getName();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "YearDay" + "'", str68, "YearDay");
    }

    @Test
    public void test08515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime35.weekOfWeekyear();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant40 = instant38.minus(100L);
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) instant38);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime43 = dateTime1.toLocalDateTime();
        int int44 = localDateTime43.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test08516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08516");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfDay();
        java.lang.Object obj30 = null;
        org.joda.time.Instant instant31 = new org.joda.time.Instant(obj30);
        org.joda.time.DateTimeZone dateTimeZone32 = instant31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        int int35 = dateTimeZone32.getOffset(1L);
        boolean boolean37 = dateTimeZone32.isStandardOffset(0L);
        java.lang.String str39 = dateTimeZone32.getNameKey((long) 1);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = dateTimeZone32.getName((long) (byte) 10, locale41);
        java.lang.String str43 = locale41.getLanguage();
        java.lang.String str44 = locale41.getDisplayCountry();
        java.lang.String str45 = dateTimeField28.getAsText(1640995080000L, locale41);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1438" + "'", str45, "1438");
    }

    @Test
    public void test08517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08517");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        boolean boolean11 = periodType6.equals((java.lang.Object) builder10);
        java.util.Locale.Builder builder12 = builder10.clearExtensions();
        java.util.Locale locale13 = builder10.build();
        java.util.Locale.Builder builder14 = builder10.clearExtensions();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08518");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getLeapDurationField();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        int int30 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property31 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime16.withYear(1969);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfHalfday();
        long long40 = dateTimeField38.roundHalfEven(2980800000L);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        mutablePeriod51.setMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime43.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.LocalDate localDate55 = dateTime43.toLocalDate();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.Instant instant61 = dateTime58.toInstant();
        org.joda.time.Seconds seconds62 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime.Property property66 = dateTime65.era();
        org.joda.time.DateTime dateTime67 = property66.withMinimumValue();
        int int68 = property66.getMaximumValueOverall();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale69.getScript();
        java.lang.String str71 = locale69.getDisplayCountry();
        int int72 = property66.getMaximumShortTextLength(locale69);
        org.joda.time.DateTime dateTime73 = property66.withMaximumValue();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType75 = periodType74.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime73, periodType74);
        org.joda.time.DateTime dateTime78 = dateTime73.plusWeeks((-2147483648));
        org.joda.time.YearMonthDay yearMonthDay79 = dateTime73.toYearMonthDay();
        int int80 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay79);
        java.util.Locale locale82 = java.util.Locale.ENGLISH;
        java.lang.String str83 = locale82.getScript();
        java.lang.String str84 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay79, (int) (short) 0, locale82);
        long long87 = dateTimeField2.getDifferenceAsLong(60000L, 53918564L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2980800000L + "'", long40 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "AM" + "'", str84, "AM");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    }

    @Test
    public void test08519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08519");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        org.joda.time.Duration duration3 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = period4.getFieldTypes();
        org.joda.time.Period period7 = period4.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Weeks weeks10 = weeks8.plus(0);
        org.joda.time.Weeks weeks12 = weeks10.multipliedBy(0);
        boolean boolean13 = weeks0.isGreaterThan(weeks10);
        org.joda.time.Weeks weeks15 = weeks0.dividedBy((-9859));
        org.joda.time.Weeks weeks17 = weeks15.plus(39600000);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
    }

    @Test
    public void test08520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08520");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTime.Property property13 = dateTime2.dayOfMonth();
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        int int16 = days14.get(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod17 = days14.toMutablePeriod();
        org.joda.time.Days days19 = days14.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration20 = days14.toStandardDuration();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime25 = instant22.toMutableDateTimeISO();
        int int26 = mutableDateTime25.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) mutableDateTime25);
        long long28 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        java.lang.String str29 = property13.getAsShortText();
        java.lang.String str30 = property13.getAsText();
        org.joda.time.DateTime dateTime31 = property13.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime31.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31" + "'", str29, "31");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "31" + "'", str30, "31");
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test08521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08521");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime22 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant26 = instant24.minus(100L);
        java.lang.String str27 = instant26.toString();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration30.toPeriodTo(readableInstant34);
        org.joda.time.Duration duration37 = duration30.withMillis((long) (short) 0);
        org.joda.time.Instant instant38 = instant26.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Seconds seconds39 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTime dateTime41 = dateTime22.withWeekOfWeekyear(7);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, readableInstant50, periodType51);
        mutablePeriod52.setMonths((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime44.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTime dateTime57 = dateTime44.minusWeeks((int) (byte) 1);
        long long58 = dateTime44.getMillis();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.withZoneRetainFields(dateTimeZone63);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime67 = instant66.toDateTime();
        org.joda.time.DateTime.Property property68 = dateTime67.era();
        org.joda.time.DateTime dateTime69 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration72, readableInstant73, periodType74);
        mutablePeriod75.setMonths((int) '4');
        org.joda.time.DateTime dateTime78 = dateTime67.plus((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.DateTime dateTime80 = dateTime67.minusWeeks((int) (byte) 1);
        int int81 = dateTime64.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property82 = dateTime67.minuteOfHour();
        org.joda.time.DateTime dateTime84 = dateTime67.withYear(1969);
        org.joda.time.Chronology chronology85 = dateTime84.getChronology();
        org.joda.time.DurationField durationField86 = durationFieldType59.getField(chronology85);
        org.joda.time.DateTime dateTime87 = dateTime44.toDateTime(chronology85);
        org.joda.time.DurationField durationField88 = chronology85.days();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology85.getZone();
        long long91 = dateTimeZone89.nextTransition((-436320L));
        org.joda.time.DateTime dateTime92 = dateTime41.withZone(dateTimeZone89);
        java.lang.String str93 = dateTime92.toString();
        org.joda.time.Instant instant94 = new org.joda.time.Instant((java.lang.Object) str93);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str27, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-436320L) + "'", long91 == (-436320L));
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970-02-11T23:59:59.999Z" + "'", str93, "1970-02-11T23:59:59.999Z");
    }

    @Test
    public void test08522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08522");
        org.joda.time.Days days0 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days1 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        int int3 = days1.get(durationFieldType2);
        org.joda.time.MutablePeriod mutablePeriod4 = days1.toMutablePeriod();
        org.joda.time.Days days6 = days1.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration7 = days1.toStandardDuration();
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.minutes();
        int int10 = days8.get(durationFieldType9);
        org.joda.time.MutablePeriod mutablePeriod11 = days8.toMutablePeriod();
        org.joda.time.Days days13 = days8.multipliedBy((int) (byte) 1);
        org.joda.time.Days days14 = days1.minus(days8);
        boolean boolean15 = days0.isGreaterThan(days14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        int int39 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.format.PeriodPrinter periodPrinter40 = null;
        org.joda.time.format.PeriodParser periodParser41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter(periodPrinter40, periodParser41);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter42.withParseType(periodType43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant17, (org.joda.time.ReadableInstant) dateTime22, periodType43);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        org.joda.time.Days days52 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.minutes();
        int int54 = days52.get(durationFieldType53);
        mutablePeriod51.add(durationFieldType53, 8);
        mutablePeriod45.add(durationFieldType53, (int) (short) 100);
        boolean boolean59 = periodType16.isSupported(durationFieldType53);
        boolean boolean60 = days0.isSupported(durationFieldType53);
        org.joda.time.Days days62 = days0.minus(9);
        org.joda.time.Duration duration63 = days62.toStandardDuration();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test08523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08523");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(0);
        org.joda.time.Period period3 = period1.multipliedBy((-10));
        org.joda.time.Period period5 = period1.minusYears(43199999);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08524");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) 10);
        java.lang.String str7 = dateTimeZone2.getName((long) 8);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 31, false, (-3676492805054399977L));
        java.lang.String str13 = dateTimeZone2.getShortName((long) 292278993);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str16 = dateTimeZone2.getShortName((-7L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 31L + "'", long11 == 31L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test08525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08525");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = duration3.toPeriodTo(readableInstant7);
        org.joda.time.Weeks weeks9 = period8.toStandardWeeks();
        org.joda.time.Period period11 = period8.plusMonths((int) (short) 100);
        org.joda.time.Period period13 = period11.minusHours((int) (byte) -1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.forFields(durationFieldTypeArray14);
        org.joda.time.PeriodType periodType16 = periodType15.withDaysRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withMillisRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((-625L), periodType16);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test08526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08526");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getLeapDurationField();
        boolean boolean9 = dateTimeField2.isSupported();
        java.lang.Object obj12 = null;
        org.joda.time.Instant instant13 = new org.joda.time.Instant(obj12);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        java.lang.String str17 = dateTimeZone14.getName((long) 10);
        java.lang.String str19 = dateTimeZone14.getName((long) 8);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = dateTimeZone14.getName((long) 1969, locale21);
        java.lang.String str23 = locale21.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField2.set(85104000117L, "2159965", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2159965\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Franz\366sisch" + "'", str23, "Franz\366sisch");
    }

    @Test
    public void test08527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08527");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(45L, 3732480000000000L);
    }

    @Test
    public void test08528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08528");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("und");
        java.lang.Object obj2 = null;
        org.joda.time.Instant instant3 = new org.joda.time.Instant(obj2);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        java.lang.String str5 = dateTimeZone4.toString();
        java.lang.String str7 = dateTimeZone4.getName((long) (short) -1);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("P2147483647W");
        java.lang.String str11 = dateTimeZone4.getShortName((long) 53832943, locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str13 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet12);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test08529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08529");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        int int23 = mutablePeriod5.getMillis();
        mutablePeriod5.setPeriod((long) (byte) 10);
        mutablePeriod5.addSeconds(100);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        mutablePeriod44.setMonths((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime36.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTime dateTime49 = dateTime36.minusWeeks((int) (byte) 1);
        int int50 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property51 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime36.withYear(1969);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.year();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.year();
        mutablePeriod5.add(38716L, chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.weekOfWeekyear();
        org.joda.time.DurationField durationField60 = chronology54.seconds();
        long long62 = durationField60.getMillis((-1123199900L));
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1123199900000L) + "'", long62 == (-1123199900000L));
    }

    @Test
    public void test08530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08530");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.weekOfWeekyear();
        boolean boolean9 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property10 = dateTime6.dayOfWeek();
        boolean boolean11 = property10.isLeap();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.Period period14 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period16 = period14.minusMonths((int) (short) 10);
        org.joda.time.Period period18 = period16.withSeconds((int) '4');
        org.joda.time.Period period19 = period18.negated();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period22 = period19.withWeeks(675);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMillis((int) (short) 1);
        int int31 = mutablePeriod28.getSeconds();
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = weeks32.getFieldType();
        mutablePeriod28.add(durationFieldType33, (int) (byte) 0);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray40 = period39.getFieldTypes();
        int int41 = period39.getMinutes();
        org.joda.time.Period period43 = period39.withDays((int) ' ');
        org.joda.time.Period period45 = period39.plusWeeks(10);
        org.joda.time.Period period47 = period39.minusMillis((int) (short) 1);
        int int48 = period47.size();
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period50 = period19.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Weeks weeks51 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period47);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(weeks51);
    }

    @Test
    public void test08531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08531");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("PT280H", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08532");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Instant instant8 = dateTime5.toInstant();
        boolean boolean9 = periodType1.equals((java.lang.Object) dateTime5);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        boolean boolean15 = dateTime14.isAfterNow();
        org.joda.time.Weeks weeks16 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime18 = dateTime5.plusMonths(1439);
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime21 = dateTime18.minusSeconds(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime18.withDate(52, 53, 19044);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Millis" + "'", str2, "Millis");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test08533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08533");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        long long7 = dateTimeField4.add(0L, (long) (short) 1);
        long long9 = dateTimeField4.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant17 = instant15.minus(100L);
        org.joda.time.Instant instant19 = instant17.plus((long) 100);
        org.joda.time.Instant instant21 = instant17.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.LocalTime localTime23 = dateTime12.toLocalTime();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.Period period33 = mutablePeriod30.toPeriod();
        int[] intArray34 = period33.getValues();
        int[] intArray36 = dateTimeField4.addWrapField((org.joda.time.ReadablePartial) localTime23, 0, intArray34, 3);
        long long38 = dateTimeField4.roundFloor((long) 12);
        boolean boolean39 = minutes1.equals((java.lang.Object) dateTimeField4);
        org.joda.time.Minutes minutes40 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes43 = minutes41.minus((int) (short) -1);
        boolean boolean44 = minutes40.isGreaterThan(minutes41);
        org.joda.time.Minutes minutes45 = null;
        org.joda.time.Minutes minutes46 = minutes41.minus(minutes45);
        org.joda.time.Minutes minutes48 = minutes41.minus((int) (byte) -1);
        org.joda.time.Minutes minutes49 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes52 = minutes50.minus((int) (short) -1);
        boolean boolean53 = minutes49.isGreaterThan(minutes50);
        org.joda.time.Minutes minutes54 = org.joda.time.Minutes.TWO;
        boolean boolean55 = minutes49.isLessThan(minutes54);
        boolean boolean56 = minutes41.isLessThan(minutes49);
        boolean boolean57 = minutes1.isGreaterThan(minutes41);
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod) minutes41);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = period62.getFieldTypes();
        org.joda.time.Period period65 = period62.minusYears((int) (byte) 1);
        org.joda.time.Period period67 = period62.plusMonths((int) (byte) 0);
        int int68 = period62.size();
        org.joda.time.Period period69 = period62.toPeriod();
        org.joda.time.Minutes minutes70 = period62.toStandardMinutes();
        org.joda.time.Minutes minutes72 = minutes70.dividedBy(141012);
        org.joda.time.Minutes minutes73 = minutes58.plus(minutes70);
        org.joda.time.Duration duration74 = minutes73.toStandardDuration();
        java.lang.String str75 = duration74.toString();
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 43200000L + "'", long7 == 43200000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(minutes52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(minutes70);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT-128849018880S" + "'", str75, "PT-128849018880S");
    }

    @Test
    public void test08534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08534");
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        int int16 = days14.get(durationFieldType15);
        mutablePeriod13.add(durationFieldType15, 8);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutablePeriod13.add(readablePeriod19);
        int int21 = mutablePeriod13.getMonths();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        boolean boolean30 = interval25.contains((org.joda.time.ReadableInterval) interval29);
        mutablePeriod13.setPeriod((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.withZoneRetainFields(dateTimeZone37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, readableInstant47, periodType48);
        mutablePeriod49.setMonths((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime41.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTime dateTime54 = dateTime41.minusWeeks((int) (byte) 1);
        int int55 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property56 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime41.withYear(1969);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DurationField durationField60 = durationFieldType33.getField(chronology59);
        mutablePeriod13.add((-43199999L), chronology59);
        org.joda.time.DurationField durationField62 = chronology59.millis();
        org.joda.time.DurationField durationField63 = chronology59.months();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 69, chronology59);
        org.joda.time.DateTimeField dateTimeField65 = chronology59.minuteOfDay();
        org.joda.time.DurationField durationField66 = chronology59.halfdays();
        org.joda.time.DurationField durationField67 = chronology59.weekyears();
        org.joda.time.DurationField durationField68 = chronology59.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((int) (short) -1, 0, 281, 893, 0, 1, 0, chronology59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 893 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test08535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08535");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.Period period10 = period7.plusMonths((int) (short) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = period7.getFieldTypes();
        org.joda.time.Period period13 = period7.withDays(1969);
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test08536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08536");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        long long32 = chronology27.add((-121645L), 0L, (-100));
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-128849018760000L), 259200000L, chronology27);
        org.joda.time.DurationField durationField34 = chronology27.centuries();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-121645L) + "'", long32 == (-121645L));
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test08537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08537");
        java.lang.Object obj0 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        int int12 = mutablePeriod6.getHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        boolean boolean21 = interval16.contains((org.joda.time.ReadableInterval) interval20);
        java.lang.String str22 = interval16.toString();
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval16);
        int int24 = mutablePeriod6.getMillis();
        mutablePeriod6.setPeriod((long) (byte) 10);
        mutablePeriod6.addSeconds(100);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withZoneRetainFields(dateTimeZone33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.DateTime dateTime39 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, readableInstant43, periodType44);
        mutablePeriod45.setMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime37.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTime dateTime50 = dateTime37.minusWeeks((int) (byte) 1);
        int int51 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property52 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime54 = dateTime37.withYear(1969);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.year();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.year();
        mutablePeriod6.add(38716L, chronology55);
        org.joda.time.Period period60 = new org.joda.time.Period(obj0, chronology55);
        org.joda.time.Period period62 = period60.withHours(42);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str22, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period62);
    }

    @Test
    public void test08538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08538");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = property2.withMinimumValue();
        org.joda.time.Instant instant4 = dateTime3.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime3.minuteOfHour();
        long long6 = property5.remainder();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test08539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08539");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        boolean boolean18 = interval7.contains((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology19 = interval7.getChronology();
        org.joda.time.Hours hours20 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Hours hours22 = hours20.dividedBy(292278993);
        org.joda.time.DurationFieldType durationFieldType23 = hours22.getFieldType();
        org.joda.time.Hours hours24 = null;
        org.joda.time.Hours hours25 = hours22.minus(hours24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours27 = hours25.dividedBy(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(hours25);
    }

    @Test
    public void test08540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08540");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(525600);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test08541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08541");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime2.plusHours(1969);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.Chronology chronology11 = dateTime8.getChronology();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = dateTime8.withFields((org.joda.time.ReadablePartial) timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test08542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08542");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime46 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeField dateTimeField48 = timeOfDay38.getField(2);
        java.lang.String str49 = timeOfDay38.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, readableInstant58, periodType59);
        mutablePeriod60.setMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime52.plus((org.joda.time.ReadablePeriod) mutablePeriod60);
        java.lang.Object obj64 = null;
        org.joda.time.Instant instant65 = new org.joda.time.Instant(obj64);
        org.joda.time.DateTimeZone dateTimeZone66 = instant65.getZone();
        java.lang.String str67 = dateTimeZone66.toString();
        int int69 = dateTimeZone66.getOffset(1L);
        boolean boolean71 = dateTimeZone66.isStandardOffset(0L);
        org.joda.time.DateTime dateTime72 = dateTime52.withZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime74 = dateTime52.plusSeconds(895);
        org.joda.time.DateTime dateTime76 = dateTime52.plusWeeks(0);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime76.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime78 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) mutableDateTime77);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "T23:59:59.999" + "'", str49, "T23:59:59.999");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test08543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08543");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual(10L);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        long long22 = dateTimeField16.add(1L, (-1));
        int int23 = dateTime9.get(dateTimeField16);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period26 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period28 = period26.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationTo(readableInstant29);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration33.toPeriodFrom(readableInstant34);
        org.joda.time.DateTime dateTime36 = dateTime6.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withZone(dateTimeZone40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean48 = dateTime44.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime.Property property49 = dateTime39.property(dateTimeFieldType47);
        java.lang.String str50 = property49.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property49.getFieldType();
        int int52 = dateTime36.get(dateTimeFieldType51);
        org.joda.time.DateTime.Property property53 = dateTime36.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43199999L) + "'", long22 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "11" + "'", str50, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test08544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08544");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("11");
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.Interval interval11 = property10.toInterval();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale7.getDisplayCountry(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale18.getDisplayCountry(locale22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = property27.getAsText(locale29);
        int int31 = property27.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter32 = null;
        org.joda.time.format.PeriodParser periodParser33 = null;
        org.joda.time.format.PeriodFormatter periodFormatter34 = new org.joda.time.format.PeriodFormatter(periodPrinter32, periodParser33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter36 = periodFormatter34.withParseType(periodType35);
        java.util.Locale locale37 = periodFormatter34.getLocale();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.lang.String str39 = locale38.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter34.withLocale(locale38);
        java.util.Locale locale41 = locale38.stripExtensions();
        int int42 = property27.getMaximumShortTextLength(locale38);
        java.lang.String str43 = locale18.getDisplayScript(locale38);
        java.lang.String str44 = locale17.getDisplayCountry(locale38);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc77c\ubcf8" + "'", str15, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "China" + "'", str20, "China");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "China" + "'", str23, "China");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "China" + "'", str24, "China");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodFormatter36);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test08545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08545");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale20, locale24, locale28, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet39, filteringMode40);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getScript();
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale46 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale locale52 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList49, filteringMode53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.lang.String str59 = locale58.getScript();
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale58 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale locale64 = java.util.Locale.CHINA;
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale74.getDisplayVariant();
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale64, locale68, locale72, locale74 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.Locale locale79 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Set<java.lang.String> strSet83 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.lang.String>) strSet83, filteringMode84);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList85);
        java.util.Locale.LanguageRange[] languageRangeArray87 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList88 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList88, languageRangeArray87);
        java.util.Locale.LanguageRange[] languageRangeArray90 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList91 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList91, languageRangeArray90);
        java.util.Set<java.lang.String> strSet93 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList91, (java.util.Collection<java.lang.String>) strSet93, filteringMode94);
        java.lang.String str96 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList88, (java.util.Collection<java.lang.String>) strSet93);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList98 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet93, filteringMode97);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(locale79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(languageRangeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(languageRangeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode94.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode97.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test08546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08546");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.setMinutes((-59));
        mutablePeriod5.addDays((-52));
        mutablePeriod5.setPeriod((int) (short) 100, 8, 0, (-100), 898, 62, 97, (-155));
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08547");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) (byte) 1);
        boolean boolean30 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = dateTime25.withWeekyear(19);
        java.lang.String str34 = dateTime32.toString("\u7fa9\u5927\u5229\u6587");
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        boolean boolean39 = dateTime37.isEqual(10L);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = dateTime37.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = dateTime32.withZoneRetainFields(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        org.joda.time.Chronology chronology44 = yearMonthDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str34, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test08548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08548");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.hourOfDay();
        int int5 = dateTime1.getMillisOfDay();
        org.joda.time.DateTime.Property property6 = dateTime1.secondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54056612 + "'", int5 == 54056612);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test08549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08549");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        mutablePeriod14.setMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime6.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime19 = dateTime6.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.DateMidnight dateMidnight22 = dateTime19.toDateMidnight();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.DateTime dateTime29 = dateTime25.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        long long35 = dateTimeField32.add(0L, (long) (short) 1);
        long long38 = dateTimeField32.add(1L, (-1));
        int int39 = dateTime25.get(dateTimeField32);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        long long56 = dateTime42.getMillis();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.withZoneRetainFields(dateTimeZone61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime.Property property66 = dateTime65.era();
        org.joda.time.DateTime dateTime67 = dateTime65.withTimeAtStartOfDay();
        org.joda.time.Duration duration70 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, readableInstant71, periodType72);
        mutablePeriod73.setMonths((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime65.plus((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.DateTime dateTime78 = dateTime65.minusWeeks((int) (byte) 1);
        int int79 = dateTime62.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime.Property property80 = dateTime65.minuteOfHour();
        org.joda.time.DateTime dateTime82 = dateTime65.withYear(1969);
        org.joda.time.Chronology chronology83 = dateTime82.getChronology();
        org.joda.time.DurationField durationField84 = durationFieldType57.getField(chronology83);
        org.joda.time.DateTime dateTime85 = dateTime42.toDateTime(chronology83);
        org.joda.time.DateTime dateTime86 = dateTime25.toDateTime(chronology83);
        org.joda.time.DateTime dateTime87 = dateTime19.withChronology(chronology83);
        org.joda.time.DurationField durationField88 = chronology83.halfdays();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 23, 292278993L, periodType2, chronology83);
        org.joda.time.PeriodType periodType90 = periodType2.withMillisRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 43200000L + "'", long35 == 43200000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-43199999L) + "'", long38 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test08550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08550");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod5.setPeriod(readableInterval9);
        mutablePeriod5.setWeeks(69);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(432000000L);
        java.lang.String str15 = duration14.toString();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration14);
        mutablePeriod5.setYears((int) (byte) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.Seconds seconds23 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTime dateTime26 = interval22.getEnd();
        org.joda.time.Period period27 = interval22.toPeriod();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT432000S" + "'", str15, "PT432000S");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test08551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08551");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2159965, (-2201246), 75659999, 53832943, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53832943 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08552");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfHalfday();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.LocalDate localDate28 = dateTime16.toLocalDate();
        int int29 = localDate28.size();
        java.lang.String str30 = localDate28.toString();
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDate28, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12-31" + "'", str30, "1969-12-31");
    }

    @Test
    public void test08553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08553");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(2922789, 53786950, 893, 57, 28, 2147483647, (-457070));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08554");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.dayOfYear();
        int int35 = dateTimeField33.getMaximumValue((-26136119955L));
        org.joda.time.DurationField durationField36 = dateTimeField33.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 365 + "'", int35 == 365);
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test08555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08555");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.MutablePeriod mutablePeriod15 = seconds14.toMutablePeriod();
        mutablePeriod15.setYears(59);
        mutablePeriod15.setDays((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours20 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) mutablePeriod15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot convert period to duration as years is not precise in the period P59Y35DT1S");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
    }

    @Test
    public void test08556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08556");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 52);
        org.joda.time.DateTime dateTime3 = dateTime1.withMillis((-1298798110310400001L));
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime1.withMillisOfSecond(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test08557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08557");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        java.util.Locale locale6 = new java.util.Locale("+00:00");
        boolean boolean7 = dateTime2.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.withMillisOfDay(4);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType28, chronology29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime10, periodType28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime10.toMutableDateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        java.lang.String str46 = dateTimeField44.getAsText((long) (-100));
        long long48 = dateTimeField44.remainder((long) 9);
        boolean boolean49 = dateTimeField44.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        long long55 = dateTimeField52.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial56 = null;
        int int57 = dateTimeField52.getMinimumValue(readablePartial56);
        long long60 = dateTimeField52.add(0L, 69);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant68 = instant66.minus(100L);
        org.joda.time.Instant instant70 = instant68.plus((long) 100);
        org.joda.time.Instant instant72 = instant68.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes73 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) instant68);
        org.joda.time.LocalTime localTime74 = dateTime63.toLocalTime();
        int int75 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localTime74);
        java.lang.Object obj76 = null;
        org.joda.time.Instant instant77 = new org.joda.time.Instant(obj76);
        org.joda.time.DateTimeZone dateTimeZone78 = instant77.getZone();
        java.lang.String str79 = dateTimeZone78.toString();
        int int81 = dateTimeZone78.getOffset(1L);
        boolean boolean83 = dateTimeZone78.isStandardOffset(0L);
        java.lang.String str85 = dateTimeZone78.getNameKey((long) 1);
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.lang.String str88 = dateTimeZone78.getName((long) (byte) 10, locale87);
        java.lang.String str89 = locale87.getDisplayVariant();
        java.lang.String str90 = locale87.getCountry();
        java.lang.String str91 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localTime74, locale87);
        long long93 = dateTimeField44.roundHalfFloor(893L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals(locale6.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "11" + "'", str46, "11");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 9L + "'", long48 == 9L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 43200000L + "'", long55 == 43200000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2980800000L + "'", long60 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(minutes73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "UTC" + "'", str85, "UTC");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "11" + "'", str91, "11");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test08558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08558");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period11.minusHours(7);
        org.joda.time.Period period14 = period11.toPeriod();
        org.joda.time.Period period16 = period11.minusSeconds(53878857);
        org.joda.time.Period period18 = period16.withMonths(75659999);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test08559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08559");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder6 = builder0.setExtension('u', "10");
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "P4D");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder6.setVariant("ISOChronology[+00:02]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ISOChronology[+00:02] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08560");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int8 = dateTime2.get(dateTimeFieldType7);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant17, periodType18);
        mutablePeriod19.setMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime11.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime24 = dateTime11.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.monthOfYear();
        org.joda.time.DateTime.Property property26 = dateTime24.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime24.plusHours((int) 'u');
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withFields(readablePartial34);
        org.joda.time.DateTime dateTime37 = dateTime32.withYearOfEra(292278993);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean40 = dateTime29.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime.Property property41 = dateTime2.property(dateTimeFieldType39);
        int int42 = property41.get();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType48, chronology49);
        org.joda.time.PeriodType periodType51 = periodType48.withWeeksRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withWeeksRemoved();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withZoneRetainFields(dateTimeZone57);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        org.joda.time.DateTime dateTime63 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.Duration duration66 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, readableInstant67, periodType68);
        mutablePeriod69.setMonths((int) '4');
        org.joda.time.DateTime dateTime72 = dateTime61.plus((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DateTime dateTime74 = dateTime61.minusWeeks((int) (byte) 1);
        int int75 = dateTime58.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property76 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime78 = dateTime61.withYear(1969);
        org.joda.time.Chronology chronology79 = dateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.year();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.year();
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 100, (long) 'a', periodType53, chronology79);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '#', chronology79);
        boolean boolean85 = property41.equals((java.lang.Object) '#');
        org.joda.time.DateTimeField dateTimeField86 = property41.getField();
        java.lang.String str87 = property41.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Property[clockhourOfDay]" + "'", str87, "Property[clockhourOfDay]");
    }

    @Test
    public void test08561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08561");
        org.joda.time.Period period1 = org.joda.time.Period.months(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Weeks as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08562");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant32);
        boolean boolean34 = instant15.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.toInstant();
        org.joda.time.Chronology chronology36 = instant32.getChronology();
        org.joda.time.Chronology chronology37 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfMinute();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        org.joda.time.format.PeriodPrinter periodPrinter42 = null;
        org.joda.time.format.PeriodParser periodParser43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = new org.joda.time.format.PeriodFormatter(periodPrinter42, periodParser43);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter44.withParseType(periodType45);
        java.util.Locale locale47 = periodFormatter44.getLocale();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = locale48.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter50 = periodFormatter44.withLocale(locale48);
        java.util.Locale locale51 = locale48.stripExtensions();
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = locale41.getDisplayLanguage(locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        long long59 = dateTimeField56.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial60 = null;
        int int61 = dateTimeField56.getMinimumValue(readablePartial60);
        long long64 = dateTimeField56.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField56.getType();
        long long67 = dateTimeField56.remainder(432000000L);
        int int68 = dateTimeField56.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter69 = null;
        org.joda.time.format.PeriodParser periodParser70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = new org.joda.time.format.PeriodFormatter(periodPrinter69, periodParser70);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter73 = periodFormatter71.withParseType(periodType72);
        java.util.Locale locale74 = periodFormatter71.getLocale();
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.lang.String str76 = locale75.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter77 = periodFormatter71.withLocale(locale75);
        org.joda.time.format.PeriodPrinter periodPrinter78 = null;
        org.joda.time.format.PeriodParser periodParser79 = null;
        org.joda.time.format.PeriodFormatter periodFormatter80 = new org.joda.time.format.PeriodFormatter(periodPrinter78, periodParser79);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter82 = periodFormatter80.withParseType(periodType81);
        java.util.Locale locale83 = periodFormatter80.getLocale();
        java.util.Locale locale84 = java.util.Locale.ITALY;
        java.lang.String str85 = locale84.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter86 = periodFormatter80.withLocale(locale84);
        java.util.Locale locale87 = locale84.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter88 = periodFormatter77.withLocale(locale87);
        int int89 = dateTimeField56.getMaximumShortTextLength(locale87);
        java.util.Locale locale90 = locale87.stripExtensions();
        java.lang.String str91 = locale51.getDisplayVariant(locale87);
        // The following exception was thrown during execution in test generation
        try {
            long long92 = dateTimeField38.set((-43200000L), "53746", locale51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53746 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodFormatter46);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(periodFormatter50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Italienisch (Italien)" + "'", str52, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "italiano" + "'", str53, "italiano");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 43200000L + "'", long59 == 43200000L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodFormatter73);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(periodFormatter77);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodFormatter82);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(periodFormatter86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test08563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08563");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Weeks weeks7 = weeks5.minus((int) (byte) -1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
    }

    @Test
    public void test08564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08564");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = property13.getAsText(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap19);
        java.util.Collection<java.lang.String> strCollection21 = null;
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getScript();
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale25 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale36.getScript();
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale36 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getDisplayVariant();
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale42, locale46, locale50, locale52 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale locale57 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Set<java.lang.String> strSet61 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strSet61, filteringMode62);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter(languageRangeList32, (java.util.Collection<java.util.Locale>) localeList55, filteringMode62);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags(languageRangeList20, strCollection21, filteringMode62);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode62.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(strList65);
    }

    @Test
    public void test08565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08565");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours1 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours3 = hours1.multipliedBy(0);
        org.joda.time.Hours hours5 = hours1.dividedBy(69);
        org.joda.time.Hours hours6 = org.joda.time.Hours.MIN_VALUE;
        boolean boolean7 = hours5.isGreaterThan(hours6);
        org.joda.time.Hours hours8 = hours0.plus(hours6);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        int int30 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property31 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime16.withYear(1969);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.minuteOfDay();
        boolean boolean40 = hours6.equals((java.lang.Object) chronology34);
        int int41 = hours6.size();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test08566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08566");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale7.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale11);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Italy");
        java.util.Locale.Builder builder17 = builder14.setLocale(locale16);
        java.util.Locale locale21 = new java.util.Locale("PT0.010S", "2022-02-21T14:54:50.337Z", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder17.setLocale(locale21);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: pt0.010s [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "italy");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale21.toString(), "pt0.010s_2022-02-21T14:54:50.337Z_hi!");
    }

    @Test
    public void test08567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08567");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = periodFormatter2.getLocale();
        boolean boolean7 = periodFormatter2.isParser();
        boolean boolean8 = periodFormatter2.isParser();
        org.joda.time.PeriodType periodType9 = periodFormatter2.getParseType();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(periodType9);
    }

    @Test
    public void test08568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08568");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        long long16 = dateTime2.getMillis();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        int int39 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property40 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime25.withYear(1969);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = durationFieldType17.getField(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime2.toDateTime(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.days();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology43.getZone();
        long long49 = dateTimeZone47.nextTransition((-436320L));
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration55 = duration52.plus((long) (byte) 0);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        boolean boolean60 = dateTime58.isEqual(10L);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType63, chronology64);
        org.joda.time.PeriodType periodType66 = periodType63.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime58, periodType66);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime70 = instant69.toDateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.era();
        org.joda.time.DateTime dateTime72 = dateTime70.withTimeAtStartOfDay();
        org.joda.time.Instant instant73 = dateTime70.toInstant();
        org.joda.time.DateTime dateTime75 = dateTime70.withMillis((long) '4');
        org.joda.time.Minutes minutes76 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Instant instant78 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime79 = instant78.toDateTime();
        org.joda.time.TimeOfDay timeOfDay80 = dateTime79.toTimeOfDay();
        org.joda.time.DateTime dateTime81 = dateTime70.withFields((org.joda.time.ReadablePartial) timeOfDay80);
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime84 = instant83.toDateTime();
        org.joda.time.DateTime.Property property85 = dateTime84.era();
        org.joda.time.DateTime dateTime86 = property85.withMinimumValue();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime86);
        mutablePeriod87.addDays(10);
        boolean boolean90 = dateTimeZone47.equals((java.lang.Object) mutablePeriod87);
        org.joda.time.Period period92 = new org.joda.time.Period(248399910L);
        int int93 = period92.getMonths();
        mutablePeriod87.mergePeriod((org.joda.time.ReadablePeriod) period92);
        mutablePeriod87.setYears(48);
        mutablePeriod87.clear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-436320L) + "'", long49 == (-436320L));
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(minutes76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test08569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08569");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        org.joda.time.Period period13 = mutablePeriod5.toPeriod();
        int int14 = mutablePeriod5.getHours();
        mutablePeriod5.add(69, 69, (int) (byte) 1, (int) (byte) 10, 3, 11, 11, 1);
        mutablePeriod5.addYears(100);
        mutablePeriod5.setHours((int) '4');
        int int28 = mutablePeriod5.getHours();
        mutablePeriod5.clear();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue((-2147483647), (-4320));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2147483647");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
    }

    @Test
    public void test08570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08570");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes1 = org.joda.time.Minutes.parseMinutes("Italienisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Italienisch\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08571");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        boolean boolean13 = interval8.contains((org.joda.time.ReadableInterval) interval12);
        java.lang.String str14 = interval12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = interval12.isBefore((org.joda.time.ReadableInterval) interval22);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod4.copy();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = period30.getFieldTypes();
        int int32 = period30.getMinutes();
        org.joda.time.Period period34 = period30.withDays((int) ' ');
        org.joda.time.Period period36 = period30.plusWeeks(10);
        org.joda.time.PeriodType periodType37 = period30.getPeriodType();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType39 = periodType38.withWeeksRemoved();
        org.joda.time.Period period40 = period30.withPeriodType(periodType38);
        mutablePeriod26.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Weeks weeks42 = period40.toStandardWeeks();
        org.joda.time.Weeks weeks44 = org.joda.time.Weeks.weeks(23);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray49 = period48.getFieldTypes();
        org.joda.time.Period period51 = period48.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Weeks weeks53 = weeks44.minus(weeks52);
        org.joda.time.Weeks weeks55 = weeks44.multipliedBy((-155));
        org.joda.time.DurationFieldType durationFieldType56 = weeks55.getFieldType();
        boolean boolean57 = weeks42.isSupported(durationFieldType56);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str14, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(weeks42);
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test08572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08572");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.dayOfYear();
        org.joda.time.DateTime dateTime4 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval5 = property3.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    public void test08573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08573");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy(292278993);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes17 = minutes15.minus((int) (short) -1);
        boolean boolean18 = minutes14.isGreaterThan(minutes15);
        boolean boolean19 = minutes13.isGreaterThan(minutes15);
        int int20 = minutes15.getMinutes();
        org.joda.time.Minutes minutes22 = minutes15.minus(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2147483648) + "'", int20 == (-2147483648));
        org.junit.Assert.assertNotNull(minutes22);
    }

    @Test
    public void test08574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08574");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder12.setExtension('a', "fr");
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant22 = instant20.minus(100L);
        org.joda.time.Instant instant24 = instant22.plus((long) 100);
        org.joda.time.Instant instant26 = instant22.withMillis((long) (byte) 1);
        org.joda.time.Period period28 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period30 = period28.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = period30.toDurationTo(readableInstant31);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant39 = instant37.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime40 = instant37.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period42 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime40, periodType41);
        org.joda.time.Instant instant43 = instant26.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime48 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.Instant instant49 = dateTime46.toInstant();
        org.joda.time.DateMidnight dateMidnight50 = dateTime46.toDateMidnight();
        int int51 = dateTime46.getHourOfDay();
        org.joda.time.Days days52 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime.Property property53 = dateTime46.centuryOfEra();
        java.util.Locale locale54 = java.util.Locale.US;
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = locale54.getDisplayScript(locale55);
        int int57 = property53.getMaximumTextLength(locale55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        boolean boolean66 = interval61.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology67 = interval65.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.weeks();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.minuteOfDay();
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str72 = dateTimeField69.getAsText((long) 'a', locale71);
        java.lang.String str73 = locale55.getDisplayCountry(locale71);
        java.util.Locale.Builder builder74 = builder18.setLocale(locale71);
        java.util.Locale.Builder builder76 = builder18.setLanguage("");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja__#a-fr");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
        org.junit.Assert.assertNotNull(days52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u7f8e\u570b" + "'", str73, "\u7f8e\u570b");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test08575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08575");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.Seconds seconds22 = org.joda.time.Seconds.ONE;
        boolean boolean23 = seconds21.isLessThan(seconds22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Seconds seconds25 = org.joda.time.Seconds.secondsIn(readableInterval24);
        org.joda.time.Seconds seconds27 = seconds25.plus((int) (byte) -1);
        org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds29 = seconds27.plus(seconds28);
        org.joda.time.Seconds seconds30 = seconds27.negated();
        org.joda.time.Seconds seconds31 = seconds30.negated();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.Seconds seconds33 = org.joda.time.Seconds.secondsIn(readableInterval32);
        org.joda.time.Seconds seconds35 = seconds33.plus((int) (byte) -1);
        org.joda.time.Seconds seconds36 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds37 = seconds35.plus(seconds36);
        org.joda.time.Seconds seconds38 = seconds35.negated();
        org.joda.time.Seconds seconds39 = seconds38.negated();
        org.joda.time.Seconds seconds40 = seconds31.plus(seconds39);
        org.joda.time.Seconds seconds41 = seconds22.plus(seconds39);
        org.joda.time.Seconds seconds43 = seconds22.minus((int) '#');
        org.joda.time.Seconds seconds45 = seconds22.dividedBy(54000);
        org.joda.time.Seconds seconds47 = seconds45.plus(30);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertNotNull(seconds47);
    }

    @Test
    public void test08576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08576");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        java.lang.String str13 = property12.getAsText();
        int int14 = property12.getMaximumValueOverall();
        java.lang.Object obj15 = null;
        org.joda.time.Instant instant16 = new org.joda.time.Instant(obj15);
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = dateTimeZone17.getShortName(100L, locale21);
        java.lang.String str24 = locale21.getScript();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str27 = locale21.getDisplayVariant(locale25);
        java.lang.String str28 = locale21.toLanguageTag();
        java.lang.String str29 = property12.getAsText(locale21);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.withZone(dateTimeZone33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.DateTime dateTime39 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean41 = dateTime37.isSupported(dateTimeFieldType40);
        org.joda.time.DateTime.Property property42 = dateTime32.property(dateTimeFieldType40);
        java.lang.String str43 = property42.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        boolean boolean45 = property42.isLeap();
        java.lang.String str46 = property42.toString();
        boolean boolean47 = locale21.equals((java.lang.Object) property42);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11" + "'", str13, "11");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ja" + "'", str28, "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11" + "'", str29, "11");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "11" + "'", str43, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[hourOfHalfday]" + "'", str46, "Property[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08577");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis(720000L);
        org.joda.time.DateTime dateTime8 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime9 = dateTime8.toLocalTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMillis(78719999);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime15.toGregorianCalendar();
        boolean boolean19 = localTime9.equals((java.lang.Object) gregorianCalendar18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        int int25 = property23.getMaximumValueOverall();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getScript();
        java.lang.String str28 = locale26.getDisplayCountry();
        int int29 = property23.getMaximumShortTextLength(locale26);
        org.joda.time.DateTime dateTime30 = property23.withMaximumValue();
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        boolean boolean36 = dateTime34.isEqual(10L);
        org.joda.time.DateTime dateTime38 = dateTime34.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime40 = dateTime34.plusDays(100);
        org.joda.time.LocalTime localTime41 = dateTime34.toLocalTime();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime31, (org.joda.time.ReadablePartial) localTime41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime31);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test08578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08578");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.minus((int) 'u');
        org.joda.time.Weeks weeks5 = weeks1.plus((int) '#');
        org.joda.time.Weeks weeks7 = weeks1.plus((-2147483647));
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = duration10.toPeriodTo(readableInstant14);
        org.joda.time.Weeks weeks16 = period15.toStandardWeeks();
        int int17 = weeks16.size();
        java.lang.Object obj18 = null;
        boolean boolean19 = weeks16.equals(obj18);
        org.joda.time.Weeks weeks20 = weeks1.minus(weeks16);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        int int26 = property24.getMaximumValueOverall();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale27.getDisplayCountry();
        int int30 = property24.getMaximumShortTextLength(locale27);
        org.joda.time.DateTime dateTime31 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime32 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant36 = instant34.minus(100L);
        java.lang.String str37 = instant36.toString();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = duration40.toPeriodTo(readableInstant44);
        org.joda.time.Duration duration47 = duration40.withMillis((long) (short) 0);
        org.joda.time.Instant instant48 = instant36.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime dateTime50 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration40, 2);
        org.joda.time.DateTime dateTime52 = dateTime50.plus((long) 3);
        int int53 = dateTime50.getSecondOfMinute();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusSeconds(999);
        org.joda.time.Weeks weeks61 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Weeks weeks62 = weeks16.plus(weeks61);
        org.joda.time.MutablePeriod mutablePeriod63 = weeks16.toMutablePeriod();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(weeks20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str37, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 59 + "'", int53 == 59);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(weeks61);
        org.junit.Assert.assertNotNull(weeks62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
    }

    @Test
    public void test08579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08579");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        boolean boolean13 = interval8.contains((org.joda.time.ReadableInterval) interval12);
        java.lang.String str14 = interval12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = interval12.isBefore((org.joda.time.ReadableInterval) interval22);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod4.copy();
        mutablePeriod26.setSeconds((int) (byte) 100);
        mutablePeriod26.setMillis((-10));
        org.joda.time.Duration duration33 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray35 = period34.getFieldTypes();
        org.joda.time.Period period37 = period34.minusYears((int) (byte) 1);
        org.joda.time.Period period39 = period34.plusMonths((int) (byte) 0);
        org.joda.time.Period period41 = period34.withMillis((int) '#');
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType45, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (short) 0, periodType45, chronology48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.minutes();
        int int51 = periodType45.indexOf(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType53 = periodType45.getFieldType((int) (short) 1);
        int int54 = period41.get(durationFieldType53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDayTime();
        int int56 = periodType55.size();
        org.joda.time.PeriodType periodType57 = periodType55.withSecondsRemoved();
        org.joda.time.Period period58 = period41.normalizedStandard(periodType55);
        org.joda.time.Minutes minutes60 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Period period61 = minutes60.toPeriod();
        org.joda.time.DurationFieldType durationFieldType62 = minutes60.getFieldType();
        int int63 = period58.get(durationFieldType62);
        mutablePeriod26.set(durationFieldType62, (-675));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str14, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldTypeArray35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test08580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08580");
        org.joda.time.Hours hours1 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours3 = hours1.minus((int) (short) 10);
        org.joda.time.Hours hours4 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours6 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours8 = hours6.minus((int) (short) 10);
        boolean boolean9 = hours4.isGreaterThan(hours8);
        boolean boolean10 = hours1.isLessThan(hours8);
        org.joda.time.Hours hours11 = hours1.negated();
        org.joda.time.Hours hours12 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours13 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours15 = hours13.multipliedBy(0);
        org.joda.time.Hours hours17 = hours13.dividedBy(69);
        org.joda.time.DurationFieldType durationFieldType19 = hours13.getFieldType((int) (byte) 0);
        boolean boolean20 = hours12.isGreaterThan(hours13);
        org.joda.time.Hours hours21 = org.joda.time.Hours.SEVEN;
        org.joda.time.Hours hours22 = hours13.plus(hours21);
        boolean boolean23 = hours1.isGreaterThan(hours22);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08581");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        int int64 = dateTime2.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 23 + "'", int64 == 23);
    }

    @Test
    public void test08582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08582");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours1 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours2 = hours0.plus(hours1);
        org.joda.time.Hours hours4 = hours0.dividedBy(2);
        org.joda.time.MutablePeriod mutablePeriod5 = hours4.toMutablePeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test08583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08583");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = interval4.isBefore(readableInterval5);
        org.joda.time.Duration duration7 = interval4.toDuration();
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval4);
        long long9 = interval4.toDurationMillis();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800000L + "'", long9 == 604800000L);
    }

    @Test
    public void test08584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08584");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.Period period5 = period1.plusHours(86399);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        long long11 = dateTimeField8.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField8.getMinimumValue(readablePartial12);
        long long16 = dateTimeField8.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField8.getType();
        long long19 = dateTimeField8.remainder(432000000L);
        int int21 = dateTimeField8.getLeapAmount((long) 'u');
        java.lang.Object obj22 = null;
        org.joda.time.Instant instant23 = new org.joda.time.Instant(obj22);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        java.lang.String str25 = dateTimeZone24.toString();
        java.lang.String str27 = dateTimeZone24.getName((long) 10);
        long long30 = dateTimeZone24.convertLocalToUTC((long) (byte) 100, false);
        long long32 = dateTimeZone24.previousTransition(720000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        long long39 = dateTimeField36.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField36.getMinimumValue(readablePartial40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.ReadablePartial readablePartial46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withFields(readablePartial46);
        org.joda.time.DateTime dateTime49 = dateTime47.withMillisOfSecond((int) ' ');
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.format.PeriodPrinter periodPrinter51 = null;
        org.joda.time.format.PeriodParser periodParser52 = null;
        org.joda.time.format.PeriodFormatter periodFormatter53 = new org.joda.time.format.PeriodFormatter(periodPrinter51, periodParser52);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter53.withParseType(periodType54);
        java.util.Locale locale56 = periodFormatter53.getLocale();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter59 = periodFormatter53.withLocale(locale57);
        java.lang.String str60 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localTime50, locale57);
        java.lang.String str61 = dateTimeZone24.getName(1439L, locale57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        long long67 = dateTimeField64.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial68 = null;
        int int69 = dateTimeField64.getMinimumValue(readablePartial68);
        long long72 = dateTimeField64.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField64.getType();
        java.lang.String str75 = dateTimeField64.getAsText((long) 1);
        java.util.Locale locale76 = java.util.Locale.CHINA;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        int int79 = dateTimeField64.getMaximumShortTextLength(locale77);
        java.lang.String str80 = locale77.getISO3Country();
        java.lang.String str81 = locale77.getDisplayLanguage();
        java.lang.String str82 = locale57.getDisplayVariant(locale77);
        java.util.Locale locale83 = java.util.Locale.ITALY;
        java.util.Locale locale87 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str88 = locale83.getDisplayCountry(locale87);
        java.lang.String str89 = locale87.getDisplayVariant();
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.lang.String str91 = locale87.getDisplayVariant(locale90);
        java.lang.String str92 = locale90.toLanguageTag();
        java.util.Locale locale93 = java.util.Locale.TAIWAN;
        boolean boolean94 = locale93.hasExtensions();
        java.lang.String str95 = locale90.getDisplayVariant(locale93);
        java.lang.String str96 = locale77.getDisplayScript(locale90);
        int int97 = dateTimeField8.getMaximumShortTextLength(locale77);
        boolean boolean98 = period1.equals((java.lang.Object) int97);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 43200000L + "'", long11 == 43200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 720000L + "'", long32 == 720000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 43200000L + "'", long39 == 43200000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(periodFormatter59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PM" + "'", str60, "PM");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 43200000L + "'", long67 == 43200000L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AM" + "'", str75, "AM");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "China" + "'", str78, "China");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Deutsch" + "'", str81, "Deutsch");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale87.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Italy" + "'", str88, "Italy");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "en" + "'", str92, "en");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08585");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        long long19 = dateTimeZone17.previousTransition((long) '#');
        int int21 = dateTimeZone17.getOffsetFromLocal((-43199999L));
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTime dateTime26 = interval25.getStart();
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.addToCopy(893);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(292278993L);
        int int33 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test08586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08586");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(59);
        org.joda.time.Period period3 = period1.minusYears((-43));
        org.joda.time.Period period5 = period3.withMonths(35);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08587");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateMidnight6.getDayOfYear();
        boolean boolean8 = dateMidnight6.isAfterNow();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant12 = instant10.minus(100L);
        org.joda.time.Instant instant14 = instant12.plus((long) 100);
        org.joda.time.Instant instant16 = instant12.withMillis((long) (byte) 1);
        org.joda.time.Period period18 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period20 = period18.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationTo(readableInstant21);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant29 = instant27.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period32 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime30, periodType31);
        org.joda.time.Instant instant33 = instant16.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Instant instant34 = instant16.toInstant();
        boolean boolean36 = instant34.isEqual(100L);
        boolean boolean37 = dateMidnight6.isBefore((org.joda.time.ReadableInstant) instant34);
        long long38 = instant34.getMillis();
        org.joda.time.MutableDateTime mutableDateTime39 = instant34.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 365 + "'", int7 == 365);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test08588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08588");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus((long) (byte) 0);
        org.joda.time.Duration duration14 = duration10.toDuration();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTime dateTime35 = dateTime22.minusWeeks((int) (byte) 1);
        int int36 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property37 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime22.withYear(1969);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.centuryOfEra();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration10, chronology40);
        mutablePeriod5.setMinutes((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod5.toMutablePeriod();
        mutablePeriod5.setYears(1857);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutablePeriod47);
    }

    @Test
    public void test08589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08589");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        java.util.GregorianCalendar gregorianCalendar24 = dateTime22.toGregorianCalendar();
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfMonth();
        org.joda.time.Period period27 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period29 = period27.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationTo(readableInstant30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.weekOfWeekyear();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        org.joda.time.DateTime dateTime44 = dateTime36.plus((org.joda.time.ReadableDuration) duration40);
        boolean boolean45 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        long long52 = duration48.getStandardSeconds();
        org.joda.time.Duration duration54 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration48, 10);
        org.joda.time.DateTime dateTime55 = dateTime22.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration54.withMillis(29159999999L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration57);
    }

    @Test
    public void test08590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08590");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTime dateTime65 = dateTime63.minusDays((-59));
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime68 = instant67.toDateTime();
        org.joda.time.DateTime.Property property69 = dateTime68.era();
        org.joda.time.DateTime dateTime70 = property69.withMaximumValue();
        org.joda.time.Instant instant71 = dateTime70.toInstant();
        boolean boolean72 = dateTime65.isAfter((org.joda.time.ReadableInstant) dateTime70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = dateTime65.withYearOfCentury(78719999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 78719999 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test08591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08591");
        org.joda.time.format.PeriodPrinter periodPrinter2 = null;
        org.joda.time.format.PeriodParser periodParser3 = null;
        org.joda.time.format.PeriodFormatter periodFormatter4 = new org.joda.time.format.PeriodFormatter(periodPrinter2, periodParser3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType6 = periodType5.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter4.withParseType(periodType5);
        java.util.Locale locale8 = periodFormatter4.getLocale();
        org.joda.time.PeriodType periodType9 = periodFormatter4.getParseType();
        org.joda.time.PeriodType periodType10 = periodFormatter4.getParseType();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter4.withParseType(periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withYearsRemoved();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration26 = null;
        boolean boolean27 = duration24.isEqual(readableDuration26);
        org.joda.time.Duration duration29 = duration24.minus((long) 1);
        org.joda.time.Duration duration31 = duration29.minus((long) '4');
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration44 = duration41.plus((long) (byte) 0);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        boolean boolean49 = dateTime47.isEqual(10L);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType52, chronology53);
        org.joda.time.PeriodType periodType55 = periodType52.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime47, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration38, periodType55);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime34, periodType58);
        org.joda.time.Duration duration61 = duration29.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int72 = mutablePeriod71.getDays();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        org.joda.time.Interval interval78 = property77.toInterval();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime.Property property81 = dateTime80.yearOfEra();
        org.joda.time.Interval interval82 = property81.toInterval();
        boolean boolean83 = interval78.contains((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Chronology chronology84 = interval82.getChronology();
        mutablePeriod71.setPeriod((long) 'u', (long) 1969, chronology84);
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 100, chronology84);
        org.joda.time.Period period87 = duration61.toPeriod(chronology84);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod(10L, chronology84);
        org.joda.time.DurationField durationField89 = chronology84.halfdays();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.era();
        org.joda.time.DurationField durationField91 = chronology84.weeks();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(27882719L, 2980800000L, periodType17, chronology84);
        org.joda.time.DurationField durationField93 = chronology84.halfdays();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertNull(periodType10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test08592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08592");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test08593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime4.withDate((-10), (-23), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test08594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08594");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = periodFormatter2.getLocale();
        boolean boolean7 = periodFormatter2.isParser();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.Period period10 = org.joda.time.Period.weeks(8);
        org.joda.time.Period period12 = period10.plusYears(364);
        org.joda.time.Period period14 = period12.withWeeks(169);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter2.printTo(stringBuffer8, (org.joda.time.ReadablePeriod) period12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test08595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08595");
        org.joda.time.Period period4 = new org.joda.time.Period(86399999, 86399999, 86399000, 86399000);
        org.joda.time.Period period6 = period4.minusHours(2159965);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period8 = period6.multipliedBy(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 84240034 * 31");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test08596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08596");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Period period9 = interval3.toPeriod();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Weeks weeks12 = weeks10.multipliedBy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = weeks12.getFieldType((-14));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -14");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
    }

    @Test
    public void test08597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08597");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Weeks weeks11 = period3.toStandardWeeks();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = weeks12.getFieldType(0);
        org.joda.time.Period period18 = period3.withField(durationFieldType16, 0);
        org.joda.time.Period period20 = period18.minusHours(179);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test08598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08598");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime8 = dateTime2.plusDays(100);
        org.joda.time.LocalTime localTime9 = dateTime2.toLocalTime();
        org.joda.time.DateTime.Property property10 = dateTime2.dayOfWeek();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Instant instant16 = dateTime13.toInstant();
        org.joda.time.TimeOfDay timeOfDay17 = dateTime13.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = property10.compareTo((org.joda.time.ReadablePartial) timeOfDay17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test08599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08599");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        int int5 = period3.getMinutes();
        org.joda.time.Weeks weeks6 = period3.toStandardWeeks();
        org.joda.time.Weeks weeks8 = weeks6.dividedBy(78719999);
        org.joda.time.DurationFieldType durationFieldType9 = weeks6.getFieldType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test08600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08600");
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.Period period9 = period6.minusYears((int) (byte) 1);
        org.joda.time.Period period11 = period6.plusMonths((int) (byte) 0);
        int int12 = period6.getHours();
        org.joda.time.Period period14 = period6.multipliedBy((int) (byte) 1);
        org.joda.time.Days days15 = period6.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType16 = days15.getFieldType();
        org.joda.time.PeriodType periodType17 = days15.getPeriodType();
        org.joda.time.Period period18 = new org.joda.time.Period((long) (-52), 20995201970L, periodType17);
        org.joda.time.Period period19 = new org.joda.time.Period(7000996460269574L, periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withMinutesRemoved();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test08601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08601");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.addUnicodeLocaleAttribute("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setRegion("PT8H");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: PT8H [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08602");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.DateTime dateTime26 = dateTime24.withSecondOfMinute(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime24.withYearOfEra((-10));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -10 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test08603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08603");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("PeriodType[Millis]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[Millis]\" is malformed at \"eriodType[Millis]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08604");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.Period period5 = period1.minusMonths(1972);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((java.lang.Object) period1);
        mutablePeriod6.setMillis((-2147483646));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08605");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        boolean boolean3 = dateTimeZone2.isFixed();
        java.util.Locale locale6 = new java.util.Locale("+00:00");
        java.lang.String str7 = dateTimeZone2.getName((long) (short) 0, locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals(locale6.toString(), "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test08606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08606");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (byte) -1);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds5 = seconds3.plus(seconds4);
        org.joda.time.DurationFieldType durationFieldType6 = seconds4.getFieldType();
        java.lang.String str7 = seconds4.toString();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT2S" + "'", str7, "PT2S");
    }

    @Test
    public void test08607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08607");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        boolean boolean13 = interval8.contains((org.joda.time.ReadableInterval) interval12);
        java.lang.String str14 = interval12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = interval12.isBefore((org.joda.time.ReadableInterval) interval22);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod4.copy();
        mutablePeriod26.setSeconds((int) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod26.copy();
        mutablePeriod26.addYears(43199999);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str14, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(mutablePeriod29);
    }

    @Test
    public void test08608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08608");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.setMonths(0);
        org.joda.time.PeriodType periodType13 = mutablePeriod5.getPeriodType();
        int int14 = periodType13.size();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test08609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08609");
        org.joda.time.Period period2 = new org.joda.time.Period(0L, (-185542586495999997L));
        int int3 = period2.getYears();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-5879610) + "'", int3 == (-5879610));
    }

    @Test
    public void test08610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08610");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffset(1L);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.TimeZone timeZone11 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08611");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        org.joda.time.MutablePeriod mutablePeriod1 = weeks0.toMutablePeriod();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = interval5.contains((org.joda.time.ReadableInterval) interval9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        boolean boolean20 = interval9.contains((org.joda.time.ReadableInterval) interval14);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod1.setMinutes(120);
        int int24 = mutablePeriod1.getSeconds();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08612");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks11 = weeks7.minus(weeks10);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks16 = weeks12.dividedBy((int) (short) -1);
        boolean boolean17 = weeks7.isLessThan(weeks16);
        org.joda.time.Weeks weeks19 = weeks7.minus(895);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeks(0);
        org.joda.time.Weeks weeks22 = weeks21.negated();
        org.joda.time.Weeks weeks24 = weeks22.multipliedBy(101);
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.TWO;
        org.joda.time.Weeks weeks26 = null;
        org.joda.time.Weeks weeks27 = weeks25.minus(weeks26);
        org.joda.time.Weeks weeks29 = weeks25.plus(23);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = period33.getFieldTypes();
        org.joda.time.Period period36 = period33.minusYears((int) (byte) 1);
        org.joda.time.Period period38 = period33.plusMonths((int) (byte) 0);
        org.joda.time.Period period40 = period33.withMillis((int) '#');
        org.joda.time.Period period42 = period40.minusMinutes((int) 'u');
        org.joda.time.Period period44 = period42.withMillis((int) (byte) 100);
        org.joda.time.Period period46 = period42.withSeconds(86399);
        org.joda.time.Weeks weeks47 = period46.toStandardWeeks();
        org.joda.time.Weeks weeks48 = weeks25.minus(weeks47);
        boolean boolean49 = weeks24.isGreaterThan(weeks48);
        org.joda.time.Weeks weeks50 = weeks7.plus(weeks24);
        org.joda.time.DurationFieldType durationFieldType51 = weeks50.getFieldType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(weeks27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(weeks47);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test08613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08613");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        java.lang.String str6 = duration2.toString();
        org.joda.time.Period period7 = duration2.toPeriod();
        java.lang.String str8 = duration2.toString();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((-36744L));
        boolean boolean11 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.011S" + "'", str6, "PT0.011S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.011S" + "'", str8, "PT0.011S");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08614");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setRegion("0096-12-31T16:15:17.181Z/0097-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 0096-12-31T16:15:17.181Z/0097-01-01T00:00:00.000Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test08615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08615");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        java.lang.String str11 = interval3.toString();
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        long long13 = interval3.getStartMillis();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str9, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531080000L + "'", long10 == 1672531080000L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str11, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(weeks12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1640995080000L + "'", long13 == 1640995080000L);
    }

    @Test
    public void test08616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08616");
        java.io.IOException iOException1 = new java.io.IOException("eng");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: eng" + "'", str2, "java.io.IOException: eng");
    }

    @Test
    public void test08617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08617");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Weeks weeks5 = period3.toStandardWeeks();
        int int6 = period3.getDays();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test08618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08618");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        java.util.Locale locale18 = locale15.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter8.withLocale(locale18);
        java.lang.String str20 = locale18.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = locale18.getUnicodeLocaleType("2022-02-21T15:00:22.966Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-21T15:00:22.966Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
    }

    @Test
    public void test08619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08619");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Period period6 = duration2.toPeriod();
        org.joda.time.Period period7 = period6.toPeriod();
        org.joda.time.Period period9 = period6.plusWeeks((-27349920));
        org.joda.time.Period period11 = period6.plusDays(893);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test08620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08620");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration5 = null;
        boolean boolean6 = duration3.isEqual(readableDuration5);
        org.joda.time.Duration duration8 = duration3.minus((long) 1);
        org.joda.time.Duration duration10 = duration8.minus((long) '4');
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        boolean boolean28 = dateTime26.isEqual(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration17, periodType34);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime13, periodType37);
        org.joda.time.TimeOfDay timeOfDay39 = dateTime13.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = timeOfDay39.toDateTime(readableInstant40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant45 = instant43.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime46 = instant43.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime47 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant48 = instant43.toInstant();
        org.joda.time.Period period50 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period52 = period50.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period52.toDurationTo(readableInstant53);
        org.joda.time.Duration duration57 = duration54.withDurationAdded((long) '#', 0);
        long long58 = duration57.getStandardSeconds();
        org.joda.time.Instant instant59 = instant48.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType64, chronology65);
        org.joda.time.Period period67 = new org.joda.time.Period((long) 11, 0L, periodType64);
        java.lang.String str68 = periodType64.getName();
        org.joda.time.PeriodType periodType69 = periodType64.withMonthsRemoved();
        org.joda.time.Period period70 = duration57.toPeriod(periodType64);
        org.joda.time.Period period71 = new org.joda.time.Period((-2147483648000L), periodType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType73 = periodType64.getFieldType((-2146958051));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2146958051");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-26179201L) + "'", long58 == (-26179201L));
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "YearDay" + "'", str68, "YearDay");
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test08621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08621");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMillis();
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.add((long) 8, chronology15);
        mutablePeriod5.addDays(7);
        org.joda.time.ReadableInterval readableInterval19 = null;
        mutablePeriod5.setPeriod(readableInterval19);
        mutablePeriod5.addWeeks(98);
        mutablePeriod5.setSeconds((-10));
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
    }

    @Test
    public void test08622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08622");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale9.getVariant();
        int int11 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        long long17 = dateTimeField14.add(0L, (long) (short) 1);
        long long20 = dateTimeField14.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale21.getVariant();
        int int23 = dateTimeField14.getMaximumShortTextLength(locale21);
        java.lang.String str24 = locale21.getDisplayLanguage();
        int int25 = dateTimeField2.getMaximumShortTextLength(locale21);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfEra();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        boolean boolean35 = interval30.contains((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Chronology chronology36 = interval34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weeks();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.yearOfEra();
        org.joda.time.format.PeriodPrinter periodPrinter41 = null;
        org.joda.time.format.PeriodParser periodParser42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = new org.joda.time.format.PeriodFormatter(periodPrinter41, periodParser42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter45 = periodFormatter43.withParseType(periodType44);
        java.util.Locale locale46 = periodFormatter43.getLocale();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter49 = periodFormatter43.withLocale(locale47);
        org.joda.time.format.PeriodPrinter periodPrinter50 = null;
        org.joda.time.format.PeriodParser periodParser51 = null;
        org.joda.time.format.PeriodFormatter periodFormatter52 = new org.joda.time.format.PeriodFormatter(periodPrinter50, periodParser51);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter52.withParseType(periodType53);
        java.util.Locale locale55 = periodFormatter52.getLocale();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter58 = periodFormatter52.withLocale(locale56);
        java.util.Locale locale59 = locale56.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter60 = periodFormatter49.withLocale(locale59);
        org.joda.time.PeriodType periodType61 = periodFormatter60.getParseType();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        long long67 = dateTimeField64.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial68 = null;
        int int69 = dateTimeField64.getMinimumValue(readablePartial68);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        int int71 = dateTimeField64.getMaximumTextLength(locale70);
        org.joda.time.format.PeriodFormatter periodFormatter72 = periodFormatter60.withLocale(locale70);
        java.lang.String str73 = dateTimeField39.getAsShortText((-155520000059900L), locale70);
        java.lang.String str74 = dateTimeField2.getAsText((long) 1970, locale70);
        java.lang.String str75 = locale70.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 43200000L + "'", long17 == 43200000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodFormatter45);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(periodFormatter49);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodFormatter54);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(periodFormatter58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter60);
        org.junit.Assert.assertNull(periodType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 43200000L + "'", long67 == 43200000L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(periodFormatter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2960" + "'", str73, "2960");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u4e0a\u5348" + "'", str74, "\u4e0a\u5348");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zh" + "'", str75, "zh");
    }

    @Test
    public void test08623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08623");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = hours0.multipliedBy(0);
        org.joda.time.Hours hours4 = hours0.dividedBy(69);
        org.joda.time.DurationFieldType durationFieldType6 = hours0.getFieldType((int) (byte) 0);
        org.joda.time.Hours hours7 = hours0.negated();
        int int8 = hours7.getHours();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-8) + "'", int8 == (-8));
    }

    @Test
    public void test08624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08624");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("PT3S");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08625");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        boolean boolean6 = instant3.isBeforeNow();
        org.joda.time.DateTime dateTime7 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears((-10));
        org.joda.time.DateTime dateTime11 = dateTime7.plusMonths(432000000);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test08626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08626");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.addMillis((int) (byte) 1);
        mutablePeriod5.setHours(0);
        mutablePeriod5.addWeeks(86399999);
        org.joda.time.Days days17 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        int int19 = days17.get(durationFieldType18);
        org.joda.time.MutablePeriod mutablePeriod20 = days17.toMutablePeriod();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        mutablePeriod20.add((org.joda.time.ReadableInterval) interval24);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval24);
        mutablePeriod5.setYears(9);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test08627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08627");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-172800000L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test08628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08628");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffset(1L);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((long) 365);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean26 = dateTime22.isSupported(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime17.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime29 = dateTime17.toLocalDateTime();
        boolean boolean30 = dateTimeZone12.isLocalDateTimeGap(localDateTime29);
        boolean boolean31 = dateTimeZone2.isLocalDateTimeGap(localDateTime29);
        int int32 = localDateTime29.size();
        java.lang.String str33 = localDateTime29.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDateTime29.getFieldType(111);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 111");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:01:59.999" + "'", str33, "1970-01-01T00:01:59.999");
    }

    @Test
    public void test08629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08629");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant7, periodType8);
        org.joda.time.Days days10 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        int int12 = days10.get(durationFieldType11);
        mutablePeriod9.add(durationFieldType11, 8);
        int int15 = mutablePeriod9.getHours();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        boolean boolean24 = interval19.contains((org.joda.time.ReadableInterval) interval23);
        java.lang.String str25 = interval19.toString();
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval19);
        java.lang.String str27 = interval19.toString();
        java.lang.String str28 = interval19.toString();
        org.joda.time.Duration duration29 = interval19.toDuration();
        boolean boolean30 = duration2.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((java.lang.Object) 141022L);
        boolean boolean33 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration32);
        long long34 = duration29.getStandardMinutes();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str25, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str27, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str28, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 525600L + "'", long34 == 525600L);
    }

    @Test
    public void test08630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08630");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        mutablePeriod5.setWeeks(7);
        int int13 = mutablePeriod5.getMinutes();
        mutablePeriod5.clear();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(27882719L, (-42679977L));
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        mutablePeriod17.add((-1), 2010, 0, (-40944), 100, 214, 2010, 39600000);
        mutablePeriod17.setMillis(133);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08631");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        int int4 = property2.getMaximumValueOverall();
        java.lang.String str5 = property2.getAsText();
        java.lang.String str6 = property2.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yearOfEra" + "'", str6, "yearOfEra");
    }

    @Test
    public void test08632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08632");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale3 = new java.util.Locale("DateTimeField[era]");
        java.lang.String str4 = locale0.getDisplayCountry(locale3);
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "datetimefield[era]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test08633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08633");
        org.joda.time.Period period1 = org.joda.time.Period.millis(970);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08634");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (-9859));
        int int2 = period1.getDays();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test08635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08635");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        long long20 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime15.yearOfEra();
        org.joda.time.DateTime.Property property22 = dateTime15.year();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test08636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08636");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("italiano");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"italiano\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08637");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.withHours(1);
        org.joda.time.Seconds seconds8 = org.joda.time.Seconds.seconds(7);
        org.joda.time.Seconds seconds10 = seconds8.dividedBy(1969);
        org.joda.time.Period period11 = period6.minus((org.joda.time.ReadablePeriod) seconds8);
        int int12 = period11.getMinutes();
        org.joda.time.Period period14 = period11.minusYears(1398041);
        org.joda.time.Period period16 = period14.withWeeks((-27349920));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test08638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08638");
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant5, periodType6);
        mutablePeriod7.setMonths((int) '4');
        org.joda.time.Period period10 = mutablePeriod7.toPeriod();
        mutablePeriod7.setYears((int) (short) -1);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = duration15.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = duration15.toPeriodTo(readableInstant19);
        org.joda.time.Days days21 = duration15.toStandardDays();
        boolean boolean22 = mutablePeriod7.equals((java.lang.Object) days21);
        org.joda.time.Days days23 = org.joda.time.Days.FIVE;
        boolean boolean24 = days21.isLessThan(days23);
        org.joda.time.PeriodType periodType25 = days21.getPeriodType();
        org.joda.time.Days days27 = org.joda.time.Days.days(0);
        org.joda.time.Days days29 = days27.dividedBy((int) (short) 10);
        org.joda.time.Days days30 = days21.plus(days27);
        org.joda.time.MutablePeriod mutablePeriod31 = days27.toMutablePeriod();
        org.joda.time.Days days33 = days27.dividedBy((-292275054));
        org.joda.time.PeriodType periodType34 = days27.getPeriodType();
        org.joda.time.Period period35 = new org.joda.time.Period(181025279999880000L, (long) (short) 100, periodType34);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test08639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08639");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.minus((int) (byte) -1);
        org.joda.time.Minutes minutes9 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus((int) (short) -1);
        boolean boolean13 = minutes9.isGreaterThan(minutes10);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.TWO;
        boolean boolean15 = minutes9.isLessThan(minutes14);
        boolean boolean16 = minutes1.isLessThan(minutes9);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes20 = minutes18.minus((int) (short) -1);
        boolean boolean21 = minutes17.isGreaterThan(minutes18);
        org.joda.time.Minutes minutes22 = null;
        org.joda.time.Minutes minutes23 = minutes18.minus(minutes22);
        org.joda.time.Minutes minutes25 = minutes18.plus((int) (short) 1);
        org.joda.time.Minutes minutes27 = minutes25.plus((int) (short) 1);
        boolean boolean28 = minutes1.isLessThan(minutes27);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Minutes minutes32 = duration31.toStandardMinutes();
        int int33 = minutes32.size();
        int int34 = minutes27.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes32);
        org.joda.time.Minutes minutes36 = minutes32.plus(101);
        org.joda.time.Minutes minutes38 = minutes36.minus(99);
        int int39 = minutes38.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test08640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08640");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("2022");
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("halfdays");
        java.util.Locale.Builder builder7 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.removeUnicodeLocaleAttribute("0096-12-31T16:15:17.181Z/0097-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0096-12-31T16:15:17.181Z/0097-01-01T00:00:00.000Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08641");
        org.joda.time.Period period1 = org.joda.time.Period.millis(2115);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08642");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMonths(59);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus((long) (byte) 0);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        boolean boolean18 = dateTime16.isEqual(10L);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType21, chronology22);
        org.joda.time.PeriodType periodType24 = periodType21.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime16, periodType24);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes29 = minutes27.minus((int) (short) -1);
        boolean boolean30 = minutes26.isGreaterThan(minutes27);
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.TWO;
        boolean boolean32 = minutes26.isLessThan(minutes31);
        org.joda.time.DateTime dateTime33 = dateTime16.plus((org.joda.time.ReadablePeriod) minutes26);
        java.util.Date date34 = dateTime33.toDate();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = dateTime7.withMillis((long) (-52));
        org.joda.time.DateTime dateTime39 = dateTime7.plusMonths((-2147483647));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime7.withEra(16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Wed Dec 26 21:51:59 UTC 2115");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test08643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08643");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.get((long) 'a');
        org.joda.time.DurationField durationField5 = dateTimeField2.getRangeDurationField();
        java.lang.String str6 = dateTimeField2.getName();
        long long8 = dateTimeField2.roundFloor(181025280000000000L);
        java.lang.String str9 = dateTimeField2.getName();
        org.joda.time.DurationField durationField10 = dateTimeField2.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "halfdayOfDay" + "'", str6, "halfdayOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 181025279999880000L + "'", long8 == 181025279999880000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "halfdayOfDay" + "'", str9, "halfdayOfDay");
        org.junit.Assert.assertNull(durationField10);
    }

    @Test
    public void test08644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08644");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ZERO;
        java.lang.String str1 = weeks0.toString();
        org.joda.time.Period period3 = org.joda.time.Period.hours(1969);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray9 = period8.getFieldTypes();
        int int10 = period8.getMinutes();
        org.joda.time.Weeks weeks11 = period8.toStandardWeeks();
        org.joda.time.Weeks weeks13 = weeks11.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks14 = weeks4.plus(weeks13);
        java.lang.String str15 = weeks4.toString();
        org.joda.time.Weeks weeks16 = weeks0.plus(weeks4);
        org.joda.time.MutablePeriod mutablePeriod17 = weeks0.toMutablePeriod();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "P0W" + "'", str1, "P0W");
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldTypeArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P11W" + "'", str15, "P11W");
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(mutablePeriod17);
    }

    @Test
    public void test08645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08645");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Days days3 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days5 = days3.dividedBy((int) (byte) 1);
        org.joda.time.Days days7 = days3.dividedBy((int) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime1.minus((org.joda.time.ReadablePeriod) days7);
        org.joda.time.Period period13 = new org.joda.time.Period(7, 6, 1972, (int) 'a');
        org.joda.time.Weeks weeks14 = period13.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = days7.compareTo((org.joda.time.base.BaseSingleFieldPeriod) weeks14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Days cannot be compared to class org.joda.time.Weeks");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(weeks14);
    }

    @Test
    public void test08646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08646");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.MutableInterval mutableInterval4 = interval3.toMutableInterval();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.MutablePeriod mutablePeriod6 = weeks5.toMutablePeriod();
        org.joda.time.Period period8 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period10 = period8.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period13 = period8.withFieldAdded(durationFieldType11, (int) (short) 100);
        boolean boolean14 = weeks5.isSupported(durationFieldType11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks16 = weeks5.multipliedBy(54056612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 52 * 54056612");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08647");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("English");
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test08648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08648");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.year();
        org.joda.time.DurationField durationField7 = chronology4.centuries();
        long long10 = durationField7.getValueAsLong((long) 43198030, 5453153280000000020L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test08649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08649");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval7.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        boolean boolean18 = interval13.contains((org.joda.time.ReadableInterval) interval17);
        boolean boolean19 = interval7.isBefore((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Days days20 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval7);
        long long21 = interval7.toDurationMillis();
        java.lang.Class<?> wildcardClass22 = interval7.getClass();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str9, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31536000000L + "'", long21 == 31536000000L);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08650");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getScript();
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.Locale locale8 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Set<java.lang.String> strSet17 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strSet17, filteringMode18);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet17);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) strList21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode18.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test08651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08651");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        java.lang.String str5 = dateTimeZone2.getName((long) (short) -1);
        long long8 = dateTimeZone2.convertLocalToUTC((long) 12, false);
        long long11 = dateTimeZone2.adjustOffset((long) (byte) 0, true);
        int int13 = dateTimeZone2.getStandardOffset((-965L));
        long long16 = dateTimeZone2.convertLocalToUTC(128770560000000019L, true);
        long long18 = dateTimeZone2.convertUTCToLocal(1672963800011L);
        long long21 = dateTimeZone2.adjustOffset(0L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 12L + "'", long8 == 12L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 128770560000000019L + "'", long16 == 128770560000000019L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1672963800011L + "'", long18 == 1672963800011L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test08652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08652");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, chronology1);
        org.joda.time.Period period4 = period2.plusHours(7);
        org.joda.time.Period period5 = period4.toPeriod();
        org.joda.time.PeriodType periodType6 = period5.getPeriodType();
        int int7 = period5.getHours();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
    }

    @Test
    public void test08653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08653");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period1.size();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Period period6 = period1.minus(readablePeriod5);
        org.joda.time.Period period8 = period1.minusWeeks(2);
        org.joda.time.Period period10 = period8.withHours(1969);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType12 = period10.getPeriodType();
        java.lang.String str13 = periodType12.getName();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Standard" + "'", str13, "Standard");
    }

    @Test
    public void test08654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08654");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        boolean boolean5 = periodFormatter2.isPrinter();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatter2.getParser();
        boolean boolean7 = periodFormatter2.isParser();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(periodParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test08655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08655");
        org.joda.time.Period period1 = org.joda.time.Period.hours(1969);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period1);
        int int3 = weeks2.getWeeks();
        org.joda.time.Weeks weeks5 = weeks2.plus(7);
        org.joda.time.Weeks weeks7 = weeks5.dividedBy(53957);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
    }

    @Test
    public void test08656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08656");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withMinutesRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((-80243135999980643L), periodType6);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test08657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08657");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.PeriodType periodType9 = minutes8.getPeriodType();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        boolean boolean11 = minutes8.isLessThan(minutes10);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus((int) (short) -1);
        boolean boolean16 = minutes12.isGreaterThan(minutes13);
        org.joda.time.Minutes minutes17 = null;
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        org.joda.time.Minutes minutes20 = minutes13.plus((int) (short) 1);
        org.joda.time.PeriodType periodType21 = minutes20.getPeriodType();
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.TWO;
        boolean boolean23 = minutes20.isLessThan(minutes22);
        org.joda.time.DurationFieldType durationFieldType24 = minutes20.getFieldType();
        boolean boolean25 = minutes8.isLessThan(minutes20);
        org.joda.time.DurationFieldType durationFieldType26 = minutes8.getFieldType();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = period30.getFieldTypes();
        org.joda.time.Period period33 = period30.minusYears((int) (byte) 1);
        org.joda.time.Period period35 = period30.plusMonths((int) (byte) 0);
        org.joda.time.Period period37 = period30.withMillis((int) '#');
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType41, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) 0, periodType41, chronology44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.minutes();
        int int47 = periodType41.indexOf(durationFieldType46);
        org.joda.time.DurationFieldType durationFieldType49 = periodType41.getFieldType((int) (short) 1);
        int int50 = period37.get(durationFieldType49);
        org.joda.time.Period period52 = period37.withWeeks((int) (short) 0);
        org.joda.time.Minutes minutes53 = period37.toStandardMinutes();
        org.joda.time.Minutes minutes54 = minutes8.plus(minutes53);
        int int55 = minutes53.getMinutes();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test08658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08658");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(0);
        org.joda.time.Period period3 = period1.plusWeeks(2);
        org.joda.time.Weeks weeks4 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Weeks weeks6 = weeks4.plus(13);
        org.joda.time.MutablePeriod mutablePeriod7 = weeks6.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test08659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08659");
        org.joda.time.Days days1 = org.joda.time.Days.days(999);
        org.joda.time.Days days3 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant7, periodType8);
        mutablePeriod9.setMonths((int) '4');
        org.joda.time.Period period12 = mutablePeriod9.toPeriod();
        mutablePeriod9.setYears((int) (short) -1);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = duration17.toPeriodTo(readableInstant21);
        org.joda.time.Days days23 = duration17.toStandardDays();
        boolean boolean24 = mutablePeriod9.equals((java.lang.Object) days23);
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        int int27 = days25.get(durationFieldType26);
        boolean boolean28 = days23.isGreaterThan(days25);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant32, periodType33);
        mutablePeriod34.setHours((int) (byte) 100);
        org.joda.time.Days days37 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.minutes();
        int int39 = days37.get(durationFieldType38);
        mutablePeriod34.set(durationFieldType38, (int) 'x');
        int int42 = days25.get(durationFieldType38);
        boolean boolean43 = days3.isGreaterThan(days25);
        org.joda.time.Days days44 = days1.minus(days25);
        org.joda.time.Days days46 = days1.multipliedBy(53958);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(days46);
    }

    @Test
    public void test08660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08660");
        org.joda.time.Days days1 = org.joda.time.Days.days((int) (byte) -1);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test08661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08661");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        boolean boolean6 = periodFormatter2.isParser();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale7);
        java.util.Locale locale9 = periodFormatter8.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter10 = periodFormatter8.getPrinter();
        org.joda.time.format.PeriodParser periodParser11 = periodFormatter8.getParser();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(periodPrinter10);
        org.junit.Assert.assertNull(periodParser11);
    }

    @Test
    public void test08662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08662");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale0.getDisplayCountry(locale5);
        java.lang.String str9 = locale5.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc77c\ubcf8" + "'", str8, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
    }

    @Test
    public void test08663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08663");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-3187209599831L));
    }

    @Test
    public void test08664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08664");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.add(0, 1, (int) (short) -1, 11, 11, 8, 11, (int) (byte) 0);
        mutablePeriod5.setMillis(2);
        mutablePeriod5.setPeriod((-303), 43199999, (-292275054), 895, (-278), 78719999, 214, 2915);
    }

    @Test
    public void test08665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08665");
        org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("PT0S");
        org.joda.time.Hours hours2 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours4 = hours2.multipliedBy(0);
        org.joda.time.Hours hours6 = hours2.dividedBy(69);
        org.joda.time.Hours hours7 = hours2.negated();
        org.joda.time.Hours hours9 = hours7.multipliedBy(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours11 = hours9.plus(hours10);
        boolean boolean12 = hours1.isGreaterThan(hours9);
        org.joda.time.Period period13 = hours1.toPeriod();
        org.joda.time.Hours hours14 = hours1.negated();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(hours14);
    }

    @Test
    public void test08666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08666");
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(8380800000L);
        org.joda.time.Period period12 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period14 = period12.minusMonths((int) (short) 10);
        org.joda.time.Period period16 = period14.withSeconds((int) '4');
        org.joda.time.Period period17 = period16.negated();
        org.joda.time.Period period19 = period17.plusYears(3);
        org.joda.time.Period period21 = period19.withSeconds((int) (byte) 100);
        org.joda.time.Period period23 = period19.minusMonths(0);
        org.joda.time.PeriodType periodType24 = period23.getPeriodType();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) instant10, periodType24);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType29, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) 0, periodType29, chronology32);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (short) 10, periodType35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant39 = instant38.toInstant();
        org.joda.time.DateTime dateTime40 = instant39.toDateTimeISO();
        org.joda.time.Duration duration41 = period36.toDurationFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period46 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period48 = period46.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period48.toDurationTo(readableInstant49);
        org.joda.time.Duration duration53 = duration50.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Period period55 = duration53.toPeriodFrom(readableInstant54);
        org.joda.time.Duration duration56 = duration44.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = duration41.plus((org.joda.time.ReadableDuration) duration44);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant60 = instant10.withDurationAdded((org.joda.time.ReadableDuration) duration44, 86399000);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.yearOfEra();
        org.joda.time.Interval interval73 = property72.toInterval();
        boolean boolean74 = interval69.contains((org.joda.time.ReadableInterval) interval73);
        java.lang.String str75 = interval73.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.yearOfEra();
        org.joda.time.Interval interval83 = property82.toInterval();
        boolean boolean84 = interval79.contains((org.joda.time.ReadableInterval) interval83);
        boolean boolean85 = interval73.isBefore((org.joda.time.ReadableInterval) interval83);
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Chronology chronology87 = interval83.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime89 = instant10.toMutableDateTime(chronology87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime(35, 15, (-2434303), 3911, 895, (-1398041029), chronology87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3911 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02" + "'", str75, "2022-01-01T00:00:00.000+00:02/2023-01-01T00:00:00.000+00:02");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(mutableDateTime89);
    }

    @Test
    public void test08667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08667");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = periodFormatter5.getLocale();
        org.joda.time.PeriodType periodType7 = periodFormatter5.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter5.getPrinter();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNull(periodPrinter8);
    }

    @Test
    public void test08668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08668");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08669");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(59);
        org.joda.time.Period period3 = period1.minusYears((int) (byte) 100);
        int int4 = period3.getYears();
        org.joda.time.Period period6 = period3.withMillis((-27349920));
        org.joda.time.Period period8 = period6.plusSeconds(2022);
        org.joda.time.Period period10 = period6.withMillis(5);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-100) + "'", int4 == (-100));
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test08670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08670");
        java.util.Locale locale1 = new java.util.Locale("0059-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals(locale1.toString(), "0059-12-31t23:59:59.999z");
    }

    @Test
    public void test08671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08671");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str7 = dateTimeZone2.getNameKey(1842739200000L);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        long long10 = dateTimeZone2.nextTransition((-157958265L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-157958265L) + "'", long10 == (-157958265L));
    }

    @Test
    public void test08672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08672");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration27.isEqual(readableDuration29);
        org.joda.time.Duration duration32 = duration27.minus((long) 1);
        org.joda.time.Duration duration34 = duration32.minus((long) '4');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime37, periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime37.toTimeOfDay();
        int[] intArray65 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay63, (long) (-1));
        org.joda.time.DateTimeField dateTimeField66 = chronology21.secondOfMinute();
        long long70 = chronology21.add(12626452497599999L, 3732479956800000L, (-100));
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime71.withDayOfMonth((-2434303));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2434303 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-360621543182400001L) + "'", long70 == (-360621543182400001L));
    }

    @Test
    public void test08673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08673");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.add(0, 1, (int) (short) -1, 11, 11, 8, 11, (int) (byte) 0);
        mutablePeriod5.addHours((-1398041029));
        mutablePeriod5.addSeconds(0);
        int int21 = mutablePeriod5.getYears();
        mutablePeriod5.setMonths(432000000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08674");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period7 = duration6.toPeriod();
        boolean boolean8 = duration2.isEqual((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (-292275054));
        org.joda.time.Duration duration11 = duration2.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration14 = duration11.withDurationAdded(0L, (-292275054));
        java.lang.String str15 = duration11.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT-292275054S" + "'", str15, "PT-292275054S");
    }

    @Test
    public void test08675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08675");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration5 = null;
        boolean boolean6 = duration3.isEqual(readableDuration5);
        org.joda.time.Duration duration8 = duration3.minus((long) 1);
        org.joda.time.Duration duration10 = duration8.minus((long) '4');
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        boolean boolean28 = dateTime26.isEqual(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration17, periodType34);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime13, periodType37);
        org.joda.time.Duration duration40 = duration8.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int51 = mutablePeriod50.getDays();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        boolean boolean62 = interval57.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        mutablePeriod50.setPeriod((long) 'u', (long) 1969, chronology63);
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 100, chronology63);
        org.joda.time.Period period66 = duration40.toPeriod(chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = chronology63.hourOfHalfday();
        org.joda.time.Period period70 = new org.joda.time.Period(2183483647L, chronology63);
        org.joda.time.Period period72 = period70.minusMinutes(0);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test08676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08676");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getMonths();
        mutablePeriod8.setPeriod(893, 992, 53957, 43198030, 133, (-596), 1, 85619999);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test08677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08677");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        java.lang.String str24 = dateTimeField23.getName();
        int int26 = dateTimeField23.getMaximumValue((long) 70);
        int int27 = dateTimeField23.getMinimumValue();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millisOfDay" + "'", str24, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399999 + "'", int26 == 86399999);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test08678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08678");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType13 = periodType12.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale15 = periodFormatter11.getLocale();
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter11.getPrinter();
        org.joda.time.format.PeriodPrinter periodPrinter17 = periodFormatter11.getPrinter();
        java.util.Locale locale18 = java.util.Locale.ITALY;
        org.joda.time.format.PeriodPrinter periodPrinter19 = null;
        org.joda.time.format.PeriodParser periodParser20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = new org.joda.time.format.PeriodFormatter(periodPrinter19, periodParser20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter21.withParseType(periodType22);
        java.util.Locale locale24 = periodFormatter21.getLocale();
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.lang.String str26 = locale25.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter21.withLocale(locale25);
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale18.getDisplayLanguage(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        long long36 = dateTimeField33.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial37 = null;
        int int38 = dateTimeField33.getMinimumValue(readablePartial37);
        long long41 = dateTimeField33.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField33.getType();
        long long44 = dateTimeField33.remainder(432000000L);
        int int45 = dateTimeField33.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter46 = null;
        org.joda.time.format.PeriodParser periodParser47 = null;
        org.joda.time.format.PeriodFormatter periodFormatter48 = new org.joda.time.format.PeriodFormatter(periodPrinter46, periodParser47);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter50 = periodFormatter48.withParseType(periodType49);
        java.util.Locale locale51 = periodFormatter48.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter54 = periodFormatter48.withLocale(locale52);
        org.joda.time.format.PeriodPrinter periodPrinter55 = null;
        org.joda.time.format.PeriodParser periodParser56 = null;
        org.joda.time.format.PeriodFormatter periodFormatter57 = new org.joda.time.format.PeriodFormatter(periodPrinter55, periodParser56);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter59 = periodFormatter57.withParseType(periodType58);
        java.util.Locale locale60 = periodFormatter57.getLocale();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = locale61.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter63 = periodFormatter57.withLocale(locale61);
        java.util.Locale locale64 = locale61.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter65 = periodFormatter54.withLocale(locale64);
        int int66 = dateTimeField33.getMaximumShortTextLength(locale64);
        java.util.Locale locale67 = locale64.stripExtensions();
        java.lang.String str68 = locale28.getDisplayVariant(locale64);
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter11.withLocale(locale28);
        org.joda.time.format.PeriodFormatter periodFormatter70 = periodFormatter2.withLocale(locale28);
        org.joda.time.format.PeriodPrinter periodPrinter71 = periodFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNull(periodPrinter16);
        org.junit.Assert.assertNull(periodPrinter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italian (Italy)" + "'", str29, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "italiano" + "'", str30, "italiano");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 43200000L + "'", long36 == 43200000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodFormatter50);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(periodFormatter54);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodFormatter59);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(periodFormatter63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodFormatter70);
        org.junit.Assert.assertNull(periodPrinter71);
    }

    @Test
    public void test08679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08679");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        int int29 = dateTimeField27.getLeapAmount(2678400000L);
        int int31 = dateTimeField27.getMinimumValue((long) 86399000);
        java.lang.Object obj32 = null;
        org.joda.time.Instant instant33 = new org.joda.time.Instant(obj32);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone34);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = dateTimeZone34.getShortName(100L, locale38);
        java.lang.String str41 = locale38.getDisplayLanguage();
        java.lang.String str42 = locale38.getISO3Language();
        int int43 = dateTimeField27.getMaximumShortTextLength(locale38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        int int47 = property46.getMaximumValue();
        int int48 = property46.getLeapAmount();
        org.joda.time.Interval interval49 = property46.toInterval();
        java.lang.Object obj50 = null;
        org.joda.time.Instant instant51 = new org.joda.time.Instant(obj50);
        org.joda.time.DateTimeZone dateTimeZone52 = instant51.getZone();
        java.lang.String str53 = dateTimeZone52.toString();
        java.lang.String str55 = dateTimeZone52.getName((long) 10);
        java.lang.String str57 = dateTimeZone52.getName((long) 8);
        org.joda.time.format.PeriodPrinter periodPrinter59 = null;
        org.joda.time.format.PeriodParser periodParser60 = null;
        org.joda.time.format.PeriodFormatter periodFormatter61 = new org.joda.time.format.PeriodFormatter(periodPrinter59, periodParser60);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter63 = periodFormatter61.withParseType(periodType62);
        java.util.Locale locale64 = periodFormatter61.getLocale();
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = locale65.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter67 = periodFormatter61.withLocale(locale65);
        org.joda.time.format.PeriodPrinter periodPrinter68 = null;
        org.joda.time.format.PeriodParser periodParser69 = null;
        org.joda.time.format.PeriodFormatter periodFormatter70 = new org.joda.time.format.PeriodFormatter(periodPrinter68, periodParser69);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter72 = periodFormatter70.withParseType(periodType71);
        java.util.Locale locale73 = periodFormatter70.getLocale();
        java.util.Locale locale74 = java.util.Locale.ITALY;
        java.lang.String str75 = locale74.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter76 = periodFormatter70.withLocale(locale74);
        java.util.Locale locale77 = locale74.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter67.withLocale(locale77);
        java.util.Locale locale79 = locale77.stripExtensions();
        java.util.Set<java.lang.Character> charSet80 = locale77.getExtensionKeys();
        java.lang.String str81 = dateTimeZone52.getName((-625L), locale77);
        java.lang.String str82 = locale77.toLanguageTag();
        boolean boolean83 = interval49.equals((java.lang.Object) locale77);
        java.util.Locale locale86 = new java.util.Locale("fra", "1439");
        java.lang.String str87 = locale77.getDisplayVariant(locale86);
        int int88 = dateTimeField27.getMaximumShortTextLength(locale77);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanese" + "'", str41, "Japanese");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "jpn" + "'", str42, "jpn");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodFormatter63);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(periodFormatter67);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodFormatter72);
        org.junit.Assert.assertNull(locale73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(periodFormatter76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "it-IT" + "'", str82, "it-IT");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals(locale86.toString(), "fra_1439");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 11 + "'", int88 == 11);
    }

    @Test
    public void test08680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08680");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        java.lang.String str16 = duration7.toString();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime24.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime37 = dateTime24.minusWeeks((int) (byte) 1);
        int int38 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime39 = dateTime21.toDateTimeISO();
        org.joda.time.Interval interval40 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant44 = instant42.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTimeISO();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.DateTime.Property property49 = dateTime47.weekOfWeekyear();
        boolean boolean50 = mutableDateTime45.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime52 = dateTime47.toDateTime();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.withZoneRetainFields(dateTimeZone58);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTime.Property property63 = dateTime62.era();
        org.joda.time.DateTime dateTime64 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, readableInstant68, periodType69);
        mutablePeriod70.setMonths((int) '4');
        org.joda.time.DateTime dateTime73 = dateTime62.plus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTime dateTime75 = dateTime62.minusWeeks((int) (byte) 1);
        int int76 = dateTime59.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property77 = dateTime62.minuteOfHour();
        org.joda.time.DateTime dateTime79 = dateTime62.withYear(1969);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.dayOfMonth();
        org.joda.time.DurationField durationField82 = chronology80.minutes();
        org.joda.time.DateTime dateTime83 = dateTime54.toDateTime(chronology80);
        org.joda.time.DateTime dateTime85 = dateTime54.plusMillis(6);
        org.joda.time.DateTime.Property property86 = dateTime54.dayOfWeek();
        org.joda.time.DurationField durationField87 = property86.getDurationField();
        org.joda.time.DateTime dateTime89 = property86.addToCopy(97);
        org.joda.time.DateTime.Property property90 = dateTime89.era();
        boolean boolean91 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime89);
        int int92 = dateTime52.getYearOfCentury();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 22 + "'", int92 == 22);
    }

    @Test
    public void test08681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus((int) (short) -1);
        boolean boolean16 = minutes12.isGreaterThan(minutes13);
        org.joda.time.Minutes minutes17 = null;
        org.joda.time.Minutes minutes18 = minutes13.minus(minutes17);
        int int19 = minutes13.getMinutes();
        org.joda.time.DateTime dateTime21 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) minutes13, 19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime11.toDateTime(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.DateTime dateTime29 = dateTime23.withFieldAdded(durationFieldType27, (-100));
        org.joda.time.DateTime dateTime31 = dateTime29.minusYears(98);
        org.joda.time.DateTime dateTime33 = dateTime29.plusMinutes((-11));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        boolean boolean42 = interval37.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.weeks();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.yearOfEra();
        org.joda.time.DateTime dateTime49 = dateTime29.toDateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField50 = chronology43.clockhourOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483648) + "'", int19 == (-2147483648));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test08682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08682");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Instant instant10 = instant3.withDurationAdded((long) '4', (int) 'a');
        org.joda.time.DateTime dateTime11 = instant10.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime12 = instant10.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test08683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08683");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.plus((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType4 = minutes2.getFieldType(0);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int14 = mutablePeriod13.getDays();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        boolean boolean25 = interval20.contains((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        mutablePeriod13.setPeriod((long) 'u', (long) 1969, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.hourOfDay();
        org.joda.time.DurationField durationField30 = durationFieldType4.getField(chronology26);
        java.lang.String str31 = durationField30.toString();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DurationField[minutes]" + "'", str31, "DurationField[minutes]");
    }

    @Test
    public void test08684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08684");
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        mutablePeriod21.setMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime26 = dateTime13.minusWeeks((int) (byte) 1);
        int int27 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property28 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime30 = dateTime13.withYear(1969);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(43199999, 20, 54041, (-278), 895, 22, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -278 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test08685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08685");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.Instant instant7 = instant5.withMillis((long) 1969);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = duration10.toPeriod(chronology11);
        java.lang.String str13 = duration10.toString();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.DateTime.Property property31 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime29.plusHours((int) 'u');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withFields(readablePartial39);
        org.joda.time.DateTime dateTime42 = dateTime37.withYearOfEra(292278993);
        org.joda.time.Minutes minutes43 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime37);
        int int44 = dateTime34.getMonthOfYear();
        org.joda.time.DateTime dateTime45 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period47 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime34, periodType46);
        org.joda.time.Instant instant48 = instant7.minus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Period period51 = minutes50.toPeriod();
        org.joda.time.DurationFieldType durationFieldType52 = minutes50.getFieldType();
        org.joda.time.Minutes minutes54 = minutes50.multipliedBy((int) (byte) 100);
        org.joda.time.Duration duration55 = minutes50.toStandardDuration();
        org.joda.time.Duration duration57 = duration55.plus((-9223309849910399966L));
        boolean boolean58 = duration10.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0.011S" + "'", str13, "PT0.011S");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08686");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime2.withDurationAdded(0L, (int) 'a');
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = period13.getFieldTypes();
        org.joda.time.Period period16 = period13.minusYears((int) (byte) 1);
        org.joda.time.Period period18 = period13.plusMonths((int) (byte) 0);
        int int19 = period13.size();
        org.joda.time.Period period21 = period13.plusYears(100);
        org.joda.time.Period period23 = period13.minusSeconds(292278993);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, readableInstant27, periodType28);
        mutablePeriod29.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.days();
        mutablePeriod29.add(durationFieldType32, 8);
        boolean boolean35 = period13.isSupported(durationFieldType32);
        org.joda.time.DateTime dateTime37 = dateTime2.withFieldAdded(durationFieldType32, (-2147483648));
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = property41.withMinimumValue();
        int int43 = property41.getMaximumValueOverall();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getScript();
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = property41.getMaximumShortTextLength(locale44);
        org.joda.time.DateTime dateTime48 = property41.withMaximumValue();
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime48.getZone();
        int int52 = dateTimeZone50.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone50);
        int int54 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property55 = dateTime53.millisOfDay();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        long long58 = interval56.getEndMillis();
        org.joda.time.Seconds seconds59 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod60 = seconds59.toMutablePeriod();
        org.joda.time.Duration duration61 = seconds59.toStandardDuration();
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime.Property property65 = dateTime64.era();
        org.joda.time.DateTime dateTime66 = dateTime64.withTimeAtStartOfDay();
        org.joda.time.Instant instant67 = dateTime64.toInstant();
        org.joda.time.DateMidnight dateMidnight68 = dateTime64.toDateMidnight();
        int int69 = dateMidnight68.getDayOfYear();
        boolean boolean70 = dateMidnight68.isAfterNow();
        org.joda.time.Instant instant71 = dateMidnight68.toInstant();
        org.joda.time.MutableDateTime mutableDateTime72 = instant71.toMutableDateTime();
        org.joda.time.Interval interval73 = duration61.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Interval interval75 = duration61.toIntervalFrom(readableInstant74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.yearOfEra();
        org.joda.time.Interval interval83 = property82.toInterval();
        boolean boolean84 = interval79.contains((org.joda.time.ReadableInterval) interval83);
        boolean boolean85 = interval75.contains((org.joda.time.ReadableInterval) interval79);
        boolean boolean86 = interval56.overlaps((org.joda.time.ReadableInterval) interval75);
        long long87 = interval75.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645455660310L + "'", long58 == 1645455660310L);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 365 + "'", int69 == 365);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1000L + "'", long87 == 1000L);
    }

    @Test
    public void test08687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08687");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long15 = dateTimeField9.add(1L, (-1));
        int int16 = dateTime2.get(dateTimeField9);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, readableInstant25, periodType26);
        mutablePeriod27.setMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime32 = dateTime19.minusWeeks((int) (byte) 1);
        long long33 = dateTime19.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = durationFieldType34.getField(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime19.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime2.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.millisOfDay();
        org.joda.time.Chronology chronology65 = chronology60.withUTC();
        org.joda.time.DurationField durationField66 = chronology60.halfdays();
        long long68 = durationField66.getValueAsLong(62135596799999L);
        java.lang.String str69 = durationField66.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-43199999L) + "'", long15 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1438323L + "'", long68 == 1438323L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DurationField[halfdays]" + "'", str69, "DurationField[halfdays]");
    }

    @Test
    public void test08688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08688");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType5, chronology6);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 11, 0L, periodType5);
        java.lang.String str9 = periodType5.getName();
        org.joda.time.PeriodType periodType10 = periodType5.withMonthsRemoved();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant19, periodType20);
        mutablePeriod21.setMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime26 = dateTime13.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.monthOfYear();
        org.joda.time.DateTime.Property property28 = dateTime26.weekyear();
        org.joda.time.DateMidnight dateMidnight29 = dateTime26.toDateMidnight();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = dateTime32.isEqual(10L);
        org.joda.time.DateTime dateTime36 = dateTime32.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        long long42 = dateTimeField39.add(0L, (long) (short) 1);
        long long45 = dateTimeField39.add(1L, (-1));
        int int46 = dateTime32.get(dateTimeField39);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, readableInstant55, periodType56);
        mutablePeriod57.setMonths((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime49.plus((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.DateTime dateTime62 = dateTime49.minusWeeks((int) (byte) 1);
        long long63 = dateTime49.getMillis();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime67 = instant66.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.withZoneRetainFields(dateTimeZone68);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime72 = instant71.toDateTime();
        org.joda.time.DateTime.Property property73 = dateTime72.era();
        org.joda.time.DateTime dateTime74 = dateTime72.withTimeAtStartOfDay();
        org.joda.time.Duration duration77 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration77, readableInstant78, periodType79);
        mutablePeriod80.setMonths((int) '4');
        org.joda.time.DateTime dateTime83 = dateTime72.plus((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTime dateTime85 = dateTime72.minusWeeks((int) (byte) 1);
        int int86 = dateTime69.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime.Property property87 = dateTime72.minuteOfHour();
        org.joda.time.DateTime dateTime89 = dateTime72.withYear(1969);
        org.joda.time.Chronology chronology90 = dateTime89.getChronology();
        org.joda.time.DurationField durationField91 = durationFieldType64.getField(chronology90);
        org.joda.time.DateTime dateTime92 = dateTime49.toDateTime(chronology90);
        org.joda.time.DateTime dateTime93 = dateTime32.toDateTime(chronology90);
        org.joda.time.DateTime dateTime94 = dateTime26.withChronology(chronology90);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType10, chronology90);
        org.joda.time.PeriodType periodType96 = periodType10.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "YearDay" + "'", str9, "YearDay");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 43200000L + "'", long42 == 43200000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-43199999L) + "'", long45 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test08689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08689");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology52.months();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int[] intArray65 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay63, (long) 86399);
        long long69 = chronology52.add(0L, 86400467L, (int) 'a');
        org.joda.time.DateTimeField dateTimeField70 = chronology52.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology52.hourOfHalfday();
        long long73 = dateTimeField71.roundHalfCeiling(1512000000L);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 26, 399]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 8380845299L + "'", long69 == 8380845299L);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1512000000L + "'", long73 == 1512000000L);
    }

    @Test
    public void test08690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08690");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset((long) 365);
        java.lang.String str5 = dateTimeZone1.getName((long) (byte) 1);
        long long8 = dateTimeZone1.convertLocalToUTC(38716L, false);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        int int14 = dateTimeZone11.getOffset(1L);
        boolean boolean16 = dateTimeZone11.isStandardOffset(0L);
        java.lang.String str18 = dateTimeZone11.getNameKey((long) 1);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone11);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset((long) 365);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.withZone(dateTimeZone27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean35 = dateTime31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime.Property property36 = dateTime26.property(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime26.getZone();
        org.joda.time.LocalDateTime localDateTime38 = dateTime26.toLocalDateTime();
        boolean boolean39 = dateTimeZone21.isLocalDateTimeGap(localDateTime38);
        boolean boolean40 = dateTimeZone11.isLocalDateTimeGap(localDateTime38);
        int int41 = localDateTime38.size();
        boolean boolean42 = dateTimeZone1.isLocalDateTimeGap(localDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localDateTime38.getValue(58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 58");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38716L + "'", long8 == 38716L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08691");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1398041029));
        org.joda.time.Period period3 = period1.withMonths((-303));
        int int4 = period3.getMillis();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test08692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08692");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-1));
        org.joda.time.Weeks weeks3 = weeks1.multipliedBy(0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
    }

    @Test
    public void test08693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08693");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.plus(4190400000L);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((long) (short) 1);
        org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeks(23);
        org.joda.time.Weeks weeks17 = weeks15.multipliedBy((-10));
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) weeks15);
        org.joda.time.Weeks weeks20 = weeks15.dividedBy((-400077));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(weeks20);
    }

    @Test
    public void test08694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08694");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration10 = duration2.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Duration duration11 = duration2.toDuration();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime27 = dateTime14.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        org.joda.time.DateTime.Property property29 = dateTime27.weekyear();
        java.lang.Object obj30 = null;
        org.joda.time.Instant instant31 = new org.joda.time.Instant(obj30);
        org.joda.time.DateTimeZone dateTimeZone32 = instant31.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        java.lang.String str35 = dateTimeZone32.getName((long) 10);
        java.lang.String str37 = dateTimeZone32.getName((long) 8);
        int int39 = dateTimeZone32.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime27.withZone(dateTimeZone32);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType42 = periodType41.withMonthsRemoved();
        java.lang.String str43 = periodType42.getName();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime48 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.Instant instant49 = dateTime46.toInstant();
        boolean boolean50 = periodType42.equals((java.lang.Object) dateTime46);
        org.joda.time.DateTime.Property property51 = dateTime46.millisOfSecond();
        boolean boolean52 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Interval interval53 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str54 = interval53.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Millis" + "'", str43, "Millis");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str54, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test08695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08695");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Weeks weeks11 = period3.toStandardWeeks();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime.Property property15 = dateTime13.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime13.plusMonths((-596));
        org.joda.time.Duration duration19 = period3.toDurationFrom((org.joda.time.ReadableInstant) dateTime18);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        boolean boolean25 = dateTimeZone22.isStandardOffset((long) '4');
        boolean boolean26 = dateTimeZone22.isFixed();
        long long28 = dateTimeZone22.convertUTCToLocal(3599999L);
        java.lang.String str30 = dateTimeZone22.getNameKey((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime18.toMutableDateTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3599999L + "'", long28 == 3599999L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test08696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08696");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setHours((int) (byte) 100);
        mutablePeriod5.addSeconds((-4320));
    }

    @Test
    public void test08697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08697");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.plusHours((int) 'u');
        org.joda.time.DateTime.Property property21 = dateTime15.weekOfWeekyear();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.withZone(dateTimeZone25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean33 = dateTime29.isSupported(dateTimeFieldType32);
        org.joda.time.DateTime.Property property34 = dateTime24.property(dateTimeFieldType32);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZone(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean46 = dateTime42.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime.Property property47 = dateTime37.property(dateTimeFieldType45);
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str53 = locale48.getDisplayCountry(locale52);
        java.lang.String str54 = locale52.getISO3Language();
        int int55 = property47.getMaximumShortTextLength(locale52);
        java.util.Locale locale58 = new java.util.Locale("hourOfHalfday", "YearMonthDayTime");
        java.lang.String str59 = locale52.getDisplayName(locale58);
        boolean boolean60 = dateTime24.equals((java.lang.Object) locale52);
        java.lang.String str61 = property21.getAsShortText(locale52);
        org.joda.time.Duration duration64 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period65 = duration64.toPeriod();
        org.joda.time.Duration duration67 = duration64.plus((long) (byte) 0);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime70 = instant69.toDateTime();
        boolean boolean72 = dateTime70.isEqual(10L);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType75, chronology76);
        org.joda.time.PeriodType periodType78 = periodType75.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime70, periodType78);
        org.joda.time.Instant instant81 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime82 = instant81.toDateTime();
        org.joda.time.DateTime.Property property83 = dateTime82.era();
        org.joda.time.DateTime dateTime84 = dateTime82.withTimeAtStartOfDay();
        org.joda.time.Instant instant85 = dateTime82.toInstant();
        org.joda.time.DateTime dateTime87 = dateTime82.withMillis((long) '4');
        org.joda.time.Minutes minutes88 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime90 = dateTime82.minusMillis((-1));
        int int91 = dateTime90.getYear();
        org.joda.time.Instant instant92 = dateTime90.toInstant();
        long long93 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Italy" + "'", str53, "Italy");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals(locale58.toString(), "hourofhalfday_YEARMONTHDAYTIME");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "HI! (hi!)" + "'", str59, "HI! (hi!)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "52" + "'", str61, "52");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(minutes88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1970 + "'", int91 == 1970);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
    }

    @Test
    public void test08698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08698");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = org.joda.time.Duration.parse("PT432000S");
        org.joda.time.Duration duration6 = duration5.toDuration();
        org.joda.time.Duration duration7 = duration2.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.joda.time.DateTime.Property property25 = dateTime23.weekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateTime23.toDateMidnight();
        org.joda.time.DateTime dateTime28 = dateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.Interval interval29 = duration6.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        long long30 = interval29.getStartMillis();
        org.joda.time.Duration duration31 = interval29.toDuration();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1123199900L) + "'", long30 == (-1123199900L));
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test08699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08699");
        org.joda.time.Duration duration2 = org.joda.time.Duration.parse("PT432000S");
        org.joda.time.Duration duration3 = duration2.toDuration();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes7 = minutes5.minus((int) (short) -1);
        boolean boolean8 = minutes4.isGreaterThan(minutes5);
        org.joda.time.Minutes minutes9 = null;
        org.joda.time.Minutes minutes10 = minutes5.minus(minutes9);
        org.joda.time.Minutes minutes12 = minutes5.plus((int) (short) 1);
        org.joda.time.Minutes minutes14 = minutes12.plus((int) (short) 1);
        org.joda.time.Duration duration15 = minutes14.toStandardDuration();
        long long16 = duration15.getMillis();
        boolean boolean17 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        boolean boolean28 = interval23.contains((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weeks();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.centuries();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 97, 0L, chronology29);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = period37.getFieldTypes();
        org.joda.time.Period period40 = period37.withHours(1);
        int int41 = period40.getDays();
        int[] intArray44 = chronology29.get((org.joda.time.ReadablePeriod) period40, 4190400000L, (long) 1);
        org.joda.time.Period period45 = duration15.toPeriod(chronology29);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((-101L), chronology29);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = chronology29.add(31535999999L, (-49509144302257978L), 248400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -49509144302257978 * 248400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-128849018760000L) + "'", long16 == (-128849018760000L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, -1, -2, -3, -11, -59, -59, -999]");
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test08700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08700");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((-7152L), 4);
        org.joda.time.LocalTime localTime8 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime4.weekOfWeekyear();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes13 = minutes11.minus((int) (short) -1);
        boolean boolean14 = minutes10.isGreaterThan(minutes11);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.TWO;
        boolean boolean16 = minutes10.isLessThan(minutes15);
        org.joda.time.Minutes minutes18 = minutes10.plus((int) 'a');
        boolean boolean19 = dateTime4.equals((java.lang.Object) minutes18);
        org.joda.time.Duration duration20 = minutes18.toStandardDuration();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test08701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08701");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.DateTime dateTime27 = dateTime25.withSecondOfMinute(1);
        java.lang.Object obj28 = null;
        org.joda.time.Instant instant29 = new org.joda.time.Instant(obj28);
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        java.lang.String str33 = dateTimeZone30.getName((long) 10);
        java.lang.String str35 = dateTimeZone30.getName((long) 8);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = dateTimeZone30.getName((long) 1969, locale37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime25.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int45 = dateTimeField43.get((long) 'a');
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = property50.withMinimumValue();
        int int52 = property50.getMaximumValueOverall();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = locale53.getScript();
        java.lang.String str55 = locale53.getDisplayCountry();
        int int56 = property50.getMaximumShortTextLength(locale53);
        java.util.Locale locale60 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str61 = locale60.toLanguageTag();
        java.lang.String str62 = property50.getAsText(locale60);
        java.lang.String str63 = dateTimeField43.getAsShortText(97L, locale60);
        java.lang.String str64 = dateTimeZone30.getShortName((-42679977L), locale60);
        long long66 = dateTimeZone30.nextTransition((long) 45);
        long long68 = dateTimeZone30.convertUTCToLocal(9223372036854775807L);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-115706875723198030L), dateTimeZone30);
        long long71 = dateTimeZone30.convertUTCToLocal(2796082055L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertEquals(locale60.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "und" + "'", str61, "und");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AD" + "'", str62, "AD");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "AM" + "'", str63, "AM");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 45L + "'", long66 == 45L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 9223372036854775807L + "'", long68 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2796082055L + "'", long71 == 2796082055L);
    }

    @Test
    public void test08702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08702");
        org.joda.time.Days days1 = org.joda.time.Days.days(0);
        org.joda.time.Days days3 = days1.dividedBy((int) (short) 10);
        org.joda.time.Duration duration4 = days1.toStandardDuration();
        org.joda.time.Days days6 = days1.dividedBy(69);
        org.joda.time.Days days8 = org.joda.time.Days.days(999);
        org.joda.time.Days days10 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.Period period19 = mutablePeriod16.toPeriod();
        mutablePeriod16.setYears((int) (short) -1);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration27 = duration24.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = duration24.toPeriodTo(readableInstant28);
        org.joda.time.Days days30 = duration24.toStandardDays();
        boolean boolean31 = mutablePeriod16.equals((java.lang.Object) days30);
        org.joda.time.Days days32 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.minutes();
        int int34 = days32.get(durationFieldType33);
        boolean boolean35 = days30.isGreaterThan(days32);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setHours((int) (byte) 100);
        org.joda.time.Days days44 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        int int46 = days44.get(durationFieldType45);
        mutablePeriod41.set(durationFieldType45, (int) 'x');
        int int49 = days32.get(durationFieldType45);
        boolean boolean50 = days10.isGreaterThan(days32);
        org.joda.time.Days days51 = days8.minus(days32);
        org.joda.time.Days days53 = days51.dividedBy((-303));
        org.joda.time.Days days54 = days1.plus(days51);
        java.lang.String str55 = days1.toString();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(days30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(days51);
        org.junit.Assert.assertNotNull(days53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "P0D" + "'", str55, "P0D");
    }

    @Test
    public void test08703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08703");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        mutablePeriod5.addYears(2);
        mutablePeriod5.addMonths(23);
        mutablePeriod5.addMillis(0);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod5.toMutablePeriod();
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = period19.getFieldTypes();
        org.joda.time.Period period22 = period19.minusYears((int) (byte) 1);
        org.joda.time.Period period24 = period19.plusMonths((int) (byte) 0);
        int int25 = period19.size();
        org.joda.time.Period period27 = period19.plusYears(100);
        org.joda.time.Period period29 = period19.minusSeconds(292278993);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        mutablePeriod35.add(durationFieldType38, 8);
        boolean boolean41 = period19.isSupported(durationFieldType38);
        mutablePeriod15.set(durationFieldType38, 9);
        org.joda.time.MutablePeriod mutablePeriod44 = mutablePeriod15.toMutablePeriod();
        mutablePeriod15.add((int) 'u', 86399999, (-546), 358, 78719999, 97, (int) (short) 1, 1073741825);
        mutablePeriod15.setPeriod((long) 898);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutablePeriod44);
    }

    @Test
    public void test08704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08704");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        mutablePeriod5.add(durationFieldType8, 8);
        mutablePeriod5.addHours(7);
        org.joda.time.Period period14 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period16 = period14.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationTo(readableInstant17);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) '#', 0);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) ' ');
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = duration26.plus((long) (byte) 0);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        boolean boolean34 = dateTime32.isEqual(10L);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType37, chronology38);
        org.joda.time.PeriodType periodType40 = periodType37.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime32, periodType40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Instant instant47 = dateTime44.toInstant();
        org.joda.time.DateTime dateTime49 = dateTime44.withMillis((long) '4');
        org.joda.time.Minutes minutes50 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime44);
        int int51 = dateTime44.getYear();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration57 = duration54.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Period period59 = duration54.toPeriodTo(readableInstant58);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant63 = instant61.minus(100L);
        java.lang.String str64 = instant63.toString();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Duration duration70 = duration67.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Period period72 = duration67.toPeriodTo(readableInstant71);
        org.joda.time.Duration duration75 = duration67.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType78, chronology79);
        org.joda.time.PeriodType periodType81 = periodType78.withWeeksRemoved();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration75.toPeriod(periodType81, chronology82);
        org.joda.time.Period period84 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) instant63, periodType81);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime44, periodType81);
        int int86 = duration21.compareTo((org.joda.time.ReadableDuration) duration23);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant89 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime90 = instant89.toDateTime();
        org.joda.time.TimeOfDay timeOfDay91 = dateTime90.toTimeOfDay();
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((java.lang.Object) dateTime90);
        org.joda.time.DateTime dateTime93 = dateTime90.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property94 = dateTime90.secondOfDay();
        org.joda.time.DateTime dateTime96 = dateTime90.withYearOfCentury(0);
        org.joda.time.Duration duration97 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(minutes50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1969 + "'", int51 == 1969);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str64, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(duration97);
    }

    @Test
    public void test08705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08705");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes19 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes21 = minutes19.minus((int) (short) -1);
        boolean boolean22 = minutes18.isGreaterThan(minutes19);
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.TWO;
        boolean boolean24 = minutes18.isLessThan(minutes23);
        org.joda.time.DateTime dateTime25 = dateTime8.plus((org.joda.time.ReadablePeriod) minutes18);
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DurationField durationField28 = property27.getLeapDurationField();
        int int29 = property27.get();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant38, periodType39);
        mutablePeriod40.setMonths((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime32.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTime dateTime45 = dateTime32.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.monthOfYear();
        org.joda.time.DateTime dateTime48 = dateTime45.minus(0L);
        int int49 = property27.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08706");
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        int int6 = dateTimeZone3.getOffset(1L);
        boolean boolean8 = dateTimeZone3.isStandardOffset(0L);
        java.lang.String str10 = dateTimeZone3.getNameKey((long) 1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.Period period14 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period16 = period14.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationTo(readableInstant17);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant25 = instant23.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime26 = instant23.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime26, periodType27);
        org.joda.time.Minutes minutes29 = duration21.toStandardMinutes();
        org.joda.time.DateTime dateTime30 = dateTime12.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) dateTime12, dateTimeZone31);
        int int33 = dateTime32.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.DateTime.Property property38 = dateTime32.property(dateTimeFieldType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int43 = dateTimeField41.get((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        long long49 = dateTimeField46.add(0L, (long) (short) 1);
        long long51 = dateTimeField46.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant59 = instant57.minus(100L);
        org.joda.time.Instant instant61 = instant59.plus((long) 100);
        org.joda.time.Instant instant63 = instant59.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes64 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) instant59);
        org.joda.time.LocalTime localTime65 = dateTime54.toLocalTime();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, readableInstant70, periodType71);
        mutablePeriod72.setMonths((int) '4');
        org.joda.time.Period period75 = mutablePeriod72.toPeriod();
        int[] intArray76 = period75.getValues();
        int[] intArray78 = dateTimeField46.addWrapField((org.joda.time.ReadablePartial) localTime65, 0, intArray76, 3);
        int int79 = localTime65.size();
        int int80 = dateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localTime65);
        java.lang.String str81 = localTime65.toString();
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime84 = instant83.toDateTime();
        org.joda.time.DateTime.Property property85 = dateTime84.era();
        org.joda.time.DateTime dateTime86 = dateTime84.withTimeAtStartOfDay();
        org.joda.time.Instant instant87 = dateTime84.toInstant();
        org.joda.time.DateMidnight dateMidnight88 = dateTime84.toDateMidnight();
        int int89 = dateTime84.getEra();
        org.joda.time.Chronology chronology90 = dateTime84.getChronology();
        org.joda.time.LocalTime localTime91 = dateTime84.toLocalTime();
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime65, (org.joda.time.ReadablePartial) localTime91);
        int int93 = property38.compareTo((org.joda.time.ReadablePartial) localTime91);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 43200000L + "'", long49 == 43200000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "23:59:59.999" + "'", str81, "23:59:59.999");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test08707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08707");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        int int23 = mutablePeriod5.getMillis();
        mutablePeriod5.setPeriod((long) (byte) 10);
        mutablePeriod5.addSeconds(100);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration30.toPeriodTo(readableInstant34);
        org.joda.time.Duration duration37 = duration30.withMillis((long) (short) 0);
        java.lang.String str38 = duration37.toString();
        org.joda.time.Duration duration39 = duration37.toDuration();
        long long40 = duration37.getMillis();
        mutablePeriod5.add((org.joda.time.ReadableDuration) duration37);
        mutablePeriod5.setDays((int) 'x');
        mutablePeriod5.setPeriod((-11), 23, (-546), 992, (-2201246), 53786950, (-52), 86302999);
        mutablePeriod5.addSeconds(970);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test08708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08708");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Days days3 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days5 = days3.dividedBy((int) (byte) 1);
        org.joda.time.Days days7 = days3.dividedBy((int) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime1.minus((org.joda.time.ReadablePeriod) days7);
        org.joda.time.Days days9 = org.joda.time.Days.FIVE;
        boolean boolean10 = days7.isGreaterThan(days9);
        org.joda.time.Duration duration11 = days7.toStandardDuration();
        org.joda.time.Days days13 = days7.dividedBy((-155));
        org.joda.time.Days days14 = days13.negated();
        org.joda.time.Period period16 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period18 = period16.minusMonths((int) (short) 10);
        org.joda.time.Period period20 = period16.minusMonths(1972);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) period16);
        org.joda.time.Hours hours22 = period16.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = days13.compareTo((org.joda.time.base.BaseSingleFieldPeriod) hours22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: class org.joda.time.Days cannot be compared to class org.joda.time.Hours");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(hours22);
    }

    @Test
    public void test08709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08709");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        int int23 = mutablePeriod5.getMillis();
        mutablePeriod5.addSeconds(1970);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, readableInstant29, periodType30);
        mutablePeriod31.addDays((int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.days();
        mutablePeriod31.add(durationFieldType34, 8);
        java.lang.String str37 = durationFieldType34.toString();
        java.lang.String str38 = durationFieldType34.getName();
        java.lang.String str39 = durationFieldType34.getName();
        mutablePeriod5.add(durationFieldType34, 35);
        mutablePeriod5.add((int) 'x', 4, (-52), 39, (-596), 141012, 162060000, 53958);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "days" + "'", str37, "days");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "days" + "'", str38, "days");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "days" + "'", str39, "days");
    }

    @Test
    public void test08710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08710");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        boolean boolean12 = dateTime10.isEqual(10L);
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekOfWeekyear(8);
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Minutes minutes17 = minutes15.minus((-675));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test08711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08711");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears(11);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime17.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Days days22 = org.joda.time.Days.days(999);
        org.joda.time.Days days24 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant28, periodType29);
        mutablePeriod30.setMonths((int) '4');
        org.joda.time.Period period33 = mutablePeriod30.toPeriod();
        mutablePeriod30.setYears((int) (short) -1);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = duration38.toPeriodTo(readableInstant42);
        org.joda.time.Days days44 = duration38.toStandardDays();
        boolean boolean45 = mutablePeriod30.equals((java.lang.Object) days44);
        org.joda.time.Days days46 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.minutes();
        int int48 = days46.get(durationFieldType47);
        boolean boolean49 = days44.isGreaterThan(days46);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, readableInstant53, periodType54);
        mutablePeriod55.setHours((int) (byte) 100);
        org.joda.time.Days days58 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.minutes();
        int int60 = days58.get(durationFieldType59);
        mutablePeriod55.set(durationFieldType59, (int) 'x');
        int int63 = days46.get(durationFieldType59);
        boolean boolean64 = days24.isGreaterThan(days46);
        org.joda.time.Days days65 = days22.minus(days46);
        org.joda.time.Duration duration66 = days22.toStandardDuration();
        org.joda.time.DateTime dateTime67 = dateTime20.plus((org.joda.time.ReadableDuration) duration66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = dateTime67.withDayOfMonth((-9859));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -9859 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(days44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(days65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test08712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08712");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        java.lang.String str6 = duration2.toString();
        org.joda.time.Seconds seconds7 = duration2.toStandardSeconds();
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        int int10 = seconds7.getValue(0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.011S" + "'", str6, "PT0.011S");
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08713");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getEra();
        org.joda.time.Chronology chronology8 = dateTime2.getChronology();
        org.joda.time.DateTime.Property property9 = dateTime2.dayOfMonth();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.DateTime dateTime11 = property9.getDateTime();
        java.lang.String str12 = property9.getAsString();
        org.joda.time.DateTime dateTime13 = property9.roundHalfEvenCopy();
        int int14 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "31" + "'", str12, "31");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
    }

    @Test
    public void test08714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08714");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.monthOfYear();
        java.util.Locale locale69 = java.util.Locale.US;
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale69.getDisplayScript(locale70);
        java.lang.String str72 = dateTimeField67.getAsShortText(432000000L, locale70);
        int int74 = dateTimeField67.getMaximumValue((long) 111);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Jan" + "'", str72, "Jan");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 12 + "'", int74 == 12);
    }

    @Test
    public void test08715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08715");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = duration9.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = duration9.toPeriodTo(readableInstant13);
        org.joda.time.Duration duration17 = duration9.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.DateTime dateTime20 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration17, 23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime2.withSecondOfMinute((-8));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -8 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test08716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08716");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period2.minusMinutes(4);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDayTime();
        int int11 = periodType10.size();
        org.joda.time.Period period12 = period2.withPeriodType(periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withMinutesRemoved();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test08717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08717");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationTo(readableInstant4);
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) '#', 0);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = duration11.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = duration11.toPeriodTo(readableInstant15);
        org.joda.time.Weeks weeks17 = period16.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = period16.get(durationFieldType18);
        int int20 = period16.getWeeks();
        org.joda.time.Duration duration21 = period16.toStandardDuration();
        int int22 = duration5.compareTo((org.joda.time.ReadableDuration) duration21);
        long long23 = duration21.getMillis();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test08718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08718");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.PeriodType periodType9 = minutes8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test08719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08719");
        org.joda.time.Duration duration4 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, readableInstant5, periodType6);
        org.joda.time.Days days8 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.minutes();
        int int10 = days8.get(durationFieldType9);
        mutablePeriod7.add(durationFieldType9, 8);
        int int13 = mutablePeriod7.getHours();
        mutablePeriod7.addMillis(10);
        mutablePeriod7.setSeconds((int) (short) -1);
        int int18 = mutablePeriod7.getMinutes();
        mutablePeriod7.setPeriod(37868342400000L);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        org.joda.time.Days days27 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        int int29 = days27.get(durationFieldType28);
        mutablePeriod26.add(durationFieldType28, 8);
        int int32 = mutablePeriod26.getHours();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        java.lang.String str42 = interval36.toString();
        mutablePeriod26.add((org.joda.time.ReadableInterval) interval36);
        java.lang.String str44 = interval36.toString();
        long long45 = interval36.getEndMillis();
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Chronology chronology47 = interval36.getChronology();
        org.joda.time.Period period48 = new org.joda.time.Period(1672531078830L, (-2785576663L), chronology47);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str42, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str44, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1672531200000L + "'", long45 == 1672531200000L);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test08720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08720");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval15.toString();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval15);
        java.lang.String str23 = interval15.toString();
        java.lang.String str24 = interval15.toString();
        org.joda.time.DateTime dateTime25 = interval15.getEnd();
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis(0L);
        org.joda.time.DateTime dateTime29 = dateTime25.plus(181025280000000000L);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime25.toGregorianCalendar();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str23, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str24, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
    }

    @Test
    public void test08721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08721");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period2.plusMonths(1969);
        org.joda.time.Period period11 = period9.withMinutes(2);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        org.joda.time.Days days18 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        int int20 = days18.get(durationFieldType19);
        mutablePeriod17.add(durationFieldType19, 8);
        java.lang.String str23 = durationFieldType19.toString();
        boolean boolean24 = period9.isSupported(durationFieldType19);
        int int25 = period9.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = period9.getValue((-400077));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -400077");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(days18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minutes" + "'", str23, "minutes");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test08722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08722");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant6 = dateTime4.toInstant();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant6, readableInstant7);
        org.joda.time.Days days9 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.minutes();
        int int11 = days9.get(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = days9.getFieldType();
        mutablePeriod8.set(durationFieldType12, (-292275054));
        mutablePeriod8.setYears(1857);
        mutablePeriod8.setMillis((int) 'a');
        mutablePeriod8.addYears(894);
        mutablePeriod8.addHours((-11));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test08723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08723");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears(1969);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(1439);
        java.util.GregorianCalendar gregorianCalendar27 = dateTime24.toGregorianCalendar();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillisOfSecond(895);
        org.joda.time.DateTime.Property property30 = dateTime24.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight31 = dateTime24.toDateMidnight();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = duration34.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period39 = duration34.toPeriodTo(readableInstant38);
        org.joda.time.Weeks weeks40 = period39.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = period39.get(durationFieldType41);
        int int43 = period39.getWeeks();
        org.joda.time.Duration duration44 = period39.toStandardDuration();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray49 = period48.getFieldTypes();
        org.joda.time.Period period51 = period48.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Weeks weeks54 = weeks52.plus(0);
        boolean boolean55 = duration44.equals((java.lang.Object) weeks54);
        org.joda.time.DateTime dateTime56 = dateTime24.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime58 = dateTime24.plusMonths((-1088987));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(weeks40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test08724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08724");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology52.months();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int[] intArray65 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay63, (long) 86399);
        org.joda.time.Chronology chronology66 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = chronology52.dayOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology52.yearOfEra();
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 26, 399]");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test08725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08725");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        org.joda.time.Instant instant18 = dateTime15.toInstant();
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test08726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08726");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDate localDate14 = dateTime2.toLocalDate();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.Instant instant20 = dateTime17.toInstant();
        org.joda.time.Seconds seconds21 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.Minutes minutes22 = seconds21.toStandardMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = seconds21.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(minutes22);
    }

    @Test
    public void test08727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08727");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime8 = dateTime2.plusDays(100);
        org.joda.time.DateTime dateTime10 = dateTime2.withMillisOfSecond(31);
        org.joda.time.DateTime.Property property11 = dateTime2.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08728");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        org.joda.time.Period period10 = period3.withMillis((int) '#');
        org.joda.time.Weeks weeks11 = period3.toStandardWeeks();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period3.toDurationTo(readableInstant12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.joda.time.DateTime.Property property31 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime35 = dateTime32.withZone(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = dateTime32.isBefore(readableInstant36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test08729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08729");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Weeks weeks5 = period3.toStandardWeeks();
        org.joda.time.Period period7 = period3.plusHours(0);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = period7.getValue(53957);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53957");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test08730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08730");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMonths(59);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period24.get(durationFieldType26);
        int int28 = period24.getWeeks();
        org.joda.time.Duration duration29 = period24.toStandardDuration();
        int int30 = duration13.compareTo((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime31 = dateTime7.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean33 = dateTime31.isSupported(dateTimeFieldType32);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant37, periodType38);
        mutablePeriod39.setMonths((int) '4');
        org.joda.time.Period period42 = mutablePeriod39.toPeriod();
        mutablePeriod39.setYears((int) (short) -1);
        org.joda.time.Period period46 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period48 = period46.minusMonths((int) (short) 10);
        int int49 = period46.getWeeks();
        org.joda.time.Period period51 = period46.plusMonths(70);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) period46);
        mutablePeriod39.setMinutes(69);
        org.joda.time.DateTime dateTime55 = dateTime31.minus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test08731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08731");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(76, 2, 53, 100, 5, 3911);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08732");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours4 = hours2.minus((int) (short) 10);
        org.joda.time.Hours hours5 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours7 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours9 = hours7.minus((int) (short) 10);
        boolean boolean10 = hours5.isGreaterThan(hours9);
        boolean boolean11 = hours2.isLessThan(hours9);
        org.joda.time.Hours hours12 = hours2.negated();
        org.joda.time.Hours hours14 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours16 = hours14.minus((int) (short) 10);
        org.joda.time.Hours hours17 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours19 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours21 = hours19.minus((int) (short) 10);
        boolean boolean22 = hours17.isGreaterThan(hours21);
        boolean boolean23 = hours14.isLessThan(hours21);
        org.joda.time.Hours hours24 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours26 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours28 = hours26.minus((int) (short) 10);
        boolean boolean29 = hours24.isGreaterThan(hours28);
        boolean boolean30 = hours14.isGreaterThan(hours28);
        int int31 = hours28.getHours();
        org.joda.time.Hours hours33 = hours28.plus(0);
        org.joda.time.Hours hours35 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours37 = hours35.minus((int) (short) 10);
        org.joda.time.Hours hours38 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours40 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours42 = hours40.minus((int) (short) 10);
        boolean boolean43 = hours38.isGreaterThan(hours42);
        boolean boolean44 = hours35.isLessThan(hours42);
        org.joda.time.Hours hours45 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours47 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours49 = hours47.minus((int) (short) 10);
        boolean boolean50 = hours45.isGreaterThan(hours49);
        boolean boolean51 = hours35.isGreaterThan(hours49);
        int int52 = hours49.getHours();
        org.joda.time.Hours hours54 = hours49.plus(0);
        org.joda.time.Hours hours55 = hours28.plus(hours49);
        org.joda.time.Hours hours56 = hours2.plus(hours28);
        org.joda.time.Hours hours57 = hours0.plus(hours28);
        org.joda.time.Hours hours59 = hours57.dividedBy(358);
        org.joda.time.MutablePeriod mutablePeriod60 = hours57.toMutablePeriod();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-10) + "'", int31 == (-10));
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertNotNull(hours37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-10) + "'", int52 == (-10));
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertNotNull(hours57);
        org.junit.Assert.assertNotNull(hours59);
        org.junit.Assert.assertNotNull(mutablePeriod60);
    }

    @Test
    public void test08733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08733");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) 100);
        int int6 = dateTimeField2.getLeapAmount((long) (byte) 100);
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.lang.String str9 = dateTimeField2.getAsText(0, locale8);
        java.util.Locale.setDefault(locale8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology20 = interval18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weeks();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.centuryOfEra();
        org.joda.time.DurationField durationField24 = dateTimeField23.getDurationField();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration29 = null;
        boolean boolean30 = duration27.isEqual(readableDuration29);
        org.joda.time.Duration duration32 = duration27.minus((long) 1);
        org.joda.time.Duration duration34 = duration32.minus((long) '4');
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        boolean boolean52 = dateTime50.isEqual(10L);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType55, chronology56);
        org.joda.time.PeriodType periodType58 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType58);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime37, periodType61);
        org.joda.time.TimeOfDay timeOfDay63 = dateTime37.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = timeOfDay63.toDateTime(readableInstant64);
        org.joda.time.format.PeriodPrinter periodPrinter67 = null;
        org.joda.time.format.PeriodParser periodParser68 = null;
        org.joda.time.format.PeriodFormatter periodFormatter69 = new org.joda.time.format.PeriodFormatter(periodPrinter67, periodParser68);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter69.withParseType(periodType70);
        java.util.Locale locale72 = periodFormatter69.getLocale();
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.lang.String str74 = locale73.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter75 = periodFormatter69.withLocale(locale73);
        org.joda.time.format.PeriodPrinter periodPrinter76 = null;
        org.joda.time.format.PeriodParser periodParser77 = null;
        org.joda.time.format.PeriodFormatter periodFormatter78 = new org.joda.time.format.PeriodFormatter(periodPrinter76, periodParser77);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter78.withParseType(periodType79);
        java.util.Locale locale81 = periodFormatter78.getLocale();
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = locale82.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter84 = periodFormatter78.withLocale(locale82);
        java.util.Locale locale85 = locale82.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter86 = periodFormatter75.withLocale(locale85);
        java.lang.String str87 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) timeOfDay63, 675, locale85);
        java.lang.String str88 = locale85.getVariant();
        java.lang.String str89 = locale8.getDisplayCountry(locale85);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u5348\u524d" + "'", str9, "\u5348\u524d");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(periodFormatter75);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(periodFormatter84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "675" + "'", str87, "675");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Giappone" + "'", str89, "Giappone");
    }

    @Test
    public void test08734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08734");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setLanguage("");
        java.util.Locale.Builder builder8 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("1969-12-31T23:59:59.899Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1969-12-31T23:59:59.899Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08735");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        java.lang.String str13 = property12.getAsShortText();
        java.lang.String str14 = property12.toString();
        int int15 = property12.getMinimumValueOverall();
        java.lang.String str16 = property12.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11" + "'", str13, "11");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[hourOfHalfday]" + "'", str14, "Property[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[hourOfHalfday]" + "'", str16, "Property[hourOfHalfday]");
    }

    @Test
    public void test08736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08736");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology6);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10, periodType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.Duration duration15 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period20 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period22 = period20.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationTo(readableInstant23);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = duration27.toPeriodFrom(readableInstant28);
        org.joda.time.Duration duration30 = duration18.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = duration15.plus((org.joda.time.ReadableDuration) duration18);
        mutablePeriod7.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        java.lang.String str42 = interval36.toString();
        long long43 = interval36.getEndMillis();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.withZoneRetainFields(dateTimeZone47);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTime.Property property52 = dateTime51.era();
        org.joda.time.DateTime dateTime53 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, readableInstant57, periodType58);
        mutablePeriod59.setMonths((int) '4');
        org.joda.time.DateTime dateTime62 = dateTime51.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTime dateTime64 = dateTime51.minusWeeks((int) (byte) 1);
        int int65 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime.Property property66 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime68 = dateTime51.withYear(1969);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        boolean boolean70 = interval36.isBefore((org.joda.time.ReadableInstant) dateTime68);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray76 = period75.getFieldTypes();
        int int77 = period75.getMinutes();
        org.joda.time.Period period79 = period75.withDays((int) ' ');
        org.joda.time.PeriodType periodType80 = period79.getPeriodType();
        org.joda.time.PeriodType periodType81 = periodType80.withMonthsRemoved();
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.months();
        int int83 = periodType80.indexOf(durationFieldType82);
        org.joda.time.Period period84 = interval36.toPeriod(periodType80);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str42, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1672531200000L + "'", long43 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test08737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08737");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("P365D");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08738");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(48, 900, 141012, 53957, 19363, 54000, 24, 1073741825);
    }

    @Test
    public void test08739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08739");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withFields(readablePartial7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.Period period11 = new org.joda.time.Period(2980800000L, 2678400000L, periodType2, chronology10);
        org.joda.time.DurationField durationField12 = chronology10.seconds();
        int int15 = durationField12.getDifference((long) 2022, (long) 292278993);
        long long18 = durationField12.getValueAsLong(7620825619357L, (-213537232276L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292276) + "'", int15 == (-292276));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 7620825619L + "'", long18 == 7620825619L);
    }

    @Test
    public void test08740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08740");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeZone dateTimeZone10 = instant5.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = instant5.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = instant5.toMutableDateTimeISO();
        java.lang.String str13 = instant5.toString();
        org.joda.time.MutableDateTime mutableDateTime14 = instant5.toMutableDateTimeISO();
        org.joda.time.Instant instant16 = instant5.plus((long) 9);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str13, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test08741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08741");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone2.getShortName(100L, locale6);
        java.lang.String str9 = locale6.getScript();
        boolean boolean10 = locale6.hasExtensions();
        java.util.Set<java.lang.String> strSet11 = locale6.getUnicodeLocaleKeys();
        java.lang.String str12 = locale6.getDisplayScript();
        boolean boolean13 = locale6.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08742");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale9.getVariant();
        int int11 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        long long17 = dateTimeField14.add(0L, (long) (short) 1);
        long long20 = dateTimeField14.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale21.getVariant();
        int int23 = dateTimeField14.getMaximumShortTextLength(locale21);
        java.lang.String str24 = locale21.getDisplayLanguage();
        int int25 = dateTimeField2.getMaximumShortTextLength(locale21);
        int int27 = dateTimeField2.get(1511880000L);
        java.lang.String str28 = dateTimeField2.getName();
        java.util.Locale locale31 = new java.util.Locale("hourOfHalfday", "YearMonthDayTime");
        int int32 = dateTimeField2.getMaximumShortTextLength(locale31);
        long long34 = dateTimeField2.roundFloor((long) 2159965);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 43200000L + "'", long17 == 43200000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "halfdayOfDay" + "'", str28, "halfdayOfDay");
        org.junit.Assert.assertEquals(locale31.toString(), "hourofhalfday_YEARMONTHDAYTIME");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test08743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08743");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration1 = duration0.toDuration();
        long long2 = duration1.getStandardDays();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test08744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08744");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy((-10));
        int int25 = property22.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.DateTime dateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test08745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08745");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Minutes minutes3 = duration2.toStandardMinutes();
        org.joda.time.Duration duration5 = duration2.minus((long) ' ');
        org.joda.time.Duration duration7 = duration2.plus(836481600000L);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
    }

    @Test
    public void test08746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08746");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(11L);
        org.joda.time.Minutes minutes2 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus((int) (short) -1);
        boolean boolean6 = minutes2.isGreaterThan(minutes3);
        org.joda.time.Minutes minutes7 = null;
        org.joda.time.Minutes minutes8 = minutes3.minus(minutes7);
        org.joda.time.Minutes minutes10 = minutes3.plus((int) (short) 1);
        org.joda.time.Minutes minutes12 = minutes10.plus((int) (short) 1);
        org.joda.time.Duration duration13 = minutes12.toStandardDuration();
        long long14 = duration13.getStandardSeconds();
        boolean boolean15 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-128849018760L) + "'", long14 == (-128849018760L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08747");
        org.joda.time.Hours hours0 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours2 = hours0.multipliedBy(0);
        org.joda.time.Hours hours4 = hours0.dividedBy(69);
        org.joda.time.Hours hours5 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours7 = hours5.multipliedBy(0);
        org.joda.time.Hours hours9 = hours5.dividedBy(69);
        org.joda.time.Hours hours10 = hours0.plus(hours9);
        org.joda.time.Hours hours11 = org.joda.time.Hours.FOUR;
        org.joda.time.Hours hours12 = org.joda.time.Hours.THREE;
        org.joda.time.Hours hours13 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours15 = hours13.multipliedBy(0);
        org.joda.time.Hours hours17 = hours13.dividedBy(69);
        org.joda.time.DurationFieldType durationFieldType19 = hours13.getFieldType((int) (byte) 0);
        boolean boolean20 = hours12.isGreaterThan(hours13);
        org.joda.time.Hours hours21 = hours13.negated();
        org.joda.time.Hours hours22 = hours11.plus(hours21);
        boolean boolean23 = hours9.isLessThan(hours11);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test08748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08748");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        java.lang.String str16 = instant15.toString();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Duration duration26 = duration19.withMillis((long) (short) 0);
        org.joda.time.Instant instant27 = instant15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime29 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 2);
        org.joda.time.DateTime dateTime31 = dateTime29.plus((long) 3);
        org.joda.time.DateTime dateTime33 = dateTime29.withMinuteOfHour((int) (short) 1);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder36 = builder34.setLocale(locale35);
        java.util.Locale.Builder builder38 = builder34.setVariant("2022");
        java.util.Locale locale39 = builder38.build();
        java.util.Locale locale40 = builder38.build();
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Calendar calendar42 = dateTime33.toCalendar(locale40);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = property46.withMinimumValue();
        int int48 = property46.getMaximumValueOverall();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = locale49.getScript();
        java.lang.String str51 = locale49.getDisplayCountry();
        int int52 = property46.getMaximumShortTextLength(locale49);
        java.lang.String str53 = locale40.getDisplayName(locale49);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str16, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en__2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en__2022");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en__2022");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=-3480001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (2022)" + "'", str53, "English (2022)");
    }

    @Test
    public void test08749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08749");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("en");
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale.Builder builder9 = builder4.removeUnicodeLocaleAttribute("2159965");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08750");
        java.util.Locale locale1 = new java.util.Locale("PT280H");
        org.junit.Assert.assertEquals(locale1.toString(), "pt280h");
    }

    @Test
    public void test08751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08751");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        boolean boolean24 = interval19.contains((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.Chronology chronology26 = chronology25.withUTC();
        org.joda.time.Period period27 = duration15.toPeriod(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.centuryOfEra();
        org.joda.time.DurationField durationField29 = chronology26.weekyears();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test08752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08752");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        java.lang.String str6 = duration2.toString();
        org.joda.time.Seconds seconds7 = duration2.toStandardSeconds();
        org.joda.time.Period period8 = duration2.toPeriod();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.011S" + "'", str6, "PT0.011S");
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test08753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08753");
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        int int6 = dateTimeZone3.getOffset(1L);
        boolean boolean8 = dateTimeZone3.isStandardOffset(0L);
        java.lang.String str10 = dateTimeZone3.getNameKey((long) 1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.Period period14 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period16 = period14.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationTo(readableInstant17);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant25 = instant23.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime26 = instant23.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period28 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime26, periodType27);
        org.joda.time.Minutes minutes29 = duration21.toStandardMinutes();
        org.joda.time.DateTime dateTime30 = dateTime12.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime.Property property31 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime32 = property31.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test08754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08754");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean22 = dateTime18.isSupported(dateTimeFieldType21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime18, periodType23);
        org.joda.time.DateTime.Property property26 = dateTime15.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test08755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08755");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 86365000, 18849024000000L);
        mutablePeriod2.addSeconds(97);
    }

    @Test
    public void test08756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08756");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("PT-2147483646M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT-2147483646M\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08757");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (short) 10, periodType1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.Duration duration7 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period2.plusMonths(1969);
        org.joda.time.Period period11 = period9.minusMillis(86399);
        org.joda.time.PeriodType periodType12 = period9.getPeriodType();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test08758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08758");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        long long13 = dateTimeField11.roundHalfCeiling((long) (-2147483648));
        java.lang.String str14 = dateTimeField11.getName();
        long long17 = dateTimeField11.add(86400467L, 58);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2147460000L) + "'", long13 == (-2147460000L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 89880467L + "'", long17 == 89880467L);
    }

    @Test
    public void test08759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08759");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis(720000L);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(7L, 53814441);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime7.toYearMonthDay();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy(2022);
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setPeriod((long) 1, (-1L));
        mutablePeriod26.setMillis((int) (short) 0);
        int int32 = mutablePeriod26.getDays();
        mutablePeriod26.addMinutes(1969);
        org.joda.time.Chronology chronology36 = null;
        mutablePeriod26.setPeriod((long) 'a', chronology36);
        mutablePeriod26.setYears((int) 'u');
        mutablePeriod26.add((long) '4');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        boolean boolean47 = dateTime45.isEqual(10L);
        org.joda.time.DateTime dateTime49 = dateTime45.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = dateTime45.plusHours(1969);
        org.joda.time.DateTime dateTime54 = dateTime45.withDurationAdded((-101L), 86399);
        mutablePeriod26.setPeriod(readableInstant42, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime57 = dateTime45.withYear((-27349920));
        org.joda.time.TimeOfDay timeOfDay58 = dateTime45.toTimeOfDay();
        int int59 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks60 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadablePartial) yearMonthDay11, (org.joda.time.ReadablePartial) timeOfDay58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1439 + "'", int59 == 1439);
    }

    @Test
    public void test08760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08760");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        long long10 = dateTimeField2.add(1672531200000L, (long) 10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        boolean boolean38 = dateTime36.isEqual(10L);
        org.joda.time.DateTime dateTime40 = dateTime36.withCenturyOfEra((int) (byte) 1);
        boolean boolean41 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime43 = dateTime36.withWeekyear(19);
        java.lang.String str45 = dateTime43.toString("\u7fa9\u5927\u5229\u6587");
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime48 = instant47.toDateTime();
        boolean boolean50 = dateTime48.isEqual(10L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = dateTime48.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime43.withZoneRetainFields(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay54 = dateTime53.toYearMonthDay();
        org.joda.time.Chronology chronology55 = yearMonthDay54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(13, 8, (-864), 6, 893, 1439, 3911, (-303));
        int[] intArray66 = mutablePeriod65.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = dateTimeField2.addWrapField((org.joda.time.ReadablePartial) yearMonthDay54, 281, intArray66, 53669837);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 281");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672963200000L + "'", long10 == 1672963200000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str45, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[13, 8, -864, 6, 893, 1439, 3911, -303]");
    }

    @Test
    public void test08761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08761");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.setVariant("2022");
        java.util.Locale.Builder builder6 = builder0.removeUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder7 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.setUnicodeLocaleKeyword("DateTimeField[clockhourOfHalfday]", "2022-02-21T15:00:22.966Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: DateTimeField[clockhourOfHalfday] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08762");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Chronology chronology5 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfHalfday();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration12 = null;
        boolean boolean13 = duration10.isEqual(readableDuration12);
        org.joda.time.Duration duration15 = duration10.minus((long) 1);
        org.joda.time.Duration duration17 = duration15.minus((long) '4');
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = duration27.plus((long) (byte) 0);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        boolean boolean35 = dateTime33.isEqual(10L);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType38, chronology39);
        org.joda.time.PeriodType periodType41 = periodType38.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33, periodType41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime20, periodType44);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant49 = instant47.minus(100L);
        java.lang.String str50 = instant49.toString();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = duration53.toPeriodTo(readableInstant57);
        org.joda.time.Duration duration60 = duration53.withMillis((long) (short) 0);
        org.joda.time.Instant instant61 = instant49.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime.Property property65 = dateTime64.era();
        org.joda.time.DateTime dateTime66 = dateTime64.withTimeAtStartOfDay();
        org.joda.time.Duration duration69 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration69, readableInstant70, periodType71);
        mutablePeriod72.setMonths((int) '4');
        org.joda.time.DateTime dateTime75 = dateTime64.plus((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant78 = instant77.toInstant();
        boolean boolean79 = dateTime64.isEqual((org.joda.time.ReadableInstant) instant78);
        boolean boolean80 = instant61.isAfter((org.joda.time.ReadableInstant) instant78);
        org.joda.time.Instant instant81 = instant78.toInstant();
        org.joda.time.Chronology chronology82 = instant78.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(0L, periodType44, chronology82);
        int[] intArray86 = chronology5.get((org.joda.time.ReadablePeriod) mutablePeriod84, 6000000L);
        org.joda.time.MutablePeriod mutablePeriod87 = mutablePeriod84.copy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str50, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1, 40, 0, 0]");
        org.junit.Assert.assertNotNull(mutablePeriod87);
    }

    @Test
    public void test08763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08763");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addMinutes(1969);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.setPeriod((long) 'a', chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        boolean boolean25 = interval20.contains((org.joda.time.ReadableInterval) interval24);
        java.lang.String str26 = interval20.toString();
        long long27 = interval20.getEndMillis();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTime dateTime48 = dateTime35.minusWeeks((int) (byte) 1);
        int int49 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property50 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime35.withYear(1969);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        boolean boolean54 = interval20.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Days days55 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval20);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        boolean boolean70 = interval65.contains((org.joda.time.ReadableInterval) interval69);
        java.lang.String str71 = interval69.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        boolean boolean80 = interval75.contains((org.joda.time.ReadableInterval) interval79);
        boolean boolean81 = interval69.isBefore((org.joda.time.ReadableInterval) interval79);
        mutablePeriod61.setPeriod((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Chronology chronology83 = interval79.getChronology();
        org.joda.time.MutableInterval mutableInterval84 = interval79.toMutableInterval();
        java.lang.String str85 = mutableInterval84.toString();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(chronology86);
        org.joda.time.DateTime.Property property88 = dateTime87.yearOfEra();
        org.joda.time.Interval interval89 = property88.toInterval();
        org.joda.time.MutableInterval mutableInterval90 = interval89.toMutableInterval();
        long long91 = interval89.getStartMillis();
        long long92 = interval89.getStartMillis();
        boolean boolean93 = mutableInterval84.isAfter((org.joda.time.ReadableInterval) interval89);
        boolean boolean94 = interval20.contains((org.joda.time.ReadableInterval) mutableInterval84);
        long long95 = mutableInterval84.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str26, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1672531200000L + "'", long27 == 1672531200000L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(days55);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str71, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(mutableInterval84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str85, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1640995200000L + "'", long91 == 1640995200000L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1640995200000L + "'", long92 == 1640995200000L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 31536000000L + "'", long95 == 31536000000L);
    }

    @Test
    public void test08764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08764");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder5.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setScript("1970-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 1970-01-01T00:00:00.000Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08765");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes((int) (short) -1);
        org.joda.time.Period period2 = minutes1.toPeriod();
        org.joda.time.Minutes minutes4 = minutes1.dividedBy(1972);
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.minutes(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        long long12 = dateTimeField9.add(0L, (long) (short) 1);
        long long14 = dateTimeField9.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant22 = instant20.minus(100L);
        org.joda.time.Instant instant24 = instant22.plus((long) 100);
        org.joda.time.Instant instant26 = instant22.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.LocalTime localTime28 = dateTime17.toLocalTime();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.Period period38 = mutablePeriod35.toPeriod();
        int[] intArray39 = period38.getValues();
        int[] intArray41 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localTime28, 0, intArray39, 3);
        long long43 = dateTimeField9.roundFloor((long) 12);
        boolean boolean44 = minutes6.equals((java.lang.Object) dateTimeField9);
        org.joda.time.Minutes minutes46 = minutes6.plus(19363);
        org.joda.time.Duration duration47 = minutes46.toStandardDuration();
        boolean boolean48 = minutes4.isGreaterThan(minutes46);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 43200000L + "'", long12 == 43200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08766");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withWeeksRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType7);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.Seconds seconds10 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod11 = seconds10.toMutablePeriod();
        org.joda.time.Duration duration12 = seconds10.toStandardDuration();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Instant instant18 = dateTime15.toInstant();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        int int20 = dateMidnight19.getDayOfYear();
        boolean boolean21 = dateMidnight19.isAfterNow();
        org.joda.time.Instant instant22 = dateMidnight19.toInstant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.joda.time.Interval interval24 = duration12.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Interval interval26 = duration12.toIntervalFrom(readableInstant25);
        long long27 = duration12.getStandardSeconds();
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration29 = duration12.toDuration();
        long long30 = duration12.getMillis();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P0D" + "'", str9, "P0D");
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 365 + "'", int20 == 365);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1000L + "'", long30 == 1000L);
    }

    @Test
    public void test08767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08767");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(128770560000000000L, (long) (short) -1, chronology27);
        mutablePeriod32.setMonths(2115);
        mutablePeriod32.setMillis(1073741825);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        org.joda.time.Interval interval50 = property49.toInterval();
        boolean boolean51 = interval46.contains((org.joda.time.ReadableInterval) interval50);
        java.lang.String str52 = interval50.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        boolean boolean62 = interval50.isBefore((org.joda.time.ReadableInterval) interval60);
        mutablePeriod42.setPeriod((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology64 = interval60.getChronology();
        mutablePeriod32.setPeriod((long) 624, chronology64);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str52, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test08768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08768");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(893);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.DateTime dateTime10 = dateTime7.withZone(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08769");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08770");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) '4');
        long long4 = dateTimeZone2.nextTransition(2147483648L);
        java.lang.String str5 = dateTimeZone2.toString();
        java.lang.String str7 = dateTimeZone2.getShortName(70L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2147483648L + "'", long4 == 2147483648L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+100:52" + "'", str5, "+100:52");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:52" + "'", str7, "+100:52");
    }

    @Test
    public void test08771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08771");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        int int19 = dateTimeZone16.getOffset(1L);
        boolean boolean21 = dateTimeZone16.isStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = dateTime2.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime24 = dateTime2.plusSeconds(895);
        int int25 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime.Property property26 = dateTime2.secondOfMinute();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, readableInstant30, periodType31);
        mutablePeriod32.setMonths((int) '4');
        org.joda.time.Period period35 = mutablePeriod32.toPeriod();
        org.joda.time.Period period37 = period35.minusMinutes(100);
        org.joda.time.Period period39 = period35.minusMillis((int) (short) 100);
        org.joda.time.Period period41 = period39.withHours(23);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        boolean boolean50 = interval45.contains((org.joda.time.ReadableInterval) interval49);
        java.lang.String str51 = interval45.toString();
        org.joda.time.Weeks weeks52 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval45);
        org.joda.time.PeriodType periodType53 = weeks52.getPeriodType();
        org.joda.time.Weeks weeks55 = weeks52.minus(86399999);
        org.joda.time.PeriodType periodType56 = weeks52.getPeriodType();
        org.joda.time.Weeks weeks58 = weeks52.dividedBy(1969);
        org.joda.time.Period period59 = period41.withFields((org.joda.time.ReadablePeriod) weeks52);
        boolean boolean60 = dateTime2.equals((java.lang.Object) weeks52);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 999 + "'", int25 == 999);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str51, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(weeks52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(weeks55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(weeks58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08772");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.plus(4190400000L);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08773");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("AM");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        int int13 = days11.get(durationFieldType12);
        mutablePeriod10.add(durationFieldType12, 8);
        mutablePeriod10.addMillis((int) (byte) 1);
        mutablePeriod10.setHours(0);
        mutablePeriod10.setDays(6);
        mutablePeriod10.addMonths(8);
        boolean boolean24 = languageRange1.equals((java.lang.Object) mutablePeriod10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08774");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime2.plusHours(1969);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.DateTime dateTime13 = interval12.getStart();
        int int14 = dateTime13.getYear();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant18 = instant16.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfEra();
        org.joda.time.DateTime.Property property23 = dateTime21.weekOfWeekyear();
        boolean boolean24 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime26 = dateTime21.withMillisOfDay(0);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        java.lang.String str32 = instant31.toString();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration35.toPeriodTo(readableInstant39);
        org.joda.time.Duration duration42 = duration35.withMillis((long) (short) 0);
        org.joda.time.Instant instant43 = instant31.plus((org.joda.time.ReadableDuration) duration35);
        java.lang.String str44 = duration35.toString();
        org.joda.time.Minutes minutes45 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes46 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes48 = minutes46.minus((int) (short) -1);
        boolean boolean49 = minutes45.isGreaterThan(minutes46);
        org.joda.time.Minutes minutes50 = null;
        org.joda.time.Minutes minutes51 = minutes46.minus(minutes50);
        org.joda.time.Minutes minutes53 = minutes46.plus((int) (short) 1);
        org.joda.time.PeriodType periodType54 = minutes53.getPeriodType();
        org.joda.time.Minutes minutes55 = org.joda.time.Minutes.TWO;
        boolean boolean56 = minutes53.isLessThan(minutes55);
        org.joda.time.Minutes minutes57 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes58 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes60 = minutes58.minus((int) (short) -1);
        boolean boolean61 = minutes57.isGreaterThan(minutes58);
        org.joda.time.Minutes minutes62 = null;
        org.joda.time.Minutes minutes63 = minutes58.minus(minutes62);
        org.joda.time.Minutes minutes65 = minutes58.plus((int) (short) 1);
        org.joda.time.PeriodType periodType66 = minutes65.getPeriodType();
        org.joda.time.Minutes minutes67 = org.joda.time.Minutes.TWO;
        boolean boolean68 = minutes65.isLessThan(minutes67);
        org.joda.time.DurationFieldType durationFieldType69 = minutes65.getFieldType();
        boolean boolean70 = minutes53.isLessThan(minutes65);
        org.joda.time.PeriodType periodType71 = minutes53.getPeriodType();
        org.joda.time.Period period72 = duration35.toPeriod(periodType71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime13, periodType71);
        org.joda.time.LocalTime localTime74 = dateTime2.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str32, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(minutes55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(minutes63);
        org.junit.Assert.assertNotNull(minutes65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(localTime74);
    }

    @Test
    public void test08775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08775");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.Instant instant9 = instant7.plus((long) 100);
        org.joda.time.Instant instant11 = instant7.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) instant7);
        org.joda.time.LocalTime localTime13 = dateTime2.toLocalTime();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (short) 1, (long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType21, chronology22);
        org.joda.time.PeriodType periodType24 = periodType21.withWeeksRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant17, readableInstant18, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration16, periodType24);
        org.joda.time.DateTime.Property property27 = dateTime2.weekyear();
        org.joda.time.DateTime dateTime29 = property27.setCopy((-8));
        org.joda.time.DateTime dateTime30 = property27.withMaximumValue();
        org.joda.time.DateTime dateTime32 = dateTime30.withMillisOfDay(1857);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTime30.toString("PT53669837H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test08776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08776");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        boolean boolean13 = interval8.contains((org.joda.time.ReadableInterval) interval12);
        java.lang.String str14 = interval12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = interval12.isBefore((org.joda.time.ReadableInterval) interval22);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Chronology chronology26 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfHour();
        boolean boolean28 = dateTimeField27.isLenient();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str14, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08777");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime6.weekOfWeekyear();
        boolean boolean9 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime.Property property10 = dateTime6.dayOfWeek();
        boolean boolean11 = property10.isLeap();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = property10.withMinimumValue();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Seconds seconds15 = org.joda.time.Seconds.secondsIn(readableInterval14);
        org.joda.time.Seconds seconds17 = seconds15.plus((int) (byte) -1);
        int int18 = seconds15.getSeconds();
        org.joda.time.PeriodType periodType19 = seconds15.getPeriodType();
        boolean boolean20 = property10.equals((java.lang.Object) seconds15);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08778");
        org.joda.time.Days days1 = org.joda.time.Days.days(0);
        org.joda.time.Days days3 = days1.dividedBy((int) (short) 10);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        mutablePeriod14.setMonths((int) '4');
        org.joda.time.DateTime dateTime17 = dateTime6.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime19 = dateTime6.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime25 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime22.withMillis((long) (-52));
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        boolean boolean35 = property33.equals((java.lang.Object) "1969-12-31T23:59:59.899Z");
        java.util.Locale locale36 = java.util.Locale.KOREA;
        int int37 = property33.getMaximumTextLength(locale36);
        org.joda.time.DateTime dateTime38 = property33.roundHalfEvenCopy();
        org.joda.time.Days days39 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Days days40 = days3.plus(days39);
        org.joda.time.Days days41 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days43 = days41.minus((int) '4');
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        boolean boolean52 = interval47.contains((org.joda.time.ReadableInterval) interval51);
        java.lang.String str53 = interval51.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        boolean boolean62 = interval57.contains((org.joda.time.ReadableInterval) interval61);
        boolean boolean63 = interval51.isBefore((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Days days64 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval51);
        boolean boolean65 = days43.isLessThan(days64);
        org.joda.time.Days days66 = days3.minus(days64);
        org.joda.time.Duration duration69 = new org.joda.time.Duration(10108800000L, (-883612740001L));
        org.joda.time.Days days70 = duration69.toStandardDays();
        org.joda.time.Days days72 = days70.multipliedBy(20);
        boolean boolean73 = days64.isGreaterThan(days70);
        int int74 = days64.getDays();
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(days43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str53, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(days70);
        org.junit.Assert.assertNotNull(days72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 365 + "'", int74 == 365);
    }

    @Test
    public void test08779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08779");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTimeISO();
        java.lang.Object obj5 = null;
        org.joda.time.Instant instant6 = new org.joda.time.Instant(obj5);
        boolean boolean7 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.plus((long) (byte) 0);
        org.joda.time.Instant instant14 = instant6.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        boolean boolean32 = interval27.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean33 = interval22.contains((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Chronology chronology34 = interval22.getChronology();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period42 = duration41.toPeriod();
        boolean boolean43 = duration37.isEqual((org.joda.time.ReadableDuration) duration41);
        java.lang.String str44 = duration41.toString();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = duration47.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period52 = duration47.toPeriodTo(readableInstant51);
        org.joda.time.Weeks weeks53 = period52.toStandardWeeks();
        org.joda.time.Period period55 = period52.plusMonths((int) (short) 100);
        org.joda.time.Period period57 = period55.minusHours((int) (byte) -1);
        boolean boolean58 = duration41.equals((java.lang.Object) period57);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), (long) 23);
        boolean boolean62 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration61);
        boolean boolean63 = interval22.equals((java.lang.Object) duration61);
        org.joda.time.Duration duration64 = interval22.toDuration();
        boolean boolean65 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration64);
        long long66 = duration13.getStandardHours();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(weeks53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test08780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08780");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-1));
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Weeks weeks4 = weeks2.plus(11);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test08781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08781");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        int int18 = property16.getMaximumValueOverall();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale19.getDisplayCountry();
        int int22 = property16.getMaximumShortTextLength(locale19);
        org.joda.time.DateTime dateTime23 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        long long26 = chronology9.set((org.joda.time.ReadablePartial) localTime24, (long) (byte) 10);
        org.joda.time.DurationField durationField27 = chronology9.seconds();
        java.lang.Object obj28 = null;
        org.joda.time.Instant instant29 = new org.joda.time.Instant(obj28);
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        java.lang.String str33 = dateTimeZone30.getName((long) 10);
        java.lang.String str35 = dateTimeZone30.getName((long) 8);
        long long39 = dateTimeZone30.convertLocalToUTC((long) 31, false, (-3676492805054399977L));
        java.lang.String str41 = dateTimeZone30.getShortName((long) 292278993);
        org.joda.time.Chronology chronology42 = chronology9.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField43 = chronology42.months();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86399999L + "'", long26 == 86399999L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31L + "'", long39 == 31L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test08782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08782");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, readableInstant6, periodType7);
        org.joda.time.Days days9 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.minutes();
        int int11 = days9.get(durationFieldType10);
        mutablePeriod8.add(durationFieldType10, 8);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutablePeriod8.add(readablePeriod14);
        int int16 = mutablePeriod8.getMonths();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        boolean boolean25 = interval20.contains((org.joda.time.ReadableInterval) interval24);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        mutablePeriod44.setMonths((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime36.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTime dateTime49 = dateTime36.minusWeeks((int) (byte) 1);
        int int50 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property51 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime36.withYear(1969);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DurationField durationField55 = durationFieldType28.getField(chronology54);
        mutablePeriod8.add((-43199999L), chronology54);
        org.joda.time.DurationField durationField57 = chronology54.millis();
        org.joda.time.DurationField durationField58 = chronology54.months();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 69, chronology54);
        org.joda.time.DateTimeField dateTimeField60 = chronology54.minuteOfDay();
        org.joda.time.DurationField durationField61 = chronology54.months();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.Period period63 = new org.joda.time.Period((long) 292278993, periodType1, chronology54);
        org.joda.time.DateTimeField dateTimeField64 = chronology54.hourOfHalfday();
        org.joda.time.DurationField durationField65 = chronology54.days();
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test08783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08783");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.PeriodType periodType9 = minutes8.getPeriodType();
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.TWO;
        boolean boolean11 = minutes8.isLessThan(minutes10);
        org.joda.time.Minutes minutes13 = minutes10.minus(70);
        org.joda.time.DurationFieldType durationFieldType14 = minutes13.getFieldType();
        org.joda.time.Minutes minutes16 = minutes13.minus(23);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test08784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08784");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        int int16 = dateTime14.getWeekOfWeekyear();
        int int17 = dateTime14.getMonthOfYear();
        boolean boolean18 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        int int23 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfYear();
        int int25 = property24.getMaximumValue();
        java.lang.String str26 = property24.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 365 + "'", int25 == 365);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "335" + "'", str26, "335");
    }

    @Test
    public void test08785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08785");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        mutablePeriod11.setMonths((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTime dateTime16 = dateTime3.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.monthOfYear();
        org.joda.time.DateTime.Property property18 = dateTime16.weekyear();
        java.lang.Object obj19 = null;
        org.joda.time.Instant instant20 = new org.joda.time.Instant(obj19);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        java.lang.String str24 = dateTimeZone21.getName((long) 10);
        java.lang.String str26 = dateTimeZone21.getName((long) 8);
        int int28 = dateTimeZone21.getOffsetFromLocal((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime16.withZone(dateTimeZone21);
        int int31 = dateTimeZone21.getOffset(1972L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 'a', dateTimeZone21);
        long long35 = dateTimeZone21.adjustOffset(0L, false);
        java.lang.Object obj36 = null;
        org.joda.time.Instant instant37 = new org.joda.time.Instant(obj36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getID();
        java.lang.String str43 = dateTimeZone38.getNameKey(1842739200000L);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime48 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, readableInstant52, periodType53);
        mutablePeriod54.setMonths((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime46.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.DateTime dateTime59 = dateTime46.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property60 = dateTime59.monthOfYear();
        org.joda.time.DateTime.Property property61 = dateTime59.weekyear();
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime59.plusHours((int) 'u');
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears(3);
        org.joda.time.Instant instant67 = dateTime66.toInstant();
        org.joda.time.LocalDateTime localDateTime68 = dateTime66.toLocalDateTime();
        boolean boolean69 = dateTimeZone38.isLocalDateTimeGap(localDateTime68);
        boolean boolean70 = dateTimeZone21.isLocalDateTimeGap(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test08786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08786");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.Period period5 = period3.withSeconds((int) '4');
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, readableInstant9, periodType10);
        org.joda.time.Days days12 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        int int14 = days12.get(durationFieldType13);
        mutablePeriod11.add(durationFieldType13, 8);
        int int17 = mutablePeriod11.getHours();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        boolean boolean26 = interval21.contains((org.joda.time.ReadableInterval) interval25);
        java.lang.String str27 = interval21.toString();
        mutablePeriod11.add((org.joda.time.ReadableInterval) interval21);
        int int29 = mutablePeriod11.getMillis();
        mutablePeriod11.setPeriod((long) (byte) 10);
        mutablePeriod11.addDays((-27349920));
        org.joda.time.Period period34 = period5.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Period period36 = period34.plusMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(days12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str27, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test08787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08787");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.era();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        long long17 = dateTimeField15.roundHalfCeiling((-3676492804060799977L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3676492804060800000L) + "'", long17 == (-3676492804060800000L));
    }

    @Test
    public void test08788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08788");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 1);
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = period5.getFieldTypes();
        org.joda.time.Period period8 = period5.minusYears((int) (byte) 1);
        org.joda.time.Period period10 = period5.plusMonths((int) (byte) 0);
        org.joda.time.Period period12 = period5.withMillis((int) '#');
        org.joda.time.Period period14 = period12.minusMinutes((int) 'u');
        org.joda.time.Weeks weeks15 = period14.toStandardWeeks();
        org.joda.time.Weeks weeks17 = weeks15.dividedBy(894);
        org.joda.time.Period period18 = period1.minus((org.joda.time.ReadablePeriod) weeks17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) period18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test08789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08789");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        long long10 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField2.getType();
        long long13 = dateTimeField2.remainder(432000000L);
        int int14 = dateTimeField2.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter15 = null;
        org.joda.time.format.PeriodParser periodParser16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = new org.joda.time.format.PeriodFormatter(periodPrinter15, periodParser16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter17.withParseType(periodType18);
        java.util.Locale locale20 = periodFormatter17.getLocale();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter17.withLocale(locale21);
        org.joda.time.format.PeriodPrinter periodPrinter24 = null;
        org.joda.time.format.PeriodParser periodParser25 = null;
        org.joda.time.format.PeriodFormatter periodFormatter26 = new org.joda.time.format.PeriodFormatter(periodPrinter24, periodParser25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withParseType(periodType27);
        java.util.Locale locale29 = periodFormatter26.getLocale();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.lang.String str31 = locale30.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter26.withLocale(locale30);
        java.util.Locale locale33 = locale30.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter34 = periodFormatter23.withLocale(locale33);
        int int35 = dateTimeField2.getMaximumShortTextLength(locale33);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.lang.String str40 = dateTimeField2.getAsShortText((long) 11, locale37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfEra();
        org.joda.time.Interval interval44 = property43.toInterval();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = property43.getAsText(locale45);
        int int47 = property43.getMaximumValue();
        org.joda.time.format.PeriodPrinter periodPrinter48 = null;
        org.joda.time.format.PeriodParser periodParser49 = null;
        org.joda.time.format.PeriodFormatter periodFormatter50 = new org.joda.time.format.PeriodFormatter(periodPrinter48, periodParser49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter50.withParseType(periodType51);
        java.util.Locale locale53 = periodFormatter50.getLocale();
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale54.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter56 = periodFormatter50.withLocale(locale54);
        java.util.Locale locale57 = locale54.stripExtensions();
        int int58 = property43.getMaximumShortTextLength(locale54);
        org.joda.time.DateTime dateTime59 = property43.withMinimumValue();
        org.joda.time.DateTime dateTime61 = dateTime59.plusMillis((int) (byte) 10);
        org.joda.time.DateTime.Property property62 = dateTime59.monthOfYear();
        org.joda.time.DateTime dateTime64 = property62.setCopy(5);
        java.util.Locale.Category category65 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale66 = java.util.Locale.getDefault(category65);
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant70 = instant68.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime71 = instant68.toMutableDateTimeISO();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.DateTime.Property property75 = dateTime73.weekOfWeekyear();
        boolean boolean76 = mutableDateTime71.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime.Property property77 = dateTime73.dayOfWeek();
        boolean boolean78 = property77.isLeap();
        org.joda.time.DateTime dateTime79 = property77.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.yearOfEra();
        org.joda.time.Interval interval83 = property82.toInterval();
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = property82.getAsText(locale84);
        java.util.Locale locale86 = locale84.stripExtensions();
        int int87 = property77.getMaximumTextLength(locale86);
        java.util.Locale.setDefault(category65, locale86);
        int int89 = property62.getMaximumShortTextLength(locale86);
        java.lang.String str90 = locale37.getDisplayLanguage(locale86);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "China" + "'", str39, "China");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e0a\u5348" + "'", str40, "\u4e0a\u5348");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodFormatter52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(periodFormatter56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + category65 + "' != '" + java.util.Locale.Category.FORMAT + "'", category65.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022" + "'", str85, "2022");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str90, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test08790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08790");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("PeriodType[Standard]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PeriodType[Standard]\" is malformed at \"eriodType[Standard]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08791");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        java.lang.String str6 = duration2.toString();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant10 = instant8.minus(100L);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant13 = instant8.withMillis((long) 1970);
        org.joda.time.Instant instant14 = instant8.toInstant();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.Period period23 = mutablePeriod20.toPeriod();
        org.joda.time.ReadableInterval readableInterval24 = null;
        mutablePeriod20.setPeriod(readableInterval24);
        mutablePeriod20.setWeeks(69);
        org.joda.time.Duration duration29 = new org.joda.time.Duration(432000000L);
        java.lang.String str30 = duration29.toString();
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration29);
        mutablePeriod20.setYears((int) (byte) 0);
        mutablePeriod20.addMinutes((-100));
        mutablePeriod20.setSeconds((-2147483648));
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime40.toMutableDateTime(dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod20.toDurationTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant45 = instant14.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant47 = instant14.plus(0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.011S" + "'", str6, "PT0.011S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT432000S" + "'", str30, "PT432000S");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant47);
    }

    @Test
    public void test08792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08792");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval20 = interval3.toMutableInterval();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = duration23.plus((long) (byte) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        boolean boolean31 = dateTime29.isEqual(10L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType34, chronology35);
        org.joda.time.PeriodType periodType37 = periodType34.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime29, periodType37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Instant instant44 = dateTime41.toInstant();
        org.joda.time.DateTime dateTime46 = dateTime41.withMillis((long) '4');
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.TimeOfDay timeOfDay51 = dateTime50.toTimeOfDay();
        org.joda.time.DateTime dateTime52 = dateTime41.withFields((org.joda.time.ReadablePartial) timeOfDay51);
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfSecond();
        org.joda.time.DateTime dateTime54 = property53.withMinimumValue();
        org.joda.time.DateTime dateTime57 = dateTime54.withDurationAdded(1970L, 1969);
        boolean boolean58 = interval3.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = interval3.toMutableInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
    }

    @Test
    public void test08793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08793");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMonths(59);
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime12 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime4.minusMillis(5);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(893);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test08794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08794");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus((int) (short) -1);
        boolean boolean4 = minutes0.isGreaterThan(minutes1);
        org.joda.time.Minutes minutes5 = null;
        org.joda.time.Minutes minutes6 = minutes1.minus(minutes5);
        org.joda.time.Minutes minutes8 = minutes1.plus((int) (short) 1);
        org.joda.time.Minutes minutes10 = minutes8.plus((int) (short) 1);
        org.joda.time.Duration duration11 = minutes10.toStandardDuration();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        int int26 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTime dateTime28 = dateTime14.withMillisOfSecond((int) '#');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28, periodType29);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, readableInstant34, periodType35);
        org.joda.time.Duration duration38 = duration33.plus(43200009L);
        org.joda.time.Duration duration40 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration38, 0);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = duration38.toPeriodFrom(readableInstant41);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test08795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08795");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillis(1640995200000L);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds9 = duration8.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration10 = null;
        boolean boolean11 = duration8.isEqual(readableDuration10);
        org.joda.time.Duration duration13 = duration8.minus((long) 1);
        org.joda.time.Duration duration15 = duration13.minus((long) '4');
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        boolean boolean33 = dateTime31.isEqual(10L);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType36, chronology37);
        org.joda.time.PeriodType periodType39 = periodType36.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime31, periodType39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration22, periodType39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime18, periodType42);
        org.joda.time.TimeOfDay timeOfDay44 = dateTime18.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = timeOfDay44.toDateTime(readableInstant45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant50 = instant48.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime51 = instant48.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime52 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        boolean boolean54 = dateTime52.isSupported(dateTimeFieldType53);
        org.joda.time.DateTime dateTime56 = dateTime2.withField(dateTimeFieldType53, 1439);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMillis(52);
        org.joda.time.Duration duration61 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = org.joda.time.Duration.parse("PT432000S");
        org.joda.time.Duration duration65 = duration64.toDuration();
        org.joda.time.Duration duration66 = duration61.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime dateTime67 = dateTime56.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime.Property property68 = dateTime67.year();
        org.joda.time.DateTime dateTime70 = property68.addToCopy(39);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test08796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08796");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration5 = null;
        boolean boolean6 = duration3.isEqual(readableDuration5);
        org.joda.time.Duration duration8 = duration3.minus((long) 1);
        org.joda.time.Duration duration10 = duration8.minus((long) '4');
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        boolean boolean28 = dateTime26.isEqual(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration17, periodType34);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime13, periodType37);
        org.joda.time.Duration duration40 = duration8.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int51 = mutablePeriod50.getDays();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        boolean boolean62 = interval57.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Chronology chronology63 = interval61.getChronology();
        mutablePeriod50.setPeriod((long) 'u', (long) 1969, chronology63);
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 100, chronology63);
        org.joda.time.Period period66 = duration40.toPeriod(chronology63);
        org.joda.time.DateTimeField dateTimeField67 = chronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = chronology63.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = chronology63.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 12, chronology63);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray76 = period75.getFieldTypes();
        int int77 = period75.getMinutes();
        org.joda.time.Period period79 = period75.withDays((int) ' ');
        org.joda.time.Period period81 = period79.withYears(86399);
        org.joda.time.Period period86 = new org.joda.time.Period(0, (int) (byte) -1, (int) '#', 7);
        org.joda.time.Period period87 = period79.plus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Period period89 = period86.withMinutes(23);
        mutablePeriod71.add((org.joda.time.ReadablePeriod) period86);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test08797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08797");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) '4');
        boolean boolean6 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        long long10 = dateTimeZone2.convertLocalToUTC(604800000L, true);
        long long13 = dateTimeZone2.adjustOffset(4438800000L, true);
        long long16 = dateTimeZone2.convertLocalToUTC((-323996976035000L), true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800000L + "'", long10 == 604800000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4438800000L + "'", long13 == 4438800000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-323996976035000L) + "'", long16 == (-323996976035000L));
    }

    @Test
    public void test08798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08798");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (-100));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08799");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = interval5.contains((org.joda.time.ReadableInterval) interval9);
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.DurationField durationField14 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.era();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(125452808874L, chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.weekyear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 45, chronology11);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury(97);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes22 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes24 = minutes22.minus((int) (short) -1);
        boolean boolean25 = minutes21.isGreaterThan(minutes22);
        org.joda.time.Minutes minutes26 = null;
        org.joda.time.Minutes minutes27 = minutes22.minus(minutes26);
        org.joda.time.Minutes minutes29 = minutes22.minus((int) (byte) -1);
        org.joda.time.Minutes minutes30 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes31 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes33 = minutes31.minus((int) (short) -1);
        boolean boolean34 = minutes30.isGreaterThan(minutes31);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.TWO;
        boolean boolean36 = minutes30.isLessThan(minutes35);
        boolean boolean37 = minutes22.isLessThan(minutes30);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes39 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes41 = minutes39.minus((int) (short) -1);
        boolean boolean42 = minutes38.isGreaterThan(minutes39);
        org.joda.time.Minutes minutes43 = null;
        org.joda.time.Minutes minutes44 = minutes39.minus(minutes43);
        org.joda.time.Minutes minutes46 = minutes39.plus((int) (short) 1);
        org.joda.time.Minutes minutes48 = minutes46.plus((int) (short) 1);
        boolean boolean49 = minutes22.isLessThan(minutes48);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Minutes minutes53 = duration52.toStandardMinutes();
        int int54 = minutes53.size();
        int int55 = minutes48.compareTo((org.joda.time.base.BaseSingleFieldPeriod) minutes53);
        org.joda.time.Minutes minutes57 = minutes53.plus(101);
        org.joda.time.DurationFieldType durationFieldType58 = minutes53.getFieldType();
        org.joda.time.DateTime dateTime60 = dateTime20.withFieldAdded(durationFieldType58, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = dateTime20.withWeekOfWeekyear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test08800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08800");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType5, chronology6);
        org.joda.time.PeriodType periodType8 = periodType5.withWeeksRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime31 = dateTime18.minusWeeks((int) (byte) 1);
        int int32 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property33 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime35 = dateTime18.withYear(1969);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.year();
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, (long) 'a', periodType10, chronology36);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) '#', chronology36);
        org.joda.time.Hours hours42 = org.joda.time.Hours.MAX_VALUE;
        org.joda.time.Hours hours43 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours45 = hours43.multipliedBy(0);
        org.joda.time.Hours hours47 = hours43.dividedBy(69);
        org.joda.time.Hours hours48 = org.joda.time.Hours.MIN_VALUE;
        boolean boolean49 = hours47.isGreaterThan(hours48);
        org.joda.time.Hours hours50 = hours42.plus(hours48);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) hours50);
        org.joda.time.Hours hours52 = hours50.negated();
        org.joda.time.Hours hours54 = org.joda.time.Hours.hours(970);
        boolean boolean55 = hours50.isLessThan(hours54);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(hours42);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test08801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08801");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.LocalTime localTime19 = dateTime15.toLocalTime();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime24.weekOfWeekyear();
        java.lang.String str26 = property25.getAsText();
        org.joda.time.DateTime dateTime27 = property25.withMaximumValue();
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime28);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 11, periodType31);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = duration35.toPeriodTo(readableInstant39);
        org.joda.time.Duration duration42 = duration35.withMillis((long) (short) 0);
        org.joda.time.Duration duration45 = duration35.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Chronology chronology46 = null;
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration35, chronology46);
        mutablePeriod32.setMinutes(23);
        mutablePeriod32.addHours((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod32.toMutablePeriod();
        mutablePeriod52.addMonths(53669837);
        mutablePeriod52.setPeriod(25610L, 0L);
        boolean boolean58 = localTime19.equals((java.lang.Object) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField60 = localTime19.getField((-15));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -15");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08802");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        int int7 = dateTimeField2.getMinimumValue(readablePartial6);
        java.lang.String str8 = dateTimeField2.toString();
        long long11 = dateTimeField2.addWrapField((long) 292278993, 1970);
        long long14 = dateTimeField2.set((long) 9, (int) (byte) 1);
        boolean boolean15 = dateTimeField2.isLenient();
        java.lang.String str16 = dateTimeField2.toString();
        int int17 = dateTimeField2.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str8, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 292278993L + "'", long11 == 292278993L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 43200009L + "'", long14 == 43200009L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str16, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08803");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(4, (int) ' ');
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 78719999);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(69);
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getOffset(1L);
        long long15 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (-101L));
        long long17 = dateTimeZone7.convertUTCToLocal(4190400000L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZone(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean29 = dateTime25.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime.Property property30 = dateTime20.property(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime20.getZone();
        org.joda.time.LocalDateTime localDateTime32 = dateTime20.toLocalDateTime();
        java.lang.Object obj33 = null;
        org.joda.time.Instant instant34 = new org.joda.time.Instant(obj33);
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        java.lang.String str36 = dateTimeZone35.toString();
        int int38 = dateTimeZone35.getOffset(1L);
        boolean boolean40 = dateTimeZone35.isStandardOffset(0L);
        java.lang.String str42 = dateTimeZone35.getNameKey((long) 1);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone35);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset((long) 365);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.withZone(dateTimeZone51);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.DateTime.Property property56 = dateTime55.era();
        org.joda.time.DateTime dateTime57 = dateTime55.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean59 = dateTime55.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime.Property property60 = dateTime50.property(dateTimeFieldType58);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime50.getZone();
        org.joda.time.LocalDateTime localDateTime62 = dateTime50.toLocalDateTime();
        boolean boolean63 = dateTimeZone45.isLocalDateTimeGap(localDateTime62);
        boolean boolean64 = dateTimeZone35.isLocalDateTimeGap(localDateTime62);
        org.joda.time.Hours hours65 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) localDateTime32, (org.joda.time.ReadablePartial) localDateTime62);
        boolean boolean66 = dateTimeZone7.isLocalDateTimeGap(localDateTime32);
        boolean boolean67 = dateTimeZone2.isLocalDateTimeGap(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+04:32" + "'", str3, "+04:32");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16320000 + "'", int5 == 16320000);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 248399899L + "'", long15 == 248399899L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4438800000L + "'", long17 == 4438800000L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(hours65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08804");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withEra(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test08805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08805");
        org.joda.time.Days days1 = org.joda.time.Days.days((-201));
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test08806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08806");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.setSeconds(100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
    }

    @Test
    public void test08807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08807");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTime dateTime4 = interval3.getStart();
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.Instant instant6 = dateTime4.toInstant();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant6, readableInstant7);
        mutablePeriod8.setPeriod((-1L));
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod8.copy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1969, chronology13);
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period16 = period14.normalizedStandard();
        mutablePeriod11.mergePeriod((org.joda.time.ReadablePeriod) period14);
        mutablePeriod11.addDays(19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test08808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08808");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        boolean boolean9 = interval4.contains((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType0.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.hourOfHalfday();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfHour();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = locale23.getScript();
        int int25 = property22.getMaximumTextLength(locale23);
        boolean boolean26 = property22.isLeap();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        int int31 = property22.compareTo((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime41 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant45, periodType46);
        mutablePeriod47.setMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime39.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.DateTime dateTime52 = dateTime39.minusWeeks((int) (byte) 1);
        int int53 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property54 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime39.withYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int58 = dateTime39.get(dateTimeFieldType57);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        org.joda.time.DateTime dateTime63 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.Instant instant64 = dateTime61.toInstant();
        org.joda.time.DateMidnight dateMidnight65 = dateTime61.toDateMidnight();
        int int66 = dateTime61.getEra();
        org.joda.time.Chronology chronology67 = dateTime61.getChronology();
        long long71 = chronology67.add((long) 1439, (long) 'a', 1439);
        boolean boolean72 = dateTimeFieldType57.isSupported(chronology67);
        boolean boolean73 = timeOfDay30.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType74.getField(chronology75);
        long long79 = dateTimeField76.add(0L, (long) (short) 1);
        boolean boolean81 = dateTimeField76.isLeap(10L);
        int int82 = dateTimeField76.getMinimumValue();
        long long84 = dateTimeField76.roundHalfEven((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial85 = null;
        org.joda.time.Duration duration89 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.PeriodType periodType91 = null;
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration89, readableInstant90, periodType91);
        mutablePeriod92.setMonths((int) '4');
        org.joda.time.Period period95 = mutablePeriod92.toPeriod();
        int[] intArray96 = period95.getValues();
        int[] intArray98 = dateTimeField76.addWrapPartial(readablePartial85, 10, intArray96, 0);
        chronology10.validate((org.joda.time.ReadablePartial) timeOfDay30, intArray96);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 86399999 + "'", int58 == 86399999);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 141022L + "'", long71 == 141022L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 43200000L + "'", long79 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 0, 0, 0, 0, 0, 11]");
    }

    @Test
    public void test08809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08809");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(518402000L, (long) (byte) 100);
    }

    @Test
    public void test08810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08810");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType31, chronology34);
        org.joda.time.PeriodType periodType36 = periodType31.withDaysRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime25, periodType31);
        int int38 = dateTime25.getEra();
        org.joda.time.DateMidnight dateMidnight39 = dateTime25.toDateMidnight();
        org.joda.time.DateTime dateTime41 = dateTime25.withWeekyear(86399);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = period45.getFieldTypes();
        org.joda.time.Period period48 = period45.minusYears((int) (byte) 1);
        org.joda.time.Period period50 = period45.plusMonths((int) (byte) 0);
        org.joda.time.Period period52 = period45.withMillis((int) '#');
        org.joda.time.Period period54 = period52.minusMinutes((int) 'u');
        org.joda.time.Period period56 = period54.withMillis((int) (byte) 100);
        org.joda.time.Period period58 = period56.plusMillis((-52));
        org.joda.time.Period period60 = period58.plusHours((-3565));
        boolean boolean61 = dateTime41.equals((java.lang.Object) period60);
        org.joda.time.DateTime dateTime63 = dateTime41.withWeekyear(0);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test08811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08811");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        org.joda.time.DateMidnight dateMidnight31 = dateTime27.toDateMidnight();
        int int32 = dateTime27.getHourOfDay();
        org.joda.time.Days days33 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) instant24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime35 = dateTime27.plusHours((int) 'x');
        org.joda.time.DateTime dateTime37 = dateTime27.minusHours(0);
        org.joda.time.DateTime.Property property38 = dateTime27.minuteOfHour();
        long long39 = dateTime27.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    }

    @Test
    public void test08812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08812");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.plus(4190400000L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant12 = instant10.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTimeISO();
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        boolean boolean16 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        int int22 = instant15.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant25 = instant15.withDurationAdded((long) (byte) 10, (-1));
        boolean boolean26 = dateTime2.equals((java.lang.Object) (-1));
        boolean boolean27 = dateTime2.isBeforeNow();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (short) 10, periodType29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.DateTime dateTime34 = instant33.toDateTimeISO();
        org.joda.time.Duration duration35 = period30.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Hours hours36 = duration35.toStandardHours();
        org.joda.time.DateTime dateTime37 = dateTime2.minus((org.joda.time.ReadableDuration) duration35);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(hours36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test08813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08813");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Days days8 = duration2.toStandardDays();
        org.joda.time.Days days10 = days8.dividedBy(98);
        org.joda.time.DurationFieldType durationFieldType11 = days10.getFieldType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test08814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08814");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTime.Property property5 = dateTime4.era();
        org.joda.time.DateTime dateTime6 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateMidnight dateMidnight8 = dateTime4.toDateMidnight();
        int int9 = dateTime4.getEra();
        org.joda.time.Chronology chronology10 = dateTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((-115706879999998030L), chronology10);
        org.joda.time.Period period13 = org.joda.time.Period.hours(1969);
        org.joda.time.Weeks weeks14 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period13);
        int[] intArray17 = chronology10.get((org.joda.time.ReadablePeriod) period13, (long) 0, (long) 70);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 999, chronology10);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        int int21 = dateTimeZone19.getStandardOffset(2147483648L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 70]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08815");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.standardSecondsIn(readablePeriod0);
        org.joda.time.Hours hours2 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod) seconds1);
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test08816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08816");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationTo(readableInstant4);
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = duration8.toPeriodFrom(readableInstant9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.plus((long) (byte) 0);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        boolean boolean28 = dateTime26.isEqual(10L);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType31, chronology32);
        org.joda.time.PeriodType periodType34 = periodType31.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration17, periodType34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = duration8.toPeriod(periodType34, chronology37);
        org.joda.time.Hours hours39 = org.joda.time.Hours.TWO;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        boolean boolean42 = hours39.isSupported(durationFieldType41);
        boolean boolean43 = periodType34.isSupported(durationFieldType41);
        org.joda.time.PeriodType periodType44 = periodType34.withMonthsRemoved();
        int int45 = periodType34.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test08817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08817");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTime.Property property13 = dateTime2.dayOfMonth();
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        int int16 = days14.get(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod17 = days14.toMutablePeriod();
        org.joda.time.Days days19 = days14.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration20 = days14.toStandardDuration();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime25 = instant22.toMutableDateTimeISO();
        int int26 = mutableDateTime25.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) mutableDateTime25);
        long long28 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        java.lang.String str29 = property13.getAsShortText();
        java.lang.String str30 = property13.getAsText();
        org.joda.time.DateTime dateTime31 = property13.roundHalfEvenCopy();
        java.lang.Object obj32 = null;
        org.joda.time.Instant instant33 = new org.joda.time.Instant(obj32);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        java.lang.String str35 = dateTimeZone34.toString();
        java.lang.String str37 = dateTimeZone34.getName((long) 10);
        long long40 = dateTimeZone34.convertLocalToUTC((long) (byte) 100, false);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset((long) 365);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.withZone(dateTimeZone48);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean56 = dateTime52.isSupported(dateTimeFieldType55);
        org.joda.time.DateTime.Property property57 = dateTime47.property(dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime47.getZone();
        org.joda.time.LocalDateTime localDateTime59 = dateTime47.toLocalDateTime();
        boolean boolean60 = dateTimeZone42.isLocalDateTimeGap(localDateTime59);
        boolean boolean61 = dateTimeZone34.isLocalDateTimeGap(localDateTime59);
        org.joda.time.DateTime dateTime62 = dateTime31.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime.Property property64 = dateTime63.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31" + "'", str29, "31");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "31" + "'", str30, "31");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test08818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08818");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getDurationField();
        long long11 = dateTimeField2.getDifferenceAsLong((long) 10, 63808214400000L);
        int int13 = dateTimeField2.getMaximumValue(4438800000L);
        java.lang.String str15 = dateTimeField2.getAsShortText((-12626452500719994L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1477041L) + "'", long11 == (-1477041L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u5348\u524d" + "'", str15, "\u5348\u524d");
    }

    @Test
    public void test08819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08819");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        boolean boolean5 = property2.isLeap();
        java.lang.String str6 = property2.getAsString();
        org.joda.time.DateTime dateTime7 = property2.withMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test08820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08820");
        org.joda.time.Period period3 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period5 = period3.plusWeeks((int) (byte) 1);
        int int6 = period3.size();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Period period8 = period3.minus(readablePeriod7);
        org.joda.time.Period period10 = period3.minusWeeks(2);
        org.joda.time.Period period12 = period10.withHours(1969);
        org.joda.time.PeriodType periodType13 = period12.getPeriodType();
        org.joda.time.Period period14 = new org.joda.time.Period((long) (-292275054), 0L, periodType13);
        org.joda.time.Duration duration15 = period14.toStandardDuration();
        org.joda.time.Hours hours16 = period14.toStandardHours();
        org.joda.time.Period period18 = period14.multipliedBy((int) ' ');
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test08821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08821");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        boolean boolean6 = periodFormatter3.isPrinter();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter3.withParseType(periodType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime.Property property14 = dateTime11.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("2022-02-21T14:52:37.985Z");
        int int17 = property14.getMaximumShortTextLength(locale16);
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter3.withLocale(locale16);
        org.joda.time.format.PeriodPrinter periodPrinter19 = periodFormatter3.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod20 = org.joda.time.MutablePeriod.parse("java.io.IOException: secondOfDay", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNull(periodPrinter19);
    }

    @Test
    public void test08822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08822");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.TimeOfDay timeOfDay38 = dateTime12.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = dateTime40.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        java.lang.String str43 = property42.getName();
        int int44 = property42.getLeapAmount();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "minuteOfHour" + "'", str43, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test08823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08823");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis(720000L);
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08824");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfHour();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        int int8 = property5.getMaximumTextLength(locale6);
        org.joda.time.DateTime dateTime9 = property5.roundHalfFloorCopy();
        java.lang.String str10 = property5.getAsText();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "59" + "'", str10, "59");
    }

    @Test
    public void test08825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08825");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus((-311040000000000L));
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test08826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08826");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(53);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test08827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08827");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withSecondsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test08828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08828");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = interval3.toPeriod();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = period24.getFieldTypes();
        int int26 = period24.getMinutes();
        org.joda.time.Period period28 = period24.withDays((int) ' ');
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.Period period30 = interval3.toPeriod(periodType29);
        org.joda.time.Period period31 = period30.toPeriod();
        int int32 = period30.getSeconds();
        int int33 = period30.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
    }

    @Test
    public void test08829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08829");
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = period5.getFieldTypes();
        org.joda.time.Period period8 = period5.minusYears((int) (byte) 1);
        org.joda.time.Period period10 = period5.plusMonths((int) (byte) 0);
        int int11 = period5.getHours();
        org.joda.time.Period period13 = period5.multipliedBy((int) (byte) 1);
        org.joda.time.Days days14 = period5.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType15 = days14.getFieldType();
        org.joda.time.PeriodType periodType16 = days14.getPeriodType();
        org.joda.time.Period period17 = new org.joda.time.Period((long) (-52), 20995201970L, periodType16);
        java.lang.String str18 = periodType16.toString();
        org.joda.time.PeriodType periodType19 = periodType16.withHoursRemoved();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Days]" + "'", str18, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test08830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08830");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1249655299200000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1249655299200000000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08831");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        java.lang.String str21 = interval19.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        boolean boolean30 = interval25.contains((org.joda.time.ReadableInterval) interval29);
        boolean boolean31 = interval19.isBefore((org.joda.time.ReadableInterval) interval29);
        boolean boolean32 = interval3.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        java.lang.Object obj42 = null;
        org.joda.time.Instant instant43 = new org.joda.time.Instant(obj42);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone44);
        boolean boolean47 = interval36.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        boolean boolean52 = interval36.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfEra();
        org.joda.time.Interval interval69 = property68.toInterval();
        boolean boolean70 = interval65.contains((org.joda.time.ReadableInterval) interval69);
        boolean boolean71 = interval60.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology76);
        org.joda.time.DateTime.Property property78 = dateTime77.yearOfEra();
        org.joda.time.Interval interval79 = property78.toInterval();
        boolean boolean80 = interval75.contains((org.joda.time.ReadableInterval) interval79);
        java.lang.String str81 = interval79.toString();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        org.joda.time.DateTime.Property property84 = dateTime83.yearOfEra();
        org.joda.time.Interval interval85 = property84.toInterval();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(chronology86);
        org.joda.time.DateTime.Property property88 = dateTime87.yearOfEra();
        org.joda.time.Interval interval89 = property88.toInterval();
        boolean boolean90 = interval85.contains((org.joda.time.ReadableInterval) interval89);
        boolean boolean91 = interval79.isBefore((org.joda.time.ReadableInterval) interval89);
        boolean boolean92 = interval65.overlaps((org.joda.time.ReadableInterval) interval89);
        boolean boolean93 = interval36.isAfter((org.joda.time.ReadableInterval) interval89);
        boolean boolean94 = interval19.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Chronology chronology95 = interval19.getChronology();
        org.joda.time.DurationField durationField96 = chronology95.centuries();
        long long99 = durationField96.getDifferenceAsLong((long) 292420005, (-17536560000L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str21, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str81, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test08832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08832");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        int int4 = property2.getMaximumValue();
        java.lang.String str5 = property2.getName();
        org.joda.time.DateTime dateTime7 = property2.addToCopy(12);
        org.joda.time.DateTime.Property property8 = dateTime7.secondOfDay();
        boolean boolean9 = property8.isLeap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yearOfEra" + "'", str5, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08833");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getDurationField();
        long long10 = durationField8.getMillis((int) '4');
        java.lang.String str11 = durationField8.toString();
        boolean boolean12 = durationField8.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2246400000L + "'", long10 == 2246400000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[halfdays]" + "'", str11, "DurationField[halfdays]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08834");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.minuteOfDay();
        org.joda.time.DurationField durationField67 = chronology62.eras();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test08835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08835");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = chronology62.millis();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.millisOfSecond();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTimeField dateTimeField71 = chronology62.dayOfYear();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test08836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08836");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("PT-7H-47M-49.990S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt-7h-47m-49.990s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08837");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        int int14 = dateTime2.getMinuteOfDay();
        int int15 = dateTime2.getSecondOfDay();
        int int16 = dateTime2.getWeekyear();
        int int17 = dateTime2.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1439 + "'", int14 == 1439);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86399 + "'", int15 == 86399);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
    }

    @Test
    public void test08838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08838");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = dateTime17.isEqualNow();
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime17.withDayOfWeek(6);
        java.lang.Object obj25 = null;
        org.joda.time.Instant instant26 = new org.joda.time.Instant(obj25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone27);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = dateTimeZone27.getShortName(100L, locale31);
        java.lang.String str34 = locale31.getDisplayLanguage();
        java.lang.String str35 = locale31.getISO3Language();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        long long41 = dateTimeField38.add(0L, (long) (short) 1);
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str48 = dateTimeField38.getAsText((long) 1969, locale46);
        java.lang.Object obj49 = null;
        org.joda.time.Instant instant50 = new org.joda.time.Instant(obj49);
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        java.lang.String str52 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = dateTimeZone51.getShortName(100L, locale55);
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        java.lang.String str61 = dateTimeZone51.getShortName((long) (short) -1, locale59);
        java.lang.String str62 = locale46.getDisplayCountry(locale59);
        java.lang.String str63 = locale59.getISO3Country();
        java.lang.String str64 = locale31.getDisplayLanguage(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = dateTime17.toString("java.io.IOException: java.io.IOException: java.io.IOException: days", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str34, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "jpn" + "'", str35, "jpn");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 43200000L + "'", long41 == 43200000L);
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AM" + "'", str48, "AM");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "HI!" + "'", str62, "HI!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Japanese" + "'", str64, "Japanese");
    }

    @Test
    public void test08839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08839");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        int int6 = property5.getMinimumValue();
        org.joda.time.DateTime dateTime7 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime8 = property5.roundFloorCopy();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        mutablePeriod24.setMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime29 = dateTime16.minusWeeks((int) (byte) 1);
        int int30 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property31 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime16.withYear(1969);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfHalfday();
        long long40 = dateTimeField38.roundHalfEven(2980800000L);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.DateTime dateTime45 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant49, periodType50);
        mutablePeriod51.setMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime43.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.LocalDate localDate55 = dateTime43.toLocalDate();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.Instant instant61 = dateTime58.toInstant();
        org.joda.time.Seconds seconds62 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime.Property property66 = dateTime65.era();
        org.joda.time.DateTime dateTime67 = property66.withMinimumValue();
        int int68 = property66.getMaximumValueOverall();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale69.getScript();
        java.lang.String str71 = locale69.getDisplayCountry();
        int int72 = property66.getMaximumShortTextLength(locale69);
        org.joda.time.DateTime dateTime73 = property66.withMaximumValue();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType75 = periodType74.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime73, periodType74);
        org.joda.time.DateTime dateTime78 = dateTime73.plusWeeks((-2147483648));
        org.joda.time.YearMonthDay yearMonthDay79 = dateTime73.toYearMonthDay();
        int int80 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay79);
        int int81 = dateTime8.get(dateTimeField38);
        int int83 = dateTimeField38.getMaximumValue((long) 62);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2980800000L + "'", long40 == 2980800000L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 11 + "'", int81 == 11);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 11 + "'", int83 == 11);
    }

    @Test
    public void test08840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08840");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant32);
        boolean boolean34 = instant15.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.toInstant();
        org.joda.time.Chronology chronology36 = instant32.getChronology();
        org.joda.time.Chronology chronology37 = chronology36.withUTC();
        org.joda.time.DurationField durationField38 = chronology37.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        java.lang.String str40 = chronology37.toString();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
    }

    @Test
    public void test08841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08841");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual(10L);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        long long22 = dateTimeField16.add(1L, (-1));
        int int23 = dateTime9.get(dateTimeField16);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean26 = dateTime9.isSupported(dateTimeFieldType25);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int36 = mutablePeriod35.getDays();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfEra();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        boolean boolean47 = interval42.contains((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        mutablePeriod35.setPeriod((long) 'u', (long) 1969, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.yearOfCentury();
        boolean boolean52 = dateTimeFieldType25.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.dayOfWeek();
        org.joda.time.DurationField durationField54 = chronology48.seconds();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43199999L) + "'", long22 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test08842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08842");
        org.joda.time.Hours hours1 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours3 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours5 = hours3.minus((int) (short) 10);
        boolean boolean6 = hours1.isGreaterThan(hours5);
        java.lang.Object obj7 = null;
        org.joda.time.Instant instant8 = new org.joda.time.Instant(obj7);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        boolean boolean10 = hours5.equals((java.lang.Object) dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-9859), dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (-813));
        long long17 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08843");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (short) 1, (int) (short) -1, (-1), (int) ' ', (int) (short) 100, (-1), (int) ' ', 100);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime11.toTimeOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        java.lang.Object obj16 = null;
        org.joda.time.Instant instant17 = new org.joda.time.Instant(obj16);
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        java.lang.String str19 = dateTimeZone18.toString();
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) '4');
        java.util.TimeZone timeZone22 = dateTimeZone18.toTimeZone();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.Object obj24 = locale23.clone();
        boolean boolean25 = dateTimeZone18.equals(obj24);
        java.lang.String str27 = dateTimeZone18.getShortName((-26179201L));
        java.lang.String str28 = dateTimeZone18.getID();
        org.joda.time.DateTime dateTime29 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.Instant instant35 = dateTime32.toInstant();
        org.joda.time.DateMidnight dateMidnight36 = dateTime32.toDateMidnight();
        int int37 = dateTime32.getEra();
        org.joda.time.DateTime dateTime39 = dateTime32.withWeekyear(0);
        org.joda.time.Seconds seconds40 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod41 = seconds40.toMutablePeriod();
        org.joda.time.Duration duration42 = seconds40.toStandardDuration();
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.Instant instant48 = dateTime45.toInstant();
        org.joda.time.DateMidnight dateMidnight49 = dateTime45.toDateMidnight();
        int int50 = dateMidnight49.getDayOfYear();
        boolean boolean51 = dateMidnight49.isAfterNow();
        org.joda.time.Instant instant52 = dateMidnight49.toInstant();
        org.joda.time.MutableDateTime mutableDateTime53 = instant52.toMutableDateTime();
        org.joda.time.Interval interval54 = duration42.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime53);
        boolean boolean55 = dateTime39.equals((java.lang.Object) duration42);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = instant58.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime.Property property62 = dateTime61.weekOfWeekyear();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration65, readableInstant66, periodType67);
        org.joda.time.DateTime dateTime69 = dateTime61.plus((org.joda.time.ReadableDuration) duration65);
        int int70 = dateTime69.getDayOfYear();
        boolean boolean71 = dateTime69.isBeforeNow();
        org.joda.time.DateTime dateTime73 = dateTime69.minusMillis((int) (short) 100);
        java.lang.Object obj74 = null;
        org.joda.time.Instant instant75 = new org.joda.time.Instant(obj74);
        org.joda.time.DateTimeZone dateTimeZone76 = instant75.getZone();
        java.lang.String str77 = dateTimeZone76.toString();
        int int79 = dateTimeZone76.getOffset(1L);
        boolean boolean81 = dateTimeZone76.isStandardOffset(0L);
        java.lang.String str83 = dateTimeZone76.getNameKey((long) 1);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone76);
        org.joda.time.DateTime.Property property85 = dateTime84.secondOfDay();
        org.joda.time.DateTime dateTime87 = dateTime84.plusMillis(59);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime84);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "ko");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 365 + "'", int50 == 365);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test08844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08844");
        org.joda.time.Period period4 = new org.joda.time.Period((-100), (int) ' ', 2022, 1972);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = period4.getFieldTypes();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.forFields(durationFieldTypeArray5);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.forFields(durationFieldTypeArray5);
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test08845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08845");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        mutablePeriod5.addMillis(10);
        mutablePeriod5.setSeconds((int) (short) -1);
        int int16 = mutablePeriod5.getMinutes();
        mutablePeriod5.setPeriod(37868342400000L);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, readableInstant22, periodType23);
        org.joda.time.Days days25 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        int int27 = days25.get(durationFieldType26);
        mutablePeriod24.add(durationFieldType26, 8);
        int int30 = mutablePeriod24.getHours();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        boolean boolean39 = interval34.contains((org.joda.time.ReadableInterval) interval38);
        java.lang.String str40 = interval34.toString();
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval34);
        java.lang.String str42 = interval34.toString();
        long long43 = interval34.getEndMillis();
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Days days45 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Days days46 = days45.negated();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str40, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str42, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1672531200000L + "'", long43 == 1672531200000L);
        org.junit.Assert.assertNotNull(days45);
        org.junit.Assert.assertNotNull(days46);
    }

    @Test
    public void test08846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08846");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getMonths();
        mutablePeriod8.setPeriod(8380845299L);
        mutablePeriod8.addSeconds((int) 'x');
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration19 = null;
        boolean boolean20 = duration17.isEqual(readableDuration19);
        org.joda.time.Duration duration22 = duration17.minus((long) 1);
        org.joda.time.Duration duration24 = duration22.minus((long) '4');
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = duration34.plus((long) (byte) 0);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        boolean boolean42 = dateTime40.isEqual(10L);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType45, chronology46);
        org.joda.time.PeriodType periodType48 = periodType45.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime40, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31, periodType48);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        org.joda.time.Duration duration54 = duration22.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int65 = mutablePeriod64.getDays();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfEra();
        org.joda.time.Interval interval71 = property70.toInterval();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.yearOfEra();
        org.joda.time.Interval interval75 = property74.toInterval();
        boolean boolean76 = interval71.contains((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Chronology chronology77 = interval75.getChronology();
        mutablePeriod64.setPeriod((long) 'u', (long) 1969, chronology77);
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 100, chronology77);
        org.joda.time.Period period80 = duration54.toPeriod(chronology77);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(10L, chronology77);
        mutablePeriod81.setPeriod((long) 12);
        mutablePeriod81.clear();
        mutablePeriod81.setYears((int) 'u');
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        mutablePeriod81.addYears((-5879610));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test08847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08847");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration4 = null;
        boolean boolean5 = duration2.isEqual(readableDuration4);
        org.joda.time.Duration duration7 = duration2.minus((long) 1);
        org.joda.time.Duration duration9 = duration7.minus((long) '4');
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        boolean boolean27 = dateTime25.isEqual(10L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType30, chronology31);
        org.joda.time.PeriodType periodType33 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25, periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration16, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime12, periodType36);
        org.joda.time.Duration duration39 = duration7.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int50 = mutablePeriod49.getDays();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfEra();
        org.joda.time.Interval interval60 = property59.toInterval();
        boolean boolean61 = interval56.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        mutablePeriod49.setPeriod((long) 'u', (long) 1969, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 100, chronology62);
        org.joda.time.Period period65 = duration39.toPeriod(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = chronology62.millis();
        org.joda.time.DateTimeField dateTimeField68 = chronology62.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.millisOfSecond();
        long long71 = dateTimeField69.roundFloor(1440000L);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1440000L + "'", long71 == 1440000L);
    }

    @Test
    public void test08848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08848");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        int int11 = mutablePeriod5.getHours();
        mutablePeriod5.setSeconds(59);
        mutablePeriod5.setMonths(1970);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod5.toMutablePeriod();
        mutablePeriod5.addDays(30);
        int int19 = mutablePeriod5.getYears();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test08849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08849");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime21 = dateTime8.minusWeeks((int) (byte) 1);
        int int22 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property23 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime8.withYear(1969);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        java.lang.String str29 = chronology26.toString();
        org.joda.time.Period period30 = new org.joda.time.Period((-43200000L), chronology26);
        org.joda.time.DurationField durationField31 = chronology26.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology26.getDateTimeMillis((-28800000000L), 51, 43198030, 15, (-813));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test08850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08850");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology52.months();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int[] intArray65 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay63, (long) 86399);
        org.joda.time.DateTimeField dateTimeField66 = chronology52.millisOfDay();
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 26, 399]");
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test08851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08851");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.Instant instant5 = instant3.plus((long) 100);
        org.joda.time.Instant instant7 = instant3.withMillis((long) (byte) 1);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period11 = period9.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationTo(readableInstant12);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant20 = instant18.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant18.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period23 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime21, periodType22);
        org.joda.time.Instant instant24 = instant7.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant25 = instant7.toInstant();
        org.joda.time.Instant instant27 = instant25.withMillis((long) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        org.joda.time.Instant instant33 = instant31.plus((long) 100);
        org.joda.time.Instant instant35 = instant31.withMillis((long) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period39 = period37.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = period39.toDurationTo(readableInstant40);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant48 = instant46.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime49 = instant46.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period51 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime49, periodType50);
        org.joda.time.Instant instant52 = instant35.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant53 = instant35.toInstant();
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        int int55 = instant25.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime();
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = instant58.toDateTime();
        org.joda.time.DateTime.Property property60 = dateTime59.era();
        org.joda.time.DateTime dateTime61 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.Duration duration64 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, readableInstant65, periodType66);
        mutablePeriod67.setMonths((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime59.plus((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTime dateTime72 = dateTime59.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property73 = dateTime72.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime72.getZone();
        long long76 = dateTimeZone74.previousTransition((long) '#');
        org.joda.time.DateTime dateTime77 = dateTime54.toDateTime(dateTimeZone74);
        org.joda.time.DateTime.Property property78 = dateTime77.hourOfDay();
        org.joda.time.DateTime dateTime79 = dateTime77.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 35L + "'", long76 == 35L);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test08852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08852");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime22 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfHour();
        org.joda.time.DateTime dateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.minusDays(53832943);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(0L);
        java.lang.Object obj29 = null;
        org.joda.time.Instant instant30 = new org.joda.time.Instant(obj29);
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = duration34.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period39 = duration34.toPeriodTo(readableInstant38);
        org.joda.time.Duration duration41 = duration34.withMillis((long) (short) 0);
        org.joda.time.Duration duration44 = duration34.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        boolean boolean49 = dateTime47.isEqual(10L);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime47, periodType50);
        org.joda.time.DateTime dateTime53 = dateTime47.minusSeconds((int) 'a');
        org.joda.time.DateTime dateTime55 = dateTime47.withMinuteOfHour(0);
        int int56 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime47);
        int int57 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime59 = dateTime47.withYear(0);
        boolean boolean60 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08853");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getHourOfDay();
        int int8 = dateTime2.getEra();
        org.joda.time.DateTime.Property property9 = dateTime2.centuryOfEra();
        java.lang.Object obj10 = null;
        org.joda.time.Instant instant11 = new org.joda.time.Instant(obj10);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        java.lang.String str13 = dateTimeZone12.toString();
        int int15 = dateTimeZone12.getOffset(1L);
        java.lang.String str16 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime2.toMutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime27.plus((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTime dateTime40 = dateTime27.minusWeeks((int) (byte) 1);
        int int41 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property42 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime44 = dateTime27.withYear(1969);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfMonth();
        org.joda.time.DurationField durationField47 = chronology45.minutes();
        org.joda.time.DateTime dateTime48 = dateTime19.toDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField49 = chronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.clockhourOfHalfday();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime17.toMutableDateTime(chronology45);
        int int53 = mutableDateTime17.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 59 + "'", int53 == 59);
    }

    @Test
    public void test08854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08854");
        java.io.IOException iOException3 = new java.io.IOException("Chinese (China)");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException("1969-12-29T20:59:59.999Z", (java.lang.Throwable) iOException3);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException(throwable8);
        java.io.IOException iOException10 = new java.io.IOException(throwable8);
        java.io.IOException iOException11 = new java.io.IOException("DurationField[hours]", (java.lang.Throwable) iOException10);
        iOException6.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException13 = new java.io.IOException("13", (java.lang.Throwable) iOException10);
    }

    @Test
    public void test08855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08855");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getEra();
        org.joda.time.DateTime dateTime9 = dateTime2.withWeekyear(0);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, readableInstant18, periodType19);
        mutablePeriod20.setMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime12.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTime dateTime25 = dateTime12.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime.Property property27 = dateTime25.weekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime25.plusHours((int) 'u');
        org.joda.time.DateTime dateTime32 = dateTime30.plusYears(3);
        int int33 = dateTime32.getDayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset((long) 365);
        java.lang.String str39 = dateTimeZone35.getName((long) (byte) 1);
        org.joda.time.DateTime dateTime40 = dateTime32.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Period period49 = duration44.toPeriodTo(readableInstant48);
        org.joda.time.Weeks weeks50 = period49.toStandardWeeks();
        org.joda.time.Period period52 = period49.plusMonths((int) (short) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = period49.getFieldTypes();
        org.joda.time.Period period55 = period49.withDays(1969);
        int int56 = period49.getYears();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 58, (-26179201000L), periodType59);
        org.joda.time.Period period61 = period49.normalizedStandard(periodType59);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime41, periodType59);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 364 + "'", int33 == 364);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(weeks50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test08856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08856");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        int int6 = property5.getMinimumValue();
        org.joda.time.DateTime dateTime7 = property5.getDateTime();
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Period period10 = org.joda.time.Period.seconds((-1));
        int int11 = period10.getYears();
        org.joda.time.Period period13 = period10.plusSeconds((int) (byte) 0);
        org.joda.time.Period period15 = period13.plusMinutes(19);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.eras();
        int int17 = period15.indexOf(durationFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime7.withFieldAdded(durationFieldType16, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str8, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test08857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08857");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period6 = period1.withFieldAdded(durationFieldType4, (int) (short) 100);
        org.joda.time.Period period8 = period1.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        org.joda.time.Period period22 = period1.withField(durationFieldType20, 19);
        org.joda.time.Duration duration23 = period1.toStandardDuration();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test08858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08858");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime27 = dateTime14.minusWeeks((int) (byte) 1);
        int int28 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property29 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime14.withYear(1969);
        boolean boolean33 = dateTime31.isAfter((long) (short) -1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withFields(readablePartial38);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateTime dateTime43 = dateTime31.withYear((int) (byte) 0);
        int int44 = dateTime43.getHourOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.minusDays((-155));
        boolean boolean47 = languageRange1.equals((java.lang.Object) (-155));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23 + "'", int44 == 23);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08859");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        java.lang.Object obj5 = null;
        org.joda.time.Instant instant6 = new org.joda.time.Instant(obj5);
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        long long11 = dateTimeZone4.getMillisKeepLocal(dateTimeZone7, (-625L));
        boolean boolean13 = dateTimeZone4.isStandardOffset((long) 86399999);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-625L) + "'", long11 == (-625L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08860");
        org.joda.time.Days days1 = org.joda.time.Days.days(86399000);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test08861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08861");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, readableInstant26, periodType27);
        mutablePeriod28.setMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime dateTime33 = dateTime20.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.monthOfYear();
        org.joda.time.DateTime.Property property35 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime33.plusHours((int) 'u');
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.withFields(readablePartial43);
        org.joda.time.DateTime dateTime46 = dateTime41.withYearOfEra(292278993);
        org.joda.time.Minutes minutes47 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.Object obj48 = null;
        org.joda.time.Instant instant49 = new org.joda.time.Instant(obj48);
        org.joda.time.DateTimeZone dateTimeZone50 = instant49.getZone();
        java.lang.String str51 = dateTimeZone50.toString();
        int int53 = dateTimeZone50.getOffset(1L);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime41.toMutableDateTime(dateTimeZone50);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration57 = org.joda.time.Duration.parse("PT432000S");
        org.joda.time.Duration duration59 = duration57.plus(259200000L);
        org.joda.time.Minutes minutes60 = duration59.toStandardMinutes();
        mutablePeriod55.add((org.joda.time.ReadableDuration) duration59);
        mutablePeriod55.addMillis((-813));
        mutablePeriod55.addYears(75659999);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(minutes60);
    }

    @Test
    public void test08862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08862");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) (byte) 0);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType6, chronology7);
        org.joda.time.Period period9 = new org.joda.time.Period((long) 11, 0L, periodType6);
        int int10 = periodType6.size();
        org.joda.time.PeriodType periodType11 = periodType6.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType6.withMonthsRemoved();
        org.joda.time.Period period13 = period1.withPeriodType(periodType12);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        org.joda.time.Weeks weeks15 = minutes14.toStandardWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(weeks15);
    }

    @Test
    public void test08863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08863");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology6);
        org.joda.time.PeriodType periodType8 = periodType3.withMonthsRemoved();
        org.joda.time.PeriodType periodType9 = periodType3.withMinutesRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withMonthsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test08864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08864");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        boolean boolean7 = property5.equals((java.lang.Object) "1969-12-31T23:59:59.899Z");
        java.util.Locale locale8 = java.util.Locale.KOREA;
        int int9 = property5.getMaximumTextLength(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        org.joda.time.Interval interval11 = property5.toInterval();
        org.joda.time.DateTime dateTime12 = property5.roundCeilingCopy();
        int int13 = property5.getMaximumValueOverall();
        int int14 = property5.getMinimumValueOverall();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Chronology chronology24 = interval22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = property31.withMinimumValue();
        int int33 = property31.getMaximumValueOverall();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = locale34.getDisplayCountry();
        int int37 = property31.getMaximumShortTextLength(locale34);
        org.joda.time.DateTime dateTime38 = property31.withMaximumValue();
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        long long41 = chronology24.set((org.joda.time.ReadablePartial) localTime39, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField42 = chronology24.minuteOfDay();
        java.lang.Object obj44 = null;
        org.joda.time.Instant instant45 = new org.joda.time.Instant(obj44);
        org.joda.time.DateTimeZone dateTimeZone46 = instant45.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone46);
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = dateTimeZone46.getShortName(100L, locale50);
        java.lang.String str53 = locale50.getScript();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.lang.String str56 = locale50.getDisplayVariant(locale54);
        java.lang.String str57 = dateTimeField42.getAsShortText((long) (-1), locale54);
        boolean boolean58 = dateTimeField42.isLenient();
        java.lang.Object obj60 = null;
        org.joda.time.Instant instant61 = new org.joda.time.Instant(obj60);
        org.joda.time.DateTimeZone dateTimeZone62 = instant61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone62);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.lang.String str67 = locale66.getDisplayScript();
        java.lang.String str68 = dateTimeZone62.getShortName(100L, locale66);
        java.lang.String str69 = locale66.getDisplayLanguage();
        java.lang.String str70 = locale66.getDisplayScript();
        java.lang.String str71 = locale66.getScript();
        java.lang.String str72 = locale66.getVariant();
        java.lang.String str73 = dateTimeField42.getAsText((long) 893, locale66);
        java.lang.Object obj74 = null;
        org.joda.time.Instant instant75 = new org.joda.time.Instant(obj74);
        org.joda.time.DateTimeZone dateTimeZone76 = instant75.getZone();
        java.lang.String str77 = dateTimeZone76.toString();
        int int79 = dateTimeZone76.getOffset(1L);
        boolean boolean81 = dateTimeZone76.isStandardOffset(0L);
        java.lang.String str83 = dateTimeZone76.getNameKey((long) 1);
        java.util.Locale locale85 = java.util.Locale.FRENCH;
        java.lang.String str86 = dateTimeZone76.getName((long) (byte) 10, locale85);
        int int87 = dateTimeField42.getMaximumShortTextLength(locale85);
        java.lang.String str88 = property5.getAsText(locale85);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86399999L + "'", long41 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1439" + "'", str57, "1439");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str69, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "19" + "'", str88, "19");
    }

    @Test
    public void test08865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08865");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        java.lang.String str12 = dateTimeField11.getName();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, readableInstant21, periodType22);
        mutablePeriod23.setMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime28 = dateTime15.minusWeeks((int) (byte) 1);
        long long29 = dateTime15.getMillis();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, readableInstant44, periodType45);
        mutablePeriod46.setMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime38.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTime dateTime51 = dateTime38.minusWeeks((int) (byte) 1);
        int int52 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property53 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime38.withYear(1969);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.DurationField durationField57 = durationFieldType30.getField(chronology56);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology56);
        org.joda.time.DurationField durationField59 = chronology56.days();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology56.getZone();
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.era();
        org.joda.time.DateTime dateTime65 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, readableInstant69, periodType70);
        mutablePeriod71.setMonths((int) '4');
        org.joda.time.DateTime dateTime74 = dateTime63.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.LocalDate localDate75 = dateTime63.toLocalDate();
        long long77 = chronology56.set((org.joda.time.ReadablePartial) localDate75, (-3676492805054399977L));
        org.joda.time.Period period80 = org.joda.time.Period.weeks(8);
        int[] intArray81 = period80.getValues();
        int[] intArray83 = dateTimeField11.add((org.joda.time.ReadablePartial) localDate75, 2922789, intArray81, 0);
        int int85 = dateTimeField11.get((long) 117);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-43199977L) + "'", long77 == (-43199977L));
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 8, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 8, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test08866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08866");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = duration21.plus((long) (byte) 0);
        org.joda.time.Minutes minutes25 = duration21.toStandardMinutes();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType27 = periodType26.withMinutesRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableDuration) duration21, periodType26);
        boolean boolean29 = instant15.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        int int34 = dateTime32.getWeekOfWeekyear();
        int int35 = dateTime32.getMonthOfYear();
        org.joda.time.DateTime dateTime37 = dateTime32.withMillis(720000L);
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration39 = minutes38.toStandardDuration();
        org.joda.time.DurationFieldType durationFieldType40 = minutes38.getFieldType();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(durationFieldType40);
    }

    @Test
    public void test08867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08867");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        boolean boolean4 = dateTime2.isEqual(10L);
        org.joda.time.DateTime dateTime6 = dateTime2.withCenturyOfEra((int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual(10L);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        long long19 = dateTimeField16.add(0L, (long) (short) 1);
        long long22 = dateTimeField16.add(1L, (-1));
        int int23 = dateTime9.get(dateTimeField16);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period26 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period28 = period26.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationTo(readableInstant29);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration33.toPeriodFrom(readableInstant34);
        org.joda.time.DateTime dateTime36 = dateTime6.plus((org.joda.time.ReadableDuration) duration33);
        boolean boolean37 = dateTime6.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 43200000L + "'", long19 == 43200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-43199999L) + "'", long22 == (-43199999L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test08868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08868");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = property35.withMinimumValue();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime40 = dateTime36.minusSeconds((-11));
        java.lang.String str41 = dateTime40.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime40.withTime(53992700, 53992700, (int) 'a', 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53992700 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1968-01-01T00:00:10.999Z" + "'", str41, "-1968-01-01T00:00:10.999Z");
    }

    @Test
    public void test08869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08869");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime4.minuteOfDay();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        java.util.Locale locale27 = new java.util.Locale("DurationField[minutes]", "Days", "Chinese (China)");
        java.lang.String str28 = property22.getAsShortText(locale27);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals(locale27.toString(), "durationfield[minutes]_DAYS_Chinese (China)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1439" + "'", str28, "1439");
    }

    @Test
    public void test08870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08870");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        org.joda.time.Period period10 = period8.minusMinutes(100);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = period8.get(durationFieldType11);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08871");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-1));
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        boolean boolean11 = interval6.contains((org.joda.time.ReadableInterval) interval10);
        java.lang.String str12 = interval6.toString();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.PeriodType periodType14 = weeks13.getPeriodType();
        org.joda.time.Weeks weeks16 = weeks13.minus(86399999);
        boolean boolean17 = weeks1.isGreaterThan(weeks16);
        org.joda.time.Weeks weeks19 = weeks1.plus(111);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str12, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(weeks19);
    }

    @Test
    public void test08872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08872");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = weeks9.getFieldType();
        mutablePeriod5.add(durationFieldType10, (int) (byte) 0);
        mutablePeriod5.setSeconds(1439);
        mutablePeriod5.addMinutes(999);
        int int17 = mutablePeriod5.getMinutes();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
    }

    @Test
    public void test08873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08873");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = periodFormatter2.getLocale();
        org.joda.time.PeriodType periodType7 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType8 = periodFormatter2.getParseType();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType11, chronology12);
        org.joda.time.PeriodType periodType14 = periodType11.withWeeksRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter2.withParseType(periodType15);
        java.util.Locale locale21 = new java.util.Locale("DurationField[minutes]", "Days", "Chinese (China)");
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter17.withLocale(locale21);
        boolean boolean24 = periodFormatter17.isParser();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNull(periodType8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertEquals(locale21.toString(), "durationfield[minutes]_DAYS_Chinese (China)");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08874");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        int int5 = mutablePeriod4.getMillis();
        mutablePeriod4.addMinutes(59);
        int int8 = mutablePeriod4.getMillis();
        mutablePeriod4.setWeeks(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test08875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08875");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.DurationFieldType durationFieldType1 = seconds0.getFieldType();
        org.joda.time.Duration duration4 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration7 = duration4.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = duration4.toPeriodTo(readableInstant8);
        org.joda.time.Duration duration12 = duration4.withDurationAdded((long) (short) -1, (int) (byte) 100);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Seconds seconds14 = seconds0.plus(seconds13);
        org.joda.time.Duration duration15 = seconds14.toStandardDuration();
        org.joda.time.Duration duration17 = duration15.minus(7L);
        java.lang.String str18 = duration15.toString();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1S" + "'", str18, "PT1S");
    }

    @Test
    public void test08876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08876");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder6 = builder0.setExtension('u', "10");
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "1439");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setUnicodeLocaleKeyword("", "anglais");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08877");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder12.setExtension('a', "fr");
        java.util.Locale.Builder builder19 = builder12.setExtension('a', "year");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setRegion("PT-26179201S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: PT-26179201S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08878");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.DateTime.Property property18 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = property18.roundHalfEvenCopy();
        java.lang.String str21 = property18.getAsShortText();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969" + "'", str21, "1969");
    }

    @Test
    public void test08879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08879");
        java.io.IOException iOException1 = new java.io.IOException("1970");
        java.io.IOException iOException4 = new java.io.IOException();
        java.io.IOException iOException5 = new java.io.IOException("PT0S", (java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException("Italy", (java.lang.Throwable) iOException5);
        iOException1.addSuppressed((java.lang.Throwable) iOException7);
    }

    @Test
    public void test08880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08880");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        boolean boolean6 = periodFormatter2.isPrinter();
        org.joda.time.PeriodType periodType7 = periodFormatter2.getParseType();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter2.getPrinter();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Instant instant14 = dateTime11.toInstant();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime11.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long21 = dateTimeField18.add(0L, (long) (short) 1);
        long long23 = dateTimeField18.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant31 = instant29.minus(100L);
        org.joda.time.Instant instant33 = instant31.plus((long) 100);
        org.joda.time.Instant instant35 = instant31.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes36 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) instant31);
        org.joda.time.LocalTime localTime37 = dateTime26.toLocalTime();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, readableInstant42, periodType43);
        mutablePeriod44.setMonths((int) '4');
        org.joda.time.Period period47 = mutablePeriod44.toPeriod();
        int[] intArray48 = period47.getValues();
        int[] intArray50 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localTime37, 0, intArray48, 3);
        org.joda.time.Minutes minutes51 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        long long57 = dateTimeField54.add(0L, (long) (short) 1);
        long long59 = dateTimeField54.roundHalfCeiling((long) 2);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTime.Property property63 = dateTime62.era();
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant67 = instant65.minus(100L);
        org.joda.time.Instant instant69 = instant67.plus((long) 100);
        org.joda.time.Instant instant71 = instant67.withMillis((long) (byte) 1);
        org.joda.time.Minutes minutes72 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) instant67);
        org.joda.time.LocalTime localTime73 = dateTime62.toLocalTime();
        org.joda.time.Duration duration77 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration77, readableInstant78, periodType79);
        mutablePeriod80.setMonths((int) '4');
        org.joda.time.Period period83 = mutablePeriod80.toPeriod();
        int[] intArray84 = period83.getValues();
        int[] intArray86 = dateTimeField54.addWrapField((org.joda.time.ReadablePartial) localTime73, 0, intArray84, 3);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) localTime73);
        org.joda.time.Instant instant89 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime90 = instant89.toDateTime();
        org.joda.time.DateTime.Property property91 = dateTime90.era();
        org.joda.time.DateTime dateTime92 = dateTime90.withTimeAtStartOfDay();
        org.joda.time.Instant instant93 = dateTime90.toInstant();
        org.joda.time.TimeOfDay timeOfDay94 = dateTime90.toTimeOfDay();
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.days();
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay15, (org.joda.time.ReadablePartial) timeOfDay94, periodType95);
        org.joda.time.format.PeriodFormatter periodFormatter97 = periodFormatter2.withParseType(periodType95);
        java.util.Locale locale98 = periodFormatter97.getLocale();
        java.util.Locale locale99 = periodFormatter97.getLocale();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNull(periodPrinter8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 43200000L + "'", long21 == 43200000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 43200000L + "'", long57 == 43200000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(minutes72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 52, 0, 0, 0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(timeOfDay94);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(periodFormatter97);
        org.junit.Assert.assertNull(locale98);
        org.junit.Assert.assertNull(locale99);
    }

    @Test
    public void test08881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08881");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 11, periodType1);
        org.joda.time.Duration duration5 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = duration5.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = duration5.toPeriodTo(readableInstant9);
        org.joda.time.Duration duration12 = duration5.withMillis((long) (short) 0);
        org.joda.time.Duration duration15 = duration5.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration5, chronology16);
        mutablePeriod2.setMinutes(23);
        mutablePeriod2.addHours((int) (short) 1);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod2.toMutablePeriod();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = duration25.toPeriodTo(readableInstant29);
        org.joda.time.Duration duration32 = duration25.withMillis((long) (short) 0);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.withZoneRetainFields(dateTimeZone38);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, readableInstant48, periodType49);
        mutablePeriod50.setMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.DateTime dateTime55 = dateTime42.minusWeeks((int) (byte) 1);
        int int56 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property57 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime42.withYear(1969);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.year();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((-820800059L), 292278993L, chronology60);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration32, chronology60);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = chronology60.getDateTimeMillis(894, 335, (int) (byte) -1, 53669954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 335 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test08882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08882");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.Days days3 = org.joda.time.Days.FIVE;
        boolean boolean4 = days0.isLessThan(days3);
        org.joda.time.Days days5 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.Days days7 = days5.minus(292278993);
        org.joda.time.Duration duration10 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant11, periodType12);
        mutablePeriod13.setHours((int) (byte) 100);
        org.joda.time.Days days16 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        int int18 = days16.get(durationFieldType17);
        mutablePeriod13.set(durationFieldType17, (int) 'x');
        mutablePeriod13.setPeriod(100, 12, 1, 11, 10, (-2147483648), 8, 59);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, readableInstant33, periodType34);
        mutablePeriod35.setMonths((int) '4');
        org.joda.time.Period period39 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period41 = period39.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period44 = period39.withFieldAdded(durationFieldType42, (int) (short) 100);
        mutablePeriod35.set(durationFieldType42, (int) '4');
        mutablePeriod13.set(durationFieldType42, 19);
        int int49 = days5.get(durationFieldType42);
        org.joda.time.DurationFieldType durationFieldType50 = days5.getFieldType();
        java.lang.String str51 = days5.toString();
        boolean boolean52 = days0.isLessThan(days5);
        org.joda.time.PeriodType periodType53 = days5.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days55 = days5.multipliedBy(248400000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2147483647 * 248400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "P2147483647D" + "'", str51, "P2147483647D");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(periodType53);
    }

    @Test
    public void test08883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08883");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.DateTime.Property property18 = dateTime8.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime8.withEra(1857);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1857 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test08884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08884");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(720070L, (long) 78719999);
    }

    @Test
    public void test08885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08885");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((-1));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test08886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08886");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1969, chronology1);
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period4 = period2.normalizedStandard();
        org.joda.time.Period period6 = period4.multipliedBy(335);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test08887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08887");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfDay();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        java.lang.String str14 = dateTimeField13.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str14, "DateTimeField[secondOfMinute]");
    }

    @Test
    public void test08888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08888");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.secondsIn(readableInterval0);
        org.joda.time.Seconds seconds3 = seconds1.plus((int) (byte) -1);
        org.joda.time.Seconds seconds4 = org.joda.time.Seconds.TWO;
        org.joda.time.Seconds seconds5 = seconds3.plus(seconds4);
        org.joda.time.Seconds seconds7 = seconds4.multipliedBy(100);
        org.joda.time.DurationFieldType durationFieldType8 = seconds7.getFieldType();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(seconds5);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test08889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08889");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Period period1 = minutes0.toPeriod();
        org.joda.time.Period period3 = period1.withDays((-1));
        org.joda.time.Minutes minutes4 = period3.toStandardMinutes();
        org.joda.time.Minutes minutes6 = minutes4.multipliedBy(120000);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = minutes4.getValue(2159965);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 2159965");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes6);
    }

    @Test
    public void test08890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08890");
        java.util.Locale locale3 = new java.util.Locale("PT525600M", "P169Y69M1W10DT52H19M11.013S", "+00:02");
        org.junit.Assert.assertEquals(locale3.toString(), "pt525600m_P169Y69M1W10DT52H19M11.013S_+00:02");
    }

    @Test
    public void test08891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08891");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-1));
        org.joda.time.Weeks weeks2 = weeks1.negated();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.Interval interval10 = property9.toInterval();
        boolean boolean11 = interval6.contains((org.joda.time.ReadableInterval) interval10);
        java.lang.String str12 = interval6.toString();
        org.joda.time.Weeks weeks13 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval6);
        org.joda.time.PeriodType periodType14 = weeks13.getPeriodType();
        org.joda.time.Weeks weeks16 = weeks13.minus(86399999);
        boolean boolean17 = weeks1.isGreaterThan(weeks16);
        org.joda.time.Weeks weeks18 = weeks16.negated();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType20 = periodType19.withMonthsRemoved();
        java.lang.String str21 = periodType20.getName();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Instant instant27 = dateTime24.toInstant();
        boolean boolean28 = periodType20.equals((java.lang.Object) dateTime24);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = property32.withMinimumValue();
        boolean boolean34 = dateTime33.isAfterNow();
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Weeks weeks37 = weeks35.minus((int) (byte) 0);
        org.joda.time.Weeks weeks38 = weeks18.minus(weeks37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes39 = weeks38.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 86605422 * 10080");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str12, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Millis" + "'", str21, "Millis");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertNotNull(weeks38);
    }

    @Test
    public void test08892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08892");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) interval21);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZoneRetainFields(dateTimeZone29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        int int47 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property48 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime33.withYear(1969);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DurationField durationField52 = durationFieldType25.getField(chronology51);
        mutablePeriod5.add((-43199999L), chronology51);
        org.joda.time.DurationField durationField54 = chronology51.millis();
        org.joda.time.DurationField durationField55 = chronology51.months();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.weekyearOfCentury();
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test08893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08893");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getDays();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        boolean boolean20 = interval15.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        mutablePeriod8.setPeriod((long) 'u', (long) 1969, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.era();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test08894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08894");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType3, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) 0, periodType3, chronology6);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10, periodType9);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.joda.time.Duration duration15 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period20 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period22 = period20.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationTo(readableInstant23);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Period period29 = duration27.toPeriodFrom(readableInstant28);
        org.joda.time.Duration duration30 = duration18.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = duration15.plus((org.joda.time.ReadableDuration) duration18);
        mutablePeriod7.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int45 = mutablePeriod44.getDays();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Chronology chronology57 = interval55.getChronology();
        mutablePeriod44.setPeriod((long) 'u', (long) 1969, chronology57);
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, chronology57);
        mutablePeriod7.setPeriod((long) 1, (long) 69, chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.hourOfHalfday();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test08895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08895");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateTime2.toDateMidnight();
        int int7 = dateTime2.getHourOfDay();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.joda.time.DateTime.Property property25 = dateTime23.weekyear();
        int int26 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime27 = dateTime23.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test08896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08896");
        java.util.Locale locale3 = new java.util.Locale("DurationField[minutes]", "Days", "Chinese (China)");
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.Object obj6 = null;
        org.joda.time.Instant instant7 = new org.joda.time.Instant(obj6);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        java.lang.String str9 = dateTimeZone8.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone8);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = dateTimeZone8.getShortName(100L, locale12);
        java.lang.String str15 = locale12.getScript();
        boolean boolean16 = locale12.hasExtensions();
        java.util.Set<java.lang.String> strSet17 = locale12.getUnicodeLocaleKeys();
        java.lang.String str18 = locale12.getDisplayScript();
        java.lang.String str19 = locale3.getDisplayScript(locale12);
        org.junit.Assert.assertEquals(locale3.toString(), "durationfield[minutes]_DAYS_Chinese (China)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "durationfield[minutes]" + "'", str4, "durationfield[minutes]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08897");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime2.getZone();
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withYear((-59));
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime15.year();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08898");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (-596), periodType6);
        int int8 = mutablePeriod7.getDays();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08899");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(365, (int) (byte) 100, 1969, 52);
        int int5 = mutablePeriod4.getMinutes();
        mutablePeriod4.add(5011200000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    @Test
    public void test08900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08900");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.year();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology25.getZone();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.monthOfYear();
        boolean boolean31 = dateTimeField30.isSupported();
        long long33 = dateTimeField30.roundHalfCeiling((-820800059L));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test08901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08901");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology52.months();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int[] intArray65 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay63, (long) 86399);
        org.joda.time.DurationField durationField66 = chronology52.centuries();
        long long68 = durationField66.getMillis(35L);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 26, 399]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 110449332000000L + "'", long68 == 110449332000000L);
    }

    @Test
    public void test08902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08902");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        boolean boolean9 = interval4.contains((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        int int19 = property17.getMaximumValueOverall();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = locale20.getScript();
        java.lang.String str22 = locale20.getDisplayCountry();
        int int23 = property17.getMaximumShortTextLength(locale20);
        org.joda.time.DateTime dateTime24 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        long long27 = chronology10.set((org.joda.time.ReadablePartial) localTime25, (long) (byte) 10);
        org.joda.time.DurationField durationField28 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField29 = chronology10.weekyear();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, chronology10);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86399999L + "'", long27 == 86399999L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test08903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08903");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period4 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period6 = period4.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationTo(readableInstant7);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = duration11.toPeriodFrom(readableInstant12);
        org.joda.time.Duration duration14 = duration2.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType19, chronology20);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 11, 0L, periodType19);
        java.lang.String str23 = periodType19.getName();
        org.joda.time.PeriodType periodType24 = periodType19.withMonthsRemoved();
        org.joda.time.Period period25 = duration2.toPeriod(periodType19);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration30 = null;
        boolean boolean31 = duration28.isEqual(readableDuration30);
        org.joda.time.Duration duration33 = duration28.minus((long) 1);
        org.joda.time.Duration duration35 = duration33.minus((long) '4');
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration48 = duration45.plus((long) (byte) 0);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        boolean boolean53 = dateTime51.isEqual(10L);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType56, chronology57);
        org.joda.time.PeriodType periodType59 = periodType56.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime51, periodType59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration42, periodType59);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime38, periodType62);
        org.joda.time.TimeOfDay timeOfDay64 = dateTime38.toTimeOfDay();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = timeOfDay64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTime();
        org.joda.time.DateTime dateTime69 = dateTime66.minus((-115706879999998030L));
        org.joda.time.Interval interval70 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        long long72 = interval70.toDurationMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "YearDay" + "'", str23, "YearDay");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 24L + "'", long72 == 24L);
    }

    @Test
    public void test08904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08904");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime2.withMillis((long) '4');
        java.lang.Object obj8 = null;
        org.joda.time.Instant instant9 = new org.joda.time.Instant(obj8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getOffset(1L);
        boolean boolean15 = dateTimeZone10.isStandardOffset(0L);
        org.joda.time.DateTime dateTime16 = dateTime2.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime18 = dateTime2.withYear(3732480);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test08905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08905");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-155));
        java.lang.String str3 = dateTimeZone1.getShortName((long) 101);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-00:00:00.155" + "'", str3, "-00:00:00.155");
    }

    @Test
    public void test08906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08906");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        int int4 = dateTime2.getWeekOfWeekyear();
        int int5 = dateTime2.getMonthOfYear();
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTime dateTime8 = dateTime2.plus(4190400000L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant12 = instant10.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTimeISO();
        java.lang.Object obj14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant(obj14);
        boolean boolean16 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        int int22 = instant15.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Instant instant25 = instant15.withDurationAdded((long) (byte) 10, (-1));
        boolean boolean26 = dateTime2.equals((java.lang.Object) (-1));
        boolean boolean27 = dateTime2.isBeforeNow();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = duration30.toPeriodTo(readableInstant34);
        org.joda.time.Duration duration37 = duration30.minus(43200000L);
        org.joda.time.DateTime dateTime38 = dateTime2.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime40 = dateTime2.plusDays(98);
        long long41 = dateTime40.getMillis();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 8467199999L + "'", long41 == 8467199999L);
    }

    @Test
    public void test08907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08907");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.addDays((int) (short) 100);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksIn(readableInterval18);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) weeks19);
        org.joda.time.Weeks weeks22 = weeks19.multipliedBy(292278993);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) weeks22);
        java.lang.String str24 = weeks22.toString();
        org.joda.time.Weeks weeks26 = weeks22.dividedBy(70);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P0W" + "'", str24, "P0W");
        org.junit.Assert.assertNotNull(weeks26);
    }

    @Test
    public void test08908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08908");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-1));
        int int3 = weeks1.getValue(0);
        org.joda.time.Weeks weeks4 = weeks1.negated();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = weeks1.getFieldType(1857);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1857");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(weeks4);
    }

    @Test
    public void test08909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08909");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfDay();
        int int29 = dateTimeField28.getMinimumValue();
        long long31 = dateTimeField28.roundHalfEven(1672963800000L);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        boolean boolean36 = dateTime34.isEqual(10L);
        org.joda.time.DateTime dateTime38 = dateTime34.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime40 = dateTime34.plusDays(100);
        org.joda.time.LocalTime localTime41 = dateTime34.toLocalTime();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = locale42.getCountry();
        java.util.Locale locale44 = locale42.stripExtensions();
        java.lang.String str45 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localTime41, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getDurationType();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localTime41.get(dateTimeFieldType46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1672963800000L + "'", long31 == 1672963800000L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TW" + "'", str43, "TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1439" + "'", str45, "1439");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
    }

    @Test
    public void test08910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08910");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        boolean boolean3 = dateTimeZone2.isFixed();
        java.util.Locale locale6 = new java.util.Locale("+00:00");
        java.lang.String str7 = dateTimeZone2.getName((long) (short) 0, locale6);
        int int9 = dateTimeZone2.getOffset((long) 3);
        int int11 = dateTimeZone2.getOffset(86405467L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals(locale6.toString(), "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test08911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08911");
        org.joda.time.Period period1 = new org.joda.time.Period(3L);
        org.joda.time.Hours hours2 = period1.toStandardHours();
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test08912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08912");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.addDays((int) (short) 100);
        mutablePeriod5.add(0, 1, (int) (short) -1, 11, 11, 8, 11, (int) (byte) 0);
        mutablePeriod5.addHours((-1398041029));
        mutablePeriod5.setMonths(169);
        mutablePeriod5.addMillis(896);
    }

    @Test
    public void test08913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08913");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder2.setLanguage("weekyear");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.setRegion("IT");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder6.setRegion("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: yearOfCentury [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08914");
        org.joda.time.Seconds seconds2 = org.joda.time.Seconds.ONE;
        org.joda.time.MutablePeriod mutablePeriod3 = seconds2.toMutablePeriod();
        org.joda.time.Period period5 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period7 = period5.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationTo(readableInstant8);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration14 = null;
        boolean boolean15 = duration12.isEqual(readableDuration14);
        org.joda.time.Duration duration17 = duration12.minus((long) 1);
        org.joda.time.Duration duration19 = duration17.minus((long) '4');
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.plus((long) (byte) 0);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        boolean boolean37 = dateTime35.isEqual(10L);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType40, chronology41);
        org.joda.time.PeriodType periodType43 = periodType40.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35, periodType43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration26, periodType43);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime22, periodType46);
        boolean boolean48 = duration9.isEqual((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration50 = new org.joda.time.Duration(432000000L);
        org.joda.time.Duration duration51 = duration9.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int61 = mutablePeriod60.getDays();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfEra();
        org.joda.time.Interval interval67 = property66.toInterval();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfEra();
        org.joda.time.Interval interval71 = property70.toInterval();
        boolean boolean72 = interval67.contains((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Chronology chronology73 = interval71.getChronology();
        mutablePeriod60.setPeriod((long) 'u', (long) 1969, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.dayOfMonth();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration51, chronology73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(281577600001L, 62135596800000L, chronology73);
        mutablePeriod78.addYears((-2201246));
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test08915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08915");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MIN_VALUE;
        org.joda.time.Hours hours2 = hours0.dividedBy(169);
        org.joda.time.Hours hours4 = hours2.plus((int) (short) 1);
        org.joda.time.Hours hours5 = org.joda.time.Hours.FIVE;
        org.joda.time.Hours hours6 = org.joda.time.Hours.TWO;
        org.joda.time.Hours hours7 = hours5.plus(hours6);
        org.joda.time.Hours hours8 = hours4.minus(hours6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = hours6.getFieldType(141012);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 141012");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
    }

    @Test
    public void test08916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08916");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(719469, 14, (-86399947), (-201), (-15), (-10));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -201 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08917");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((-864L), (-104509444363200001L));
    }

    @Test
    public void test08918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08918");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        java.util.Locale locale6 = new java.util.Locale("+00:00");
        boolean boolean7 = dateTime2.equals((java.lang.Object) "+00:00");
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        mutablePeriod18.setMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime23 = dateTime10.withMillisOfDay(4);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType28, chronology29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1L), (long) 100, periodType28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime10, periodType28);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        boolean boolean41 = interval36.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Chronology chronology42 = interval40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime10.toMutableDateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology42);
        int int46 = dateTime45.getWeekyear();
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withZone(dateTimeZone50);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.joda.time.DateTime dateTime56 = dateTime54.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean58 = dateTime54.isSupported(dateTimeFieldType57);
        org.joda.time.DateTime.Property property59 = dateTime49.property(dateTimeFieldType57);
        int int60 = dateTime45.get(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = dateTime45.get(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime45.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals(locale6.toString(), "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test08919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08919");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1970);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        boolean boolean3 = dateTime1.isAfterNow();
        int int4 = dateTime1.getHourOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test08920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08920");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Minutes minutes3 = duration2.toStandardMinutes();
        org.joda.time.Minutes minutes4 = org.joda.time.Minutes.TWO;
        org.joda.time.Duration duration5 = minutes4.toStandardDuration();
        boolean boolean6 = minutes3.isLessThan(minutes4);
        org.joda.time.Duration duration9 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant10, periodType11);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, readableInstant16, periodType17);
        boolean boolean19 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = duration22.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = duration22.toPeriodTo(readableInstant26);
        org.joda.time.Duration duration29 = duration22.minus(43200000L);
        org.joda.time.Duration duration31 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) ' ');
        org.joda.time.Duration duration32 = duration22.toDuration();
        org.joda.time.Minutes minutes33 = duration22.toStandardMinutes();
        int int34 = minutes33.size();
        org.joda.time.Minutes minutes35 = minutes4.plus(minutes33);
        org.joda.time.Minutes minutes37 = minutes33.multipliedBy(2115);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
    }

    @Test
    public void test08921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08921");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutablePeriod5.add(readablePeriod11);
        int int13 = mutablePeriod5.getMonths();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) interval21);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.withZoneRetainFields(dateTimeZone29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant39, periodType40);
        mutablePeriod41.setMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTime dateTime46 = dateTime33.minusWeeks((int) (byte) 1);
        int int47 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property48 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime50 = dateTime33.withYear(1969);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DurationField durationField52 = durationFieldType25.getField(chronology51);
        mutablePeriod5.add((-43199999L), chronology51);
        org.joda.time.DurationField durationField54 = chronology51.seconds();
        org.joda.time.DurationField durationField55 = chronology51.days();
        long long58 = durationField55.getMillis((-1), (long) 1970);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-86400000L) + "'", long58 == (-86400000L));
    }

    @Test
    public void test08922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08922");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks10 = weeks8.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks11 = weeks7.minus(weeks10);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks14 = weeks12.dividedBy((int) (byte) 100);
        org.joda.time.Weeks weeks16 = weeks12.dividedBy((int) (short) -1);
        boolean boolean17 = weeks7.isLessThan(weeks16);
        org.joda.time.Weeks weeks19 = weeks7.minus(895);
        org.joda.time.Weeks weeks21 = org.joda.time.Weeks.weeks(2010);
        java.lang.String str22 = weeks21.toString();
        org.joda.time.Weeks weeks23 = weeks19.plus(weeks21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = weeks19.getFieldType((-278));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -278");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "P2010W" + "'", str22, "P2010W");
        org.junit.Assert.assertNotNull(weeks23);
    }

    @Test
    public void test08923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08923");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setVariant("clockhourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: clockhourOfHalfday [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test08924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08924");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeksIn(readableInterval0);
        org.joda.time.Weeks weeks3 = weeks1.minus((int) 'u');
        org.joda.time.Weeks weeks5 = weeks1.plus((int) '#');
        org.joda.time.Weeks weeks7 = weeks1.plus((-2147483647));
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.ZERO;
        java.lang.String str9 = weeks8.toString();
        org.joda.time.Period period11 = org.joda.time.Period.hours(1969);
        org.joda.time.Weeks weeks12 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = period16.getFieldTypes();
        int int18 = period16.getMinutes();
        org.joda.time.Weeks weeks19 = period16.toStandardWeeks();
        org.joda.time.Weeks weeks21 = weeks19.multipliedBy((int) (short) 10);
        org.joda.time.Weeks weeks22 = weeks12.plus(weeks21);
        java.lang.String str23 = weeks12.toString();
        org.joda.time.Weeks weeks24 = weeks8.plus(weeks12);
        boolean boolean25 = weeks7.isGreaterThan(weeks8);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = period29.getFieldTypes();
        org.joda.time.Period period32 = period29.minusYears((int) (byte) 1);
        org.joda.time.Weeks weeks33 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Weeks weeks35 = weeks33.plus(0);
        org.joda.time.Weeks weeks37 = weeks33.minus((int) 'a');
        boolean boolean38 = weeks8.isLessThan(weeks33);
        org.joda.time.Duration duration40 = new org.joda.time.Duration(432000000L);
        java.lang.String str41 = duration40.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, readableInstant50, periodType51);
        mutablePeriod52.setMonths((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime44.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        java.lang.Object obj56 = null;
        org.joda.time.Instant instant57 = new org.joda.time.Instant(obj56);
        org.joda.time.DateTimeZone dateTimeZone58 = instant57.getZone();
        java.lang.String str59 = dateTimeZone58.toString();
        int int61 = dateTimeZone58.getOffset(1L);
        boolean boolean63 = dateTimeZone58.isStandardOffset(0L);
        org.joda.time.DateTime dateTime64 = dateTime44.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears(1969);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType71, chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1L, (long) 10, periodType71, chronology74);
        org.joda.time.PeriodType periodType76 = periodType71.withDaysRemoved();
        org.joda.time.Period period77 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime66, periodType71);
        org.joda.time.Instant instant79 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime80 = instant79.toDateTime();
        org.joda.time.DateTime.Property property81 = dateTime80.era();
        org.joda.time.DateTime dateTime82 = dateTime80.withTimeAtStartOfDay();
        org.joda.time.Instant instant83 = dateTime80.toInstant();
        org.joda.time.DateTime dateTime85 = dateTime80.withMillis((long) '4');
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period87 = duration40.toPeriodTo((org.joda.time.ReadableInstant) dateTime80, periodType86);
        org.joda.time.PeriodType periodType88 = periodType86.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((java.lang.Object) weeks33, periodType88);
        java.lang.String str90 = periodType88.getName();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P0W" + "'", str9, "P0W");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P11W" + "'", str23, "P11W");
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(weeks33);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(weeks37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT432000S" + "'", str41, "PT432000S");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "StandardNoWeeks" + "'", str90, "StandardNoWeeks");
    }

    @Test
    public void test08925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08925");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = dateTimeZone2.getShortName(100L, locale6);
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Language();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "hi!");
        java.lang.String str16 = locale11.getDisplayCountry(locale15);
        java.lang.String str17 = locale15.getDisplayVariant();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale15.getDisplayVariant(locale18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        int int25 = property23.getMaximumValueOverall();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getScript();
        java.lang.String str28 = locale26.getDisplayCountry();
        int int29 = property23.getMaximumShortTextLength(locale26);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale26.getDisplayName(locale30);
        java.lang.String str32 = locale18.getDisplayName(locale30);
        java.lang.String str33 = locale18.getDisplayLanguage();
        java.lang.String str34 = locale6.getDisplayLanguage(locale18);
        java.lang.String str35 = locale18.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jpn" + "'", str10, "jpn");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italy" + "'", str16, "Italy");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u82f1\u6587" + "'", str31, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u82f1\u6587" + "'", str32, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u82f1\u8a9e" + "'", str33, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanese" + "'", str34, "Japanese");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test08926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08926");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray4 = period3.getFieldTypes();
        org.joda.time.Period period6 = period3.minusYears((int) (byte) 1);
        org.joda.time.Period period8 = period3.plusMonths((int) (byte) 0);
        int int9 = period3.size();
        org.joda.time.Period period11 = period3.plusYears(100);
        org.joda.time.Period period13 = period3.minusSeconds(292278993);
        org.joda.time.Period period14 = period3.negated();
        org.joda.time.Period period16 = period14.plusWeeks(53957);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldTypeArray4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test08927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08927");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType4, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) 0, periodType4, chronology7);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (short) 10, periodType10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.DateTime dateTime15 = instant14.toDateTimeISO();
        org.joda.time.Duration duration16 = period11.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), (long) 23);
        org.joda.time.Period period21 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period23 = period21.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = period23.toDurationTo(readableInstant24);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) '#', 0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = duration28.toPeriodFrom(readableInstant29);
        org.joda.time.Duration duration31 = duration19.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = duration16.plus((org.joda.time.ReadableDuration) duration19);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int46 = mutablePeriod45.getDays();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfEra();
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfEra();
        org.joda.time.Interval interval56 = property55.toInterval();
        boolean boolean57 = interval52.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Chronology chronology58 = interval56.getChronology();
        mutablePeriod45.setPeriod((long) 'u', (long) 1969, chronology58);
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 100, chronology58);
        mutablePeriod8.setPeriod((long) 1, (long) 69, chronology58);
        org.joda.time.DateTimeField dateTimeField62 = chronology58.dayOfMonth();
        org.joda.time.Period period63 = new org.joda.time.Period(24402789L, chronology58);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test08928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08928");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology52.months();
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.TimeOfDay timeOfDay63 = dateTime62.toTimeOfDay();
        int[] intArray65 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay63, (long) 86399);
        org.joda.time.DurationField durationField66 = chronology52.centuries();
        org.joda.time.DurationField durationField67 = chronology52.weekyears();
        long long69 = durationField67.getValueAsLong((long) 8);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1, 26, 399]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test08929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08929");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        java.lang.String str9 = dateTimeField2.toString();
        int int11 = dateTimeField2.getLeapAmount((-436320L));
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField2.getType();
        org.joda.time.DurationField durationField13 = dateTimeField2.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField2.getMaximumValue(readablePartial14);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str9, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08930");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        boolean boolean10 = dateTime8.isEqual(10L);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType13, chronology14);
        org.joda.time.PeriodType periodType16 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8, periodType16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime20.withMillis((long) '4');
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime20);
        int int27 = dateTime20.getYear();
        org.joda.time.DateTime.Property property28 = dateTime20.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime20.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(2);
        org.joda.time.DateTime dateTime34 = dateTime30.withHourOfDay((int) (byte) 0);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray39 = period38.getFieldTypes();
        int int40 = period38.getMinutes();
        org.joda.time.Period period42 = period38.withDays((int) ' ');
        org.joda.time.Period period44 = period38.plusWeeks(10);
        org.joda.time.Period period46 = period38.withMonths((int) (short) 10);
        org.joda.time.Period period48 = period46.plusMillis(1);
        org.joda.time.Period period50 = period48.minusDays(97);
        org.joda.time.Period period52 = period48.withWeeks(86365000);
        org.joda.time.DateTime dateTime54 = dateTime30.withPeriodAdded((org.joda.time.ReadablePeriod) period52, 23);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test08931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08931");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(53669837, (-1), 19, 59);
        mutablePeriod4.setPeriod((long) (-75), (long) 2147483647);
    }

    @Test
    public void test08932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08932");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getScript();
        java.lang.String str8 = locale6.getDisplayCountry();
        int int9 = property3.getMaximumShortTextLength(locale6);
        org.joda.time.DateTime dateTime10 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant15 = instant13.minus(100L);
        java.lang.String str16 = instant15.toString();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Duration duration26 = duration19.withMillis((long) (short) 0);
        org.joda.time.Instant instant27 = instant15.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime29 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 2);
        org.joda.time.DateTime dateTime31 = dateTime29.plus((long) 3);
        org.joda.time.DateTime dateTime33 = dateTime29.withMinuteOfHour((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.withYear(101);
        java.lang.String str37 = dateTime34.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str16, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1969-12-31T23:01:59.999Z" + "'", str37, "1969-12-31T23:01:59.999Z");
    }

    @Test
    public void test08933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08933");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(26507848060845299L, 1969000L);
    }

    @Test
    public void test08934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08934");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        java.lang.String str4 = instant3.toString();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = duration7.toPeriodTo(readableInstant11);
        org.joda.time.Duration duration14 = duration7.withMillis((long) (short) 0);
        org.joda.time.Instant instant15 = instant3.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, readableInstant24, periodType25);
        mutablePeriod26.setMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime18.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant32);
        boolean boolean34 = instant15.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Instant instant35 = instant32.toInstant();
        org.joda.time.Chronology chronology36 = instant32.getChronology();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = duration39.plus((long) (byte) 0);
        org.joda.time.Instant instant44 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration42, 70);
        long long45 = instant32.getMillis();
        org.joda.time.Instant instant47 = instant32.minus(12L);
        org.joda.time.Instant instant49 = instant32.plus(27882730L);
        org.joda.time.MutableDateTime mutableDateTime50 = instant49.toMutableDateTime();
        org.joda.time.DateTime dateTime51 = instant49.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime51.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str4, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test08935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08935");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant4 = instant2.minus(100L);
        java.lang.String str5 = instant4.toString();
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = duration8.toPeriodTo(readableInstant12);
        org.joda.time.Duration duration15 = duration8.withMillis((long) (short) 0);
        org.joda.time.Instant instant16 = instant4.plus((org.joda.time.ReadableDuration) duration8);
        java.lang.String str17 = duration8.toString();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.withZoneRetainFields(dateTimeZone21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant31, periodType32);
        mutablePeriod33.setMonths((int) '4');
        org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime38 = dateTime25.minusWeeks((int) (byte) 1);
        int int39 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime40 = dateTime22.toDateTimeISO();
        org.joda.time.Interval interval41 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.DateTime dateTime43 = interval41.getStart();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        boolean boolean52 = interval47.contains((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Chronology chronology53 = interval51.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfMonth();
        java.lang.String str57 = chronology53.toString();
        org.joda.time.DurationField durationField58 = chronology53.days();
        org.joda.time.DateTime dateTime59 = dateTime43.toDateTime(chronology53);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 13, chronology53);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = instant62.toDateTime();
        boolean boolean65 = dateTime63.isEqual(10L);
        org.joda.time.DateTime dateTime67 = dateTime63.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime69 = dateTime63.plusHours(1969);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime60.toMutableDateTime(chronology70);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str5, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
    }

    @Test
    public void test08936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08936");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.plusHours((int) 'u');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.Instant instant26 = instant24.plus((long) 100);
        org.joda.time.Instant instant28 = instant24.withMillis((long) (byte) 1);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period32 = period30.minusMonths((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationTo(readableInstant33);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) '#', 0);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant41 = instant39.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime42 = instant39.toMutableDateTimeISO();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period44 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime42, periodType43);
        org.joda.time.Instant instant45 = instant28.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant46 = instant28.toInstant();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) instant28);
        java.lang.String str48 = period47.toString();
        int int49 = period47.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = period47.getValue(58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "P2DT3H0.002S" + "'", str48, "P2DT3H0.002S");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test08937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08937");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(97);
        org.joda.time.Weeks weeks3 = weeks1.plus(86365000);
        java.lang.String str4 = weeks1.toString();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P97W" + "'", str4, "P97W");
    }

    @Test
    public void test08938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08938");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = weeks9.getFieldType();
        mutablePeriod5.add(durationFieldType10, (int) (byte) 0);
        mutablePeriod5.setSeconds(1439);
        int int15 = mutablePeriod5.getMonths();
        org.joda.time.Period period17 = org.joda.time.Period.millis((int) (short) -1);
        org.joda.time.Period period19 = period17.plusWeeks((int) (byte) 1);
        int int20 = period17.size();
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) period17);
        mutablePeriod5.addMinutes(214);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test08939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08939");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=secondofday");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08940");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType4 = weeks3.getFieldType();
        int int5 = periodType2.indexOf(durationFieldType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, readableInstant21, periodType22);
        mutablePeriod23.setMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime28 = dateTime15.minusWeeks((int) (byte) 1);
        int int29 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property30 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime15.withYear(1969);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTime dateTime36 = dateTime7.toDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.dayOfYear();
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, 30452889602000L, periodType2, chronology33);
        org.joda.time.Period period42 = period40.plusMonths(53670730);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test08941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08941");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Period period9 = interval3.toPeriod();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Weeks weeks12 = weeks10.multipliedBy((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType13 = weeks10.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test08942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08942");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.minutes();
        int int2 = days0.get(durationFieldType1);
        org.joda.time.MutablePeriod mutablePeriod3 = days0.toMutablePeriod();
        mutablePeriod3.setSeconds(100);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant14, periodType15);
        mutablePeriod16.setMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime8.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.Object obj20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant(obj20);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        int int25 = dateTimeZone22.getOffset(1L);
        boolean boolean27 = dateTimeZone22.isStandardOffset(0L);
        org.joda.time.DateTime dateTime28 = dateTime8.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears(1969);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks(1439);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, readableInstant41, periodType42);
        mutablePeriod43.setMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime35.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.LocalDate localDate47 = dateTime35.toLocalDate();
        int int48 = localDate47.size();
        org.joda.time.DateTime dateTime49 = dateTime32.withFields((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        boolean boolean54 = dateTime52.isEqual(10L);
        org.joda.time.DateTime dateTime56 = dateTime52.withWeekOfWeekyear(8);
        org.joda.time.DateTime dateTime58 = dateTime52.plusDays(100);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period61 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period63 = period61.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period66 = period61.withFieldAdded(durationFieldType64, (int) (short) 100);
        int int67 = period66.getHours();
        org.joda.time.DateTime dateTime68 = dateTime49.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.DateTime.Property property69 = dateTime68.hourOfDay();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test08943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08943");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.PeriodType periodType11 = weeks10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test08944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08944");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        org.joda.time.Days days6 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.minutes();
        int int8 = days6.get(durationFieldType7);
        mutablePeriod5.add(durationFieldType7, 8);
        mutablePeriod5.setMinutes((-59));
        mutablePeriod5.addYears(62);
        org.joda.time.Period period16 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period18 = period16.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period21 = period16.withFieldAdded(durationFieldType19, (int) (short) 100);
        mutablePeriod5.add((org.joda.time.ReadablePeriod) period16);
        mutablePeriod5.addMillis(54000);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test08945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08945");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.era();
        org.joda.time.DurationField durationField14 = chronology9.months();
        org.joda.time.DurationField durationField15 = chronology9.months();
        org.joda.time.DurationField durationField16 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekOfWeekyear();
        int int19 = dateTimeField17.getMaximumValue((long) 436320);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test08946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08946");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        org.joda.time.Duration duration12 = duration2.withDurationAdded((long) 1, (int) ' ');
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        boolean boolean17 = dateTime15.isEqual(10L);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15, periodType18);
        org.joda.time.DateTime dateTime21 = dateTime15.minusSeconds((int) 'a');
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant36, periodType37);
        mutablePeriod38.setMonths((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime30.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime43 = dateTime30.minusWeeks((int) (byte) 1);
        int int44 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property45 = dateTime30.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime30.withYear(1969);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DurationField durationField49 = durationFieldType22.getField(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime21.withFieldAdded(durationFieldType22, 86399);
        org.joda.time.DateTime dateTime53 = dateTime21.withMillisOfDay(24);
        int int54 = dateTime21.getMonthOfYear();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
    }

    @Test
    public void test08947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08947");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter2.getParser();
        java.util.Locale locale6 = periodFormatter2.getLocale();
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes10 = minutes8.minus((int) (short) -1);
        boolean boolean11 = minutes7.isGreaterThan(minutes8);
        org.joda.time.Minutes minutes12 = null;
        org.joda.time.Minutes minutes13 = minutes8.minus(minutes12);
        org.joda.time.Minutes minutes15 = minutes8.plus((int) (short) 1);
        org.joda.time.Period period16 = minutes8.toPeriod();
        org.joda.time.PeriodType periodType17 = minutes8.getPeriodType();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter2.withParseType(periodType17);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.DateTime dateTime23 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, readableInstant27, periodType28);
        mutablePeriod29.setMonths((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime21.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTime dateTime34 = dateTime21.minusWeeks((int) (byte) 1);
        long long35 = dateTime21.getMillis();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, readableInstant50, periodType51);
        mutablePeriod52.setMonths((int) '4');
        org.joda.time.DateTime dateTime55 = dateTime44.plus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.DateTime dateTime57 = dateTime44.minusWeeks((int) (byte) 1);
        int int58 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property59 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime61 = dateTime44.withYear(1969);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.DurationField durationField63 = durationFieldType36.getField(chronology62);
        org.joda.time.DateTime dateTime64 = dateTime21.toDateTime(chronology62);
        org.joda.time.DurationField durationField65 = chronology62.days();
        boolean boolean66 = periodType17.equals((java.lang.Object) chronology62);
        org.joda.time.DurationField durationField67 = chronology62.seconds();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology62);
        org.joda.time.Period period70 = org.joda.time.Period.months(69);
        long long73 = chronology62.add((org.joda.time.ReadablePeriod) period70, 36248465L, 51);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(periodParser5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 9253994648465L + "'", long73 == 9253994648465L);
    }

    @Test
    public void test08948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08948");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks((-59));
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test08949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08949");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.Period period9 = duration2.toPeriodTo((org.joda.time.ReadableInstant) instant5);
        long long10 = instant5.getMillis();
        org.joda.time.Chronology chronology11 = instant5.getChronology();
        org.joda.time.DateTime dateTime12 = instant5.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset((long) 365);
        java.lang.String str19 = dateTimeZone15.getName((long) (byte) 1);
        long long22 = dateTimeZone15.convertLocalToUTC(38716L, false);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime12.toMutableDateTime(dateTimeZone15);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 38716L + "'", long22 == 38716L);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test08950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08950");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology25.seconds();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test08951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08951");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = dateTime7.get(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime7.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime7.toString(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399999 + "'", int26 == 86399999);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str29, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test08952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08952");
        org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("P8Y100M1W100DT-1H100M52.011S");
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test08953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08953");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long7 = dateTimeField2.roundHalfCeiling((long) 2);
        org.joda.time.DurationField durationField8 = dateTimeField2.getDurationField();
        long long11 = durationField8.getMillis(0, (long) 4);
        long long13 = durationField8.getMillis((int) '#');
        int int16 = durationField8.getDifference((long) '4', 10L);
        long long17 = durationField8.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1512000000L + "'", long13 == 1512000000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 43200000L + "'", long17 == 43200000L);
    }

    @Test
    public void test08954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08954");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        mutablePeriod6.setMonths((int) '4');
        org.joda.time.Period period9 = mutablePeriod6.toPeriod();
        mutablePeriod6.setYears((int) (short) -1);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = duration14.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = duration14.toPeriodTo(readableInstant18);
        org.joda.time.Days days20 = duration14.toStandardDays();
        boolean boolean21 = mutablePeriod6.equals((java.lang.Object) days20);
        mutablePeriod6.addWeeks((int) 'a');
        mutablePeriod6.setPeriod(0, (int) 'u', 1, 1, 86399, (int) '4', (int) 'a', (int) (short) -1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.withZoneRetainFields(dateTimeZone37);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, readableInstant47, periodType48);
        mutablePeriod49.setMonths((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime41.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTime dateTime54 = dateTime41.minusWeeks((int) (byte) 1);
        int int55 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property56 = dateTime41.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime41.withYear(1969);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.year();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfHalfday();
        mutablePeriod6.add(0L, chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology59.getZone();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 1524840360, chronology59);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
    }

    @Test
    public void test08955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08955");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Duration duration9 = duration2.withMillis((long) (short) 0);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Duration duration11 = duration9.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant12, periodType13);
        org.joda.time.Hours hours15 = duration11.toStandardHours();
        java.lang.String str16 = hours15.toString();
        org.joda.time.DurationFieldType durationFieldType17 = hours15.getFieldType();
        org.joda.time.DurationFieldType durationFieldType18 = hours15.getFieldType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0H" + "'", str16, "PT0H");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test08956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08956");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DurationField[weekyears]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=durationfield[weekyears]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08957");
        org.joda.time.Period period1 = org.joda.time.Period.months(11);
        org.joda.time.Period period3 = period1.minusSeconds(78719999);
        org.joda.time.Period period5 = period1.minusYears((-201));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test08958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08958");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfDay();
        org.joda.time.Period period31 = new org.joda.time.Period(31536000000L, 120L, chronology27);
        org.joda.time.Period period32 = period31.toPeriod();
        org.joda.time.Period period34 = period31.withSeconds(86399);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test08959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08959");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval3.toString();
        long long10 = interval3.getEndMillis();
        org.joda.time.Minutes minutes11 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval3);
        org.joda.time.Minutes minutes13 = minutes11.dividedBy(7);
        org.joda.time.Minutes minutes14 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes17 = minutes15.minus((int) (short) -1);
        boolean boolean18 = minutes14.isGreaterThan(minutes15);
        org.joda.time.Minutes minutes19 = null;
        org.joda.time.Minutes minutes20 = minutes15.minus(minutes19);
        org.joda.time.Minutes minutes22 = minutes15.plus((int) (short) 1);
        org.joda.time.Minutes minutes24 = minutes22.plus((int) (short) 1);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = period28.getFieldTypes();
        org.joda.time.Period period31 = period28.minusYears((int) (byte) 1);
        org.joda.time.Period period33 = period28.plusMonths((int) (byte) 0);
        int int34 = period28.size();
        org.joda.time.Period period36 = period28.plusYears(100);
        org.joda.time.Minutes minutes37 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes38 = org.joda.time.Minutes.MIN_VALUE;
        org.joda.time.Minutes minutes40 = minutes38.minus((int) (short) -1);
        boolean boolean41 = minutes37.isGreaterThan(minutes38);
        org.joda.time.Minutes minutes42 = org.joda.time.Minutes.TWO;
        boolean boolean43 = minutes37.isLessThan(minutes42);
        boolean boolean44 = period28.equals((java.lang.Object) minutes37);
        boolean boolean45 = minutes24.isGreaterThan(minutes37);
        java.lang.String str46 = minutes37.toString();
        org.joda.time.Minutes minutes47 = minutes11.plus(minutes37);
        org.joda.time.Minutes minutes48 = null;
        org.joda.time.Minutes minutes49 = minutes37.plus(minutes48);
        org.joda.time.DurationFieldType durationFieldType50 = minutes49.getFieldType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str9, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1672531200000L + "'", long10 == 1672531200000L);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT-2147483648M" + "'", str46, "PT-2147483648M");
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(durationFieldType50);
    }

    @Test
    public void test08960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08960");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.lang.Object obj1 = null;
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone3);
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = dateTimeZone3.getShortName(100L, locale7);
        java.lang.String str10 = locale7.getScript();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale7);
        java.util.Locale locale13 = builder0.build();
        java.util.Locale.Builder builder14 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder0.setLanguageTag("PT0S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: PT0S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08961");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 120000);
        long long2 = duration1.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2000L + "'", long2 == 2000L);
    }

    @Test
    public void test08962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08962");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        java.lang.Object obj18 = null;
        org.joda.time.Instant instant19 = new org.joda.time.Instant(obj18);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone20);
        boolean boolean23 = interval12.contains((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        boolean boolean28 = interval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfEra();
        org.joda.time.Interval interval36 = property35.toInterval();
        boolean boolean37 = interval32.contains((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfEra();
        org.joda.time.Interval interval41 = property40.toInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        boolean boolean46 = interval41.contains((org.joda.time.ReadableInterval) interval45);
        boolean boolean47 = interval36.contains((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        boolean boolean56 = interval51.contains((org.joda.time.ReadableInterval) interval55);
        java.lang.String str57 = interval55.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        boolean boolean66 = interval61.contains((org.joda.time.ReadableInterval) interval65);
        boolean boolean67 = interval55.isBefore((org.joda.time.ReadableInterval) interval65);
        boolean boolean68 = interval41.overlaps((org.joda.time.ReadableInterval) interval65);
        boolean boolean69 = interval12.isAfter((org.joda.time.ReadableInterval) interval65);
        boolean boolean70 = interval3.isAfter((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology71);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfEra();
        org.joda.time.Interval interval74 = property73.toInterval();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        org.joda.time.Interval interval78 = property77.toInterval();
        boolean boolean79 = interval74.contains((org.joda.time.ReadableInterval) interval78);
        org.joda.time.Chronology chronology80 = interval78.getChronology();
        org.joda.time.Period period81 = interval78.toPeriod();
        long long82 = interval78.getStartMillis();
        boolean boolean83 = interval3.overlaps((org.joda.time.ReadableInterval) interval78);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str57, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1640995200000L + "'", long82 == 1640995200000L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test08963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08963");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("YearDay", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.lang.String str18 = locale17.getScript();
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale17 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale locale22 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getScript();
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale28 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "hi!");
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.lang.String str45 = locale44.getDisplayVariant();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale34, locale38, locale42, locale44 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strSet53, filteringMode54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getScript();
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale60 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale locale65 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList63, filteringMode67);
        java.util.Locale locale69 = java.util.Locale.lookup(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap70);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.lang.String str76 = locale75.getScript();
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale75 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.Locale locale80 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, strMap81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology83);
        org.joda.time.DateTime.Property property85 = dateTime84.yearOfEra();
        org.joda.time.Interval interval86 = property85.toInterval();
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = property85.getAsText(locale87);
        java.util.Set<java.lang.String> strSet89 = locale87.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strSet89);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList71, (java.util.Collection<java.lang.String>) strSet89);
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList91);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!_hi!");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(languageRangeList71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(locale80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022" + "'", str88, "2022");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test08964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08964");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period3 = period1.minusMonths((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period6 = period1.withFieldAdded(durationFieldType4, (int) (short) 100);
        org.joda.time.Period period8 = period1.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        boolean boolean17 = interval12.contains((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weeks();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        org.joda.time.Period period22 = period1.withField(durationFieldType20, 19);
        org.joda.time.Period period24 = period1.plusDays(2);
        org.joda.time.Hours hours25 = period24.toStandardHours();
        org.joda.time.Duration duration26 = hours25.toStandardDuration();
        long long27 = duration26.getStandardDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(hours25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
    }

    @Test
    public void test08965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08965");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1672963200000L, (-120790744905600000L));
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        org.joda.time.Days days11 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        int int13 = days11.get(durationFieldType12);
        mutablePeriod10.add(durationFieldType12, 8);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutablePeriod10.add(readablePeriod16);
        int int18 = mutablePeriod10.getMonths();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        boolean boolean27 = interval22.contains((org.joda.time.ReadableInterval) interval26);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZoneRetainFields(dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, readableInstant44, periodType45);
        mutablePeriod46.setMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime38.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTime dateTime51 = dateTime38.minusWeeks((int) (byte) 1);
        int int52 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property53 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime38.withYear(1969);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.DurationField durationField57 = durationFieldType30.getField(chronology56);
        mutablePeriod10.add((-43199999L), chronology56);
        mutablePeriod3.add((-635216999958L), chronology56);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((-1298798110310400001L), chronology56);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test08966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08966");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant3 = instant1.minus(100L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        long long8 = dateTimeZone4.adjustOffset((-360621543182400001L), true);
        java.lang.String str10 = dateTimeZone4.getName((long) '#');
        long long14 = dateTimeZone4.convertLocalToUTC((long) 70, false, (-2726520621264000000L));
        org.joda.time.Duration duration18 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration18.isEqual(readableDuration20);
        org.joda.time.Duration duration23 = duration18.minus((long) 1);
        org.joda.time.Duration duration25 = duration23.minus((long) '4');
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) 0, (long) (byte) 100);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.plus((long) (byte) 0);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        boolean boolean43 = dateTime41.isEqual(10L);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType46, chronology47);
        org.joda.time.PeriodType periodType49 = periodType46.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime41, periodType49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration32, periodType49);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime28, periodType52);
        org.joda.time.Duration duration55 = duration23.minus((long) 7);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int66 = mutablePeriod65.getDays();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfEra();
        org.joda.time.Interval interval72 = property71.toInterval();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology73);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfEra();
        org.joda.time.Interval interval76 = property75.toInterval();
        boolean boolean77 = interval72.contains((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Chronology chronology78 = interval76.getChronology();
        mutablePeriod65.setPeriod((long) 'u', (long) 1969, chronology78);
        org.joda.time.Period period80 = new org.joda.time.Period((long) (byte) 100, chronology78);
        org.joda.time.Period period81 = duration55.toPeriod(chronology78);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(10L, chronology78);
        org.joda.time.DateTimeZone dateTimeZone83 = chronology78.getZone();
        long long85 = dateTimeZone4.getMillisKeepLocal(dateTimeZone83, (long) 59);
        java.lang.String str87 = dateTimeZone83.getName((-49509144302257978L));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-360621543182400001L) + "'", long8 == (-360621543182400001L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 70L + "'", long14 == 70L);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 59L + "'", long85 == 59L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
    }

    @Test
    public void test08967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08967");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 10, (int) (byte) 0, 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        boolean boolean13 = interval8.contains((org.joda.time.ReadableInterval) interval12);
        java.lang.String str14 = interval12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = interval12.isBefore((org.joda.time.ReadableInterval) interval22);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod4.copy();
        mutablePeriod4.addSeconds(12);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant32, periodType33);
        mutablePeriod34.setMonths((int) '4');
        org.joda.time.Period period37 = mutablePeriod34.toPeriod();
        mutablePeriod34.setYears((int) (short) -1);
        org.joda.time.Period period41 = org.joda.time.Period.seconds((-1));
        org.joda.time.Period period43 = period41.minusMonths((int) (short) 10);
        int int44 = period41.getWeeks();
        org.joda.time.Period period46 = period41.plusMonths(70);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) period41);
        mutablePeriod4.add((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Hours hours49 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours51 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours53 = hours51.minus((int) (short) 10);
        boolean boolean54 = hours49.isGreaterThan(hours53);
        org.joda.time.Hours hours56 = hours49.multipliedBy(69);
        org.joda.time.Period period57 = period41.minus((org.joda.time.ReadablePeriod) hours49);
        org.joda.time.Period period59 = period57.minusSeconds(893);
        int int60 = period57.getDays();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z" + "'", str14, "2022-01-01T00:00:00.000Z/2023-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(hours49);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test08968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08968");
        org.joda.time.Hours hours1 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours3 = org.joda.time.Hours.hours((int) (byte) 0);
        org.joda.time.Hours hours5 = hours3.minus((int) (short) 10);
        boolean boolean6 = hours1.isGreaterThan(hours5);
        java.lang.Object obj7 = null;
        org.joda.time.Instant instant8 = new org.joda.time.Instant(obj7);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        boolean boolean10 = hours5.equals((java.lang.Object) dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (-9859), dateTimeZone9);
        java.lang.Object obj13 = null;
        org.joda.time.Instant instant14 = new org.joda.time.Instant(obj13);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        boolean boolean18 = dateTimeZone15.isStandardOffset((long) '4');
        java.lang.String str19 = dateTimeZone15.getID();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime12.toMutableDateTime(dateTimeZone15);
        int int21 = mutableDateTime20.getYearOfEra();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
    }

    @Test
    public void test08969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08969");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime7 = property5.addWrapFieldToCopy(2022);
        org.joda.time.Interval interval8 = property5.toInterval();
        int int9 = property5.getMinimumValueOverall();
        boolean boolean10 = property5.isLeap();
        org.joda.time.DateTime dateTime11 = property5.roundCeilingCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08970");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfEra();
        long long31 = dateTimeField29.roundFloor(3155695200000L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3124224000000L + "'", long31 == 3124224000000L);
    }

    @Test
    public void test08971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08971");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.Period period20 = mutablePeriod17.toPeriod();
        mutablePeriod17.setYears((int) (short) -1);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = duration25.toPeriodTo(readableInstant29);
        org.joda.time.Days days31 = duration25.toStandardDays();
        boolean boolean32 = mutablePeriod17.equals((java.lang.Object) days31);
        org.joda.time.Days days33 = org.joda.time.Days.FIVE;
        boolean boolean34 = days31.isLessThan(days33);
        org.joda.time.PeriodType periodType35 = days31.getPeriodType();
        org.joda.time.Days days37 = org.joda.time.Days.days(0);
        org.joda.time.Days days39 = days37.dividedBy((int) (short) 10);
        org.joda.time.Days days40 = days31.plus(days37);
        int[] intArray43 = chronology9.get((org.joda.time.ReadablePeriod) days31, (long) (-2147483648), 43199999L);
        org.joda.time.DurationFieldType durationFieldType44 = days31.getFieldType();
        org.joda.time.Days days46 = org.joda.time.Days.days(999);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, readableInstant50, periodType51);
        mutablePeriod52.setMonths((int) '4');
        org.joda.time.Period period55 = mutablePeriod52.toPeriod();
        mutablePeriod52.setYears((int) (short) -1);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration63 = duration60.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = duration60.toPeriodTo(readableInstant64);
        org.joda.time.Days days66 = duration60.toStandardDays();
        boolean boolean67 = mutablePeriod52.equals((java.lang.Object) days66);
        org.joda.time.Days days68 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.minutes();
        int int70 = days68.get(durationFieldType69);
        boolean boolean71 = days66.isGreaterThan(days68);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration74, readableInstant75, periodType76);
        mutablePeriod77.setHours((int) (byte) 100);
        org.joda.time.Days days80 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.minutes();
        int int82 = days80.get(durationFieldType81);
        mutablePeriod77.set(durationFieldType81, (int) 'x');
        int int85 = days68.get(durationFieldType81);
        boolean boolean86 = days46.isGreaterThan(days68);
        org.joda.time.Days days87 = days31.minus(days46);
        org.joda.time.Days days88 = org.joda.time.Days.MIN_VALUE;
        org.joda.time.Days days90 = days88.dividedBy((int) (byte) 1);
        org.joda.time.Days days91 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType92 = org.joda.time.DurationFieldType.minutes();
        int int93 = days91.get(durationFieldType92);
        boolean boolean94 = days88.isLessThan(days91);
        org.joda.time.PeriodType periodType95 = days91.getPeriodType();
        org.joda.time.PeriodType periodType96 = days91.getPeriodType();
        org.joda.time.Days days97 = org.joda.time.Days.standardDaysIn((org.joda.time.ReadablePeriod) days91);
        boolean boolean98 = days31.isGreaterThan(days91);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[25]");
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(days46);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(days68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(days87);
        org.junit.Assert.assertNotNull(days88);
        org.junit.Assert.assertNotNull(days90);
        org.junit.Assert.assertNotNull(days91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(periodType96);
        org.junit.Assert.assertNotNull(days97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08972");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMonths((int) '4');
        org.joda.time.Period period8 = mutablePeriod5.toPeriod();
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod5.setPeriod(readableInterval9);
        mutablePeriod5.setWeeks(69);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(432000000L);
        java.lang.String str15 = duration14.toString();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration17 = null;
        boolean boolean18 = duration14.isShorterThan(readableDuration17);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period26 = duration25.toPeriod();
        boolean boolean27 = duration21.isEqual((org.joda.time.ReadableDuration) duration25);
        java.lang.String str28 = duration25.toString();
        java.lang.String str29 = duration25.toString();
        long long30 = duration25.getMillis();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant34 = instant32.minus(100L);
        java.lang.String str35 = instant34.toString();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = duration38.toPeriodTo(readableInstant42);
        org.joda.time.Duration duration45 = duration38.withMillis((long) (short) 0);
        org.joda.time.Instant instant46 = instant34.plus((org.joda.time.ReadableDuration) duration38);
        java.lang.String str47 = duration38.toString();
        long long48 = duration38.getStandardHours();
        boolean boolean49 = duration25.isEqual((org.joda.time.ReadableDuration) duration38);
        boolean boolean50 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration38);
        long long51 = duration38.getStandardSeconds();
        long long52 = duration38.getStandardDays();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT432000S" + "'", str15, "PT432000S");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1969-12-31T23:59:59.899Z" + "'", str35, "1969-12-31T23:59:59.899Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0S" + "'", str47, "PT0S");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test08973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08973");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setMillis((int) (short) 1);
        int int8 = mutablePeriod5.getSeconds();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.THREE;
        org.joda.time.DurationFieldType durationFieldType10 = weeks9.getFieldType();
        mutablePeriod5.add(durationFieldType10, (int) (byte) 0);
        mutablePeriod5.setSeconds(1439);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withMonthsRemoved();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = duration19.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = duration19.toPeriodTo(readableInstant23);
        org.joda.time.Weeks weeks25 = period24.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period24.get(durationFieldType26);
        int int28 = period24.getWeeks();
        org.joda.time.Duration duration29 = period24.toStandardDuration();
        boolean boolean30 = periodType16.equals((java.lang.Object) duration29);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withFields(readablePartial35);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType39, chronology40);
        org.joda.time.PeriodType periodType42 = periodType39.withWeeksRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withSecondsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime36, periodType44);
        org.joda.time.Duration duration46 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) dateTime36);
        mutablePeriod5.setMillis(2);
        mutablePeriod5.setHours((-546));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test08974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08974");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08975");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.Object obj9 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        boolean boolean19 = interval3.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = interval3.toPeriod();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = period24.getFieldTypes();
        int int26 = period24.getMinutes();
        org.joda.time.Period period28 = period24.withDays((int) ' ');
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.Period period30 = interval3.toPeriod(periodType29);
        org.joda.time.Period period31 = period30.toPeriod();
        int int32 = period30.getWeeks();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test08976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08976");
        java.io.IOException iOException1 = new java.io.IOException("\u65e5\u672c\u8a9e");
    }

    @Test
    public void test08977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08977");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Duration duration14 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, readableInstant15, periodType16);
        mutablePeriod17.setMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime9.minusWeeks((int) (byte) 1);
        int int23 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property24 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime26 = dateTime9.withYear(1969);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTime dateTime30 = dateTime1.toDateTime(chronology27);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime30.toMutableDateTime();
        int int32 = dateTime30.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime30.withHourOfDay(1524840360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1524840360 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test08978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08978");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08979");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZone(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime2.property(dateTimeFieldType10);
        org.joda.time.DateTime.Property property13 = dateTime2.dayOfMonth();
        org.joda.time.Days days14 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        int int16 = days14.get(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod17 = days14.toMutablePeriod();
        org.joda.time.Days days19 = days14.multipliedBy((int) (byte) 1);
        org.joda.time.Duration duration20 = days14.toStandardDuration();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.Instant instant24 = instant22.minus(100L);
        org.joda.time.MutableDateTime mutableDateTime25 = instant22.toMutableDateTimeISO();
        int int26 = mutableDateTime25.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) mutableDateTime25);
        long long28 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        java.lang.String str29 = property13.getAsShortText();
        java.lang.String str30 = property13.getAsText();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = property33.getAsText(locale35);
        java.util.Locale locale40 = new java.util.Locale("1969-12-31T23:59:59.899Z", "P0W", "hourOfHalfday");
        java.lang.String str41 = property33.getAsText(locale40);
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category42, locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale44);
        int int47 = property13.getMaximumTextLength(locale44);
        org.joda.time.Interval interval48 = property13.toInterval();
        org.joda.time.DateTime dateTime49 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(days19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31" + "'", str29, "31");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "31" + "'", str30, "31");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertEquals(locale40.toString(), "1969-12-31t23:59:59.899z_P0W_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P0W" + "'", str46, "P0W");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test08980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08980");
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, readableInstant20, periodType21);
        mutablePeriod22.setMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime27 = dateTime14.minusWeeks((int) (byte) 1);
        int int28 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property29 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime31 = dateTime14.withYear(1969);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology32.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(3732480, (int) (short) 0, 893, 85619999, (-120), (-86399947), 39, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85619999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08981");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime2.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0, (int) 'a', 1, 100, (int) (byte) 10, 0, (int) (short) -1, (int) (byte) -1);
        int int34 = mutablePeriod33.getDays();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.Interval interval40 = property39.toInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfEra();
        org.joda.time.Interval interval44 = property43.toInterval();
        boolean boolean45 = interval40.contains((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Chronology chronology46 = interval44.getChronology();
        mutablePeriod33.setPeriod((long) 'u', (long) 1969, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(100, 9, 23, (int) (short) 1, 5, chronology46);
        boolean boolean50 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property51 = dateTime2.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test08982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08982");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Days days8 = duration2.toStandardDays();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = duration11.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = duration11.toPeriodTo(readableInstant15);
        org.joda.time.Duration duration18 = duration11.withMillis((long) (short) 0);
        org.joda.time.Duration duration19 = duration2.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Duration duration33 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, readableInstant34, periodType35);
        mutablePeriod36.setMonths((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime28.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTime dateTime41 = dateTime28.minusWeeks((int) (byte) 1);
        int int42 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property43 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime45 = dateTime28.withYear(1969);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.era();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.hourOfHalfday();
        org.joda.time.DurationField durationField50 = chronology46.seconds();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (byte) 0, chronology46);
        org.joda.time.Interval interval52 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.withZoneRetainFields(dateTimeZone56);
        org.joda.time.DateTime.Property property58 = dateTime57.weekOfWeekyear();
        org.joda.time.Duration duration61 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration61, readableInstant62, periodType63);
        org.joda.time.DateTime dateTime65 = dateTime57.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime dateTime67 = dateTime57.withYearOfEra(9);
        int int68 = dateTime57.getEra();
        int int69 = dateTime57.getDayOfYear();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType74, chronology75);
        org.joda.time.PeriodType periodType77 = periodType74.withWeeksRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withSecondsRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withHoursRemoved();
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder82 = builder80.setLocale(locale81);
        boolean boolean83 = periodType78.equals((java.lang.Object) builder82);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) '#', 1009151999990L, periodType78);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime57, periodType78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period87 = period85.plusSeconds(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 365 + "'", int69 == 365);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08983");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = periodFormatter2.getLocale();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.lang.String str7 = locale6.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter2.withLocale(locale6);
        org.joda.time.format.PeriodPrinter periodPrinter9 = null;
        org.joda.time.format.PeriodParser periodParser10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = new org.joda.time.format.PeriodFormatter(periodPrinter9, periodParser10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withParseType(periodType12);
        java.util.Locale locale14 = periodFormatter11.getLocale();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter11.withLocale(locale15);
        java.util.Locale locale18 = locale15.stripExtensions();
        org.joda.time.format.PeriodFormatter periodFormatter19 = periodFormatter8.withLocale(locale18);
        org.joda.time.PeriodType periodType20 = periodFormatter19.getParseType();
        org.joda.time.format.PeriodParser periodParser21 = periodFormatter19.getParser();
        java.util.Locale locale22 = periodFormatter19.getLocale();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNull(periodType20);
        org.junit.Assert.assertNull(periodParser21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
    }

    @Test
    public void test08984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08984");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        java.lang.String str12 = dateTimeField11.getName();
        java.lang.String str14 = dateTimeField11.getAsShortText(1640995200000L);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.plus((long) (byte) 0);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        boolean boolean25 = dateTime23.isEqual(10L);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 100, 0L, periodType28, chronology29);
        org.joda.time.PeriodType periodType31 = periodType28.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23, periodType31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Instant instant38 = dateTime35.toInstant();
        org.joda.time.DateTime dateTime40 = dateTime35.withMillis((long) '4');
        org.joda.time.Minutes minutes41 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.TimeOfDay timeOfDay45 = dateTime44.toTimeOfDay();
        org.joda.time.DateTime dateTime46 = dateTime35.withFields((org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.TimeOfDay timeOfDay50 = dateTime49.toTimeOfDay();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) dateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        int int53 = dateTime51.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime54 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.lang.String str57 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) timeOfDay45, locale56);
        boolean boolean58 = dateTimeField11.isLenient();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "59" + "'", str57, "59");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08985");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Instant instant5 = dateTime2.toInstant();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime2.toTimeOfDay();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime9.withDurationAdded(0L, (int) 'a');
        org.joda.time.Seconds seconds17 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime2.secondOfDay();
        org.joda.time.DateTime.Property property19 = dateTime2.era();
        int int20 = property19.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        long long26 = dateTimeField23.add(0L, (long) (short) 1);
        boolean boolean28 = dateTimeField23.isLeap(10L);
        int int30 = dateTimeField23.get((-1L));
        long long32 = dateTimeField23.remainder((long) (byte) 0);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        int int34 = dateTimeField23.getMaximumShortTextLength(locale33);
        java.lang.String str35 = property19.getAsText(locale33);
        org.joda.time.DateTime dateTime36 = property19.roundHalfCeilingCopy();
        int int37 = property19.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField38 = property19.getField();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 43200000L + "'", long26 == 43200000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "dopo Cristo" + "'", str35, "dopo Cristo");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test08986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08986");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        int int6 = property5.getMinimumValue();
        int int7 = property5.getMaximumValueOverall();
        org.joda.time.DateTime dateTime8 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1439 + "'", int7 == 1439);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08987");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = interval5.contains((org.joda.time.ReadableInterval) interval9);
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weeks();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.centuries();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.dayOfWeek();
        org.joda.time.DurationField durationField17 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.clockhourOfHalfday();
        org.joda.time.Period period19 = new org.joda.time.Period(0L, (-26136120000L), chronology11);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(895);
        org.joda.time.Chronology chronology22 = chronology11.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfYear();
        java.lang.String str25 = dateTimeField23.getAsText((long) 208);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
    }

    @Test
    public void test08988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08988");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfEra();
        org.joda.time.Interval interval3 = property2.toInterval();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        boolean boolean8 = interval3.contains((org.joda.time.ReadableInterval) interval7);
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weeks();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField15 = chronology9.minutes();
        long long18 = durationField15.getDifferenceAsLong((-43199999L), (long) 365);
        long long21 = durationField15.subtract((-38718L), (long) 1970);
        long long23 = durationField15.getMillis((-8));
        boolean boolean24 = durationField15.isPrecise();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-720L) + "'", long18 == (-720L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-118238718L) + "'", long21 == (-118238718L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-480000L) + "'", long23 == (-480000L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test08989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08989");
        org.joda.time.Period period1 = org.joda.time.Period.parse("P-2W");
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test08990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08990");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = duration2.toPeriodTo(readableInstant6);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.Period period10 = period7.plusMonths((int) (short) 100);
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = period7.getFieldTypes();
        org.joda.time.Period period12 = period7.toPeriod();
        org.joda.time.Period period13 = period7.negated();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test08991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08991");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant8, periodType9);
        mutablePeriod10.setMonths((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTime dateTime15 = dateTime2.minusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        org.joda.time.DateTime.Property property17 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        int int19 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime.Property property20 = dateTime15.weekyear();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) ' ', (long) ' ');
        org.joda.time.Period period28 = duration27.toPeriod();
        boolean boolean29 = duration23.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (-292275054));
        org.joda.time.Duration duration32 = duration23.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = duration32.withDurationAdded(0L, (-292275054));
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, readableInstant46, periodType47);
        org.joda.time.DateTime dateTime49 = dateTime41.plus((org.joda.time.ReadableDuration) duration45);
        int int50 = dateTime49.getDayOfYear();
        boolean boolean51 = dateTime49.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime49.getZone();
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.withZoneRetainFields(dateTimeZone56);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.era();
        org.joda.time.DateTime dateTime62 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration65, readableInstant66, periodType67);
        mutablePeriod68.setMonths((int) '4');
        org.joda.time.DateTime dateTime71 = dateTime60.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.DateTime dateTime73 = dateTime60.minusWeeks((int) (byte) 1);
        int int74 = dateTime57.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property75 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime77 = dateTime60.withYear(1969);
        boolean boolean79 = dateTime77.isAfter((long) (short) -1);
        int int80 = dateTime77.getWeekyear();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime77);
        java.util.GregorianCalendar gregorianCalendar82 = dateTime77.toGregorianCalendar();
        boolean boolean83 = duration35.equals((java.lang.Object) gregorianCalendar82);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399 + "'", int19 == 86399);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08992");
        org.joda.time.Hours hours0 = org.joda.time.Hours.MAX_VALUE;
        java.lang.String str1 = hours0.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT2147483647H" + "'", str1, "PT2147483647H");
    }

    @Test
    public void test08993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08993");
        org.joda.time.Duration duration3 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, readableInstant4, periodType5);
        org.joda.time.Days days7 = org.joda.time.Days.THREE;
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        int int9 = days7.get(durationFieldType8);
        mutablePeriod6.add(durationFieldType8, 8);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutablePeriod6.add(readablePeriod12);
        int int14 = mutablePeriod6.getMonths();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = interval18.contains((org.joda.time.ReadableInterval) interval22);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, readableInstant40, periodType41);
        mutablePeriod42.setMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTime dateTime47 = dateTime34.minusWeeks((int) (byte) 1);
        int int48 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property49 = dateTime34.minuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime34.withYear(1969);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology52);
        mutablePeriod6.add((-43199999L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.millis();
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 69, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.clockhourOfDay();
        org.joda.time.DurationField durationField60 = chronology52.halfdays();
        org.joda.time.Chronology chronology61 = chronology52.withUTC();
        org.joda.time.DurationField durationField62 = chronology52.days();
        long long65 = durationField62.getMillis((int) 'u', 8380800000L);
        long long68 = durationField62.getMillis(214, 90326018515345L);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10108800000L + "'", long65 == 10108800000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 18489600000L + "'", long68 == 18489600000L);
    }

    @Test
    public void test08994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08994");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "hi!");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        int int10 = property8.getMaximumValueOverall();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayCountry();
        int int14 = property8.getMaximumShortTextLength(locale11);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale11.getDisplayName(locale15);
        java.lang.String str17 = locale11.getISO3Country();
        java.lang.String str18 = locale11.getLanguage();
        java.lang.String str19 = locale11.getLanguage();
        java.lang.String str20 = locale3.getDisplayScript(locale11);
        java.lang.String str21 = locale3.getDisplayName();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!_hi!");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587" + "'", str16, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "HI! (hi!)" + "'", str21, "HI! (hi!)");
    }

    @Test
    public void test08995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setLanguage("P117D");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: P117D [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test08996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08996");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        java.lang.String str3 = dateTimeZone2.toString();
        int int5 = dateTimeZone2.getOffset(1L);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        java.lang.String str9 = dateTimeZone2.getNameKey((long) 1);
        long long11 = dateTimeZone2.convertUTCToLocal(2246400000L);
        long long14 = dateTimeZone2.adjustOffset((long) (-9859), true);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.withZone(dateTimeZone18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean26 = dateTime22.isSupported(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime17.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime29 = dateTime17.toLocalDateTime();
        int int30 = localDateTime29.size();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.withZone(dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean42 = dateTime38.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime.Property property43 = dateTime33.property(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime33.getZone();
        org.joda.time.LocalDateTime localDateTime45 = dateTime33.toLocalDateTime();
        int int46 = localDateTime45.size();
        org.joda.time.Days days47 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) localDateTime29, (org.joda.time.ReadablePartial) localDateTime45);
        boolean boolean48 = dateTimeZone2.isLocalDateTimeGap(localDateTime29);
        org.joda.time.ReadablePartial readablePartial49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localDateTime29.compareTo(readablePartial49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2246400000L + "'", long11 == 2246400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-9859L) + "'", long14 == (-9859L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08997");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant13, periodType14);
        mutablePeriod15.setMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTime dateTime20 = dateTime7.minusWeeks((int) (byte) 1);
        int int21 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property22 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime7.withYear(1969);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        java.lang.String str28 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfDay();
        org.joda.time.Duration duration32 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.Hours hours33 = duration32.toStandardHours();
        org.joda.time.MutablePeriod mutablePeriod34 = hours33.toMutablePeriod();
        mutablePeriod34.addMinutes(1439);
        mutablePeriod34.addWeeks(126);
        int[] intArray40 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod34, 20L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 20]");
    }

    @Test
    public void test08998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08998");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-1L), 10L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant3, periodType4);
        mutablePeriod5.setPeriod((long) 1, (-1L));
        mutablePeriod5.setMillis((int) (short) 0);
        int int11 = mutablePeriod5.getDays();
        mutablePeriod5.addMinutes(1969);
        org.joda.time.Chronology chronology15 = null;
        mutablePeriod5.setPeriod((long) 'a', chronology15);
        mutablePeriod5.setYears((int) 'u');
        mutablePeriod5.add((long) '4');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (byte) -1);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        boolean boolean26 = dateTime24.isEqual(10L);
        org.joda.time.DateTime dateTime28 = dateTime24.withCenturyOfEra((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = dateTime24.plusHours(1969);
        org.joda.time.DateTime dateTime33 = dateTime24.withDurationAdded((-101L), 86399);
        mutablePeriod5.setPeriod(readableInstant21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (-292275054));
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration36);
        mutablePeriod37.addMonths(97);
        mutablePeriod37.setYears(98);
        mutablePeriod37.setWeeks(120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration36);
    }

    @Test
    public void test08999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08999");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.add(0L, (long) (short) 1);
        long long8 = dateTimeField2.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.lang.String str10 = locale9.getVariant();
        int int11 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        long long17 = dateTimeField14.add(0L, (long) (short) 1);
        long long20 = dateTimeField14.getDifferenceAsLong((long) ' ', (long) 1969);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = locale21.getVariant();
        int int23 = dateTimeField14.getMaximumShortTextLength(locale21);
        java.lang.String str24 = locale21.getDisplayLanguage();
        int int25 = dateTimeField2.getMaximumShortTextLength(locale21);
        java.lang.Object obj26 = null;
        org.joda.time.Instant instant27 = new org.joda.time.Instant(obj26);
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone28);
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = dateTimeZone28.getShortName(100L, locale32);
        java.lang.String str35 = locale32.getDisplayLanguage();
        java.lang.String str36 = locale32.getISO3Language();
        boolean boolean37 = locale32.hasExtensions();
        int int38 = dateTimeField2.getMaximumTextLength(locale32);
        boolean boolean40 = dateTimeField2.isLeap((long) (-1));
        long long43 = dateTimeField2.add(24278400000L, 893);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 43200000L + "'", long5 == 43200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 43200000L + "'", long17 == 43200000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str35, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "jpn" + "'", str36, "jpn");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 62856000000L + "'", long43 == 62856000000L);
    }

    @Test
    public void test09000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test09000");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ZERO;
        org.joda.time.Period period1 = minutes0.toPeriod();
        org.joda.time.Period period3 = period1.withDays(19044);
        org.joda.time.Period period5 = period3.plusMinutes(624);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }
}
